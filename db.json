{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/avater_mw.png","path":"images/avater_mw.png","modified":0,"renderable":0},{"_id":"source/resume/index.docx","path":"resume/index.docx","modified":0,"renderable":0},{"_id":"source/resume/index.pdf","path":"resume/index.pdf","modified":0,"renderable":0},{"_id":"source/resume/index_2.pdf","path":"resume/index_2.pdf","modified":0,"renderable":0},{"_id":"source/resume/index_2.docx","path":"resume/index_2.docx","modified":0,"renderable":0},{"_id":"source/resume/index_en.pdf","path":"resume/index_en.pdf","modified":0,"renderable":0},{"_id":"source/resume/index_en.docx","path":"resume/index_en.docx","modified":0,"renderable":0},{"_id":"source/resume/final/resume.pdf","path":"resume/final/resume.pdf","modified":0,"renderable":0},{"_id":"source/resume/final/resume_rich.pdf","path":"resume/final/resume_rich.pdf","modified":0,"renderable":0},{"_id":"source/unify/spring_security/image.png","path":"unify/spring_security/image.png","modified":0,"renderable":0},{"_id":"source/unify/maven_upload/image-1.png","path":"unify/maven_upload/image-1.png","modified":0,"renderable":0},{"_id":"source/unify/maven_upload/image-3.png","path":"unify/maven_upload/image-3.png","modified":0,"renderable":0},{"_id":"source/unify/maven_upload/image-2.png","path":"unify/maven_upload/image-2.png","modified":0,"renderable":0},{"_id":"source/unify/maven_upload/image.png","path":"unify/maven_upload/image.png","modified":0,"renderable":0},{"_id":"source/resume/archive/20250609/index.docx","path":"resume/archive/20250609/index.docx","modified":0,"renderable":0},{"_id":"source/resume/archive/20250609/index.pdf","path":"resume/archive/20250609/index.pdf","modified":0,"renderable":0},{"_id":"source/resume/archive/20250609/index_en.docx","path":"resume/archive/20250609/index_en.docx","modified":0,"renderable":0},{"_id":"source/resume/archive/20250609/index_en.pdf","path":"resume/archive/20250609/index_en.pdf","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/header.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1748438001558},{"_id":"source/_data/head.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1748437999094},{"_id":"source/_drafts/introduction copy.md","hash":"0efb6ca7082074baedfde388f2733cad8d6d8ce6","modified":1751071735984},{"_id":"source/_drafts/introduction.md","hash":"a1bfe7595f0b22c35bc365fbfb91bc23f8a38d22","modified":1751071735984},{"_id":"source/404/index.md","hash":"0cb1500ac5f68428ea9545a8e0b286eb59804ec4","modified":1748176394107},{"_id":"source/404/index.html","hash":"f4c03a0c611d0784e48ce8e229884fcb3ab2ef7e","modified":1748176386909},{"_id":"source/_data/body-end.njk","hash":"9f40745c57070b6ea9cd51f8960328634f13f2a9","modified":1748529658453},{"_id":"source/_data/footer.njk","hash":"cadd1aed283f0c7ef46e4559ead29134c9ace2a2","modified":1748529630378},{"_id":"source/_data/post-body-end.njk","hash":"6aedfe5ba90914290f2adafe6c7073fe069fc688","modified":1748529654612},{"_id":"source/_data/sidebar.njk","hash":"3ec4c6468462a20e7818843c31ee3f7d94a5d52a","modified":1751379723961},{"_id":"source/categories/index.md","hash":"d7cc9e0a9959e090242856c694d3ee9fbdec41e9","modified":1743127516515},{"_id":"source/_posts/LIBGDX-Record.md","hash":"02a9ffe77b4a72dbcf77b72ee2cb0096c7e36038","modified":1709390043602},{"_id":"source/_posts/LFU_storage_structure.md","hash":"3b85be965a1cd40747885defc44c76f01af5bf10","modified":1751252571553},{"_id":"source/_posts/go-lang-study.md","hash":"961a85eddd5aac227ec3748b7c16ae763702fbf1","modified":1709390043604},{"_id":"source/_posts/c++_template.md","hash":"cffa0bcd3ef4954efca7cf80a7757c575d7242ea","modified":1751379416441},{"_id":"source/_posts/docker-study.md","hash":"689413924080592b019d03aef27977471d8fe4aa","modified":1748174104766},{"_id":"source/_posts/java-package.md","hash":"2a75fdf16a575793a542cfe568a3cb3def9193c1","modified":1709390043604},{"_id":"source/_posts/c++_freetype_unicode.md","hash":"f9986b98277d3be059acd2259a60b87bcfd776c6","modified":1748174104766},{"_id":"source/_posts/AStarFind.md","hash":"b91e4b510d3831d72be8751302b97e4c98a3bd64","modified":1748174104765},{"_id":"source/_posts/lk_146_lru.md","hash":"1f4259b90194ed54a2106b50303d136964b57415","modified":1749462925557},{"_id":"source/_posts/image.png","hash":"631d006b6db74f6e26deaf50a0dd18b9d320d42c","modified":1743127516196},{"_id":"source/_posts/lk_135_hard.md","hash":"e64eb38ada721d52d3b610f3875926018eda0c3d","modified":1751071735990},{"_id":"source/_posts/lk_2359_medium.md","hash":"da37d1fb7f75d2c070c5b7827b7f9c27ebdc36ec","modified":1751071735991},{"_id":"source/_posts/lk_3372_medium.md","hash":"6dea52f6a6cbfcd48c42c9e5676ac933e8624999","modified":1748868096516},{"_id":"source/_posts/lk_76_hard.md","hash":"8d1def36df8cd2f7a5727c936d13438e479cfe26","modified":1748174104770},{"_id":"source/_posts/cpp-and-unreal.md","hash":"cb7a9b9c12e2f8d0015287eeb3c069a5c8d92bab","modified":1709390043603},{"_id":"source/_posts/lk_1298_hard.md","hash":"86275aaa2a93037c34445cdd7c23d780b310bde4","modified":1748960482113},{"_id":"source/_posts/lk_3373_hard.md","hash":"43ec9aa0a424dade7a4f5023d6169137aeffdcf0","modified":1748529078611},{"_id":"source/_posts/mybatis-process.md","hash":"a3018159324739eaa8bd85cba3e341215a3f5d9a","modified":1709390043604},{"_id":"source/_posts/lk_48_medium.md","hash":"213e90c11381c7c6e9449b74532700c5409d8fb6","modified":1748174104767},{"_id":"source/_posts/lk_909_medium.md","hash":"b60461ca677010390a3950035ae49539d644102e","modified":1748670950044},{"_id":"source/_posts/openGL_camera_diy.md","hash":"194da2f9a2a301d160c1dadd360c475a042b8d0b","modified":1743127516208},{"_id":"source/_posts/maven-upload.md","hash":"ebc4a15883be974ca861ef9c866f43acaa46f94d","modified":1748174104771},{"_id":"source/_posts/mybatisplus_springboot_3_x.md","hash":"a163bfa64b95c4c96575df86208572ff9140acc3","modified":1748961069642},{"_id":"source/_posts/openGL_texture.md","hash":"dfe26e6c8b46830683f685244e8c1dbe2cba4029","modified":1743127516214},{"_id":"source/_posts/openAL_MP3_OGG.md","hash":"b7273218c05f45fd2425e25888c48ea5312371bc","modified":1748174104774},{"_id":"source/_posts/opengl-issues.md","hash":"3f46a74ee98a5fa8435446c2e782273f4f9e75b0","modified":1743127516268},{"_id":"source/_posts/open_gl2.md","hash":"26c6c26388e4c5d5bfbd048eb5fad200d4f06204","modified":1743127516247},{"_id":"source/_posts/opengl_color_end.md","hash":"fa1673d81322bf70939dfb11900e0b0b2383c450","modified":1743127516286},{"_id":"source/_posts/opengl_GLSL.md","hash":"c813ccf5267a9cf95dc5953c4ddd1b21a0475edc","modified":1743127516271},{"_id":"source/_posts/opengl_color_light01.md","hash":"5e5a45f155bec40823ff144a037772d95927485d","modified":1743127516323},{"_id":"source/_posts/opengl_coordinate.md","hash":"8b6111cd91b9f21e0d63f801e3fde0c2587ab00b","modified":1743127516352},{"_id":"source/_posts/opengl_java_3d.md","hash":"6e6892b148cd3266d818fc3af75862d10033c499","modified":1743127516385},{"_id":"source/_posts/opengl_color_light02.md","hash":"712255aad8260d37131b51df1350bf6f7a96377b","modified":1743127516329},{"_id":"source/_posts/open-gl.md","hash":"cd9e00eade7e6bb421d03b64cbd833723b1fedac","modified":1743127516199},{"_id":"source/_posts/unreal_study_problem.md","hash":"fbac813f291307bf8bef81d05a68bf20996a1ea6","modified":1748174104781},{"_id":"source/_posts/opengl_material.md","hash":"4f0819de09a7fcbb946b793b627743d19613ca48","modified":1743127516396},{"_id":"source/_posts/vue-study02.md","hash":"2c08cfee1615d9bb22eeda890f4e1a91d42db718","modified":1709390043607},{"_id":"source/_posts/vue-study01.md","hash":"fb71fa8964741ad057505efbef039a9bd2761ec8","modified":1709390043607},{"_id":"source/resume/index.docx","hash":"6551085817f8be64e43b9ec00d6d109a50e6894e","modified":1751347307656},{"_id":"source/_posts/spring-security.md","hash":"154729e644cb39f73e40e4b30fad5de180934fdc","modified":1748174104780},{"_id":"source/_posts/windows_cpp_openal_freealut.md","hash":"1115f8efa74d45dd8e16d05c0b257c7a89a2b820","modified":1748174104788},{"_id":"source/resume/index_2.docx","hash":"51a05f10116604e23893686712713cd38fae38c2","modified":1751347582901},{"_id":"source/resume/index_en.docx","hash":"955016476dafcea9c725e2fa7f8ab226dca36688","modified":1751347350403},{"_id":"source/resume/index.md","hash":"0ed1b2152eb94dc4a0879ea6fd97d74c5d43015e","modified":1749458155562},{"_id":"source/unify/index.md","hash":"6db9219fabac6d5901e7b7e6f64e794dd0f584ac","modified":1748176567026},{"_id":"source/resume/index_en.md","hash":"1a11cc8402d3714b2b7ae1c78f02931d2af96c56","modified":1749458631924},{"_id":"source/tags/index.md","hash":"86b10448fbd04d62af3f221604b92cdb0875b84a","modified":1748176532560},{"_id":"source/_posts/opengl_transformation.md","hash":"58fbc301d44a27c14d5f51d1a6ed0f2207393ed6","modified":1743127516403},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init03.png","hash":"4ee46e7944188adf5ca502f002079be0a70655a5","modified":1702863041819},{"_id":"source/unify/index_copy.md","hash":"80ca1d28c01bbea678f33ceaa91e89b74d5323a9","modified":1748174104837},{"_id":"source/_posts/docker-study/demo1.png","hash":"0e82f3095eb1e1c8c0ad62a2f024253e52b73fe0","modified":1709390043603},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init01.png","hash":"3c898001da0ebdee9893ba885db565330f3184ac","modified":1702833465875},{"_id":"source/_posts/LIBGDX-Record/libgdx_logo.svg","hash":"ef2904e592da90e31592c656231646fb5ef4fa57","modified":1709390043602},{"_id":"source/_posts/lk_1298_hard/2025-06-03T221137.png","hash":"4aff97ece294e05c12b2ebd25ea41e2d2e41f7e9","modified":1748959897430},{"_id":"source/_posts/go-lang-study/logo.jpg","hash":"0d298e49428242f6488ab85cc83f86b020776e6a","modified":1709390043604},{"_id":"source/_posts/LIBGDX-Record/Libgdx_asset01.png","hash":"43fd938e79119c00f52a5fcf9f0968498eff8b79","modified":1709390043602},{"_id":"source/_posts/lk_3373_hard/2025-05-29T220509.png","hash":"07c5cf706b2c9bd6fcab43734fbf0491b6c5a53e","modified":1748527509178},{"_id":"source/_posts/lk_2359_medium/2025-05-30T215336.png","hash":"a54f5d43c2fcb803442a5a162bc464a3420386bd","modified":1748613216512},{"_id":"source/_posts/lk_48_medium/2025-05-25T184226.png","hash":"387c79f88e56d23281e051dc0a35f565e6aaf84c","modified":1748174104769},{"_id":"source/_posts/lk_3372_medium/2025-05-28T205059.png","hash":"5dde974e39c0d29719984e4c1bdfd64a19979744","modified":1748436659697},{"_id":"source/_posts/lk_135_hard/2025-06-02T203114.png","hash":"fc2f1bb9a96199fe0a2e8c86547bd7bef6477abf","modified":1748867474443},{"_id":"source/_posts/maven-upload/image-1.png","hash":"3b995e988491336edb93974887408113c0cf67d6","modified":1748174104772},{"_id":"source/_posts/lk_48_medium/2025-05-25T181854.png","hash":"891e6d838f4043f8f2c1ad383da62460f0c324ee","modified":1748174104769},{"_id":"source/_posts/maven-upload/image-2.png","hash":"e3a6596bb236bb297f99edb897d15835c8672d9e","modified":1748174104772},{"_id":"source/_posts/lk_909_medium/2025-05-31T134744.png","hash":"138d443c843b0abc7cb4c0a4d19cf32b764e4577","modified":1748670464974},{"_id":"source/_posts/maven-upload/image-3.png","hash":"eecca25cb8570f7aa2516e9195170871ce79d6a6","modified":1748174104773},{"_id":"source/_posts/maven-upload/image.png","hash":"b2f7378099c9915b2b57b5b558e96047db0c765d","modified":1748174104774},{"_id":"source/_posts/lk_76_hard/2025-05-21T233755.png","hash":"b0677e6f9a115426068fab2ab9e029ca40acd6ac","modified":1748174104770},{"_id":"source/_posts/open-gl/2024-03-02T215348.png","hash":"fc1d3dc2afa9ee2a8832d0447ae6c330f162cfcd","modified":1709390043605},{"_id":"source/_posts/open-gl/2024-03-02T215643.png","hash":"559e84cb20e110ac166c7e2aeb06369c8cdcf26c","modified":1709390043606},{"_id":"source/_posts/open-gl/2024-03-02T215801.png","hash":"a79b1dd75d71bcf73754924964b208277ee19ed1","modified":1709390043606},{"_id":"source/_posts/open-gl/2024-03-02T215738.png","hash":"558ca27d10241523ea4ce4d38dd838549c535a75","modified":1709390043606},{"_id":"source/_posts/open-gl/2024-03-03T001348.png","hash":"5a00c891c4984cfe4dc18317217308b0bdc4783f","modified":1743127516201},{"_id":"source/_posts/open-gl/2024-03-02T215724.png","hash":"a703b87bc6666eb8fe8420f32df81402fffbe475","modified":1709390043606},{"_id":"source/_posts/open-gl/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1709390043607},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T234947.png","hash":"8d55b540b42df87669ec421165b9909c9545570d","modified":1748174104777},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T235104.png","hash":"9b93d5f5368a1751084aa65db6a24afe69aebcf1","modified":1748174104777},{"_id":"source/_posts/open-gl/2024-03-03T004349.png","hash":"520a9386746e5dfcc386dcd7bc6af349f52ac3f2","modified":1743127516204},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T234529.png","hash":"c6e3487858474a53e3d29f2173d519f5ad6e1ecb","modified":1748174104775},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T235156.png","hash":"f6f2e56aea70d88797d9cbdf9f1653454124a9b1","modified":1748174104779},{"_id":"source/_posts/open_gl2/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516247},{"_id":"source/_posts/openGL_camera_diy/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516211},{"_id":"source/_posts/open_gl2/2024-03-03T101619.png","hash":"85ef7d8172c5e264996f93beefbaf796710e12de","modified":1743127516253},{"_id":"source/_posts/open_gl2/2024-03-03T134604.png","hash":"2a3dadd3f77612c0b306334a75c951917bb10c19","modified":1743127516256},{"_id":"source/_posts/open_gl2/2024-03-03T141244.png","hash":"c738d6c82975e9fa59973d356644be6d3bbaab04","modified":1743127516259},{"_id":"source/_posts/open_gl2/2024-03-03T100007.png","hash":"27b91d3e3df17ad029f339dfe7c2179fd2c1d776","modified":1743127516250},{"_id":"source/_posts/open_gl2/2024-03-03T141941.png","hash":"38e31c6715c2c3b8492350e5d9afcb82f691be0a","modified":1743127516262},{"_id":"source/_posts/open_gl2/2024-03-03T142231.png","hash":"3a5b58c997cf3c1ae77af045fc1d3894b5032355","modified":1743127516265},{"_id":"source/_posts/openGL_texture/2024-03-05T210640.png","hash":"0eff916b84c9faeafa30ff4c697f9c4bb479b32f","modified":1743127516223},{"_id":"source/_posts/opengl-issues/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516268},{"_id":"source/_posts/openGL_texture/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516214},{"_id":"source/_posts/openGL_texture/2024-03-05T210625.png","hash":"d02ca06aa0ec1d107c7660004cc1f70192e854ee","modified":1743127516220},{"_id":"source/_posts/opengl_GLSL/2024-03-03T153532.png","hash":"25d6ad708c39869413bd7905259fc4b8aa4cc7e2","modified":1743127516277},{"_id":"source/_posts/opengl_GLSL/2024-03-03T152501.png","hash":"3f93da995a5cd853e071c1bca1e6e995d0729cf2","modified":1743127516274},{"_id":"source/_posts/opengl_GLSL/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516271},{"_id":"source/_posts/opengl_GLSL/2024-03-03T154900.png","hash":"e7ed2deee7f6047734c07b952c8a242df12b8274","modified":1743127516280},{"_id":"source/_posts/opengl_GLSL/2024-03-03T155941.png","hash":"3a4914a3ea736b60787dcb7fe58f59c399d24441","modified":1743127516283},{"_id":"source/_posts/opengl_color_light01/2024-03-10T145637.png","hash":"c2c36dc58e9cc42fcf72aa459684fbc88834551a","modified":1743127516326},{"_id":"source/_posts/opengl_color_light02/2024-03-11T230323.png","hash":"dabc2596bddde2189b51c393276e23ec6f59b30f","modified":1743127516335},{"_id":"source/_posts/opengl_color_light01/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516323},{"_id":"source/_posts/opengl_color_light02/2024-03-12T211234.png","hash":"7e318296ff6e7c910ced0a99d50096599a7bb01f","modified":1743127516342},{"_id":"source/_posts/opengl_color_light02/2024-03-11T222920.png","hash":"2ea530f83868dba27c827726c565dd3bc5845e77","modified":1743127516333},{"_id":"source/_posts/opengl_color_light02/2024-03-12T210216.png","hash":"8471d32663133223d41c215c54afcb0ef96d34bd","modified":1743127516338},{"_id":"source/_posts/opengl_color_light02/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516330},{"_id":"source/_posts/opengl_color_light02/2024-03-12T214334.png","hash":"1349fcfb641c133f2784d70448cfddd69a68f82b","modified":1743127516349},{"_id":"source/_posts/opengl_color_end/2024-03-23T165733.png","hash":"48e65f6e63461b6b6a6e7a28af098ff55c1fdb49","modified":1743127516300},{"_id":"source/_posts/opengl_color_end/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516287},{"_id":"source/_posts/opengl_color_end/2024-03-23T161923.png","hash":"4f7b80c7790793056aaa2b8abf6461f8c46c3878","modified":1743127516290},{"_id":"source/_posts/opengl_color_end/2024-03-23T165742.png","hash":"46db393500d71ccfb239a3f178659153bd855bdc","modified":1743127516303},{"_id":"source/_posts/opengl_color_end/2024-03-23T165745.png","hash":"dbdc692e04cab9dc751a10ed44a4a43164b73aa8","modified":1743127516308},{"_id":"source/_posts/opengl_color_end/2024-03-23T170103.png","hash":"fbe5ed3bc21f2418d909f905e7cadbb8e963bc26","modified":1743127516311},{"_id":"source/_posts/opengl_color_end/2024-03-23T165605.png","hash":"76ff612e68256b1aeec378d1f7ee1f6cac4d4889","modified":1743127516297},{"_id":"source/_posts/opengl_color_end/2024-03-23T172927.png","hash":"083e820d259d89f55491ac4beb95f3ffc0c7c4ca","modified":1743127516320},{"_id":"source/_posts/opengl_coordinate/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516352},{"_id":"source/_posts/opengl_coordinate/2024-03-07T190956.png","hash":"26bd2822a315798f8467c8e2e6ef131c7ac75aba","modified":1743127516359},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191213.png","hash":"fd1214654990ebdc543e3158d53880b02719cbb6","modified":1743127516368},{"_id":"source/_posts/opengl_coordinate/2024-03-07T185800.png","hash":"e9341db1ec4eaf5595ef09733e8e1cb4c8b9adf3","modified":1743127516356},{"_id":"source/_posts/opengl_color_end/2024-03-23T170859.png","hash":"0d92c759a7a8f94d77eaacffb92c64be78d957de","modified":1743127516314},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191136.png","hash":"5fa447fcd522ad45799b86ce91a3c546dfc33df8","modified":1743127516364},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191439.png","hash":"ff77dd21b1fdef29d87580138171dc4930f77382","modified":1743127516370},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191847.png","hash":"1cbfbbdbedd19c073c4026f50bc735b7f847e7dd","modified":1743127516373},{"_id":"source/_posts/opengl_coordinate/2024-03-07T192913.png","hash":"3ce2bc39ab160086fbb1a99370f5d78461bcc2f7","modified":1743127516377},{"_id":"source/_posts/opengl_coordinate/2024-03-07T194034.png","hash":"8bed064b26efb391d1bef98ca912e55d50fd7717","modified":1743127516379},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191126.png","hash":"6869c19d8bc7034322b022a1e26a2834f5e703a8","modified":1743127516361},{"_id":"source/_posts/opengl_java_3d/libgdx_logo.svg","hash":"ef2904e592da90e31592c656231646fb5ef4fa57","modified":1743127516394},{"_id":"source/_posts/opengl_java_3d/2024-03-09T225319.png","hash":"ff77dd21b1fdef29d87580138171dc4930f77382","modified":1743127516385},{"_id":"source/_posts/opengl_transformation/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516403},{"_id":"source/_posts/opengl_transformation/2024-03-06T215935.png","hash":"0ad5c5249214ba812d9237ca72c4fe96d90d4f3b","modified":1743127516408},{"_id":"source/_posts/opengl_coordinate/2024-03-07T194404.png","hash":"fa23762bf76d21a979b82c158632932fb1f0d1cd","modified":1743127516382},{"_id":"source/_posts/opengl_java_3d/2024-03-10T095248.png","hash":"9875777c309b74e2fd0cf9a3cd15839d16c919f5","modified":1743127516391},{"_id":"source/_posts/opengl_transformation/2024-03-06T220148.png","hash":"4d09ac8807c5a2bfdea04030352c0aeab67a853f","modified":1743127516419},{"_id":"source/_posts/opengl_transformation/2024-03-06T220052.png","hash":"d716a11895ca3fd956a9f6719f5b30eb7f40b39f","modified":1743127516413},{"_id":"source/_posts/opengl_transformation/2024-03-06T220008.png","hash":"4bc6c360cd9310f47bf26f6bb568b9b4a390d994","modified":1743127516411},{"_id":"source/_posts/opengl_transformation/2024-03-06T220128.png","hash":"d9ccd7f1976f95f7b2920f5b652a4248623dcd10","modified":1743127516416},{"_id":"source/_posts/opengl_transformation/2024-03-06T220947.png","hash":"9439489cc48349a98825f0d95ee161a66705703c","modified":1743127516430},{"_id":"source/_posts/opengl_transformation/2024-03-06T220236.png","hash":"06a9fd1d99f78cf7414d46ae25a7bdf3bd2b696d","modified":1743127516427},{"_id":"source/_posts/opengl_transformation/2024-03-06T221003.png","hash":"f6b7f34a5444521749c42e9bf094b87c2f2ca4d6","modified":1743127516433},{"_id":"source/_posts/opengl_transformation/2024-03-06T220158.png","hash":"27dc65fcd4e103ac614f85e40c3a4e047f2c9923","modified":1743127516422},{"_id":"source/_posts/opengl_transformation/2024-03-06T221058.png","hash":"eda5932567bb9a7465de000e2f928de91e33aa91","modified":1743127516438},{"_id":"source/_posts/opengl_transformation/2024-03-06T220226.png","hash":"68e94798c2a1ae3af41580950fdf940708de9463","modified":1743127516425},{"_id":"source/_posts/opengl_transformation/2024-03-06T221352.png","hash":"349cfd4740a68de6e414c238a0e75b4a502588be","modified":1743127516444},{"_id":"source/_posts/opengl_transformation/2024-03-06T221326.png","hash":"52a2f50d7b200d65fe3077e034260a6eba76bbfa","modified":1743127516441},{"_id":"source/_posts/opengl_transformation/2024-03-06T221516.png","hash":"9f1a8da6764ee2a90bc865bf27014a45f91d3484","modified":1743127516446},{"_id":"source/_posts/opengl_transformation/2024-03-06T221713.png","hash":"8fdf2dd4e148d643615a904166c0dd9756719678","modified":1743127516454},{"_id":"source/_posts/opengl_transformation/2024-03-06T221604.png","hash":"c571d18325e6e551a2a4287be9feb2a71c0910d2","modified":1743127516449},{"_id":"source/_posts/opengl_transformation/2024-03-06T221025.png","hash":"e9d2488c8becff4654f0eaff007736b93c0f3e32","modified":1743127516436},{"_id":"source/_posts/opengl_transformation/2024-03-06T222404.png","hash":"43e44578e3fb30d54c92cc0589ef90eb72746729","modified":1743127516472},{"_id":"source/_posts/opengl_transformation/2024-03-06T221611.png","hash":"fda71375cd3d8bbfae0f8a0e72ebac49b99f5390","modified":1743127516452},{"_id":"source/_posts/opengl_transformation/2024-03-06T221906.png","hash":"9fbe9fc0b916cff3d92d23b8e309a16d1e732c84","modified":1743127516459},{"_id":"source/_posts/opengl_transformation/2024-03-06T221947.png","hash":"7492f726b5e2dbb321598504854707eae57c918e","modified":1743127516464},{"_id":"source/_posts/opengl_transformation/2024-03-06T221916.png","hash":"a0edd8de35c2d45184c70086faedc9e17a6433cb","modified":1743127516461},{"_id":"source/_posts/opengl_transformation/2024-03-06T222415.png","hash":"a1f60889aa94c412fe0979b58db2f25289449ba0","modified":1743127516475},{"_id":"source/_posts/opengl_transformation/2024-03-06T222023.png","hash":"78f5eb6355743f8599f9991a8ae491ee4dbcef1f","modified":1743127516467},{"_id":"source/_posts/opengl_transformation/2024-03-06T223156.png","hash":"9bc19a0f57798d7b711048c0a1b803cf1dad43dd","modified":1743127516478},{"_id":"source/_posts/opengl_transformation/2024-03-06T223340.png","hash":"05a115508775bcc69513751cb56a7818ebbc4aee","modified":1743127516481},{"_id":"source/_posts/opengl_transformation/2024-03-06T222119.png","hash":"454bf11b828fa894df9bf560efda4caa9309ccea","modified":1743127516469},{"_id":"source/_posts/opengl_transformation/2024-03-06T223854.png","hash":"0be70db74b202ba837023cc97314d6e913386aca","modified":1743127516490},{"_id":"source/_posts/opengl_transformation/2024-03-06T223629.png","hash":"7d90ba611e53bac217202d345d101f6346c1a025","modified":1743127516486},{"_id":"source/_posts/opengl_transformation/2024-03-06T223518.png","hash":"9dd3c9ee20471df85062022666229d82d861b466","modified":1743127516483},{"_id":"source/_posts/opengl_transformation/2024-03-06T223948.png","hash":"41efd5c4b4188ea89ac332b6b245a02de5e59ed3","modified":1743127516500},{"_id":"source/_posts/opengl_transformation/2024-03-06T223925.png","hash":"e4caec816847e4440ed0c10d7189195e81332cb0","modified":1743127516494},{"_id":"source/_posts/opengl_transformation/2024-03-06T223634.png","hash":"7d90ba611e53bac217202d345d101f6346c1a025","modified":1743127516487},{"_id":"source/_posts/opengl_transformation/2024-03-06T223938.png","hash":"640fa0bd90a1cc4f8feb3bac183ce1aa0a810f36","modified":1743127516497},{"_id":"source/_posts/opengl_transformation/2024-03-06T224114.png","hash":"1c0215baa6229501a13f6dde1faf762a815fa68e","modified":1743127516503},{"_id":"source/_posts/opengl_transformation/2024-03-06T224151.png","hash":"0e1057a694edc9090e9316cd7b8203470994a5fa","modified":1743127516506},{"_id":"source/_posts/opengl_transformation/2024-03-06T224240.png","hash":"b3a5999e69b7ca05a46ac50e39141ecef1c5f829","modified":1743127516509},{"_id":"source/_posts/spring-security/image.png","hash":"b0c3e7f32d6286f33d81c7e5111e55f23cf13ed2","modified":1748174104781},{"_id":"source/_posts/opengl_material/2024-03-02T220734.png","hash":"933a97ee39844b91bd418167314f912bd3475ae5","modified":1743127516397},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165658.png","hash":"88c44a58a4295c434c282615865c1651c81ab9bf","modified":1748174104787},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165453.png","hash":"8c24dc122889cea41f75b3d47719f5d6dc04bbf7","modified":1748174104786},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165829.png","hash":"2c88a6952d6a35ee714495c3614b328c3605f860","modified":1748174104787},{"_id":"source/_posts/unreal_study_problem/2024-06-01T170249.png","hash":"16e76298a3ac345265a07afb4c0f7c1257e32f30","modified":1748174104788},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104652.png","hash":"872231c0a3f143d6dcd14905a1054e5195f56027","modified":1748174104792},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104534.png","hash":"f26780fc83595cccdec568f789479eded95e38b1","modified":1748174104791},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T112016.png","hash":"60e91b2ac7854aa5451aedce6671108328454ac2","modified":1748174104795},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113206.png","hash":"1c47ba95eef67f3c9ceb980f0d6ff7a973e80b7a","modified":1748174104797},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113436.png","hash":"0f293bff8d6e62770ea16fdeb4658806dbf0c2db","modified":1748174104797},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113852.png","hash":"627f486518aca1d5f2a74305a50b6d366964aa46","modified":1748174104799},{"_id":"source/unify/spring_security/index.md","hash":"169507cd25e44196b77d1a6973a93d9fe46f2fdb","modified":1748174104841},{"_id":"source/unify/spring_security/image.png","hash":"b0c3e7f32d6286f33d81c7e5111e55f23cf13ed2","modified":1748174104840},{"_id":"source/unify/maven_upload/image-1.png","hash":"3b995e988491336edb93974887408113c0cf67d6","modified":1748174104838},{"_id":"source/unify/maven_upload/index.md","hash":"d5042c273e9285e718f82dad3108e09a0a1a2641","modified":1748174104840},{"_id":"source/unify/maven_upload/image-3.png","hash":"eecca25cb8570f7aa2516e9195170871ce79d6a6","modified":1748174104839},{"_id":"source/unify/maven_upload/image-2.png","hash":"e3a6596bb236bb297f99edb897d15835c8672d9e","modified":1748174104839},{"_id":"source/resume/archive/20250609/index.docx","hash":"76c3cf52f0fc26a55a90e6352b50106aefcce94b","modified":1748174104802},{"_id":"source/unify/maven_upload/image.png","hash":"b2f7378099c9915b2b57b5b558e96047db0c765d","modified":1748174104839},{"_id":"source/resume/archive/20250609/index_bk.md","hash":"aa926e69bc39730cb72ef9f0b7e38e9e051cd8cf","modified":1748174104819},{"_id":"source/resume/archive/20250609/index_en.docx","hash":"7fb8bcf8e65be53f31b57b60981a6b2a8d32969e","modified":1748174104820},{"_id":"source/images/avater_mw.png","hash":"62fda3816bc6074363d798d28d752f95d337443c","modified":1748174104800},{"_id":"source/_posts/c++_freetype_unicode/2024-03-31T095450.png","hash":"1254c360e41ebe4ead556b64ad57b942e2ff78ef","modified":1743127516193},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init04.png","hash":"e54808a70ab9bb9076fdf1f8cba56eea62a7aa5f","modified":1702863210405},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init02.png","hash":"e1adbbcea2c0552ee66e150038a7424ab0354cde","modified":1702862709729},{"_id":"source/_posts/openGL_texture/2024-03-05T210946.png","hash":"b50166d3910e65bbfdaa1559cec3eab5f1847ea0","modified":1743127516229},{"_id":"source/_posts/openGL_texture/2024-03-05T203029.png","hash":"7fbb6eaa196fd8f46a58fd7a130db1d2336a435f","modified":1743127516218},{"_id":"source/_posts/openGL_texture/2024-03-05T223955.png","hash":"54891da93781b39f31bb01629412ede0a86d3e7a","modified":1743127516243},{"_id":"source/_posts/opengl_color_light02/2024-03-12T214239.png","hash":"eba7ef49a4369dfd9da2567c0f329c7b08647790","modified":1743127516346},{"_id":"source/_posts/opengl_color_end/2024-03-23T172606.png","hash":"8db5b476d5dbebdaff81e0a9e43ed9397a08f2a0","modified":1743127516317},{"_id":"source/_posts/opengl_transformation/2024-03-06T233417.png","hash":"ea1c12a2ad54363401204a3ad9a6d3019d099ff1","modified":1743127516512},{"_id":"source/_posts/opengl_material/2024-03-13T213241.png","hash":"8b73aaf1057ddbf2fd3363cbec5a4cc07c01a128","modified":1743127516400},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113557.png","hash":"3096da6b4f2781802ae9c5450666b518b8dc651a","modified":1748174104798},{"_id":"source/_posts/openGL_texture/2024-03-05T223546.png","hash":"3eac12c3629f561900e3a741d18c0cfd82de1a74","modified":1743127516240},{"_id":"source/_posts/openGL_texture/2024-03-05T210658.png","hash":"0c681cfe4d15120459f703e789e82491295c9095","modified":1743127516226},{"_id":"source/_posts/openGL_texture/2024-03-05T223446.png","hash":"f6c872a0ba2edd8fb185e7ac3dfe9147529b8574","modified":1743127516234},{"_id":"source/_posts/opengl_color_end/2024-03-23T163256.png","hash":"54fb6da8b2df46fde006bb47ea292447543ac965","modified":1743127516294},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"5b9373a33fc5f81a63d7d7c54d5c7705b8f944ac","modified":1748527976053},{"_id":"node_modules/hexo-theme-next/package.json","hash":"eaf826c46804a8da9ec6ddf325c4670a3e3ecfa7","modified":1748527906336},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"72a3de9af55fbb7831ab7a3aa6c5e3f89cad53d3","modified":1748527906445},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1748527906341},{"_id":"node_modules/hexo-theme-next/README.md","hash":"5dd295594b92dbe07b0376b505f29fb3884e77f9","modified":1748527906344},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1748527906445},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1748527906343},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1748527906447},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1748527906448},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1748527906447},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1748527906443},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1748527906448},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1748527906446},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1748527906449},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1748527906338},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1748527906450},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1748527906451},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1748527906450},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1748527906451},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1748527906452},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1748527906453},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1748527906452},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1748527906454},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1748527906453},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1748527906454},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1748527906455},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1748527906455},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1748527906339},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1748527906457},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1748527906458},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1748527906456},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1748527906458},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1748527906459},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"b17d44bd7379c23241053a0b7fbd38c9c43cc239","modified":1748527906345},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1748527906368},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1748527906456},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1748527906355},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1748527906376},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1748527906384},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1748527906381},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1748527906347},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1748527906378},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1748527906340},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1748528340841},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1748527906383},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"285d5c4dffb97da659851fb6e53379a614619fd9","modified":1748527906342},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1748527906360},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1748527906357},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1748527906370},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1748527906388},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1748527906376},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"21567f1810f861b0a33db6514a4fcf18fb98467d","modified":1748527906342},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1748527906340},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1748527906367},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1748527906359},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1748527906346},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1748527906382},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"2a7dfffebad19b67dc9e3b2a6b2986d0630ef930","modified":1748527906365},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1748527906375},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"7261e24287984853c8ef08cda8bbc80cacf9bd6f","modified":1748527906387},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1748527906308},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1748527906295},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1748527906328},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1748527906314},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1748527906319},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"439c37d7177ebc407206a432168536af41dea826","modified":1748527906321},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"4c84d45daac86396edf656d2a8abe6e7583491ea","modified":1748527906301},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"83235f2879567eb8686431c9554a4b99f14ab665","modified":1748527906297},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1748527906320},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1748527906323},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1748527906322},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1748527906288},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1748527906323},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1748527906288},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1748527906306},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1748527906288},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1748527906308},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1748527906311},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1748527906312},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1748527906331},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1748527906316},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1748527906326},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1748527906335},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1748527906324},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1748527906421},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1748527906334},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1748527906397},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1748527906391},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1748527906388},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1748527906388},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1748527906282},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1748527906442},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1748527906388},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1748527906319},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1748527906291},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1748527906441},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1748527906426},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1748527906294},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"523bbaeda463e82ab0be428cc0005717038ec63e","modified":1748527906321},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1748527906330},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1748527906287},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1748527906291},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"b870aae1271f3453b71e6d8cd6fc4a1448e52064","modified":1748527906332},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1748527906362},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1748527906363},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1748527906350},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1748527906373},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1748527906372},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1748527906379},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1748527906363},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1748527906384},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1748527906329},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1748527906379},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1748527906380},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1748527906380},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1748527906380},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1748527906381},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1748527906327},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1748527906354},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1748527906382},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1748527906364},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1748527906351},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1748527906347},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1748527906385},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1748527906384},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1748527906361},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1748527906357},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1748527906375},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1748527906362},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1748527906365},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1748527906374},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1748527906372},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1748527906377},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1748527906385},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1748527906355},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1748527906356},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1748527906358},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1748527906368},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1748527906359},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1748527906385},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1748527906368},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1748527906386},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1748527906370},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1748527906361},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1748527906371},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1748527906369},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1748527906371},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1748527906346},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1748527906370},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1748527906352},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1748527906360},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1748527906387},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1748527906368},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1748527906320},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1748527906307},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1748527906331},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"00af4f5f9a79eaccf051f9e372d233d65d44c8a5","modified":1748527906293},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1748527906377},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1748527906309},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1748527906334},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1748527906292},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1748527906295},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1748527906374},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1748527906289},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1748527906294},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1748527906296},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1748527906309},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1748527906312},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1748527906302},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1748527906424},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1748527906333},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"6ec500fa4005993f2e080e260194f4d5323f589f","modified":1748527906402},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1748527906325},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1748527906284},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1748527906409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1748527906401},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1748527906423},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1748527906424},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1748527906427},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1748527906410},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1748527906415},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1748527906433},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f316ba87f8d3299677fbf8345e1e993c35210e2e","modified":1748527906402},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1748527906405},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1748527906329},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1748527906406},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1748527906417},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1748527906427},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1748527906439},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1748527906425},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1748527906440},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1748527906395},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1748527906297},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1748527906419},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1748527906396},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1748527906392},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1748527906419},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1748527906393},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1748527906398},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1748527906398},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1748527906394},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1748527906394},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1748527906420},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1748527906393},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1748527906397},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1748527906399},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1748527906399},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1748527906395},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1748527906306},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1748527906420},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1748527906291},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1748527906315},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1748527906286},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1748527906331},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1748527906398},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1748527906296},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1748527906290},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1748527906310},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1748527906313},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1748527906334},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1748527906303},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1748527906303},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1748527906296},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1748527906310},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1748527906315},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"93d3c39aded8d0140e63e70b896bd3d34c187c68","modified":1748527906285},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1748527906300},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1748527906336},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1748527906314},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1748527906409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1748527906326},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1748527906413},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1748527906403},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1748527906413},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1748527906438},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1748527906318},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1748527906422},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1748527906438},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1748527906434},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1748527906433},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1748527906416},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1748527906435},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1748527906435},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1748527906312},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"ce36bf1602233298e0351b4babc592315529eb26","modified":1748527906435},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1748527906436},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1748527906437},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1748527906436},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1748527906437},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1748527906405},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1748527906405},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1748527906438},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1748527906411},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1748527906439},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1748527906434},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1748527906429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1748527906432},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1748527906430},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1748527906412},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"026cd5735fd2a75bb60b7bf8bd09139583d602b9","modified":1748527906429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1748527906431},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1748527906429},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1748527906431},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1748527906432},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1748527906409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"424de4f64b12c521e8c6bfbc711d7961490ab36e","modified":1748527906431},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1748527906412},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1748527906422},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1748527906440},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1748527906408},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1748527906408},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1748527906407},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"09afd355e9d55cb97bbfe55178aa3480adce8f31","modified":1748527906434},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1748527906403},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1748527906416},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1748527906410},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1748527906421},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1748527906423},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1748527906421},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1748527906427},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1748527906426},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1748527906417},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1748527906439},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1748527906441},{"_id":"source/images/avatar.png","hash":"6bffdb3b8320ab8fc67e0b0294aa889cd90a5606","modified":1709390043608},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T111505.png","hash":"89b2450377d28390ea5cd0d3e2aab94738f72a4f","modified":1748174104794},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165305.png","hash":"8f1678a7c9946d3e3b2f96ecd24ae44174d8e7f9","modified":1748174104785},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104427.png","hash":"ded0e16036495bae0b5901d8c3f70df76ab05032","modified":1748174104790},{"_id":"source/resume/index_en.pdf","hash":"e880bc09448c0fe755b8bba8c593b2b541d6f6c1","modified":1751347340288},{"_id":"source/resume/archive/20250609/index_en.pdf","hash":"a0ee5510d774875ca5d352919597ba9f57d8affe","modified":1748174104836},{"_id":"source/resume/index_2.pdf","hash":"02587a057746da9c9a24a8be34174989bd520195","modified":1751347576107},{"_id":"source/resume/final/resume.pdf","hash":"02587a057746da9c9a24a8be34174989bd520195","modified":1751347576107},{"_id":"source/resume/index.pdf","hash":"2eeeb0f6273ffc3a5596b16cc663b3cf4278c871","modified":1751351936582},{"_id":"source/resume/final/resume_rich.pdf","hash":"2eeeb0f6273ffc3a5596b16cc663b3cf4278c871","modified":1751351936582},{"_id":"source/resume/archive/20250609/index.pdf","hash":"17960a0df530300ba4708059c53b76fed8c45f34","modified":1748174104818}],"Category":[{"name":"c++","_id":"cmcklki7d00081wu1fg7a8eh4"},{"name":"java","_id":"cmcklki7g000g1wu1ek5b0shx"},{"name":"issue","_id":"cmcklki7h000m1wu1dg6589v7"},{"name":"algorithm","parent":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7j000v1wu105uq59as"},{"name":"libgdx","parent":"cmcklki7g000g1wu1ek5b0shx","_id":"cmcklki7k00111wu1huc35zbg"},{"name":"docker","_id":"cmcklki7l00181wu113dh1h20"},{"name":"GOLANG","_id":"cmcklki7m001g1wu19dlw6dsj"},{"name":"算法","_id":"cmcklki7n001n1wu1cf7hfuzy"},{"name":"web","parent":"cmcklki7g000g1wu1ek5b0shx","_id":"cmcklki7v00341wu17opd45v3"},{"name":"springboot3","_id":"cmcklki7w003b1wu18hbaewca"},{"name":"OpenGL","parent":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7x003e1wu18a913u4j"},{"name":"OpenAL","parent":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7x003j1wu10d480uga"},{"name":"游戏","_id":"cmcklki81005f1wu157v17d5p"},{"name":"web","_id":"cmcklki82005m1wu1f6wx10qz"},{"name":"mybatis","parent":"cmcklki7w003b1wu18hbaewca","_id":"cmcklki82005r1wu1dtukbdnz"},{"name":"issue","parent":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki82005w1wu18hswapsv"},{"name":"虚幻引擎","parent":"cmcklki81005f1wu157v17d5p","_id":"cmcklki8300621wu1cwzp08rw"},{"name":"vue","parent":"cmcklki82005m1wu1f6wx10qz","_id":"cmcklki8300681wu18td03ejy"}],"Data":[{"_id":"body-end","data":""},{"_id":"footer","data":""},{"_id":"header","data":""},{"_id":"sidebar","data":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <a href=\"https://www.netlify.com\" class=\"cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" target=\"_blank\">\n    <img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\">\n  </a>\n</div>\n\n<div class=\"sidebar-projects\">\n  <div class=\"project-card\">\n    <a href=\"https://github.com/voidvvv/kz_survivor\" target=\"_blank\" title=\"Java(Libgdx) Game\">\n      <i class=\"fab fa-github\"></i>\n      <span class=\"project-title\">kz_survivor</span>\n      <span class=\"project-badge\">Java · LibGDX</span>\n      <div class=\"project-desc\">A 2D game built with Java and LibGDX.</div>\n    </a>\n  </div>\n  <div class=\"project-card\">\n    <a href=\"https://github.com/voidvvv/kz_utils\" target=\"_blank\" title=\"Java(Kotlin) Utilities\">\n      <i class=\"fab fa-github\"></i>\n      <span class=\"project-title\">kz_utils</span>\n      <span class=\"project-badge\">Java · SpringBoot</span>\n      <div class=\"project-desc\">A set of utilities for Java/SpringBoot development.</div>\n    </a>\n  </div>\n  <div class=\"project-card\">\n    <a href=\"https://github.com/voidvvv/LinkA\" target=\"_blank\" title=\"C++(OpenGL)\">\n      <i class=\"fab fa-github\"></i>\n      <span class=\"project-title\">LinkA</span>\n      <span class=\"project-badge\">C++ · OpenGL</span>\n      <div class=\"project-desc\">A game written in C++ using OpenGL.</div>\n    </a>\n  </div>\n  <div class=\"project-card\">\n    <a href=\"https://github.com/voidvvv/kz_blog\" target=\"_blank\" title=\"Web(Vue)\">\n      <i class=\"fab fa-github\"></i>\n      <span class=\"project-title\">kz_blog</span>\n      <span class=\"project-badge\">Vue.js</span>\n      <div class=\"project-desc\">A modern blog frontend built with Vue.js. written by Cursor AI</div>\n    </a>\n  </div>\n</div>"},{"_id":"post-body-end","data":"\n"},{"_id":"head","data":""}],"Page":[{"_content":"404 nothing","source":"404/index.html","raw":"404 nothing","date":"2025-05-25T12:33:06.909Z","updated":"2025-05-25T12:33:06.909Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"cmcklki7800001wu1fs1m3ot3","content":"404 nothing","length":2,"excerpt":"","more":"404 nothing"},{"title":"Missing!","date":"2024-03-02T14:23:32.000Z","_content":"\nthis 404","source":"404/index.md","raw":"---\ntitle: Missing!\ndate: 2024-03-02 22:23:32\n---\n\nthis 404","updated":"2025-05-25T12:33:14.107Z","path":"404/index.html","comments":1,"layout":"page","_id":"cmcklki7a00021wu13xkaeyws","content":"<p>this 404</p>\n","length":2,"excerpt":"","more":"<p>this 404</p>\n"},{"title":"categories","date":"2023-12-18T11:16:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-12-18 19:16:59\ntype: categories\n---","updated":"2025-03-28T02:05:16.515Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmcklki7b00041wu1crm9evsx","content":"","length":0,"excerpt":"","more":""},{"title":"Zhao Kaijie - Senior Java Developer","_content":"\n<div align=\"center\">\n<a href=\"/resume/\">Chinese Version </a> <br>\n<a href=\"/resume/index_en.pdf\">PDF Download</a>\n </div>\n<!-- [English Version](/resume/index_en) | [PDF Download](#) <br> -->\n\n<!-- [PDF Download]() -->\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 Shanghai  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">Personal Blog</a> <br> 🏢 8 Years Backend Development Experience  \n🎓 East China University of Technology\n</div>\n\n---\n\n## 🏅 Core Competencies\n- **Full-stack Java Expert**: 8 years Java development experience, proficient in Spring ecosystem (**Spring Boot/Spring Cloud/Spring Data/Spring Security**) for building highly available systems. Solid understanding of data structures and design patterns.\n- **Architectural Design**: Led design of high-concurrency distributed systems with microservices architecture, implemented service decomposition and circuit-breaking mechanisms.\n- **Abstract Business System Design**: Capable of rapidly abstracting business requirements into system workflows for efficient development.\n- **Technical Innovation**: Lead designer of championship solution in Ctrip 2021 Hackathon Programming Competition.\n- **Industry Expertise**: Specialized in fintech domain with deep understanding of risk control systems and payment clearing architectures.\n- **Code Excellence**: Contributor to open-source documentation, passionate about algorithms and clean code.\n\n---\n\n## 🛠️ Technical Stack\n\n### Backend Technologies\n\n**Core Frameworks**  \n`Spring Boot` `MyBatis Plus` `Spring JPA` `Spring Security` `Quartz` `SLF4J`\n\n**Architecture**  \n`Spring Cloud` `Microservices` `Distributed Transactions` `Circuit Breaking` `Nacos`\n\n**Middleware**  \n`Redis` `KafkaMQ` `Apollo`\n\n### Databases\n`Oracle` `MySQL` `SQL Server` `SQL Optimization` `Read/Write Separation`\n\n### Engineering Capabilities\n`JVM Tuning` `CI/CD Pipeline` `Jenkins` `Docker` `K8S`\n\n### Technical Literacy\n**Continuously learning through deep-dive analysis of Spring Framework source code (English documentation). Capable of quickly mastering new open-source projects. Expert in applying design patterns.**\n\n---\n\n## 💼 Professional Experience\n\n### 🏦 Citigroup Finance (Shanghai) | Senior Software Engineer *(2022.09 - Present)*\n**Fixed Income Project Team** | Real Estate Finance  \n\n- **Business Development**  (``SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD) Microservices``)\nDeveloped and maintained a business management system for **U.S. municipal projects** (`CRA/LIHTC`). The system provides end-to-end management including **corporate intent management compliant with regulations**, **full lifecycle deal management** (due diligence, loan agreement negotiation, pricing, credit approval, process approval), automated account opening, budget management, fund disbursement, and post-loan collateral management. Responsible for system integration and data governance: achieved seamless integration with upstream/downstream systems through diverse technical solutions; established data reconciliation processes ensuring cross-system consistency while automating business reports and financial audit data.\n\n- **Technical Development**  \nDeveloped **Historical Data Comparison Component** widely adopted across Citigroup backend services.  \nCreated **Distributed Lock Component** with polymorphic extensibility, currently in production use.\n\n### ✈️ Ctrip | Senior Backend Engineer *(2021.01 - 2022.09)*\n**Transportation Business Unit** | Rail Ticketing\n\n**Responsibilities**\n- Owned development and maintenance of rail ticketing system components\n- Conducted code reviews and frontend page development for business systems\n- Designed system interface standards and implementation\n- Collaborated with product team on development planning\n- Monitored production systems to prevent failures\n\n**Key Projects**:  \n**E-Ticket Platform Development** (``SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz Microservices``)\n- Led development of core modules including order distribution, supplier management, and financial reconciliation\n- Implemented Redis-based distributed locking and asynchronous data processing with MQ\n- Optimized SQL queries for ticket reservation system, achieving 3x performance improvement\n- Developed payment module using Redis distributed locks and database optimistic locking\n\n### 🏦 Ping An Consumer Finance | Java Engineer *(2020.01 - 2021.01)*\n**Risk Control Technology Department** | FinTech\n\n**Key Contributions**\n- **Risk Control System Integration**: Implemented AOP aspect for risk assessment with custom annotations\n- **Mall Order System**: Designed public transfer module using optimistic locking and Redis-based retry mechanism\n- **Basic Information Service**: Rebuilt data distribution system with Redis caching, improving query performance by 70%\n- **Account Opening System**: Developed bank account verification interfaces with Redis-based data validation\n\n\n### 🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)\n**Development Department​​** | Project Engineering\nExecuted end-to-end backend code development for core systems, translating 50+ business requirements into production-ready solutions with 100% on-time delivery rate\nOptimized legacy codebase through standardized refactoring, reducing system error frequency by 35%\n\n---\n\n## 🏆 Technical Achievements\n- Champion of Ctrip 2021 Hackathon [Project](https://github.com/capa-cloud/capa-bff)\n\n---\n\n## 📚 Technical Influence\n- Open-source contributor (libgdx-doc)\n\n---\n\n## 📌 Additional Information\n- **English Proficiency**: Fluent in technical documentation reading\n- **Technical Pursuits**: Continuously researching various architectures. Exploring OpenGL and Java game framework [LIBGDX](https://libgdx.com/)","source":"resume/index_en.md","raw":"---\ntitle: Zhao Kaijie - Senior Java Developer\n---\n\n<div align=\"center\">\n<a href=\"/resume/\">Chinese Version </a> <br>\n<a href=\"/resume/index_en.pdf\">PDF Download</a>\n </div>\n<!-- [English Version](/resume/index_en) | [PDF Download](#) <br> -->\n\n<!-- [PDF Download]() -->\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 Shanghai  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">Personal Blog</a> <br> 🏢 8 Years Backend Development Experience  \n🎓 East China University of Technology\n</div>\n\n---\n\n## 🏅 Core Competencies\n- **Full-stack Java Expert**: 8 years Java development experience, proficient in Spring ecosystem (**Spring Boot/Spring Cloud/Spring Data/Spring Security**) for building highly available systems. Solid understanding of data structures and design patterns.\n- **Architectural Design**: Led design of high-concurrency distributed systems with microservices architecture, implemented service decomposition and circuit-breaking mechanisms.\n- **Abstract Business System Design**: Capable of rapidly abstracting business requirements into system workflows for efficient development.\n- **Technical Innovation**: Lead designer of championship solution in Ctrip 2021 Hackathon Programming Competition.\n- **Industry Expertise**: Specialized in fintech domain with deep understanding of risk control systems and payment clearing architectures.\n- **Code Excellence**: Contributor to open-source documentation, passionate about algorithms and clean code.\n\n---\n\n## 🛠️ Technical Stack\n\n### Backend Technologies\n\n**Core Frameworks**  \n`Spring Boot` `MyBatis Plus` `Spring JPA` `Spring Security` `Quartz` `SLF4J`\n\n**Architecture**  \n`Spring Cloud` `Microservices` `Distributed Transactions` `Circuit Breaking` `Nacos`\n\n**Middleware**  \n`Redis` `KafkaMQ` `Apollo`\n\n### Databases\n`Oracle` `MySQL` `SQL Server` `SQL Optimization` `Read/Write Separation`\n\n### Engineering Capabilities\n`JVM Tuning` `CI/CD Pipeline` `Jenkins` `Docker` `K8S`\n\n### Technical Literacy\n**Continuously learning through deep-dive analysis of Spring Framework source code (English documentation). Capable of quickly mastering new open-source projects. Expert in applying design patterns.**\n\n---\n\n## 💼 Professional Experience\n\n### 🏦 Citigroup Finance (Shanghai) | Senior Software Engineer *(2022.09 - Present)*\n**Fixed Income Project Team** | Real Estate Finance  \n\n- **Business Development**  (``SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD) Microservices``)\nDeveloped and maintained a business management system for **U.S. municipal projects** (`CRA/LIHTC`). The system provides end-to-end management including **corporate intent management compliant with regulations**, **full lifecycle deal management** (due diligence, loan agreement negotiation, pricing, credit approval, process approval), automated account opening, budget management, fund disbursement, and post-loan collateral management. Responsible for system integration and data governance: achieved seamless integration with upstream/downstream systems through diverse technical solutions; established data reconciliation processes ensuring cross-system consistency while automating business reports and financial audit data.\n\n- **Technical Development**  \nDeveloped **Historical Data Comparison Component** widely adopted across Citigroup backend services.  \nCreated **Distributed Lock Component** with polymorphic extensibility, currently in production use.\n\n### ✈️ Ctrip | Senior Backend Engineer *(2021.01 - 2022.09)*\n**Transportation Business Unit** | Rail Ticketing\n\n**Responsibilities**\n- Owned development and maintenance of rail ticketing system components\n- Conducted code reviews and frontend page development for business systems\n- Designed system interface standards and implementation\n- Collaborated with product team on development planning\n- Monitored production systems to prevent failures\n\n**Key Projects**:  \n**E-Ticket Platform Development** (``SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz Microservices``)\n- Led development of core modules including order distribution, supplier management, and financial reconciliation\n- Implemented Redis-based distributed locking and asynchronous data processing with MQ\n- Optimized SQL queries for ticket reservation system, achieving 3x performance improvement\n- Developed payment module using Redis distributed locks and database optimistic locking\n\n### 🏦 Ping An Consumer Finance | Java Engineer *(2020.01 - 2021.01)*\n**Risk Control Technology Department** | FinTech\n\n**Key Contributions**\n- **Risk Control System Integration**: Implemented AOP aspect for risk assessment with custom annotations\n- **Mall Order System**: Designed public transfer module using optimistic locking and Redis-based retry mechanism\n- **Basic Information Service**: Rebuilt data distribution system with Redis caching, improving query performance by 70%\n- **Account Opening System**: Developed bank account verification interfaces with Redis-based data validation\n\n\n### 🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)\n**Development Department​​** | Project Engineering\nExecuted end-to-end backend code development for core systems, translating 50+ business requirements into production-ready solutions with 100% on-time delivery rate\nOptimized legacy codebase through standardized refactoring, reducing system error frequency by 35%\n\n---\n\n## 🏆 Technical Achievements\n- Champion of Ctrip 2021 Hackathon [Project](https://github.com/capa-cloud/capa-bff)\n\n---\n\n## 📚 Technical Influence\n- Open-source contributor (libgdx-doc)\n\n---\n\n## 📌 Additional Information\n- **English Proficiency**: Fluent in technical documentation reading\n- **Technical Pursuits**: Continuously researching various architectures. Exploring OpenGL and Java game framework [LIBGDX](https://libgdx.com/)","date":"2025-06-09T08:43:51.924Z","updated":"2025-06-09T08:43:51.924Z","path":"resume/index_en.html","comments":1,"layout":"page","_id":"cmcklki7c00061wu194h299vm","content":"<div align=\"center\">\n<a href=\"/resume/\">Chinese Version </a> <br>\n<a href=\"/resume/index_en.pdf\">PDF Download</a>\n </div>\n<!-- [English Version](/resume/index_en) | [PDF Download](#) <br> -->\n\n<!-- [PDF Download]() -->\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 Shanghai  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">Personal Blog</a> <br> 🏢 8 Years Backend Development Experience  \n🎓 East China University of Technology\n</div>\n\n<hr>\n<h2 id=\"🏅-Core-Competencies\"><a href=\"#🏅-Core-Competencies\" class=\"headerlink\" title=\"🏅 Core Competencies\"></a>🏅 Core Competencies</h2><ul>\n<li><strong>Full-stack Java Expert</strong>: 8 years Java development experience, proficient in Spring ecosystem (<strong>Spring Boot&#x2F;Spring Cloud&#x2F;Spring Data&#x2F;Spring Security</strong>) for building highly available systems. Solid understanding of data structures and design patterns.</li>\n<li><strong>Architectural Design</strong>: Led design of high-concurrency distributed systems with microservices architecture, implemented service decomposition and circuit-breaking mechanisms.</li>\n<li><strong>Abstract Business System Design</strong>: Capable of rapidly abstracting business requirements into system workflows for efficient development.</li>\n<li><strong>Technical Innovation</strong>: Lead designer of championship solution in Ctrip 2021 Hackathon Programming Competition.</li>\n<li><strong>Industry Expertise</strong>: Specialized in fintech domain with deep understanding of risk control systems and payment clearing architectures.</li>\n<li><strong>Code Excellence</strong>: Contributor to open-source documentation, passionate about algorithms and clean code.</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-Technical-Stack\"><a href=\"#🛠️-Technical-Stack\" class=\"headerlink\" title=\"🛠️ Technical Stack\"></a>🛠️ Technical Stack</h2><h3 id=\"Backend-Technologies\"><a href=\"#Backend-Technologies\" class=\"headerlink\" title=\"Backend Technologies\"></a>Backend Technologies</h3><p><strong>Core Frameworks</strong><br><code>Spring Boot</code> <code>MyBatis Plus</code> <code>Spring JPA</code> <code>Spring Security</code> <code>Quartz</code> <code>SLF4J</code></p>\n<p><strong>Architecture</strong><br><code>Spring Cloud</code> <code>Microservices</code> <code>Distributed Transactions</code> <code>Circuit Breaking</code> <code>Nacos</code></p>\n<p><strong>Middleware</strong><br><code>Redis</code> <code>KafkaMQ</code> <code>Apollo</code></p>\n<h3 id=\"Databases\"><a href=\"#Databases\" class=\"headerlink\" title=\"Databases\"></a>Databases</h3><p><code>Oracle</code> <code>MySQL</code> <code>SQL Server</code> <code>SQL Optimization</code> <code>Read/Write Separation</code></p>\n<h3 id=\"Engineering-Capabilities\"><a href=\"#Engineering-Capabilities\" class=\"headerlink\" title=\"Engineering Capabilities\"></a>Engineering Capabilities</h3><p><code>JVM Tuning</code> <code>CI/CD Pipeline</code> <code>Jenkins</code> <code>Docker</code> <code>K8S</code></p>\n<h3 id=\"Technical-Literacy\"><a href=\"#Technical-Literacy\" class=\"headerlink\" title=\"Technical Literacy\"></a>Technical Literacy</h3><p><strong>Continuously learning through deep-dive analysis of Spring Framework source code (English documentation). Capable of quickly mastering new open-source projects. Expert in applying design patterns.</strong></p>\n<hr>\n<h2 id=\"💼-Professional-Experience\"><a href=\"#💼-Professional-Experience\" class=\"headerlink\" title=\"💼 Professional Experience\"></a>💼 Professional Experience</h2><h3 id=\"🏦-Citigroup-Finance-Shanghai-Senior-Software-Engineer-2022-09-Present\"><a href=\"#🏦-Citigroup-Finance-Shanghai-Senior-Software-Engineer-2022-09-Present\" class=\"headerlink\" title=\"🏦 Citigroup Finance (Shanghai) | Senior Software Engineer (2022.09 - Present)\"></a>🏦 Citigroup Finance (Shanghai) | Senior Software Engineer <em>(2022.09 - Present)</em></h3><p><strong>Fixed Income Project Team</strong> | Real Estate Finance  </p>\n<ul>\n<li><p><strong>Business Development</strong>  (<code>SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD) Microservices</code>)<br>Developed and maintained a business management system for <strong>U.S. municipal projects</strong> (<code>CRA/LIHTC</code>). The system provides end-to-end management including <strong>corporate intent management compliant with regulations</strong>, <strong>full lifecycle deal management</strong> (due diligence, loan agreement negotiation, pricing, credit approval, process approval), automated account opening, budget management, fund disbursement, and post-loan collateral management. Responsible for system integration and data governance: achieved seamless integration with upstream&#x2F;downstream systems through diverse technical solutions; established data reconciliation processes ensuring cross-system consistency while automating business reports and financial audit data.</p>\n</li>\n<li><p><strong>Technical Development</strong><br>Developed <strong>Historical Data Comparison Component</strong> widely adopted across Citigroup backend services.<br>Created <strong>Distributed Lock Component</strong> with polymorphic extensibility, currently in production use.</p>\n</li>\n</ul>\n<h3 id=\"✈️-Ctrip-Senior-Backend-Engineer-2021-01-2022-09\"><a href=\"#✈️-Ctrip-Senior-Backend-Engineer-2021-01-2022-09\" class=\"headerlink\" title=\"✈️ Ctrip | Senior Backend Engineer (2021.01 - 2022.09)\"></a>✈️ Ctrip | Senior Backend Engineer <em>(2021.01 - 2022.09)</em></h3><p><strong>Transportation Business Unit</strong> | Rail Ticketing</p>\n<p><strong>Responsibilities</strong></p>\n<ul>\n<li>Owned development and maintenance of rail ticketing system components</li>\n<li>Conducted code reviews and frontend page development for business systems</li>\n<li>Designed system interface standards and implementation</li>\n<li>Collaborated with product team on development planning</li>\n<li>Monitored production systems to prevent failures</li>\n</ul>\n<p><strong>Key Projects</strong>:<br><strong>E-Ticket Platform Development</strong> (<code>SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz Microservices</code>)</p>\n<ul>\n<li>Led development of core modules including order distribution, supplier management, and financial reconciliation</li>\n<li>Implemented Redis-based distributed locking and asynchronous data processing with MQ</li>\n<li>Optimized SQL queries for ticket reservation system, achieving 3x performance improvement</li>\n<li>Developed payment module using Redis distributed locks and database optimistic locking</li>\n</ul>\n<h3 id=\"🏦-Ping-An-Consumer-Finance-Java-Engineer-2020-01-2021-01\"><a href=\"#🏦-Ping-An-Consumer-Finance-Java-Engineer-2020-01-2021-01\" class=\"headerlink\" title=\"🏦 Ping An Consumer Finance | Java Engineer (2020.01 - 2021.01)\"></a>🏦 Ping An Consumer Finance | Java Engineer <em>(2020.01 - 2021.01)</em></h3><p><strong>Risk Control Technology Department</strong> | FinTech</p>\n<p><strong>Key Contributions</strong></p>\n<ul>\n<li><strong>Risk Control System Integration</strong>: Implemented AOP aspect for risk assessment with custom annotations</li>\n<li><strong>Mall Order System</strong>: Designed public transfer module using optimistic locking and Redis-based retry mechanism</li>\n<li><strong>Basic Information Service</strong>: Rebuilt data distribution system with Redis caching, improving query performance by 70%</li>\n<li><strong>Account Opening System</strong>: Developed bank account verification interfaces with Redis-based data validation</li>\n</ul>\n<h3 id=\"🍎-Shanxi-Golden-Pomegranate-Network-Technology-Co-Ltd-Java-Mid-Level-Engineer-2017-01-2019-12\"><a href=\"#🍎-Shanxi-Golden-Pomegranate-Network-Technology-Co-Ltd-Java-Mid-Level-Engineer-2017-01-2019-12\" class=\"headerlink\" title=\"🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)\"></a>🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)</h3><p><strong>Development Department​​</strong> | Project Engineering<br>Executed end-to-end backend code development for core systems, translating 50+ business requirements into production-ready solutions with 100% on-time delivery rate<br>Optimized legacy codebase through standardized refactoring, reducing system error frequency by 35%</p>\n<hr>\n<h2 id=\"🏆-Technical-Achievements\"><a href=\"#🏆-Technical-Achievements\" class=\"headerlink\" title=\"🏆 Technical Achievements\"></a>🏆 Technical Achievements</h2><ul>\n<li>Champion of Ctrip 2021 Hackathon <a href=\"https://github.com/capa-cloud/capa-bff\">Project</a></li>\n</ul>\n<hr>\n<h2 id=\"📚-Technical-Influence\"><a href=\"#📚-Technical-Influence\" class=\"headerlink\" title=\"📚 Technical Influence\"></a>📚 Technical Influence</h2><ul>\n<li>Open-source contributor (libgdx-doc)</li>\n</ul>\n<hr>\n<h2 id=\"📌-Additional-Information\"><a href=\"#📌-Additional-Information\" class=\"headerlink\" title=\"📌 Additional Information\"></a>📌 Additional Information</h2><ul>\n<li><strong>English Proficiency</strong>: Fluent in technical documentation reading</li>\n<li><strong>Technical Pursuits</strong>: Continuously researching various architectures. Exploring OpenGL and Java game framework <a href=\"https://libgdx.com/\">LIBGDX</a></li>\n</ul>\n","length":658,"excerpt":"","more":"<div align=\"center\">\n<a href=\"/resume/\">Chinese Version </a> <br>\n<a href=\"/resume/index_en.pdf\">PDF Download</a>\n </div>\n<!-- [English Version](/resume/index_en) | [PDF Download](#) <br> -->\n\n<!-- [PDF Download]() -->\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 Shanghai  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">Personal Blog</a> <br> 🏢 8 Years Backend Development Experience  \n🎓 East China University of Technology\n</div>\n\n<hr>\n<h2 id=\"🏅-Core-Competencies\"><a href=\"#🏅-Core-Competencies\" class=\"headerlink\" title=\"🏅 Core Competencies\"></a>🏅 Core Competencies</h2><ul>\n<li><strong>Full-stack Java Expert</strong>: 8 years Java development experience, proficient in Spring ecosystem (<strong>Spring Boot&#x2F;Spring Cloud&#x2F;Spring Data&#x2F;Spring Security</strong>) for building highly available systems. Solid understanding of data structures and design patterns.</li>\n<li><strong>Architectural Design</strong>: Led design of high-concurrency distributed systems with microservices architecture, implemented service decomposition and circuit-breaking mechanisms.</li>\n<li><strong>Abstract Business System Design</strong>: Capable of rapidly abstracting business requirements into system workflows for efficient development.</li>\n<li><strong>Technical Innovation</strong>: Lead designer of championship solution in Ctrip 2021 Hackathon Programming Competition.</li>\n<li><strong>Industry Expertise</strong>: Specialized in fintech domain with deep understanding of risk control systems and payment clearing architectures.</li>\n<li><strong>Code Excellence</strong>: Contributor to open-source documentation, passionate about algorithms and clean code.</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-Technical-Stack\"><a href=\"#🛠️-Technical-Stack\" class=\"headerlink\" title=\"🛠️ Technical Stack\"></a>🛠️ Technical Stack</h2><h3 id=\"Backend-Technologies\"><a href=\"#Backend-Technologies\" class=\"headerlink\" title=\"Backend Technologies\"></a>Backend Technologies</h3><p><strong>Core Frameworks</strong><br><code>Spring Boot</code> <code>MyBatis Plus</code> <code>Spring JPA</code> <code>Spring Security</code> <code>Quartz</code> <code>SLF4J</code></p>\n<p><strong>Architecture</strong><br><code>Spring Cloud</code> <code>Microservices</code> <code>Distributed Transactions</code> <code>Circuit Breaking</code> <code>Nacos</code></p>\n<p><strong>Middleware</strong><br><code>Redis</code> <code>KafkaMQ</code> <code>Apollo</code></p>\n<h3 id=\"Databases\"><a href=\"#Databases\" class=\"headerlink\" title=\"Databases\"></a>Databases</h3><p><code>Oracle</code> <code>MySQL</code> <code>SQL Server</code> <code>SQL Optimization</code> <code>Read/Write Separation</code></p>\n<h3 id=\"Engineering-Capabilities\"><a href=\"#Engineering-Capabilities\" class=\"headerlink\" title=\"Engineering Capabilities\"></a>Engineering Capabilities</h3><p><code>JVM Tuning</code> <code>CI/CD Pipeline</code> <code>Jenkins</code> <code>Docker</code> <code>K8S</code></p>\n<h3 id=\"Technical-Literacy\"><a href=\"#Technical-Literacy\" class=\"headerlink\" title=\"Technical Literacy\"></a>Technical Literacy</h3><p><strong>Continuously learning through deep-dive analysis of Spring Framework source code (English documentation). Capable of quickly mastering new open-source projects. Expert in applying design patterns.</strong></p>\n<hr>\n<h2 id=\"💼-Professional-Experience\"><a href=\"#💼-Professional-Experience\" class=\"headerlink\" title=\"💼 Professional Experience\"></a>💼 Professional Experience</h2><h3 id=\"🏦-Citigroup-Finance-Shanghai-Senior-Software-Engineer-2022-09-Present\"><a href=\"#🏦-Citigroup-Finance-Shanghai-Senior-Software-Engineer-2022-09-Present\" class=\"headerlink\" title=\"🏦 Citigroup Finance (Shanghai) | Senior Software Engineer (2022.09 - Present)\"></a>🏦 Citigroup Finance (Shanghai) | Senior Software Engineer <em>(2022.09 - Present)</em></h3><p><strong>Fixed Income Project Team</strong> | Real Estate Finance  </p>\n<ul>\n<li><p><strong>Business Development</strong>  (<code>SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD) Microservices</code>)<br>Developed and maintained a business management system for <strong>U.S. municipal projects</strong> (<code>CRA/LIHTC</code>). The system provides end-to-end management including <strong>corporate intent management compliant with regulations</strong>, <strong>full lifecycle deal management</strong> (due diligence, loan agreement negotiation, pricing, credit approval, process approval), automated account opening, budget management, fund disbursement, and post-loan collateral management. Responsible for system integration and data governance: achieved seamless integration with upstream&#x2F;downstream systems through diverse technical solutions; established data reconciliation processes ensuring cross-system consistency while automating business reports and financial audit data.</p>\n</li>\n<li><p><strong>Technical Development</strong><br>Developed <strong>Historical Data Comparison Component</strong> widely adopted across Citigroup backend services.<br>Created <strong>Distributed Lock Component</strong> with polymorphic extensibility, currently in production use.</p>\n</li>\n</ul>\n<h3 id=\"✈️-Ctrip-Senior-Backend-Engineer-2021-01-2022-09\"><a href=\"#✈️-Ctrip-Senior-Backend-Engineer-2021-01-2022-09\" class=\"headerlink\" title=\"✈️ Ctrip | Senior Backend Engineer (2021.01 - 2022.09)\"></a>✈️ Ctrip | Senior Backend Engineer <em>(2021.01 - 2022.09)</em></h3><p><strong>Transportation Business Unit</strong> | Rail Ticketing</p>\n<p><strong>Responsibilities</strong></p>\n<ul>\n<li>Owned development and maintenance of rail ticketing system components</li>\n<li>Conducted code reviews and frontend page development for business systems</li>\n<li>Designed system interface standards and implementation</li>\n<li>Collaborated with product team on development planning</li>\n<li>Monitored production systems to prevent failures</li>\n</ul>\n<p><strong>Key Projects</strong>:<br><strong>E-Ticket Platform Development</strong> (<code>SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz Microservices</code>)</p>\n<ul>\n<li>Led development of core modules including order distribution, supplier management, and financial reconciliation</li>\n<li>Implemented Redis-based distributed locking and asynchronous data processing with MQ</li>\n<li>Optimized SQL queries for ticket reservation system, achieving 3x performance improvement</li>\n<li>Developed payment module using Redis distributed locks and database optimistic locking</li>\n</ul>\n<h3 id=\"🏦-Ping-An-Consumer-Finance-Java-Engineer-2020-01-2021-01\"><a href=\"#🏦-Ping-An-Consumer-Finance-Java-Engineer-2020-01-2021-01\" class=\"headerlink\" title=\"🏦 Ping An Consumer Finance | Java Engineer (2020.01 - 2021.01)\"></a>🏦 Ping An Consumer Finance | Java Engineer <em>(2020.01 - 2021.01)</em></h3><p><strong>Risk Control Technology Department</strong> | FinTech</p>\n<p><strong>Key Contributions</strong></p>\n<ul>\n<li><strong>Risk Control System Integration</strong>: Implemented AOP aspect for risk assessment with custom annotations</li>\n<li><strong>Mall Order System</strong>: Designed public transfer module using optimistic locking and Redis-based retry mechanism</li>\n<li><strong>Basic Information Service</strong>: Rebuilt data distribution system with Redis caching, improving query performance by 70%</li>\n<li><strong>Account Opening System</strong>: Developed bank account verification interfaces with Redis-based data validation</li>\n</ul>\n<h3 id=\"🍎-Shanxi-Golden-Pomegranate-Network-Technology-Co-Ltd-Java-Mid-Level-Engineer-2017-01-2019-12\"><a href=\"#🍎-Shanxi-Golden-Pomegranate-Network-Technology-Co-Ltd-Java-Mid-Level-Engineer-2017-01-2019-12\" class=\"headerlink\" title=\"🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)\"></a>🍎 Shanxi Golden Pomegranate Network Technology Co., Ltd | Java Mid-Level Engineer (2017.01 - 2019.12)</h3><p><strong>Development Department​​</strong> | Project Engineering<br>Executed end-to-end backend code development for core systems, translating 50+ business requirements into production-ready solutions with 100% on-time delivery rate<br>Optimized legacy codebase through standardized refactoring, reducing system error frequency by 35%</p>\n<hr>\n<h2 id=\"🏆-Technical-Achievements\"><a href=\"#🏆-Technical-Achievements\" class=\"headerlink\" title=\"🏆 Technical Achievements\"></a>🏆 Technical Achievements</h2><ul>\n<li>Champion of Ctrip 2021 Hackathon <a href=\"https://github.com/capa-cloud/capa-bff\">Project</a></li>\n</ul>\n<hr>\n<h2 id=\"📚-Technical-Influence\"><a href=\"#📚-Technical-Influence\" class=\"headerlink\" title=\"📚 Technical Influence\"></a>📚 Technical Influence</h2><ul>\n<li>Open-source contributor (libgdx-doc)</li>\n</ul>\n<hr>\n<h2 id=\"📌-Additional-Information\"><a href=\"#📌-Additional-Information\" class=\"headerlink\" title=\"📌 Additional Information\"></a>📌 Additional Information</h2><ul>\n<li><strong>English Proficiency</strong>: Fluent in technical documentation reading</li>\n<li><strong>Technical Pursuits</strong>: Continuously researching various architectures. Exploring OpenGL and Java game framework <a href=\"https://libgdx.com/\">LIBGDX</a></li>\n</ul>\n"},{"title":"赵凯杰 - Java高级开发工程师","_content":"\n<div align=\"center\">\n<a href=\"/resume/index_en\">English Version </a> <br>\n<a href=\"/resume/index.pdf\">PDF Download</a>\n </div>\n\n<!-- [PDF版本下载](/resume/index.pdf) <br> -->\n\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 上海  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> <br> 🏢 8年后端开发经验  \n🎓 东华理工大学\n</div>\n\n---\n\n## 🏅 核心优势\n- **​Java全栈专家​​**：8年Java开发经验，熟练运用Spring全家桶（**SpringBoot/SpringCloud/SpringData/Spring Security**）构建高可用系统，坚持精进技术，熟悉数据结构以及设计模式\n- **架构设计能力**：主导设计过高并发的分布式系统，具备微服务/高并发设计经验，落地微服务拆分与熔断限流机制\n- **抽象业务系统设计能力**: 能够快速且精确的对业务进行抽象，将其变为系统流程，快速进行业务开发\n- **技术创新力**：携程2021黑客松编程大赛冠军方案主设计师\n- **行业经验**：深耕金融科技领域，熟悉风控系统、支付清算核心架构\n- **代码能力一流**: 曾给开源社区文档提出过contribute，自己将代码作为平时的爱好，也喜好算法\n\n---\n\n## 🛠️ 技术图谱\n\n### 后端技术栈\n\n**核心框架**  \n`Spring Boot` `MyBatis Plus` `Spring JPA` `Spring Security` `Quartz` `SLF4J`\n\n**架构设计**  \n`Spring Cloud` `微服务` `分布式事务` `服务熔断` `Nacos`\n\n**中间件**  \n`Redis` `KafkaMQ` `Apollo`\n\n### 数据库\n`Oracle` `MySQL` `SQL Server` `SQL优化` `读写分离`\n\n### 工程能力\n`JVM调优` `CI/CD流水线` `Jekins` `Docker` `K8S`\n\n### 技术素养\n**拥有一颗保持学习的心，精读Spring Framework等英文源码注释，结合文档，可以迅速熟练上手各种陌生开源项目，熟练掌握并使用各种设计模式**\n\n\n---\n\n## 💼 职业履历\n\n### 🏦 上海花旗金融 | 高级开发工程师 *(2022.09 - 至今)*\n**固定收益项目组** | 地产金融方向\n\n- 业务开发 (``SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD)``)\n开发并维护服务于**美国市政项目**（``CRA/LIHTC``）的业务管理系统。该系统提供端到端管理，涵盖**符合法案企业的意向管理**、**Deal全周期管理**（尽职调查、贷款协议谈判、议价定价、信贷审批、流程审批）、自动化开户、预算管理、资金发放、贷后抵押物管理及资产负债表管理等投融资核心环节。负责系统集成与数据治理：通过多样化技术方案实现上下游系统无缝集成；建立并执行数据核对（``Reconciliation Process``）机制，确保跨系统数据一致性，同时自动化生成各类业务报表与财务审计所需数据。\n\n\n- 技术开发\n开发公共组件**历史数据对比组件**，目前在花旗友军后台服务中广泛使用\n开发**公共分布式锁**组件，使用多态化使其可拓展，目前也在后台服务中使用\n\n### ✈️ 携程旅行网 | 高级后端工程师 *(2021.01 - 2022.09)*\n**交通事业部** | 火车票业务线\n\n**职责**\n负责火车票系统的开发维护以及问题排查。\n进行开发系统的相关设计以及部分代码审核。以及部分业务系统中部分前端页面的开发\n负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；\n与产品对接安排开发周期按时完成开发计划。\n监测生产问题防止系统故障导致事故。\n\n\n**核心项目**：   \n> 携程火车票电子客票线下票台项目 (``SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz``)\n\n* 我在该项目中作为主开发，负责该项目中大部分功能开发。\n* 负责对接携程内部火车票务接收C端订单并在系统中进行分发\n* 包括订单分发，供应商管理，财务自动打款，支付核销等功能的开发\n* 基本架构使用的springboot+mybatis+mysql架设，对进单以及退票系统进行过改造，全局使用reids作为分布式锁。并且数据交互接口为异步交互。缓存使用redis以及部分查找功能使用es。\n* 负责支付模块的开发。负责系统开发文档的编写。其中关键使用redis作为分布式锁，并且使用数据库乐观锁管理账号余额增减，以及日常付款等功能。\n* 负责参与需求评审，需求沟通，需求落地以及实现。\n\n\n\n\n### 🏦 平安消费金融 | Java中级工程师 *(2020.01 - 2021.01)*\n**风控科技部** | 金融科技方向\n\n**职责**\n1. 负责业务系统的开发工作，包括需求分析、系统设计、编程和测试等；                                                   \n2. 负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；\n3. 应用系统维护支持，协助运营处理生产事件，数据修改，数据采集相关工作； \n4. 对其他软件工程师的代码进行审核；\n5. 参与相关领域的业务需求和功能设计评审；\n6. 参与开发评估，开发计划推荐和关联部门系统的事项推进；\n\n\n**重点项目**：  \n**风控系统接入：**\n在部分接口执行完毕后，需要对接风控系统。\n使用aop切面编程，利用注解的方式，对指定接口进行around包裹，在返回结果后，根据参数类型判断阶段状态，来分别对接风控系统。\n\n**商城订单对接：**\n对接平安内部的商城系统。使用springboot+redis+mysql+mybatis+cloud+apollo\n负责对公转账模块。从需求阶段开始接受，自行设计，编写表结构，时序图\n每日对账定时任务执行完毕后，需要执行公对公转账。\n使用乐观锁原理，来使得转账定时任务可以与对账定时任务互不干扰。并且可以多次重试失败的转账。\n使用redis，完成实现补处理接口的锁。使得同一笔转账不会转账两次\n\n**基础信息查询模块建设：**\n使用的springboot+oracle+mybatis+redis+cloud+定时任务。\n主要是对于原有基础信息下发系统的改造。基础信息下发系统主要以数据库表的形式，放在数据库中。专门由公司的一个系统集中管理所有基础数据，并且下发给别的系统使用。例如省市区信息，职业信息等。\n将原有定时任务发送所有表给使用者的模式，改为了接口调用。\n为了保证接口的效率，使用定时任务定时扫描所有基表改动信息，将改动信息存入reids缓存。以hset的形式存储，每一张表对应一个redis的key值。用以建立一个类似索引的机制来加快查询效率。\n\n**进件域改造：**\n使用springboot+redis+oracle+mybatis+cloud+apollo\n主要负责用户信息完善模块，用户信息的校验，添加。使用了内部搭建的流程控制系统来控制整个进件流程。\n负责银行卡绑定模块，验证码校验的逻辑。主要跟平安的付款系统交互。\n\n**开户系统搭建：**\n使用springboot+redis+oracle+mybatis+cloud+apollo\n主要负责在对接银行使用一类户卡开通二类户的接口。跟其它系统对接参数。\n使用了redis控制用户数据的缓存吗，使得校验和开户可以分开，使用apollo动态配置参数。\n\n### 🍎 山西金石榴网络科技有限公司 | Java中级工程师 *(2017.01 - 2019.12)*\n**开发部** | 项目工程\n进行项目的后端代码开发，以及维护。将需求落地实现，按时完成相关代码开发需求\n\n\n---\n\n## 🏆 技术成就\n- 携程2021 Hackthon冠军 [项目](https://github.com/capa-cloud/capa-bff)\n\n---\n\n## 📚 技术影响力\n- 开源项目贡献者（libgdx-doc）\n\n---\n\n## 📌 附加信息\n- 英语能力：熟练阅读英文技术文档\n- 技术追求：持续研究各种架构，保持学习。对于OpenGL以及Java游戏框架[LIBGDX](https://libgdx.com/)也有一定的兴趣，正在持续学习中","source":"resume/index.md","raw":"---\ntitle: 赵凯杰 - Java高级开发工程师\n---\n\n<div align=\"center\">\n<a href=\"/resume/index_en\">English Version </a> <br>\n<a href=\"/resume/index.pdf\">PDF Download</a>\n </div>\n\n<!-- [PDF版本下载](/resume/index.pdf) <br> -->\n\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 上海  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> <br> 🏢 8年后端开发经验  \n🎓 东华理工大学\n</div>\n\n---\n\n## 🏅 核心优势\n- **​Java全栈专家​​**：8年Java开发经验，熟练运用Spring全家桶（**SpringBoot/SpringCloud/SpringData/Spring Security**）构建高可用系统，坚持精进技术，熟悉数据结构以及设计模式\n- **架构设计能力**：主导设计过高并发的分布式系统，具备微服务/高并发设计经验，落地微服务拆分与熔断限流机制\n- **抽象业务系统设计能力**: 能够快速且精确的对业务进行抽象，将其变为系统流程，快速进行业务开发\n- **技术创新力**：携程2021黑客松编程大赛冠军方案主设计师\n- **行业经验**：深耕金融科技领域，熟悉风控系统、支付清算核心架构\n- **代码能力一流**: 曾给开源社区文档提出过contribute，自己将代码作为平时的爱好，也喜好算法\n\n---\n\n## 🛠️ 技术图谱\n\n### 后端技术栈\n\n**核心框架**  \n`Spring Boot` `MyBatis Plus` `Spring JPA` `Spring Security` `Quartz` `SLF4J`\n\n**架构设计**  \n`Spring Cloud` `微服务` `分布式事务` `服务熔断` `Nacos`\n\n**中间件**  \n`Redis` `KafkaMQ` `Apollo`\n\n### 数据库\n`Oracle` `MySQL` `SQL Server` `SQL优化` `读写分离`\n\n### 工程能力\n`JVM调优` `CI/CD流水线` `Jekins` `Docker` `K8S`\n\n### 技术素养\n**拥有一颗保持学习的心，精读Spring Framework等英文源码注释，结合文档，可以迅速熟练上手各种陌生开源项目，熟练掌握并使用各种设计模式**\n\n\n---\n\n## 💼 职业履历\n\n### 🏦 上海花旗金融 | 高级开发工程师 *(2022.09 - 至今)*\n**固定收益项目组** | 地产金融方向\n\n- 业务开发 (``SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD)``)\n开发并维护服务于**美国市政项目**（``CRA/LIHTC``）的业务管理系统。该系统提供端到端管理，涵盖**符合法案企业的意向管理**、**Deal全周期管理**（尽职调查、贷款协议谈判、议价定价、信贷审批、流程审批）、自动化开户、预算管理、资金发放、贷后抵押物管理及资产负债表管理等投融资核心环节。负责系统集成与数据治理：通过多样化技术方案实现上下游系统无缝集成；建立并执行数据核对（``Reconciliation Process``）机制，确保跨系统数据一致性，同时自动化生成各类业务报表与财务审计所需数据。\n\n\n- 技术开发\n开发公共组件**历史数据对比组件**，目前在花旗友军后台服务中广泛使用\n开发**公共分布式锁**组件，使用多态化使其可拓展，目前也在后台服务中使用\n\n### ✈️ 携程旅行网 | 高级后端工程师 *(2021.01 - 2022.09)*\n**交通事业部** | 火车票业务线\n\n**职责**\n负责火车票系统的开发维护以及问题排查。\n进行开发系统的相关设计以及部分代码审核。以及部分业务系统中部分前端页面的开发\n负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；\n与产品对接安排开发周期按时完成开发计划。\n监测生产问题防止系统故障导致事故。\n\n\n**核心项目**：   \n> 携程火车票电子客票线下票台项目 (``SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz``)\n\n* 我在该项目中作为主开发，负责该项目中大部分功能开发。\n* 负责对接携程内部火车票务接收C端订单并在系统中进行分发\n* 包括订单分发，供应商管理，财务自动打款，支付核销等功能的开发\n* 基本架构使用的springboot+mybatis+mysql架设，对进单以及退票系统进行过改造，全局使用reids作为分布式锁。并且数据交互接口为异步交互。缓存使用redis以及部分查找功能使用es。\n* 负责支付模块的开发。负责系统开发文档的编写。其中关键使用redis作为分布式锁，并且使用数据库乐观锁管理账号余额增减，以及日常付款等功能。\n* 负责参与需求评审，需求沟通，需求落地以及实现。\n\n\n\n\n### 🏦 平安消费金融 | Java中级工程师 *(2020.01 - 2021.01)*\n**风控科技部** | 金融科技方向\n\n**职责**\n1. 负责业务系统的开发工作，包括需求分析、系统设计、编程和测试等；                                                   \n2. 负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；\n3. 应用系统维护支持，协助运营处理生产事件，数据修改，数据采集相关工作； \n4. 对其他软件工程师的代码进行审核；\n5. 参与相关领域的业务需求和功能设计评审；\n6. 参与开发评估，开发计划推荐和关联部门系统的事项推进；\n\n\n**重点项目**：  \n**风控系统接入：**\n在部分接口执行完毕后，需要对接风控系统。\n使用aop切面编程，利用注解的方式，对指定接口进行around包裹，在返回结果后，根据参数类型判断阶段状态，来分别对接风控系统。\n\n**商城订单对接：**\n对接平安内部的商城系统。使用springboot+redis+mysql+mybatis+cloud+apollo\n负责对公转账模块。从需求阶段开始接受，自行设计，编写表结构，时序图\n每日对账定时任务执行完毕后，需要执行公对公转账。\n使用乐观锁原理，来使得转账定时任务可以与对账定时任务互不干扰。并且可以多次重试失败的转账。\n使用redis，完成实现补处理接口的锁。使得同一笔转账不会转账两次\n\n**基础信息查询模块建设：**\n使用的springboot+oracle+mybatis+redis+cloud+定时任务。\n主要是对于原有基础信息下发系统的改造。基础信息下发系统主要以数据库表的形式，放在数据库中。专门由公司的一个系统集中管理所有基础数据，并且下发给别的系统使用。例如省市区信息，职业信息等。\n将原有定时任务发送所有表给使用者的模式，改为了接口调用。\n为了保证接口的效率，使用定时任务定时扫描所有基表改动信息，将改动信息存入reids缓存。以hset的形式存储，每一张表对应一个redis的key值。用以建立一个类似索引的机制来加快查询效率。\n\n**进件域改造：**\n使用springboot+redis+oracle+mybatis+cloud+apollo\n主要负责用户信息完善模块，用户信息的校验，添加。使用了内部搭建的流程控制系统来控制整个进件流程。\n负责银行卡绑定模块，验证码校验的逻辑。主要跟平安的付款系统交互。\n\n**开户系统搭建：**\n使用springboot+redis+oracle+mybatis+cloud+apollo\n主要负责在对接银行使用一类户卡开通二类户的接口。跟其它系统对接参数。\n使用了redis控制用户数据的缓存吗，使得校验和开户可以分开，使用apollo动态配置参数。\n\n### 🍎 山西金石榴网络科技有限公司 | Java中级工程师 *(2017.01 - 2019.12)*\n**开发部** | 项目工程\n进行项目的后端代码开发，以及维护。将需求落地实现，按时完成相关代码开发需求\n\n\n---\n\n## 🏆 技术成就\n- 携程2021 Hackthon冠军 [项目](https://github.com/capa-cloud/capa-bff)\n\n---\n\n## 📚 技术影响力\n- 开源项目贡献者（libgdx-doc）\n\n---\n\n## 📌 附加信息\n- 英语能力：熟练阅读英文技术文档\n- 技术追求：持续研究各种架构，保持学习。对于OpenGL以及Java游戏框架[LIBGDX](https://libgdx.com/)也有一定的兴趣，正在持续学习中","date":"2025-06-09T08:35:55.562Z","updated":"2025-06-09T08:35:55.562Z","path":"resume/index.html","comments":1,"layout":"page","_id":"cmcklki7e000a1wu15v1cco7s","content":"<div align=\"center\">\n<a href=\"/resume/index_en\">English Version </a> <br>\n<a href=\"/resume/index.pdf\">PDF Download</a>\n </div>\n\n<!-- [PDF版本下载](/resume/index.pdf) <br> -->\n\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 上海  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> <br> 🏢 8年后端开发经验  \n🎓 东华理工大学\n</div>\n\n<hr>\n<h2 id=\"🏅-核心优势\"><a href=\"#🏅-核心优势\" class=\"headerlink\" title=\"🏅 核心优势\"></a>🏅 核心优势</h2><ul>\n<li><strong>​Java全栈专家​​</strong>：8年Java开发经验，熟练运用Spring全家桶（<strong>SpringBoot&#x2F;SpringCloud&#x2F;SpringData&#x2F;Spring Security</strong>）构建高可用系统，坚持精进技术，熟悉数据结构以及设计模式</li>\n<li><strong>架构设计能力</strong>：主导设计过高并发的分布式系统，具备微服务&#x2F;高并发设计经验，落地微服务拆分与熔断限流机制</li>\n<li><strong>抽象业务系统设计能力</strong>: 能够快速且精确的对业务进行抽象，将其变为系统流程，快速进行业务开发</li>\n<li><strong>技术创新力</strong>：携程2021黑客松编程大赛冠军方案主设计师</li>\n<li><strong>行业经验</strong>：深耕金融科技领域，熟悉风控系统、支付清算核心架构</li>\n<li><strong>代码能力一流</strong>: 曾给开源社区文档提出过contribute，自己将代码作为平时的爱好，也喜好算法</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-技术图谱\"><a href=\"#🛠️-技术图谱\" class=\"headerlink\" title=\"🛠️ 技术图谱\"></a>🛠️ 技术图谱</h2><h3 id=\"后端技术栈\"><a href=\"#后端技术栈\" class=\"headerlink\" title=\"后端技术栈\"></a>后端技术栈</h3><p><strong>核心框架</strong><br><code>Spring Boot</code> <code>MyBatis Plus</code> <code>Spring JPA</code> <code>Spring Security</code> <code>Quartz</code> <code>SLF4J</code></p>\n<p><strong>架构设计</strong><br><code>Spring Cloud</code> <code>微服务</code> <code>分布式事务</code> <code>服务熔断</code> <code>Nacos</code></p>\n<p><strong>中间件</strong><br><code>Redis</code> <code>KafkaMQ</code> <code>Apollo</code></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p><code>Oracle</code> <code>MySQL</code> <code>SQL Server</code> <code>SQL优化</code> <code>读写分离</code></p>\n<h3 id=\"工程能力\"><a href=\"#工程能力\" class=\"headerlink\" title=\"工程能力\"></a>工程能力</h3><p><code>JVM调优</code> <code>CI/CD流水线</code> <code>Jekins</code> <code>Docker</code> <code>K8S</code></p>\n<h3 id=\"技术素养\"><a href=\"#技术素养\" class=\"headerlink\" title=\"技术素养\"></a>技术素养</h3><p><strong>拥有一颗保持学习的心，精读Spring Framework等英文源码注释，结合文档，可以迅速熟练上手各种陌生开源项目，熟练掌握并使用各种设计模式</strong></p>\n<hr>\n<h2 id=\"💼-职业履历\"><a href=\"#💼-职业履历\" class=\"headerlink\" title=\"💼 职业履历\"></a>💼 职业履历</h2><h3 id=\"🏦-上海花旗金融-高级开发工程师-2022-09-至今\"><a href=\"#🏦-上海花旗金融-高级开发工程师-2022-09-至今\" class=\"headerlink\" title=\"🏦 上海花旗金融 | 高级开发工程师 (2022.09 - 至今)\"></a>🏦 上海花旗金融 | 高级开发工程师 <em>(2022.09 - 至今)</em></h3><p><strong>固定收益项目组</strong> | 地产金融方向</p>\n<ul>\n<li><p>业务开发 (<code>SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD)</code>)<br>开发并维护服务于<strong>美国市政项目</strong>（<code>CRA/LIHTC</code>）的业务管理系统。该系统提供端到端管理，涵盖<strong>符合法案企业的意向管理</strong>、<strong>Deal全周期管理</strong>（尽职调查、贷款协议谈判、议价定价、信贷审批、流程审批）、自动化开户、预算管理、资金发放、贷后抵押物管理及资产负债表管理等投融资核心环节。负责系统集成与数据治理：通过多样化技术方案实现上下游系统无缝集成；建立并执行数据核对（<code>Reconciliation Process</code>）机制，确保跨系统数据一致性，同时自动化生成各类业务报表与财务审计所需数据。</p>\n</li>\n<li><p>技术开发<br>开发公共组件<strong>历史数据对比组件</strong>，目前在花旗友军后台服务中广泛使用<br>开发<strong>公共分布式锁</strong>组件，使用多态化使其可拓展，目前也在后台服务中使用</p>\n</li>\n</ul>\n<h3 id=\"✈️-携程旅行网-高级后端工程师-2021-01-2022-09\"><a href=\"#✈️-携程旅行网-高级后端工程师-2021-01-2022-09\" class=\"headerlink\" title=\"✈️ 携程旅行网 | 高级后端工程师 (2021.01 - 2022.09)\"></a>✈️ 携程旅行网 | 高级后端工程师 <em>(2021.01 - 2022.09)</em></h3><p><strong>交通事业部</strong> | 火车票业务线</p>\n<p><strong>职责</strong><br>负责火车票系统的开发维护以及问题排查。<br>进行开发系统的相关设计以及部分代码审核。以及部分业务系统中部分前端页面的开发<br>负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；<br>与产品对接安排开发周期按时完成开发计划。<br>监测生产问题防止系统故障导致事故。</p>\n<p><strong>核心项目</strong>：   </p>\n<blockquote>\n<p>携程火车票电子客票线下票台项目 (<code>SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz</code>)</p>\n</blockquote>\n<ul>\n<li>我在该项目中作为主开发，负责该项目中大部分功能开发。</li>\n<li>负责对接携程内部火车票务接收C端订单并在系统中进行分发</li>\n<li>包括订单分发，供应商管理，财务自动打款，支付核销等功能的开发</li>\n<li>基本架构使用的springboot+mybatis+mysql架设，对进单以及退票系统进行过改造，全局使用reids作为分布式锁。并且数据交互接口为异步交互。缓存使用redis以及部分查找功能使用es。</li>\n<li>负责支付模块的开发。负责系统开发文档的编写。其中关键使用redis作为分布式锁，并且使用数据库乐观锁管理账号余额增减，以及日常付款等功能。</li>\n<li>负责参与需求评审，需求沟通，需求落地以及实现。</li>\n</ul>\n<h3 id=\"🏦-平安消费金融-Java中级工程师-2020-01-2021-01\"><a href=\"#🏦-平安消费金融-Java中级工程师-2020-01-2021-01\" class=\"headerlink\" title=\"🏦 平安消费金融 | Java中级工程师 (2020.01 - 2021.01)\"></a>🏦 平安消费金融 | Java中级工程师 <em>(2020.01 - 2021.01)</em></h3><p><strong>风控科技部</strong> | 金融科技方向</p>\n<p><strong>职责</strong></p>\n<ol>\n<li>负责业务系统的开发工作，包括需求分析、系统设计、编程和测试等；                                                   </li>\n<li>负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；</li>\n<li>应用系统维护支持，协助运营处理生产事件，数据修改，数据采集相关工作； </li>\n<li>对其他软件工程师的代码进行审核；</li>\n<li>参与相关领域的业务需求和功能设计评审；</li>\n<li>参与开发评估，开发计划推荐和关联部门系统的事项推进；</li>\n</ol>\n<p><strong>重点项目</strong>：<br><strong>风控系统接入：</strong><br>在部分接口执行完毕后，需要对接风控系统。<br>使用aop切面编程，利用注解的方式，对指定接口进行around包裹，在返回结果后，根据参数类型判断阶段状态，来分别对接风控系统。</p>\n<p><strong>商城订单对接：</strong><br>对接平安内部的商城系统。使用springboot+redis+mysql+mybatis+cloud+apollo<br>负责对公转账模块。从需求阶段开始接受，自行设计，编写表结构，时序图<br>每日对账定时任务执行完毕后，需要执行公对公转账。<br>使用乐观锁原理，来使得转账定时任务可以与对账定时任务互不干扰。并且可以多次重试失败的转账。<br>使用redis，完成实现补处理接口的锁。使得同一笔转账不会转账两次</p>\n<p><strong>基础信息查询模块建设：</strong><br>使用的springboot+oracle+mybatis+redis+cloud+定时任务。<br>主要是对于原有基础信息下发系统的改造。基础信息下发系统主要以数据库表的形式，放在数据库中。专门由公司的一个系统集中管理所有基础数据，并且下发给别的系统使用。例如省市区信息，职业信息等。<br>将原有定时任务发送所有表给使用者的模式，改为了接口调用。<br>为了保证接口的效率，使用定时任务定时扫描所有基表改动信息，将改动信息存入reids缓存。以hset的形式存储，每一张表对应一个redis的key值。用以建立一个类似索引的机制来加快查询效率。</p>\n<p><strong>进件域改造：</strong><br>使用springboot+redis+oracle+mybatis+cloud+apollo<br>主要负责用户信息完善模块，用户信息的校验，添加。使用了内部搭建的流程控制系统来控制整个进件流程。<br>负责银行卡绑定模块，验证码校验的逻辑。主要跟平安的付款系统交互。</p>\n<p><strong>开户系统搭建：</strong><br>使用springboot+redis+oracle+mybatis+cloud+apollo<br>主要负责在对接银行使用一类户卡开通二类户的接口。跟其它系统对接参数。<br>使用了redis控制用户数据的缓存吗，使得校验和开户可以分开，使用apollo动态配置参数。</p>\n<h3 id=\"🍎-山西金石榴网络科技有限公司-Java中级工程师-2017-01-2019-12\"><a href=\"#🍎-山西金石榴网络科技有限公司-Java中级工程师-2017-01-2019-12\" class=\"headerlink\" title=\"🍎 山西金石榴网络科技有限公司 | Java中级工程师 (2017.01 - 2019.12)\"></a>🍎 山西金石榴网络科技有限公司 | Java中级工程师 <em>(2017.01 - 2019.12)</em></h3><p><strong>开发部</strong> | 项目工程<br>进行项目的后端代码开发，以及维护。将需求落地实现，按时完成相关代码开发需求</p>\n<hr>\n<h2 id=\"🏆-技术成就\"><a href=\"#🏆-技术成就\" class=\"headerlink\" title=\"🏆 技术成就\"></a>🏆 技术成就</h2><ul>\n<li>携程2021 Hackthon冠军 <a href=\"https://github.com/capa-cloud/capa-bff\">项目</a></li>\n</ul>\n<hr>\n<h2 id=\"📚-技术影响力\"><a href=\"#📚-技术影响力\" class=\"headerlink\" title=\"📚 技术影响力\"></a>📚 技术影响力</h2><ul>\n<li>开源项目贡献者（libgdx-doc）</li>\n</ul>\n<hr>\n<h2 id=\"📌-附加信息\"><a href=\"#📌-附加信息\" class=\"headerlink\" title=\"📌 附加信息\"></a>📌 附加信息</h2><ul>\n<li>英语能力：熟练阅读英文技术文档</li>\n<li>技术追求：持续研究各种架构，保持学习。对于OpenGL以及Java游戏框架<a href=\"https://libgdx.com/\">LIBGDX</a>也有一定的兴趣，正在持续学习中</li>\n</ul>\n","length":2044,"excerpt":"","more":"<div align=\"center\">\n<a href=\"/resume/index_en\">English Version </a> <br>\n<a href=\"/resume/index.pdf\">PDF Download</a>\n </div>\n\n<!-- [PDF版本下载](/resume/index.pdf) <br> -->\n\n\n\n<div align=\"center\">\n📧 19370986818@163.com | 📞 19370986818 | 📍 上海  \n<br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> <br> 🏢 8年后端开发经验  \n🎓 东华理工大学\n</div>\n\n<hr>\n<h2 id=\"🏅-核心优势\"><a href=\"#🏅-核心优势\" class=\"headerlink\" title=\"🏅 核心优势\"></a>🏅 核心优势</h2><ul>\n<li><strong>​Java全栈专家​​</strong>：8年Java开发经验，熟练运用Spring全家桶（<strong>SpringBoot&#x2F;SpringCloud&#x2F;SpringData&#x2F;Spring Security</strong>）构建高可用系统，坚持精进技术，熟悉数据结构以及设计模式</li>\n<li><strong>架构设计能力</strong>：主导设计过高并发的分布式系统，具备微服务&#x2F;高并发设计经验，落地微服务拆分与熔断限流机制</li>\n<li><strong>抽象业务系统设计能力</strong>: 能够快速且精确的对业务进行抽象，将其变为系统流程，快速进行业务开发</li>\n<li><strong>技术创新力</strong>：携程2021黑客松编程大赛冠军方案主设计师</li>\n<li><strong>行业经验</strong>：深耕金融科技领域，熟悉风控系统、支付清算核心架构</li>\n<li><strong>代码能力一流</strong>: 曾给开源社区文档提出过contribute，自己将代码作为平时的爱好，也喜好算法</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-技术图谱\"><a href=\"#🛠️-技术图谱\" class=\"headerlink\" title=\"🛠️ 技术图谱\"></a>🛠️ 技术图谱</h2><h3 id=\"后端技术栈\"><a href=\"#后端技术栈\" class=\"headerlink\" title=\"后端技术栈\"></a>后端技术栈</h3><p><strong>核心框架</strong><br><code>Spring Boot</code> <code>MyBatis Plus</code> <code>Spring JPA</code> <code>Spring Security</code> <code>Quartz</code> <code>SLF4J</code></p>\n<p><strong>架构设计</strong><br><code>Spring Cloud</code> <code>微服务</code> <code>分布式事务</code> <code>服务熔断</code> <code>Nacos</code></p>\n<p><strong>中间件</strong><br><code>Redis</code> <code>KafkaMQ</code> <code>Apollo</code></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p><code>Oracle</code> <code>MySQL</code> <code>SQL Server</code> <code>SQL优化</code> <code>读写分离</code></p>\n<h3 id=\"工程能力\"><a href=\"#工程能力\" class=\"headerlink\" title=\"工程能力\"></a>工程能力</h3><p><code>JVM调优</code> <code>CI/CD流水线</code> <code>Jekins</code> <code>Docker</code> <code>K8S</code></p>\n<h3 id=\"技术素养\"><a href=\"#技术素养\" class=\"headerlink\" title=\"技术素养\"></a>技术素养</h3><p><strong>拥有一颗保持学习的心，精读Spring Framework等英文源码注释，结合文档，可以迅速熟练上手各种陌生开源项目，熟练掌握并使用各种设计模式</strong></p>\n<hr>\n<h2 id=\"💼-职业履历\"><a href=\"#💼-职业履历\" class=\"headerlink\" title=\"💼 职业履历\"></a>💼 职业履历</h2><h3 id=\"🏦-上海花旗金融-高级开发工程师-2022-09-至今\"><a href=\"#🏦-上海花旗金融-高级开发工程师-2022-09-至今\" class=\"headerlink\" title=\"🏦 上海花旗金融 | 高级开发工程师 (2022.09 - 至今)\"></a>🏦 上海花旗金融 | 高级开发工程师 <em>(2022.09 - 至今)</em></h3><p><strong>固定收益项目组</strong> | 地产金融方向</p>\n<ul>\n<li><p>业务开发 (<code>SpringBoot SpringData-JPA SQLServer Kafka Redis K8S Jenkins(CI/CD)</code>)<br>开发并维护服务于<strong>美国市政项目</strong>（<code>CRA/LIHTC</code>）的业务管理系统。该系统提供端到端管理，涵盖<strong>符合法案企业的意向管理</strong>、<strong>Deal全周期管理</strong>（尽职调查、贷款协议谈判、议价定价、信贷审批、流程审批）、自动化开户、预算管理、资金发放、贷后抵押物管理及资产负债表管理等投融资核心环节。负责系统集成与数据治理：通过多样化技术方案实现上下游系统无缝集成；建立并执行数据核对（<code>Reconciliation Process</code>）机制，确保跨系统数据一致性，同时自动化生成各类业务报表与财务审计所需数据。</p>\n</li>\n<li><p>技术开发<br>开发公共组件<strong>历史数据对比组件</strong>，目前在花旗友军后台服务中广泛使用<br>开发<strong>公共分布式锁</strong>组件，使用多态化使其可拓展，目前也在后台服务中使用</p>\n</li>\n</ul>\n<h3 id=\"✈️-携程旅行网-高级后端工程师-2021-01-2022-09\"><a href=\"#✈️-携程旅行网-高级后端工程师-2021-01-2022-09\" class=\"headerlink\" title=\"✈️ 携程旅行网 | 高级后端工程师 (2021.01 - 2022.09)\"></a>✈️ 携程旅行网 | 高级后端工程师 <em>(2021.01 - 2022.09)</em></h3><p><strong>交通事业部</strong> | 火车票业务线</p>\n<p><strong>职责</strong><br>负责火车票系统的开发维护以及问题排查。<br>进行开发系统的相关设计以及部分代码审核。以及部分业务系统中部分前端页面的开发<br>负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；<br>与产品对接安排开发周期按时完成开发计划。<br>监测生产问题防止系统故障导致事故。</p>\n<p><strong>核心项目</strong>：   </p>\n<blockquote>\n<p>携程火车票电子客票线下票台项目 (<code>SpringBoot Mybatis MySQL Kafka Redis K8S Distributed Transactions Quartz</code>)</p>\n</blockquote>\n<ul>\n<li>我在该项目中作为主开发，负责该项目中大部分功能开发。</li>\n<li>负责对接携程内部火车票务接收C端订单并在系统中进行分发</li>\n<li>包括订单分发，供应商管理，财务自动打款，支付核销等功能的开发</li>\n<li>基本架构使用的springboot+mybatis+mysql架设，对进单以及退票系统进行过改造，全局使用reids作为分布式锁。并且数据交互接口为异步交互。缓存使用redis以及部分查找功能使用es。</li>\n<li>负责支付模块的开发。负责系统开发文档的编写。其中关键使用redis作为分布式锁，并且使用数据库乐观锁管理账号余额增减，以及日常付款等功能。</li>\n<li>负责参与需求评审，需求沟通，需求落地以及实现。</li>\n</ul>\n<h3 id=\"🏦-平安消费金融-Java中级工程师-2020-01-2021-01\"><a href=\"#🏦-平安消费金融-Java中级工程师-2020-01-2021-01\" class=\"headerlink\" title=\"🏦 平安消费金融 | Java中级工程师 (2020.01 - 2021.01)\"></a>🏦 平安消费金融 | Java中级工程师 <em>(2020.01 - 2021.01)</em></h3><p><strong>风控科技部</strong> | 金融科技方向</p>\n<p><strong>职责</strong></p>\n<ol>\n<li>负责业务系统的开发工作，包括需求分析、系统设计、编程和测试等；                                                   </li>\n<li>负责制定与业务系统相关的数据接口标准，并进行相关的系统接口开发工作；</li>\n<li>应用系统维护支持，协助运营处理生产事件，数据修改，数据采集相关工作； </li>\n<li>对其他软件工程师的代码进行审核；</li>\n<li>参与相关领域的业务需求和功能设计评审；</li>\n<li>参与开发评估，开发计划推荐和关联部门系统的事项推进；</li>\n</ol>\n<p><strong>重点项目</strong>：<br><strong>风控系统接入：</strong><br>在部分接口执行完毕后，需要对接风控系统。<br>使用aop切面编程，利用注解的方式，对指定接口进行around包裹，在返回结果后，根据参数类型判断阶段状态，来分别对接风控系统。</p>\n<p><strong>商城订单对接：</strong><br>对接平安内部的商城系统。使用springboot+redis+mysql+mybatis+cloud+apollo<br>负责对公转账模块。从需求阶段开始接受，自行设计，编写表结构，时序图<br>每日对账定时任务执行完毕后，需要执行公对公转账。<br>使用乐观锁原理，来使得转账定时任务可以与对账定时任务互不干扰。并且可以多次重试失败的转账。<br>使用redis，完成实现补处理接口的锁。使得同一笔转账不会转账两次</p>\n<p><strong>基础信息查询模块建设：</strong><br>使用的springboot+oracle+mybatis+redis+cloud+定时任务。<br>主要是对于原有基础信息下发系统的改造。基础信息下发系统主要以数据库表的形式，放在数据库中。专门由公司的一个系统集中管理所有基础数据，并且下发给别的系统使用。例如省市区信息，职业信息等。<br>将原有定时任务发送所有表给使用者的模式，改为了接口调用。<br>为了保证接口的效率，使用定时任务定时扫描所有基表改动信息，将改动信息存入reids缓存。以hset的形式存储，每一张表对应一个redis的key值。用以建立一个类似索引的机制来加快查询效率。</p>\n<p><strong>进件域改造：</strong><br>使用springboot+redis+oracle+mybatis+cloud+apollo<br>主要负责用户信息完善模块，用户信息的校验，添加。使用了内部搭建的流程控制系统来控制整个进件流程。<br>负责银行卡绑定模块，验证码校验的逻辑。主要跟平安的付款系统交互。</p>\n<p><strong>开户系统搭建：</strong><br>使用springboot+redis+oracle+mybatis+cloud+apollo<br>主要负责在对接银行使用一类户卡开通二类户的接口。跟其它系统对接参数。<br>使用了redis控制用户数据的缓存吗，使得校验和开户可以分开，使用apollo动态配置参数。</p>\n<h3 id=\"🍎-山西金石榴网络科技有限公司-Java中级工程师-2017-01-2019-12\"><a href=\"#🍎-山西金石榴网络科技有限公司-Java中级工程师-2017-01-2019-12\" class=\"headerlink\" title=\"🍎 山西金石榴网络科技有限公司 | Java中级工程师 (2017.01 - 2019.12)\"></a>🍎 山西金石榴网络科技有限公司 | Java中级工程师 <em>(2017.01 - 2019.12)</em></h3><p><strong>开发部</strong> | 项目工程<br>进行项目的后端代码开发，以及维护。将需求落地实现，按时完成相关代码开发需求</p>\n<hr>\n<h2 id=\"🏆-技术成就\"><a href=\"#🏆-技术成就\" class=\"headerlink\" title=\"🏆 技术成就\"></a>🏆 技术成就</h2><ul>\n<li>携程2021 Hackthon冠军 <a href=\"https://github.com/capa-cloud/capa-bff\">项目</a></li>\n</ul>\n<hr>\n<h2 id=\"📚-技术影响力\"><a href=\"#📚-技术影响力\" class=\"headerlink\" title=\"📚 技术影响力\"></a>📚 技术影响力</h2><ul>\n<li>开源项目贡献者（libgdx-doc）</li>\n</ul>\n<hr>\n<h2 id=\"📌-附加信息\"><a href=\"#📌-附加信息\" class=\"headerlink\" title=\"📌 附加信息\"></a>📌 附加信息</h2><ul>\n<li>英语能力：熟练阅读英文技术文档</li>\n<li>技术追求：持续研究各种架构，保持学习。对于OpenGL以及Java游戏框架<a href=\"https://libgdx.com/\">LIBGDX</a>也有一定的兴趣，正在持续学习中</li>\n</ul>\n"},{"title":"整合笔记","date":"2025-03-28T16:00:00.000Z","_content":"\n[springSecurity](spring_security)\n[maven上传踩坑](maven_upload)\n\n未完待续","source":"unify/index.md","raw":"---\ntitle: 整合笔记\ndate: 2025-03-29\n---\n\n[springSecurity](spring_security)\n[maven上传踩坑](maven_upload)\n\n未完待续","updated":"2025-05-25T12:36:07.026Z","path":"unify/index.html","comments":1,"layout":"page","_id":"cmcklki7f000c1wu198848i1m","content":"<p><a href=\"spring_security\">springSecurity</a><br><a href=\"maven_upload\">maven上传踩坑</a></p>\n<p>未完待续</p>\n","length":10,"excerpt":"","more":"<p><a href=\"spring_security\">springSecurity</a><br><a href=\"maven_upload\">maven上传踩坑</a></p>\n<p>未完待续</p>\n"},{"title":"tags","date":"2023-12-18T09:53:31.000Z","type":"tags","_content":"\ntag content zkj","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-12-18 17:53:31\ntype: tags\n---\n\ntag content zkj","updated":"2025-05-25T12:35:32.560Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmcklki7f000e1wu11zq1ebhh","content":"<p>tag content zkj</p>\n","length":3,"excerpt":"","more":"<p>tag content zkj</p>\n"},{"title":"整合笔记222","date":"2025-03-28T16:00:00.000Z","_content":"<i class=\"fal fa-bell-on\" />\n[springSecurity](spring_security)","source":"unify/index_copy.md","raw":"---\ntitle: 整合笔记222\ndate: 2025-03-29\n---\n<i class=\"fal fa-bell-on\" />\n[springSecurity](spring_security)","updated":"2025-05-25T11:55:04.837Z","path":"unify/index_copy.html","comments":1,"layout":"page","_id":"cmcklki7g000i1wu1e9l77knv","content":"<i class=\"fal fa-bell-on\" />\n[springSecurity](spring_security)","length":7,"excerpt":"","more":"<i class=\"fal fa-bell-on\" />\n[springSecurity](spring_security)"},{"title":"SpringSecurity 踩坑记录","date":"2025-03-28T16:00:00.000Z","_content":"\n## Spring security 基础使用\n整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n```\n\n然后直接运行，即可看到spring security默认的登陆页面。\n\n## Spring Security 的相关功能\n整个springsecurity的基础功能，可以归纳为三个大部分：\n1. 认证 (Authenticate)\n   认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。\n2. 鉴权 （Authorization）\n   就是在知道你是谁了后，你有哪些权限。\n3. 检查 （Check）\n   在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 ``AccessDeniedException`` 抛出\n\n## Spring Security 的组件\n\n### 过滤器链（SecurityFilterChain）\n构成Spring Security的核心功能的，是由``SecurityFilterChain``过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。\n而在``SecurityFilterChain``过滤器链内，则是有各个功能自己的组件。\n而这个 ``SecurityFilterChain``过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。\n其主要逻辑源码如下：\n```java\n\tprivate void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tFirewalledRequest firewallRequest = this.firewall.getFirewalledRequest((HttpServletRequest) request);\n\t\tHttpServletResponse firewallResponse = this.firewall.getFirewalledResponse((HttpServletResponse) response);\n        // 获取当前请求所对应的过滤器集合\n\t\tList<Filter> filters = getFilters(firewallRequest);\n\t\tif (filters == null || filters.isEmpty()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.of(() -> \"No security for \" + requestLine(firewallRequest)));\n\t\t\t}\n\t\t\tfirewallRequest.reset();\n\t\t\tthis.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);\n\t\t\treturn;\n\t\t}\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(LogMessage.of(() -> \"Securing \" + requestLine(firewallRequest)));\n\t\t}\n        // 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的\n\t\tFilterChain reset = (req, res) -> {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(LogMessage.of(() -> \"Secured \" + requestLine(firewallRequest)));\n\t\t\t}\n\t\t\t// Deactivate path stripping as we exit the security filter chain\n\t\t\tfirewallRequest.reset();\n\t\t\tchain.doFilter(req, res);\n\t\t};\n        // 此处是真实的过滤器逻辑，使用了装饰者模式\n\t\tthis.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);\n\t}\n\n```\n装饰者内部逻辑\n```java\n        public void doFilter(final ServletRequest request, final ServletResponse response) throws IOException, ServletException {\n            // 若过滤器集合遍历完毕，则回归主filter chain\n            if (this.currentPosition == this.additionalFilters.size()) {\n                this.originalChain.doFilter(request, response);\n            } else {\n                // 循环遍历所有找到的filter\n                ++this.currentPosition;\n                Filter nextFilter = (Filter)this.additionalFilters.get(this.currentPosition - 1);\n                nextFilter.doFilter(request, response, this);\n            }\n\n        }\n```\n\n### Security上下文（SecurityContext）\n使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。\n在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。\n```java\nSecurityContextHolder.getContext();\n```\n其内部是存在**threadlocal**里的\n\n### AuthenticateManager认证管理器\n这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).\n```JAVA\n// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份\n\tAuthentication authenticate(Authentication authentication) throws AuthenticationException;\n\n```\nspringsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。\n参考demo可以看springsecurity自带的``UsernamePasswordAuthenticationFilter``\n```java\n\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows AuthenticationException {\n\t\tif (this.postOnly && !request.getMethod().equals(\"POST\")) {\n\t\t\tthrow new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n\t\t}\n\t\tString username = obtainUsername(request);\n\t\tusername = (username != null) ? username.trim() : \"\";\n\t\tString password = obtainPassword(request);\n\t\tpassword = (password != null) ? password : \"\";\n\t\tUsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\n\t\t\t\tpassword);\n\t\t// Allow subclasses to set the \"details\" property\n\t\tsetDetails(request, authRequest);\n\t\treturn this.getAuthenticationManager().authenticate(authRequest);\n\t}\n\n```\n\n\n\n\n\n## 问题（坑）\n1. 获取``AuthenticationManager``问题。\n   ### 描述\n   关于如果在自己的代码中注入并使用``AuthenticationManager``，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入``AuthenticationManager``会找不到bean报错。意味着spring security并没有把一个默认的``AuthenticationManager``放到spring context中。\n   ![alt text](unify\\spring_security\\image.png)\n    此时，继续按照网上的另一个注入方法：\n    ```java\n    @Autowired\n    private AuthenticationConfiguration AuthenticationConfiguration;\n    \n    // 使用AuthenticationConfiguration 来获取 AuthenticationManager\n    @Bean\n    public AuthenticationManager authenticationManager() throws Exception {\n        return AuthenticationConfiguration.getAuthenticationManager();\n    }\n    ```\n    看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。\n    如果我们在security的config中，配置了AuthenticateProvider，如下：\n    ```java\n        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n            return http.authenticationProvider(new KAuthenticationProvider()).build();\n        }\n    ```\n\n    然后我们在自己的代码中，使用刚才注册的 ``AuthenticationManager``\n    ```java\n    \n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    public void check () {\n                UsernamePasswordAuthenticationToken auth = UsernamePasswordAuthenticationToken.unauthenticated(\"user\",\"123456\");\n        Authentication result = authenticationManager.authenticate(auth);\n\n    }\n    ```\n    会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化``AuthenticationManager``是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在``org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity``中\n    ```java\n\n\t@Bean(HTTPSECURITY_BEAN_NAME)\n\t@Scope(\"prototype\")\n\tHttpSecurity httpSecurity() throws Exception {\n\t\tLazyPasswordEncoder passwordEncoder = new LazyPasswordEncoder(this.context);\n\t\tAuthenticationManagerBuilder authenticationBuilder = new DefaultPasswordEncoderAuthenticationManagerBuilder(\n\t\t\t\tthis.objectPostProcessor, passwordEncoder);\n                // 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager\n                // 可以看到这里其实是把这个作为我们后面http的manager的parent manager了\n\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());\n\t\tauthenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());\n\t\tHttpSecurity http = new HttpSecurity(this.objectPostProcessor, authenticationBuilder, createSharedObjects());\n\t\tWebAsyncManagerIntegrationFilter webAsyncManagerIntegrationFilter = new WebAsyncManagerIntegrationFilter();\n\t\twebAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n\t\t// @formatter:off\n\t\thttp\n\t\t\t.csrf(withDefaults())\n\t\t\t.addFilter(webAsyncManagerIntegrationFilter)\n\t\t\t.exceptionHandling(withDefaults())\n\t\t\t.headers(withDefaults())\n\t\t\t.sessionManagement(withDefaults())\n\t\t\t.securityContext(withDefaults())\n\t\t\t.requestCache(withDefaults())\n\t\t\t.anonymous(withDefaults())\n\t\t\t.servletApi(withDefaults())\n\t\t\t.apply(new DefaultLoginPageConfigurer<>());\n\t\thttp.logout(withDefaults());\n\t\t// @formatter:on\n\t\tapplyCorsIfAvailable(http);\n\t\tapplyDefaultConfigurers(http);\n\t\treturn http;\n\t}\n    ```\n    这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：\n    ```java\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.\n        .authenticationProvider(new KAuthenticationProvider())\n        ...\n        .build();\n    }\n    ```\n    注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child\n    然后看ProviderManager中，有如下代码：\n    ```java\n            // 如果当前的manager没有成功获取身份信息，则去parent中继续获取\n    \t\tif (result == null && this.parent != null) {\n\t\t\t// Allow the parent to try.\n\t\t\ttry {\n\t\t\t\tparentResult = this.parent.authenticate(authentication);\n\t\t\t\tresult = parentResult;\n\t\t\t}\n\t\t\tcatch (ProviderNotFoundException ex) {\n\t\t\t\t// ignore as we will throw below if no other exception occurred prior to\n\t\t\t\t// calling parent and the parent\n\t\t\t\t// may throw ProviderNotFound even though a provider in the child already\n\t\t\t\t// handled the request\n\t\t\t}\n\t\t\tcatch (AuthenticationException ex) {\n\t\t\t\tparentException = ex;\n\t\t\t\tlastException = ex;\n\t\t\t}\n\t\t}\n\n    ```\n    可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。\n\n    到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的``AuthenticationManager``去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。\n\n    ### 复现\n    1. 关于 ``AuthenticationManager``无法直接注入,直接把下面的代码放入自己项目即可复现\n        ```java\n        @Component\n        public class SecurityIssue {\n            @Autowired\n            private AuthenticationManager authenticationManager;\n        }\n\n        ```\n    2. 无法使用自己的provider\n        * 首先定义一个自己的authentication \n        \n        ```java\n        package com.kz.web.test;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.util.Collection;\n\npublic class MyAuthentication implements Authentication {\n    private boolean authState;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return authState;\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        this.authState = isAuthenticated;\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n}\n        ```\n\n         * 然后定义自己的provider\n        ```java\npackage com.kz.web.test;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\npublic class MyAuthenticateProvider implements AuthenticationProvider {\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        // 直接给与验证通过\n        authentication.setAuthenticated(true);\n        return authentication;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        System.out.println(\"MyAuthenticateProvider.supports\");\n        return MyAuthentication.class.isAssignableFrom(authentication);\n    }\n}\n\n        ```\n\n        * 定义自己的filter\n        ```java\npackage com.kz.web.test;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\npublic class SimpleFilter extends OncePerRequestFilter {\n    AuthenticationManager authenticationManager;\n    \n    public SimpleFilter(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        System.out.println(\"SimpleFilter.doFilterInternal\");\n        MyAuthentication myAuthentication = new MyAuthentication();\n        this.authenticationManager.authenticate(myAuthentication);\n        filterChain.doFilter(request, response);\n    }\n}\n        ```\n\n        * 定义自己的config\n        ```java\n        package com.kz.web.test;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\n\n@Configuration\npublic class SimpleConfig {\n    @Autowired\n    private AuthenticationConfiguration authenticationConfiguration;\n\n    @Bean\n    public AuthenticationManager manager() throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n\n    @Bean\n    @Order(0)\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(\"/login\").permitAll() // 登录页放行\n                        .requestMatchers(\"/public/**\", \"/error\").permitAll() // 明确放行登录页和公共路径\n                        .requestMatchers(\"/admin/**\").hasAuthority(\"admin\")    // 需要 ADMIN 角色\n                        .anyRequest().authenticated()                     // 其他所有路径需要认证\n                )\n                .anonymous(anon -> anon\n                        .principal(\"anonymousUser\") // 匿名用户\n                )\n                .formLogin(form ->\n                        form.disable()\n                )\n                .addFilterAfter(new SimpleFilter(manager()), LogoutFilter.class)\n                .authenticationProvider(new MyAuthenticateProvider())\n                .logout(logout -> logout\n                        .logoutUrl(\"/logout\")          // 登出URL\n                        .logoutSuccessUrl(\"/login?logout\") // 登出成功后跳转\n                        .permitAll()\n                );\n        return http.build();\n    }\n}\n\n        ```\n\n        运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看\n","source":"unify/spring_security/index.md","raw":"---\ntitle: SpringSecurity 踩坑记录\ndate: 2025-03-29\n---\n\n## Spring security 基础使用\n整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n```\n\n然后直接运行，即可看到spring security默认的登陆页面。\n\n## Spring Security 的相关功能\n整个springsecurity的基础功能，可以归纳为三个大部分：\n1. 认证 (Authenticate)\n   认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。\n2. 鉴权 （Authorization）\n   就是在知道你是谁了后，你有哪些权限。\n3. 检查 （Check）\n   在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 ``AccessDeniedException`` 抛出\n\n## Spring Security 的组件\n\n### 过滤器链（SecurityFilterChain）\n构成Spring Security的核心功能的，是由``SecurityFilterChain``过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。\n而在``SecurityFilterChain``过滤器链内，则是有各个功能自己的组件。\n而这个 ``SecurityFilterChain``过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。\n其主要逻辑源码如下：\n```java\n\tprivate void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tFirewalledRequest firewallRequest = this.firewall.getFirewalledRequest((HttpServletRequest) request);\n\t\tHttpServletResponse firewallResponse = this.firewall.getFirewalledResponse((HttpServletResponse) response);\n        // 获取当前请求所对应的过滤器集合\n\t\tList<Filter> filters = getFilters(firewallRequest);\n\t\tif (filters == null || filters.isEmpty()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.of(() -> \"No security for \" + requestLine(firewallRequest)));\n\t\t\t}\n\t\t\tfirewallRequest.reset();\n\t\t\tthis.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);\n\t\t\treturn;\n\t\t}\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(LogMessage.of(() -> \"Securing \" + requestLine(firewallRequest)));\n\t\t}\n        // 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的\n\t\tFilterChain reset = (req, res) -> {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(LogMessage.of(() -> \"Secured \" + requestLine(firewallRequest)));\n\t\t\t}\n\t\t\t// Deactivate path stripping as we exit the security filter chain\n\t\t\tfirewallRequest.reset();\n\t\t\tchain.doFilter(req, res);\n\t\t};\n        // 此处是真实的过滤器逻辑，使用了装饰者模式\n\t\tthis.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);\n\t}\n\n```\n装饰者内部逻辑\n```java\n        public void doFilter(final ServletRequest request, final ServletResponse response) throws IOException, ServletException {\n            // 若过滤器集合遍历完毕，则回归主filter chain\n            if (this.currentPosition == this.additionalFilters.size()) {\n                this.originalChain.doFilter(request, response);\n            } else {\n                // 循环遍历所有找到的filter\n                ++this.currentPosition;\n                Filter nextFilter = (Filter)this.additionalFilters.get(this.currentPosition - 1);\n                nextFilter.doFilter(request, response, this);\n            }\n\n        }\n```\n\n### Security上下文（SecurityContext）\n使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。\n在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。\n```java\nSecurityContextHolder.getContext();\n```\n其内部是存在**threadlocal**里的\n\n### AuthenticateManager认证管理器\n这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).\n```JAVA\n// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份\n\tAuthentication authenticate(Authentication authentication) throws AuthenticationException;\n\n```\nspringsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。\n参考demo可以看springsecurity自带的``UsernamePasswordAuthenticationFilter``\n```java\n\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows AuthenticationException {\n\t\tif (this.postOnly && !request.getMethod().equals(\"POST\")) {\n\t\t\tthrow new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n\t\t}\n\t\tString username = obtainUsername(request);\n\t\tusername = (username != null) ? username.trim() : \"\";\n\t\tString password = obtainPassword(request);\n\t\tpassword = (password != null) ? password : \"\";\n\t\tUsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\n\t\t\t\tpassword);\n\t\t// Allow subclasses to set the \"details\" property\n\t\tsetDetails(request, authRequest);\n\t\treturn this.getAuthenticationManager().authenticate(authRequest);\n\t}\n\n```\n\n\n\n\n\n## 问题（坑）\n1. 获取``AuthenticationManager``问题。\n   ### 描述\n   关于如果在自己的代码中注入并使用``AuthenticationManager``，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入``AuthenticationManager``会找不到bean报错。意味着spring security并没有把一个默认的``AuthenticationManager``放到spring context中。\n   ![alt text](unify\\spring_security\\image.png)\n    此时，继续按照网上的另一个注入方法：\n    ```java\n    @Autowired\n    private AuthenticationConfiguration AuthenticationConfiguration;\n    \n    // 使用AuthenticationConfiguration 来获取 AuthenticationManager\n    @Bean\n    public AuthenticationManager authenticationManager() throws Exception {\n        return AuthenticationConfiguration.getAuthenticationManager();\n    }\n    ```\n    看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。\n    如果我们在security的config中，配置了AuthenticateProvider，如下：\n    ```java\n        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n            return http.authenticationProvider(new KAuthenticationProvider()).build();\n        }\n    ```\n\n    然后我们在自己的代码中，使用刚才注册的 ``AuthenticationManager``\n    ```java\n    \n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    public void check () {\n                UsernamePasswordAuthenticationToken auth = UsernamePasswordAuthenticationToken.unauthenticated(\"user\",\"123456\");\n        Authentication result = authenticationManager.authenticate(auth);\n\n    }\n    ```\n    会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化``AuthenticationManager``是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在``org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity``中\n    ```java\n\n\t@Bean(HTTPSECURITY_BEAN_NAME)\n\t@Scope(\"prototype\")\n\tHttpSecurity httpSecurity() throws Exception {\n\t\tLazyPasswordEncoder passwordEncoder = new LazyPasswordEncoder(this.context);\n\t\tAuthenticationManagerBuilder authenticationBuilder = new DefaultPasswordEncoderAuthenticationManagerBuilder(\n\t\t\t\tthis.objectPostProcessor, passwordEncoder);\n                // 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager\n                // 可以看到这里其实是把这个作为我们后面http的manager的parent manager了\n\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());\n\t\tauthenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());\n\t\tHttpSecurity http = new HttpSecurity(this.objectPostProcessor, authenticationBuilder, createSharedObjects());\n\t\tWebAsyncManagerIntegrationFilter webAsyncManagerIntegrationFilter = new WebAsyncManagerIntegrationFilter();\n\t\twebAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n\t\t// @formatter:off\n\t\thttp\n\t\t\t.csrf(withDefaults())\n\t\t\t.addFilter(webAsyncManagerIntegrationFilter)\n\t\t\t.exceptionHandling(withDefaults())\n\t\t\t.headers(withDefaults())\n\t\t\t.sessionManagement(withDefaults())\n\t\t\t.securityContext(withDefaults())\n\t\t\t.requestCache(withDefaults())\n\t\t\t.anonymous(withDefaults())\n\t\t\t.servletApi(withDefaults())\n\t\t\t.apply(new DefaultLoginPageConfigurer<>());\n\t\thttp.logout(withDefaults());\n\t\t// @formatter:on\n\t\tapplyCorsIfAvailable(http);\n\t\tapplyDefaultConfigurers(http);\n\t\treturn http;\n\t}\n    ```\n    这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：\n    ```java\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.\n        .authenticationProvider(new KAuthenticationProvider())\n        ...\n        .build();\n    }\n    ```\n    注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child\n    然后看ProviderManager中，有如下代码：\n    ```java\n            // 如果当前的manager没有成功获取身份信息，则去parent中继续获取\n    \t\tif (result == null && this.parent != null) {\n\t\t\t// Allow the parent to try.\n\t\t\ttry {\n\t\t\t\tparentResult = this.parent.authenticate(authentication);\n\t\t\t\tresult = parentResult;\n\t\t\t}\n\t\t\tcatch (ProviderNotFoundException ex) {\n\t\t\t\t// ignore as we will throw below if no other exception occurred prior to\n\t\t\t\t// calling parent and the parent\n\t\t\t\t// may throw ProviderNotFound even though a provider in the child already\n\t\t\t\t// handled the request\n\t\t\t}\n\t\t\tcatch (AuthenticationException ex) {\n\t\t\t\tparentException = ex;\n\t\t\t\tlastException = ex;\n\t\t\t}\n\t\t}\n\n    ```\n    可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。\n\n    到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的``AuthenticationManager``去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。\n\n    ### 复现\n    1. 关于 ``AuthenticationManager``无法直接注入,直接把下面的代码放入自己项目即可复现\n        ```java\n        @Component\n        public class SecurityIssue {\n            @Autowired\n            private AuthenticationManager authenticationManager;\n        }\n\n        ```\n    2. 无法使用自己的provider\n        * 首先定义一个自己的authentication \n        \n        ```java\n        package com.kz.web.test;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.util.Collection;\n\npublic class MyAuthentication implements Authentication {\n    private boolean authState;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return authState;\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        this.authState = isAuthenticated;\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n}\n        ```\n\n         * 然后定义自己的provider\n        ```java\npackage com.kz.web.test;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\npublic class MyAuthenticateProvider implements AuthenticationProvider {\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        // 直接给与验证通过\n        authentication.setAuthenticated(true);\n        return authentication;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        System.out.println(\"MyAuthenticateProvider.supports\");\n        return MyAuthentication.class.isAssignableFrom(authentication);\n    }\n}\n\n        ```\n\n        * 定义自己的filter\n        ```java\npackage com.kz.web.test;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\npublic class SimpleFilter extends OncePerRequestFilter {\n    AuthenticationManager authenticationManager;\n    \n    public SimpleFilter(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        System.out.println(\"SimpleFilter.doFilterInternal\");\n        MyAuthentication myAuthentication = new MyAuthentication();\n        this.authenticationManager.authenticate(myAuthentication);\n        filterChain.doFilter(request, response);\n    }\n}\n        ```\n\n        * 定义自己的config\n        ```java\n        package com.kz.web.test;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\n\n@Configuration\npublic class SimpleConfig {\n    @Autowired\n    private AuthenticationConfiguration authenticationConfiguration;\n\n    @Bean\n    public AuthenticationManager manager() throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n\n    @Bean\n    @Order(0)\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(\"/login\").permitAll() // 登录页放行\n                        .requestMatchers(\"/public/**\", \"/error\").permitAll() // 明确放行登录页和公共路径\n                        .requestMatchers(\"/admin/**\").hasAuthority(\"admin\")    // 需要 ADMIN 角色\n                        .anyRequest().authenticated()                     // 其他所有路径需要认证\n                )\n                .anonymous(anon -> anon\n                        .principal(\"anonymousUser\") // 匿名用户\n                )\n                .formLogin(form ->\n                        form.disable()\n                )\n                .addFilterAfter(new SimpleFilter(manager()), LogoutFilter.class)\n                .authenticationProvider(new MyAuthenticateProvider())\n                .logout(logout -> logout\n                        .logoutUrl(\"/logout\")          // 登出URL\n                        .logoutSuccessUrl(\"/login?logout\") // 登出成功后跳转\n                        .permitAll()\n                );\n        return http.build();\n    }\n}\n\n        ```\n\n        运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看\n","updated":"2025-05-25T11:55:04.841Z","path":"unify/spring_security/index.html","comments":1,"layout":"page","_id":"cmcklki7h000k1wu19ylgftag","content":"<h2 id=\"Spring-security-基础使用\"><a href=\"#Spring-security-基础使用\" class=\"headerlink\" title=\"Spring security 基础使用\"></a>Spring security 基础使用</h2><p>整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后直接运行，即可看到spring security默认的登陆页面。</p>\n<h2 id=\"Spring-Security-的相关功能\"><a href=\"#Spring-Security-的相关功能\" class=\"headerlink\" title=\"Spring Security 的相关功能\"></a>Spring Security 的相关功能</h2><p>整个springsecurity的基础功能，可以归纳为三个大部分：</p>\n<ol>\n<li>认证 (Authenticate)<br>认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。</li>\n<li>鉴权 （Authorization）<br>就是在知道你是谁了后，你有哪些权限。</li>\n<li>检查 （Check）<br>在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 <code>AccessDeniedException</code> 抛出</li>\n</ol>\n<h2 id=\"Spring-Security-的组件\"><a href=\"#Spring-Security-的组件\" class=\"headerlink\" title=\"Spring Security 的组件\"></a>Spring Security 的组件</h2><h3 id=\"过滤器链（SecurityFilterChain）\"><a href=\"#过滤器链（SecurityFilterChain）\" class=\"headerlink\" title=\"过滤器链（SecurityFilterChain）\"></a>过滤器链（SecurityFilterChain）</h3><p>构成Spring Security的核心功能的，是由<code>SecurityFilterChain</code>过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。<br>而在<code>SecurityFilterChain</code>过滤器链内，则是有各个功能自己的组件。<br>而这个 <code>SecurityFilterChain</code>过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。<br>其主要逻辑源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">\t<span class=\"type\">FirewalledRequest</span> <span class=\"variable\">firewallRequest</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledRequest((HttpServletRequest) request);</span><br><span class=\"line\">\t<span class=\"type\">HttpServletResponse</span> <span class=\"variable\">firewallResponse</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledResponse((HttpServletResponse) response);</span><br><span class=\"line\">       <span class=\"comment\">// 获取当前请求所对应的过滤器集合</span></span><br><span class=\"line\">\tList&lt;Filter&gt; filters = getFilters(firewallRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (filters == <span class=\"literal\">null</span> || filters.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(LogMessage.of(() -&gt; <span class=\"string\">&quot;No security for &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirewallRequest.reset();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Securing &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">// 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的</span></span><br><span class=\"line\">\t<span class=\"type\">FilterChain</span> <span class=\"variable\">reset</span> <span class=\"operator\">=</span> (req, res) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Secured &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Deactivate path stripping as we exit the security filter chain</span></span><br><span class=\"line\">\t\tfirewallRequest.reset();</span><br><span class=\"line\">\t\tchain.doFilter(req, res);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">       <span class=\"comment\">// 此处是真实的过滤器逻辑，使用了装饰者模式</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>装饰者内部逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若过滤器集合遍历完毕，则回归主filter chain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.currentPosition == <span class=\"built_in\">this</span>.additionalFilters.size()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originalChain.doFilter(request, response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环遍历所有找到的filter</span></span><br><span class=\"line\">        ++<span class=\"built_in\">this</span>.currentPosition;</span><br><span class=\"line\">        <span class=\"type\">Filter</span> <span class=\"variable\">nextFilter</span> <span class=\"operator\">=</span> (Filter)<span class=\"built_in\">this</span>.additionalFilters.get(<span class=\"built_in\">this</span>.currentPosition - <span class=\"number\">1</span>);</span><br><span class=\"line\">        nextFilter.doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Security上下文（SecurityContext）\"><a href=\"#Security上下文（SecurityContext）\" class=\"headerlink\" title=\"Security上下文（SecurityContext）\"></a>Security上下文（SecurityContext）</h3><p>使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。<br>在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityContextHolder.getContext();</span><br></pre></td></tr></table></figure>\n<p>其内部是存在<strong>threadlocal</strong>里的</p>\n<h3 id=\"AuthenticateManager认证管理器\"><a href=\"#AuthenticateManager认证管理器\" class=\"headerlink\" title=\"AuthenticateManager认证管理器\"></a>AuthenticateManager认证管理器</h3><p>这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份</span></span><br><span class=\"line\">\tAuthentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>springsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。<br>参考demo可以看springsecurity自带的<code>UsernamePasswordAuthenticationFilter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Authentication <span class=\"title function_\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class=\"string\">&quot;POST&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationServiceException</span>(<span class=\"string\">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> obtainUsername(request);</span><br><span class=\"line\">\tusername = (username != <span class=\"literal\">null</span>) ? username.trim() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> obtainPassword(request);</span><br><span class=\"line\">\tpassword = (password != <span class=\"literal\">null</span>) ? password : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authRequest</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class=\"line\">\t\t\tpassword);</span><br><span class=\"line\">\t<span class=\"comment\">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class=\"line\">\tsetDetails(request, authRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题（坑）\"><a href=\"#问题（坑）\" class=\"headerlink\" title=\"问题（坑）\"></a>问题（坑）</h2><ol>\n<li><p>获取<code>AuthenticationManager</code>问题。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>关于如果在自己的代码中注入并使用<code>AuthenticationManager</code>，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入<code>AuthenticationManager</code>会找不到bean报错。意味着spring security并没有把一个默认的<code>AuthenticationManager</code>放到spring context中。<br><img src=\"/unify%5Cspring_security%5Cimage.png\" alt=\"alt text\"><br> 此时，继续按照网上的另一个注入方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationConfiguration AuthenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用AuthenticationConfiguration 来获取 AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AuthenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。<br> 如果我们在security的config中，配置了AuthenticateProvider，如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http.authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>()).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后我们在自己的代码中，使用刚才注册的 <code>AuthenticationManager</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">check</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Authentication</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> authenticationManager.authenticate(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化<code>AuthenticationManager</code>是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在<code>org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean(HTTPSECURITY_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\">HttpSecurity <span class=\"title function_\">httpSecurity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">LazyPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LazyPasswordEncoder</span>(<span class=\"built_in\">this</span>.context);</span><br><span class=\"line\">\t<span class=\"type\">AuthenticationManagerBuilder</span> <span class=\"variable\">authenticationBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.objectPostProcessor, passwordEncoder);</span><br><span class=\"line\">               <span class=\"comment\">// 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager</span></span><br><span class=\"line\">               <span class=\"comment\">// 可以看到这里其实是把这个作为我们后面http的manager的parent manager了</span></span><br><span class=\"line\">\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());</span><br><span class=\"line\">\tauthenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());</span><br><span class=\"line\">\t<span class=\"type\">HttpSecurity</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSecurity</span>(<span class=\"built_in\">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());</span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManagerIntegrationFilter</span> <span class=\"variable\">webAsyncManagerIntegrationFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebAsyncManagerIntegrationFilter</span>();</span><br><span class=\"line\">\twebAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(<span class=\"built_in\">this</span>.securityContextHolderStrategy);</span><br><span class=\"line\">\t<span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">\thttp</span><br><span class=\"line\">\t\t.csrf(withDefaults())</span><br><span class=\"line\">\t\t.addFilter(webAsyncManagerIntegrationFilter)</span><br><span class=\"line\">\t\t.exceptionHandling(withDefaults())</span><br><span class=\"line\">\t\t.headers(withDefaults())</span><br><span class=\"line\">\t\t.sessionManagement(withDefaults())</span><br><span class=\"line\">\t\t.securityContext(withDefaults())</span><br><span class=\"line\">\t\t.requestCache(withDefaults())</span><br><span class=\"line\">\t\t.anonymous(withDefaults())</span><br><span class=\"line\">\t\t.servletApi(withDefaults())</span><br><span class=\"line\">\t\t.apply(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultLoginPageConfigurer</span>&lt;&gt;());</span><br><span class=\"line\">\thttp.logout(withDefaults());</span><br><span class=\"line\">\t<span class=\"comment\">// @formatter:on</span></span><br><span class=\"line\">\tapplyCorsIfAvailable(http);</span><br><span class=\"line\">\tapplyDefaultConfigurers(http);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> http;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.</span><br><span class=\"line\">    .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>())</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child<br> 然后看ProviderManager中，有如下代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"comment\">// 如果当前的manager没有成功获取身份信息，则去parent中继续获取</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow the parent to try.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tparentResult = <span class=\"built_in\">this</span>.parent.authenticate(authentication);</span><br><span class=\"line\">\t\tresult = parentResult;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ProviderNotFoundException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// calling parent and the parent</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// handled the request</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (AuthenticationException ex) &#123;</span><br><span class=\"line\">\t\tparentException = ex;</span><br><span class=\"line\">\t\tlastException = ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。</p>\n<p> 到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的<code>AuthenticationManager</code>去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。</p>\n<h3 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h3><ol>\n<li><p>关于 <code>AuthenticationManager</code>无法直接注入,直接把下面的代码放入自己项目即可复现</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityIssue</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>无法使用自己的provider</p>\n<ul>\n<li>首先定义一个自己的authentication</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthentication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Authentication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> authState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getCredentials</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getDetails</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authState = isAuthenticated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后定义自己的provider</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticateProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接给与验证通过</span></span><br><span class=\"line\">        authentication.setAuthenticated(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyAuthenticateProvider.supports&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyAuthentication.class.isAssignableFrom(authentication);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的filter</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    AuthenticationManager authenticationManager;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleFilter</span><span class=\"params\">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager = authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SimpleFilter.doFilterInternal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAuthentication</span> <span class=\"variable\">myAuthentication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthentication</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager.authenticate(myAuthentication);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的config</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration authenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">manager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Order(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/login&quot;</span>).permitAll() <span class=\"comment\">// 登录页放行</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/public/**&quot;</span>, <span class=\"string\">&quot;/error&quot;</span>).permitAll() <span class=\"comment\">// 明确放行登录页和公共路径</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/admin/**&quot;</span>).hasAuthority(<span class=\"string\">&quot;admin&quot;</span>)    <span class=\"comment\">// 需要 ADMIN 角色</span></span><br><span class=\"line\">                        .anyRequest().authenticated()                     <span class=\"comment\">// 其他所有路径需要认证</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .anonymous(anon -&gt; anon</span><br><span class=\"line\">                        .principal(<span class=\"string\">&quot;anonymousUser&quot;</span>) <span class=\"comment\">// 匿名用户</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .formLogin(form -&gt;</span><br><span class=\"line\">                        form.disable()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .addFilterAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFilter</span>(manager()), LogoutFilter.class)</span><br><span class=\"line\">                .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthenticateProvider</span>())</span><br><span class=\"line\">                .logout(logout -&gt; logout</span><br><span class=\"line\">                        .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>)          <span class=\"comment\">// 登出URL</span></span><br><span class=\"line\">                        .logoutSuccessUrl(<span class=\"string\">&quot;/login?logout&quot;</span>) <span class=\"comment\">// 登出成功后跳转</span></span><br><span class=\"line\">                        .permitAll()</span><br><span class=\"line\">                );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看</p>\n</li>\n</ol>\n</li>\n</ol>\n","length":2002,"excerpt":"","more":"<h2 id=\"Spring-security-基础使用\"><a href=\"#Spring-security-基础使用\" class=\"headerlink\" title=\"Spring security 基础使用\"></a>Spring security 基础使用</h2><p>整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后直接运行，即可看到spring security默认的登陆页面。</p>\n<h2 id=\"Spring-Security-的相关功能\"><a href=\"#Spring-Security-的相关功能\" class=\"headerlink\" title=\"Spring Security 的相关功能\"></a>Spring Security 的相关功能</h2><p>整个springsecurity的基础功能，可以归纳为三个大部分：</p>\n<ol>\n<li>认证 (Authenticate)<br>认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。</li>\n<li>鉴权 （Authorization）<br>就是在知道你是谁了后，你有哪些权限。</li>\n<li>检查 （Check）<br>在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 <code>AccessDeniedException</code> 抛出</li>\n</ol>\n<h2 id=\"Spring-Security-的组件\"><a href=\"#Spring-Security-的组件\" class=\"headerlink\" title=\"Spring Security 的组件\"></a>Spring Security 的组件</h2><h3 id=\"过滤器链（SecurityFilterChain）\"><a href=\"#过滤器链（SecurityFilterChain）\" class=\"headerlink\" title=\"过滤器链（SecurityFilterChain）\"></a>过滤器链（SecurityFilterChain）</h3><p>构成Spring Security的核心功能的，是由<code>SecurityFilterChain</code>过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。<br>而在<code>SecurityFilterChain</code>过滤器链内，则是有各个功能自己的组件。<br>而这个 <code>SecurityFilterChain</code>过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。<br>其主要逻辑源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">\t<span class=\"type\">FirewalledRequest</span> <span class=\"variable\">firewallRequest</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledRequest((HttpServletRequest) request);</span><br><span class=\"line\">\t<span class=\"type\">HttpServletResponse</span> <span class=\"variable\">firewallResponse</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledResponse((HttpServletResponse) response);</span><br><span class=\"line\">       <span class=\"comment\">// 获取当前请求所对应的过滤器集合</span></span><br><span class=\"line\">\tList&lt;Filter&gt; filters = getFilters(firewallRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (filters == <span class=\"literal\">null</span> || filters.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(LogMessage.of(() -&gt; <span class=\"string\">&quot;No security for &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirewallRequest.reset();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Securing &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">// 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的</span></span><br><span class=\"line\">\t<span class=\"type\">FilterChain</span> <span class=\"variable\">reset</span> <span class=\"operator\">=</span> (req, res) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Secured &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Deactivate path stripping as we exit the security filter chain</span></span><br><span class=\"line\">\t\tfirewallRequest.reset();</span><br><span class=\"line\">\t\tchain.doFilter(req, res);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">       <span class=\"comment\">// 此处是真实的过滤器逻辑，使用了装饰者模式</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>装饰者内部逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若过滤器集合遍历完毕，则回归主filter chain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.currentPosition == <span class=\"built_in\">this</span>.additionalFilters.size()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originalChain.doFilter(request, response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环遍历所有找到的filter</span></span><br><span class=\"line\">        ++<span class=\"built_in\">this</span>.currentPosition;</span><br><span class=\"line\">        <span class=\"type\">Filter</span> <span class=\"variable\">nextFilter</span> <span class=\"operator\">=</span> (Filter)<span class=\"built_in\">this</span>.additionalFilters.get(<span class=\"built_in\">this</span>.currentPosition - <span class=\"number\">1</span>);</span><br><span class=\"line\">        nextFilter.doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Security上下文（SecurityContext）\"><a href=\"#Security上下文（SecurityContext）\" class=\"headerlink\" title=\"Security上下文（SecurityContext）\"></a>Security上下文（SecurityContext）</h3><p>使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。<br>在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityContextHolder.getContext();</span><br></pre></td></tr></table></figure>\n<p>其内部是存在<strong>threadlocal</strong>里的</p>\n<h3 id=\"AuthenticateManager认证管理器\"><a href=\"#AuthenticateManager认证管理器\" class=\"headerlink\" title=\"AuthenticateManager认证管理器\"></a>AuthenticateManager认证管理器</h3><p>这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份</span></span><br><span class=\"line\">\tAuthentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>springsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。<br>参考demo可以看springsecurity自带的<code>UsernamePasswordAuthenticationFilter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Authentication <span class=\"title function_\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class=\"string\">&quot;POST&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationServiceException</span>(<span class=\"string\">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> obtainUsername(request);</span><br><span class=\"line\">\tusername = (username != <span class=\"literal\">null</span>) ? username.trim() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> obtainPassword(request);</span><br><span class=\"line\">\tpassword = (password != <span class=\"literal\">null</span>) ? password : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authRequest</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class=\"line\">\t\t\tpassword);</span><br><span class=\"line\">\t<span class=\"comment\">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class=\"line\">\tsetDetails(request, authRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题（坑）\"><a href=\"#问题（坑）\" class=\"headerlink\" title=\"问题（坑）\"></a>问题（坑）</h2><ol>\n<li><p>获取<code>AuthenticationManager</code>问题。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>关于如果在自己的代码中注入并使用<code>AuthenticationManager</code>，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入<code>AuthenticationManager</code>会找不到bean报错。意味着spring security并没有把一个默认的<code>AuthenticationManager</code>放到spring context中。<br><img src=\"/unify%5Cspring_security%5Cimage.png\" alt=\"alt text\"><br> 此时，继续按照网上的另一个注入方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationConfiguration AuthenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用AuthenticationConfiguration 来获取 AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AuthenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。<br> 如果我们在security的config中，配置了AuthenticateProvider，如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http.authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>()).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后我们在自己的代码中，使用刚才注册的 <code>AuthenticationManager</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">check</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Authentication</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> authenticationManager.authenticate(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化<code>AuthenticationManager</code>是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在<code>org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean(HTTPSECURITY_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\">HttpSecurity <span class=\"title function_\">httpSecurity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">LazyPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LazyPasswordEncoder</span>(<span class=\"built_in\">this</span>.context);</span><br><span class=\"line\">\t<span class=\"type\">AuthenticationManagerBuilder</span> <span class=\"variable\">authenticationBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.objectPostProcessor, passwordEncoder);</span><br><span class=\"line\">               <span class=\"comment\">// 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager</span></span><br><span class=\"line\">               <span class=\"comment\">// 可以看到这里其实是把这个作为我们后面http的manager的parent manager了</span></span><br><span class=\"line\">\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());</span><br><span class=\"line\">\tauthenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());</span><br><span class=\"line\">\t<span class=\"type\">HttpSecurity</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSecurity</span>(<span class=\"built_in\">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());</span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManagerIntegrationFilter</span> <span class=\"variable\">webAsyncManagerIntegrationFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebAsyncManagerIntegrationFilter</span>();</span><br><span class=\"line\">\twebAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(<span class=\"built_in\">this</span>.securityContextHolderStrategy);</span><br><span class=\"line\">\t<span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">\thttp</span><br><span class=\"line\">\t\t.csrf(withDefaults())</span><br><span class=\"line\">\t\t.addFilter(webAsyncManagerIntegrationFilter)</span><br><span class=\"line\">\t\t.exceptionHandling(withDefaults())</span><br><span class=\"line\">\t\t.headers(withDefaults())</span><br><span class=\"line\">\t\t.sessionManagement(withDefaults())</span><br><span class=\"line\">\t\t.securityContext(withDefaults())</span><br><span class=\"line\">\t\t.requestCache(withDefaults())</span><br><span class=\"line\">\t\t.anonymous(withDefaults())</span><br><span class=\"line\">\t\t.servletApi(withDefaults())</span><br><span class=\"line\">\t\t.apply(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultLoginPageConfigurer</span>&lt;&gt;());</span><br><span class=\"line\">\thttp.logout(withDefaults());</span><br><span class=\"line\">\t<span class=\"comment\">// @formatter:on</span></span><br><span class=\"line\">\tapplyCorsIfAvailable(http);</span><br><span class=\"line\">\tapplyDefaultConfigurers(http);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> http;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.</span><br><span class=\"line\">    .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>())</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child<br> 然后看ProviderManager中，有如下代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"comment\">// 如果当前的manager没有成功获取身份信息，则去parent中继续获取</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow the parent to try.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tparentResult = <span class=\"built_in\">this</span>.parent.authenticate(authentication);</span><br><span class=\"line\">\t\tresult = parentResult;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ProviderNotFoundException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// calling parent and the parent</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// handled the request</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (AuthenticationException ex) &#123;</span><br><span class=\"line\">\t\tparentException = ex;</span><br><span class=\"line\">\t\tlastException = ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。</p>\n<p> 到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的<code>AuthenticationManager</code>去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。</p>\n<h3 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h3><ol>\n<li><p>关于 <code>AuthenticationManager</code>无法直接注入,直接把下面的代码放入自己项目即可复现</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityIssue</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>无法使用自己的provider</p>\n<ul>\n<li>首先定义一个自己的authentication</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthentication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Authentication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> authState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getCredentials</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getDetails</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authState = isAuthenticated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后定义自己的provider</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticateProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接给与验证通过</span></span><br><span class=\"line\">        authentication.setAuthenticated(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyAuthenticateProvider.supports&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyAuthentication.class.isAssignableFrom(authentication);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的filter</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    AuthenticationManager authenticationManager;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleFilter</span><span class=\"params\">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager = authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SimpleFilter.doFilterInternal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAuthentication</span> <span class=\"variable\">myAuthentication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthentication</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager.authenticate(myAuthentication);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的config</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration authenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">manager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Order(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/login&quot;</span>).permitAll() <span class=\"comment\">// 登录页放行</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/public/**&quot;</span>, <span class=\"string\">&quot;/error&quot;</span>).permitAll() <span class=\"comment\">// 明确放行登录页和公共路径</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/admin/**&quot;</span>).hasAuthority(<span class=\"string\">&quot;admin&quot;</span>)    <span class=\"comment\">// 需要 ADMIN 角色</span></span><br><span class=\"line\">                        .anyRequest().authenticated()                     <span class=\"comment\">// 其他所有路径需要认证</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .anonymous(anon -&gt; anon</span><br><span class=\"line\">                        .principal(<span class=\"string\">&quot;anonymousUser&quot;</span>) <span class=\"comment\">// 匿名用户</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .formLogin(form -&gt;</span><br><span class=\"line\">                        form.disable()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .addFilterAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFilter</span>(manager()), LogoutFilter.class)</span><br><span class=\"line\">                .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthenticateProvider</span>())</span><br><span class=\"line\">                .logout(logout -&gt; logout</span><br><span class=\"line\">                        .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>)          <span class=\"comment\">// 登出URL</span></span><br><span class=\"line\">                        .logoutSuccessUrl(<span class=\"string\">&quot;/login?logout&quot;</span>) <span class=\"comment\">// 登出成功后跳转</span></span><br><span class=\"line\">                        .permitAll()</span><br><span class=\"line\">                );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看</p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"向Maven仓库发布自己的项目所遇到的一些坑","date":"2025-03-29T16:00:00.000Z","_content":"\n> 在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记\n\n需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。\n\n## 问题：\nmaven publish 官网：[maven](https://central.sonatype.org/)\n\n## 前提\n首先，需要登陆这个官网。可以直接用 **github** 账号，这样后面会省一些事情（namespace）\n\n\n\n### 必要准备：\n   1. 你的项目build后的jar\n   2. 你的项目build后的源码（source）jar\n   3. 你的项目的java doc\n   4. 你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述\n   5. 以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件\n   6. 将以上所有文件打包在一个zip中。文件结构需要与 groupId -> artifactId -> version 的结构相吻合\n\n### 步骤\n1. 登陆[maven官网](https://central.sonatype.org/) （建议使用github账号直登）\n2. 打开右上角个人信息里面的 **View Deploy** ![View Deploy](unify\\maven_upload\\image.png)\n3. 此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证\n   ![alt text](unify\\maven_upload\\image-1.png)\n4. 在Deployments页面，就可以看到你当前所有的deploy了\n5. 点击右上角的Publish Deployment\n   ![alt text](unify\\maven_upload\\image-2.png)\n   会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。\n6. deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了\n\n## 一些坑点\n主要坑点其实都集中在打zip包中。\n1. zip包中文件需要按照groupId -> artifactId -> version 的结构来放置。\n    比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个``com.zip``,\n\n2. 关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：\n   ```java\n    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {\n        encryptFile(\"path\");\n    }\n\n    public static void encryptFile(String fileName) throws NoSuchAlgorithmException, IOException {\n        // Encrypt file\n        MessageDigest MD5 = MessageDigest.getInstance(\"MD5\");\n        MessageDigest SHA_1 = MessageDigest.getInstance(\"SHA-1\");\n\n\n        File file = new File(fileName);\n        if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            for (File f : files) {\n                if (f.isFile()) {\n                    String name = f.getName();\n                    byte[] bytes = Files.readAllBytes(f.toPath());\n                    MD5.update(bytes);\n\n                    byte[] digest = MD5.digest();\n                    String newFileName = fileName + File.separator + \"md5\" + File.separator + name + \".md5\";\n                    String md5Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n\n                    SHA_1.update(bytes);\n                    digest = SHA_1.digest();\n                    newFileName = fileName + File.separator + \"sha1\" + File.separator + name + \".sha1\";\n                    String sha1Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n                }\n            }\n        }\n\n    }\n\n    private static String byteArrToHexStr(byte[] digest) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n\n   ```\n\n3. **最大坑点，gpg加密**\n   首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的\n   关于GPG，可以在[这里](https://gnupg.org/download/index.html#sec-1-2)下载。\n   下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令\n\n```shell\ngpg --version # 查看版本\n\ngpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）\n\ngpg --list-keys # 查看当前所有的key\n\n#加密文件\ngpg -ab myfile.java\n\n# 这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息\n\n```\n\n然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。\n至此，我们的打包工作完成，zip包中所有的东西均已准备完成。\n但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。\n因此，我们还需要进行一步操作，那就是上传我们自己的``公钥(publicKey)``\n```shell\n# 首先，查询我们密钥的公钥\ngpg --list-keys\n\n我们会得到类似下面的输出：\npub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]\n      AAA80322283FDD52B363D36E4F9B3F67BEDB9576\nuid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nsub   xxxx 2025-03-30 [E] [expires: 2027-03-30]\n\n其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。\ngpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。\n\n# 上传公钥操作：\n gpg --keyserver keyserver.ubuntu.com --send-keys ${你自己的公钥}\n\n```\n上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。\n最后，看到这个状态即表示上传成功，okkk\n![alt text](unify\\maven_upload\\image-3.png)\n","source":"unify/maven_upload/index.md","raw":"---\ntitle: 向Maven仓库发布自己的项目所遇到的一些坑\ndate: 2025-03-30\n---\n\n> 在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记\n\n需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。\n\n## 问题：\nmaven publish 官网：[maven](https://central.sonatype.org/)\n\n## 前提\n首先，需要登陆这个官网。可以直接用 **github** 账号，这样后面会省一些事情（namespace）\n\n\n\n### 必要准备：\n   1. 你的项目build后的jar\n   2. 你的项目build后的源码（source）jar\n   3. 你的项目的java doc\n   4. 你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述\n   5. 以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件\n   6. 将以上所有文件打包在一个zip中。文件结构需要与 groupId -> artifactId -> version 的结构相吻合\n\n### 步骤\n1. 登陆[maven官网](https://central.sonatype.org/) （建议使用github账号直登）\n2. 打开右上角个人信息里面的 **View Deploy** ![View Deploy](unify\\maven_upload\\image.png)\n3. 此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证\n   ![alt text](unify\\maven_upload\\image-1.png)\n4. 在Deployments页面，就可以看到你当前所有的deploy了\n5. 点击右上角的Publish Deployment\n   ![alt text](unify\\maven_upload\\image-2.png)\n   会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。\n6. deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了\n\n## 一些坑点\n主要坑点其实都集中在打zip包中。\n1. zip包中文件需要按照groupId -> artifactId -> version 的结构来放置。\n    比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个``com.zip``,\n\n2. 关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：\n   ```java\n    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {\n        encryptFile(\"path\");\n    }\n\n    public static void encryptFile(String fileName) throws NoSuchAlgorithmException, IOException {\n        // Encrypt file\n        MessageDigest MD5 = MessageDigest.getInstance(\"MD5\");\n        MessageDigest SHA_1 = MessageDigest.getInstance(\"SHA-1\");\n\n\n        File file = new File(fileName);\n        if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            for (File f : files) {\n                if (f.isFile()) {\n                    String name = f.getName();\n                    byte[] bytes = Files.readAllBytes(f.toPath());\n                    MD5.update(bytes);\n\n                    byte[] digest = MD5.digest();\n                    String newFileName = fileName + File.separator + \"md5\" + File.separator + name + \".md5\";\n                    String md5Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n\n                    SHA_1.update(bytes);\n                    digest = SHA_1.digest();\n                    newFileName = fileName + File.separator + \"sha1\" + File.separator + name + \".sha1\";\n                    String sha1Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n                }\n            }\n        }\n\n    }\n\n    private static String byteArrToHexStr(byte[] digest) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n\n   ```\n\n3. **最大坑点，gpg加密**\n   首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的\n   关于GPG，可以在[这里](https://gnupg.org/download/index.html#sec-1-2)下载。\n   下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令\n\n```shell\ngpg --version # 查看版本\n\ngpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）\n\ngpg --list-keys # 查看当前所有的key\n\n#加密文件\ngpg -ab myfile.java\n\n# 这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息\n\n```\n\n然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。\n至此，我们的打包工作完成，zip包中所有的东西均已准备完成。\n但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。\n因此，我们还需要进行一步操作，那就是上传我们自己的``公钥(publicKey)``\n```shell\n# 首先，查询我们密钥的公钥\ngpg --list-keys\n\n我们会得到类似下面的输出：\npub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]\n      AAA80322283FDD52B363D36E4F9B3F67BEDB9576\nuid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nsub   xxxx 2025-03-30 [E] [expires: 2027-03-30]\n\n其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。\ngpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。\n\n# 上传公钥操作：\n gpg --keyserver keyserver.ubuntu.com --send-keys ${你自己的公钥}\n\n```\n上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。\n最后，看到这个状态即表示上传成功，okkk\n![alt text](unify\\maven_upload\\image-3.png)\n","updated":"2025-05-25T11:55:04.840Z","path":"unify/maven_upload/index.html","comments":1,"layout":"page","_id":"cmcklki7i000o1wu1ctpc7ol3","content":"<blockquote>\n<p>在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记</p>\n</blockquote>\n<p>需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。</p>\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>maven publish 官网：<a href=\"https://central.sonatype.org/\">maven</a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>首先，需要登陆这个官网。可以直接用 <strong>github</strong> 账号，这样后面会省一些事情（namespace）</p>\n<h3 id=\"必要准备：\"><a href=\"#必要准备：\" class=\"headerlink\" title=\"必要准备：\"></a>必要准备：</h3><ol>\n<li>你的项目build后的jar</li>\n<li>你的项目build后的源码（source）jar</li>\n<li>你的项目的java doc</li>\n<li>你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述</li>\n<li>以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件</li>\n<li>将以上所有文件打包在一个zip中。文件结构需要与 groupId -&gt; artifactId -&gt; version 的结构相吻合</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>登陆<a href=\"https://central.sonatype.org/\">maven官网</a> （建议使用github账号直登）</li>\n<li>打开右上角个人信息里面的 <strong>View Deploy</strong> <img src=\"/unify%5Cmaven_upload%5Cimage.png\" alt=\"View Deploy\"></li>\n<li>此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证<br><img src=\"/unify%5Cmaven_upload%5Cimage-1.png\" alt=\"alt text\"></li>\n<li>在Deployments页面，就可以看到你当前所有的deploy了</li>\n<li>点击右上角的Publish Deployment<br><img src=\"/unify%5Cmaven_upload%5Cimage-2.png\" alt=\"alt text\"><br>会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。</li>\n<li>deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了</li>\n</ol>\n<h2 id=\"一些坑点\"><a href=\"#一些坑点\" class=\"headerlink\" title=\"一些坑点\"></a>一些坑点</h2><p>主要坑点其实都集中在打zip包中。</p>\n<ol>\n<li><p>zip包中文件需要按照groupId -&gt; artifactId -&gt; version 的结构来放置。<br> 比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个<code>com.zip</code>,</p>\n</li>\n<li><p>关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    encryptFile(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encryptFile</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt file</span></span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">MD5</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">SHA_1</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;SHA-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">        File[] files = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> f.getName();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = Files.readAllBytes(f.toPath());</span><br><span class=\"line\">                MD5.update(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] digest = MD5.digest();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">newFileName</span> <span class=\"operator\">=</span> fileName + File.separator + <span class=\"string\">&quot;md5&quot;</span> + File.separator + name + <span class=\"string\">&quot;.md5&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">md5Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\"></span><br><span class=\"line\">                SHA_1.update(bytes);</span><br><span class=\"line\">                digest = SHA_1.digest();</span><br><span class=\"line\">                newFileName = fileName + File.separator + <span class=\"string\">&quot;sha1&quot;</span> + File.separator + name + <span class=\"string\">&quot;.sha1&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">sha1Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">byteArrToHexStr</span><span class=\"params\">(<span class=\"type\">byte</span>[] digest)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">byte</span> b : digest) &#123;</span><br><span class=\"line\">        sb.append(String.format(<span class=\"string\">&quot;%02x&quot;</span>, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最大坑点，gpg加密</strong><br>首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的<br>关于GPG，可以在<a href=\"https://gnupg.org/download/index.html#sec-1-2\">这里</a>下载。<br>下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --version # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --list-keys # 查看当前所有的key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">加密文件</span></span><br><span class=\"line\">gpg -ab myfile.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。<br>至此，我们的打包工作完成，zip包中所有的东西均已准备完成。<br>但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。<br>因此，我们还需要进行一步操作，那就是上传我们自己的<code>公钥(publicKey)</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首先，查询我们密钥的公钥</span></span><br><span class=\"line\">gpg --list-keys</span><br><span class=\"line\"></span><br><span class=\"line\">我们会得到类似下面的输出：</span><br><span class=\"line\">pub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]</span><br><span class=\"line\">      AAA80322283FDD52B363D36E4F9B3F67BEDB9576</span><br><span class=\"line\">uid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">sub   xxxx 2025-03-30 [E] [expires: 2027-03-30]</span><br><span class=\"line\"></span><br><span class=\"line\">其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。</span><br><span class=\"line\">gpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传公钥操作：</span></span><br><span class=\"line\"> gpg --keyserver keyserver.ubuntu.com --send-keys $&#123;你自己的公钥&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。<br>最后，看到这个状态即表示上传成功，okkk<br><img src=\"/unify%5Cmaven_upload%5Cimage-3.png\" alt=\"alt text\"></p>\n","length":1369,"excerpt":"","more":"<blockquote>\n<p>在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记</p>\n</blockquote>\n<p>需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。</p>\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>maven publish 官网：<a href=\"https://central.sonatype.org/\">maven</a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>首先，需要登陆这个官网。可以直接用 <strong>github</strong> 账号，这样后面会省一些事情（namespace）</p>\n<h3 id=\"必要准备：\"><a href=\"#必要准备：\" class=\"headerlink\" title=\"必要准备：\"></a>必要准备：</h3><ol>\n<li>你的项目build后的jar</li>\n<li>你的项目build后的源码（source）jar</li>\n<li>你的项目的java doc</li>\n<li>你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述</li>\n<li>以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件</li>\n<li>将以上所有文件打包在一个zip中。文件结构需要与 groupId -&gt; artifactId -&gt; version 的结构相吻合</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>登陆<a href=\"https://central.sonatype.org/\">maven官网</a> （建议使用github账号直登）</li>\n<li>打开右上角个人信息里面的 <strong>View Deploy</strong> <img src=\"/unify%5Cmaven_upload%5Cimage.png\" alt=\"View Deploy\"></li>\n<li>此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证<br><img src=\"/unify%5Cmaven_upload%5Cimage-1.png\" alt=\"alt text\"></li>\n<li>在Deployments页面，就可以看到你当前所有的deploy了</li>\n<li>点击右上角的Publish Deployment<br><img src=\"/unify%5Cmaven_upload%5Cimage-2.png\" alt=\"alt text\"><br>会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。</li>\n<li>deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了</li>\n</ol>\n<h2 id=\"一些坑点\"><a href=\"#一些坑点\" class=\"headerlink\" title=\"一些坑点\"></a>一些坑点</h2><p>主要坑点其实都集中在打zip包中。</p>\n<ol>\n<li><p>zip包中文件需要按照groupId -&gt; artifactId -&gt; version 的结构来放置。<br> 比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个<code>com.zip</code>,</p>\n</li>\n<li><p>关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    encryptFile(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encryptFile</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt file</span></span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">MD5</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">SHA_1</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;SHA-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">        File[] files = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> f.getName();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = Files.readAllBytes(f.toPath());</span><br><span class=\"line\">                MD5.update(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] digest = MD5.digest();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">newFileName</span> <span class=\"operator\">=</span> fileName + File.separator + <span class=\"string\">&quot;md5&quot;</span> + File.separator + name + <span class=\"string\">&quot;.md5&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">md5Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\"></span><br><span class=\"line\">                SHA_1.update(bytes);</span><br><span class=\"line\">                digest = SHA_1.digest();</span><br><span class=\"line\">                newFileName = fileName + File.separator + <span class=\"string\">&quot;sha1&quot;</span> + File.separator + name + <span class=\"string\">&quot;.sha1&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">sha1Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">byteArrToHexStr</span><span class=\"params\">(<span class=\"type\">byte</span>[] digest)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">byte</span> b : digest) &#123;</span><br><span class=\"line\">        sb.append(String.format(<span class=\"string\">&quot;%02x&quot;</span>, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最大坑点，gpg加密</strong><br>首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的<br>关于GPG，可以在<a href=\"https://gnupg.org/download/index.html#sec-1-2\">这里</a>下载。<br>下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --version # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --list-keys # 查看当前所有的key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">加密文件</span></span><br><span class=\"line\">gpg -ab myfile.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。<br>至此，我们的打包工作完成，zip包中所有的东西均已准备完成。<br>但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。<br>因此，我们还需要进行一步操作，那就是上传我们自己的<code>公钥(publicKey)</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首先，查询我们密钥的公钥</span></span><br><span class=\"line\">gpg --list-keys</span><br><span class=\"line\"></span><br><span class=\"line\">我们会得到类似下面的输出：</span><br><span class=\"line\">pub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]</span><br><span class=\"line\">      AAA80322283FDD52B363D36E4F9B3F67BEDB9576</span><br><span class=\"line\">uid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">sub   xxxx 2025-03-30 [E] [expires: 2027-03-30]</span><br><span class=\"line\"></span><br><span class=\"line\">其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。</span><br><span class=\"line\">gpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传公钥操作：</span></span><br><span class=\"line\"> gpg --keyserver keyserver.ubuntu.com --send-keys $&#123;你自己的公钥&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。<br>最后，看到这个状态即表示上传成功，okkk<br><img src=\"/unify%5Cmaven_upload%5Cimage-3.png\" alt=\"alt text\"></p>\n"},{"title":"个人简历","_content":"\n\n[English](/resume/index_en)\n\n# 赵凯杰 | Java高级开发工程师\n\n📧 **19370986818@163.com** | 📞 **19370986818**  \n🌐 [个人主页](https://voidvvv.github.io/) | 🏠 **现居上海**  \n🎓 **东华理工大学 | 本科** | 👨‍💻 **7年工作经验**\n\n---\n\n\n\n## 🔍 核心优势\n- 全栈Java技术专家（SE/EE/Spring生态）\n- 分布式系统架构师（微服务/高并发/性能优化）\n- 携程2021黑客松编程大赛冠军\n- 复杂业务系统开发经验（金融/旅游/电商）\n\n---\n\n## 🛠️ 技术栈\n\n### 后端开发\n**精通**：  \nJava | Spring Boot | Spring Cloud | MyBatis | JVM调优 | 多线程编程  \n\n**熟练**：  \nRedis（分布式锁/缓存） | RabbitMQ | ElasticSearch | Apollo配置中心 | Oracle/MySQL（性能优化）  \n\n### 架构能力\n微服务架构（Eureka） | SOA | 分布式事务 | AOP编程 | 高并发设计  \n\n### 其他技能\n前端开发（Vue/jQuery） | 安卓开发基础 | C++基础  \n\n---\n\n## 💼 工作经历\n\n### **上海花旗金融** | 高级开发工程师 *(2022.9-至今)*  \n**花旗交易地产交易中心系统**\n  \n**Facility状态流转系统**\n\n**Banker Goal系统**\n\n**借贷信息集中管理系统**\n\n### **携程旅行网** | 高级后端工程师 *(2021.1-2022.9)*  \n**火车票电子客票系统**  \n- 主导开发分布式票务处理系统（日均订单50w+）\n- 实现功能：  \n  ✅ 基于Redis+MQ的抢票/改签系统（成功率提升40%）  \n  ✅ 财务自动对账系统（误差率<0.1%）  \n  ✅ 高并发订单分发架构（QPS 3000+）  \n- 技术亮点：  \n  🔹 分布式锁设计 | 数据库乐观锁 | 异步任务拆分  \n  🔹 SQL查询优化（响应时间降低65%）  \n\n### **平安消费金融** | Java中级工程师 *(2020.1-2021.1)*  \n**风控系统**  \n- 创新采用AOP注解实现风控拦截（代码侵入性降低90%）\n- 设计Redis索引机制提升基础数据查询效率（TPS提升8倍）\n\n**支付系统**  \n- 开发公对公转账模块（日处理金额超2亿）\n- 实现定时任务幂等控制（失败重试机制）\n\n---\n\n## 🏆 项目成就\n\n### 携程火车票系统\n- **技术架构**：SpringBoot+MyBatis+Redis+MQ+ES  \n- **核心贡献**：  \n  - 开发抢票功能：通过MQ分片+延时队列实现毫秒级响应  \n  - 支付模块：双锁机制（Redis分布式锁+数据库乐观锁）保障资金安全  \n  - [项目代码](https://github.com/reactivegroup/capa-bff)\n\n### 平安金融系统\n- **开户系统**：  \n  - 实现银行二类户开户流程（开户成功率99.8%）  \n  - Apollo动态配置实现多银行渠道切换  \n- **进件系统改造**：  \n  - 流程引擎优化（审批时效缩短60%）  \n\n---\n\n## 📌 附加信息\n- **技术影响力**：阅读JDK/Spring源码，技术博客作者\n- **语言能力**：英语CET-6（技术文档阅读编写）\n- **职业特质**：代码洁癖 | 架构思维 | 技术驱动业务","source":"resume/archive/20250609/index_bk.md","raw":"---\ntitle: 个人简历\n---\n\n\n[English](/resume/index_en)\n\n# 赵凯杰 | Java高级开发工程师\n\n📧 **19370986818@163.com** | 📞 **19370986818**  \n🌐 [个人主页](https://voidvvv.github.io/) | 🏠 **现居上海**  \n🎓 **东华理工大学 | 本科** | 👨‍💻 **7年工作经验**\n\n---\n\n\n\n## 🔍 核心优势\n- 全栈Java技术专家（SE/EE/Spring生态）\n- 分布式系统架构师（微服务/高并发/性能优化）\n- 携程2021黑客松编程大赛冠军\n- 复杂业务系统开发经验（金融/旅游/电商）\n\n---\n\n## 🛠️ 技术栈\n\n### 后端开发\n**精通**：  \nJava | Spring Boot | Spring Cloud | MyBatis | JVM调优 | 多线程编程  \n\n**熟练**：  \nRedis（分布式锁/缓存） | RabbitMQ | ElasticSearch | Apollo配置中心 | Oracle/MySQL（性能优化）  \n\n### 架构能力\n微服务架构（Eureka） | SOA | 分布式事务 | AOP编程 | 高并发设计  \n\n### 其他技能\n前端开发（Vue/jQuery） | 安卓开发基础 | C++基础  \n\n---\n\n## 💼 工作经历\n\n### **上海花旗金融** | 高级开发工程师 *(2022.9-至今)*  \n**花旗交易地产交易中心系统**\n  \n**Facility状态流转系统**\n\n**Banker Goal系统**\n\n**借贷信息集中管理系统**\n\n### **携程旅行网** | 高级后端工程师 *(2021.1-2022.9)*  \n**火车票电子客票系统**  \n- 主导开发分布式票务处理系统（日均订单50w+）\n- 实现功能：  \n  ✅ 基于Redis+MQ的抢票/改签系统（成功率提升40%）  \n  ✅ 财务自动对账系统（误差率<0.1%）  \n  ✅ 高并发订单分发架构（QPS 3000+）  \n- 技术亮点：  \n  🔹 分布式锁设计 | 数据库乐观锁 | 异步任务拆分  \n  🔹 SQL查询优化（响应时间降低65%）  \n\n### **平安消费金融** | Java中级工程师 *(2020.1-2021.1)*  \n**风控系统**  \n- 创新采用AOP注解实现风控拦截（代码侵入性降低90%）\n- 设计Redis索引机制提升基础数据查询效率（TPS提升8倍）\n\n**支付系统**  \n- 开发公对公转账模块（日处理金额超2亿）\n- 实现定时任务幂等控制（失败重试机制）\n\n---\n\n## 🏆 项目成就\n\n### 携程火车票系统\n- **技术架构**：SpringBoot+MyBatis+Redis+MQ+ES  \n- **核心贡献**：  \n  - 开发抢票功能：通过MQ分片+延时队列实现毫秒级响应  \n  - 支付模块：双锁机制（Redis分布式锁+数据库乐观锁）保障资金安全  \n  - [项目代码](https://github.com/reactivegroup/capa-bff)\n\n### 平安金融系统\n- **开户系统**：  \n  - 实现银行二类户开户流程（开户成功率99.8%）  \n  - Apollo动态配置实现多银行渠道切换  \n- **进件系统改造**：  \n  - 流程引擎优化（审批时效缩短60%）  \n\n---\n\n## 📌 附加信息\n- **技术影响力**：阅读JDK/Spring源码，技术博客作者\n- **语言能力**：英语CET-6（技术文档阅读编写）\n- **职业特质**：代码洁癖 | 架构思维 | 技术驱动业务","date":"2025-06-09T08:33:00.039Z","updated":"2025-05-25T11:55:04.819Z","path":"resume/archive/20250609/index_bk.html","comments":1,"layout":"page","_id":"cmcklki7i000r1wu10uyr42un","content":"<p><a href=\"/resume/index_en\">English</a></p>\n<h1 id=\"赵凯杰-Java高级开发工程师\"><a href=\"#赵凯杰-Java高级开发工程师\" class=\"headerlink\" title=\"赵凯杰 | Java高级开发工程师\"></a>赵凯杰 | Java高级开发工程师</h1><p>📧 <strong><a href=\"mailto:&#x31;&#57;&#x33;&#55;&#48;&#57;&#x38;&#x36;&#x38;&#49;&#x38;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;\">19370986818@163.com</a></strong> | 📞 <strong>19370986818</strong><br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> | 🏠 <strong>现居上海</strong><br>🎓 <strong>东华理工大学 | 本科</strong> | 👨‍💻 <strong>7年工作经验</strong></p>\n<hr>\n<h2 id=\"🔍-核心优势\"><a href=\"#🔍-核心优势\" class=\"headerlink\" title=\"🔍 核心优势\"></a>🔍 核心优势</h2><ul>\n<li>全栈Java技术专家（SE&#x2F;EE&#x2F;Spring生态）</li>\n<li>分布式系统架构师（微服务&#x2F;高并发&#x2F;性能优化）</li>\n<li>携程2021黑客松编程大赛冠军</li>\n<li>复杂业务系统开发经验（金融&#x2F;旅游&#x2F;电商）</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-技术栈\"><a href=\"#🛠️-技术栈\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h2><h3 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h3><p><strong>精通</strong>：<br>Java | Spring Boot | Spring Cloud | MyBatis | JVM调优 | 多线程编程  </p>\n<p><strong>熟练</strong>：<br>Redis（分布式锁&#x2F;缓存） | RabbitMQ | ElasticSearch | Apollo配置中心 | Oracle&#x2F;MySQL（性能优化）  </p>\n<h3 id=\"架构能力\"><a href=\"#架构能力\" class=\"headerlink\" title=\"架构能力\"></a>架构能力</h3><p>微服务架构（Eureka） | SOA | 分布式事务 | AOP编程 | 高并发设计  </p>\n<h3 id=\"其他技能\"><a href=\"#其他技能\" class=\"headerlink\" title=\"其他技能\"></a>其他技能</h3><p>前端开发（Vue&#x2F;jQuery） | 安卓开发基础 | C++基础  </p>\n<hr>\n<h2 id=\"💼-工作经历\"><a href=\"#💼-工作经历\" class=\"headerlink\" title=\"💼 工作经历\"></a>💼 工作经历</h2><h3 id=\"上海花旗金融-高级开发工程师-2022-9-至今\"><a href=\"#上海花旗金融-高级开发工程师-2022-9-至今\" class=\"headerlink\" title=\"上海花旗金融 | 高级开发工程师 (2022.9-至今)\"></a><strong>上海花旗金融</strong> | 高级开发工程师 <em>(2022.9-至今)</em></h3><p><strong>花旗交易地产交易中心系统</strong></p>\n<p><strong>Facility状态流转系统</strong></p>\n<p><strong>Banker Goal系统</strong></p>\n<p><strong>借贷信息集中管理系统</strong></p>\n<h3 id=\"携程旅行网-高级后端工程师-2021-1-2022-9\"><a href=\"#携程旅行网-高级后端工程师-2021-1-2022-9\" class=\"headerlink\" title=\"携程旅行网 | 高级后端工程师 (2021.1-2022.9)\"></a><strong>携程旅行网</strong> | 高级后端工程师 <em>(2021.1-2022.9)</em></h3><p><strong>火车票电子客票系统</strong>  </p>\n<ul>\n<li>主导开发分布式票务处理系统（日均订单50w+）</li>\n<li>实现功能：<br>✅ 基于Redis+MQ的抢票&#x2F;改签系统（成功率提升40%）<br>✅ 财务自动对账系统（误差率&lt;0.1%）<br>✅ 高并发订单分发架构（QPS 3000+）  </li>\n<li>技术亮点：<br>🔹 分布式锁设计 | 数据库乐观锁 | 异步任务拆分<br>🔹 SQL查询优化（响应时间降低65%）</li>\n</ul>\n<h3 id=\"平安消费金融-Java中级工程师-2020-1-2021-1\"><a href=\"#平安消费金融-Java中级工程师-2020-1-2021-1\" class=\"headerlink\" title=\"平安消费金融 | Java中级工程师 (2020.1-2021.1)\"></a><strong>平安消费金融</strong> | Java中级工程师 <em>(2020.1-2021.1)</em></h3><p><strong>风控系统</strong>  </p>\n<ul>\n<li>创新采用AOP注解实现风控拦截（代码侵入性降低90%）</li>\n<li>设计Redis索引机制提升基础数据查询效率（TPS提升8倍）</li>\n</ul>\n<p><strong>支付系统</strong>  </p>\n<ul>\n<li>开发公对公转账模块（日处理金额超2亿）</li>\n<li>实现定时任务幂等控制（失败重试机制）</li>\n</ul>\n<hr>\n<h2 id=\"🏆-项目成就\"><a href=\"#🏆-项目成就\" class=\"headerlink\" title=\"🏆 项目成就\"></a>🏆 项目成就</h2><h3 id=\"携程火车票系统\"><a href=\"#携程火车票系统\" class=\"headerlink\" title=\"携程火车票系统\"></a>携程火车票系统</h3><ul>\n<li><strong>技术架构</strong>：SpringBoot+MyBatis+Redis+MQ+ES  </li>\n<li><strong>核心贡献</strong>：  <ul>\n<li>开发抢票功能：通过MQ分片+延时队列实现毫秒级响应  </li>\n<li>支付模块：双锁机制（Redis分布式锁+数据库乐观锁）保障资金安全  </li>\n<li><a href=\"https://github.com/reactivegroup/capa-bff\">项目代码</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"平安金融系统\"><a href=\"#平安金融系统\" class=\"headerlink\" title=\"平安金融系统\"></a>平安金融系统</h3><ul>\n<li><strong>开户系统</strong>：  <ul>\n<li>实现银行二类户开户流程（开户成功率99.8%）  </li>\n<li>Apollo动态配置实现多银行渠道切换</li>\n</ul>\n</li>\n<li><strong>进件系统改造</strong>：  <ul>\n<li>流程引擎优化（审批时效缩短60%）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"📌-附加信息\"><a href=\"#📌-附加信息\" class=\"headerlink\" title=\"📌 附加信息\"></a>📌 附加信息</h2><ul>\n<li><strong>技术影响力</strong>：阅读JDK&#x2F;Spring源码，技术博客作者</li>\n<li><strong>语言能力</strong>：英语CET-6（技术文档阅读编写）</li>\n<li><strong>职业特质</strong>：代码洁癖 | 架构思维 | 技术驱动业务</li>\n</ul>\n","length":648,"excerpt":"","more":"<p><a href=\"/resume/index_en\">English</a></p>\n<h1 id=\"赵凯杰-Java高级开发工程师\"><a href=\"#赵凯杰-Java高级开发工程师\" class=\"headerlink\" title=\"赵凯杰 | Java高级开发工程师\"></a>赵凯杰 | Java高级开发工程师</h1><p>📧 <strong><a href=\"mailto:&#x31;&#57;&#x33;&#55;&#48;&#57;&#x38;&#x36;&#x38;&#49;&#x38;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;\">19370986818@163.com</a></strong> | 📞 <strong>19370986818</strong><br>🌐 <a href=\"https://voidvvv.github.io/\">个人主页</a> | 🏠 <strong>现居上海</strong><br>🎓 <strong>东华理工大学 | 本科</strong> | 👨‍💻 <strong>7年工作经验</strong></p>\n<hr>\n<h2 id=\"🔍-核心优势\"><a href=\"#🔍-核心优势\" class=\"headerlink\" title=\"🔍 核心优势\"></a>🔍 核心优势</h2><ul>\n<li>全栈Java技术专家（SE&#x2F;EE&#x2F;Spring生态）</li>\n<li>分布式系统架构师（微服务&#x2F;高并发&#x2F;性能优化）</li>\n<li>携程2021黑客松编程大赛冠军</li>\n<li>复杂业务系统开发经验（金融&#x2F;旅游&#x2F;电商）</li>\n</ul>\n<hr>\n<h2 id=\"🛠️-技术栈\"><a href=\"#🛠️-技术栈\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h2><h3 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h3><p><strong>精通</strong>：<br>Java | Spring Boot | Spring Cloud | MyBatis | JVM调优 | 多线程编程  </p>\n<p><strong>熟练</strong>：<br>Redis（分布式锁&#x2F;缓存） | RabbitMQ | ElasticSearch | Apollo配置中心 | Oracle&#x2F;MySQL（性能优化）  </p>\n<h3 id=\"架构能力\"><a href=\"#架构能力\" class=\"headerlink\" title=\"架构能力\"></a>架构能力</h3><p>微服务架构（Eureka） | SOA | 分布式事务 | AOP编程 | 高并发设计  </p>\n<h3 id=\"其他技能\"><a href=\"#其他技能\" class=\"headerlink\" title=\"其他技能\"></a>其他技能</h3><p>前端开发（Vue&#x2F;jQuery） | 安卓开发基础 | C++基础  </p>\n<hr>\n<h2 id=\"💼-工作经历\"><a href=\"#💼-工作经历\" class=\"headerlink\" title=\"💼 工作经历\"></a>💼 工作经历</h2><h3 id=\"上海花旗金融-高级开发工程师-2022-9-至今\"><a href=\"#上海花旗金融-高级开发工程师-2022-9-至今\" class=\"headerlink\" title=\"上海花旗金融 | 高级开发工程师 (2022.9-至今)\"></a><strong>上海花旗金融</strong> | 高级开发工程师 <em>(2022.9-至今)</em></h3><p><strong>花旗交易地产交易中心系统</strong></p>\n<p><strong>Facility状态流转系统</strong></p>\n<p><strong>Banker Goal系统</strong></p>\n<p><strong>借贷信息集中管理系统</strong></p>\n<h3 id=\"携程旅行网-高级后端工程师-2021-1-2022-9\"><a href=\"#携程旅行网-高级后端工程师-2021-1-2022-9\" class=\"headerlink\" title=\"携程旅行网 | 高级后端工程师 (2021.1-2022.9)\"></a><strong>携程旅行网</strong> | 高级后端工程师 <em>(2021.1-2022.9)</em></h3><p><strong>火车票电子客票系统</strong>  </p>\n<ul>\n<li>主导开发分布式票务处理系统（日均订单50w+）</li>\n<li>实现功能：<br>✅ 基于Redis+MQ的抢票&#x2F;改签系统（成功率提升40%）<br>✅ 财务自动对账系统（误差率&lt;0.1%）<br>✅ 高并发订单分发架构（QPS 3000+）  </li>\n<li>技术亮点：<br>🔹 分布式锁设计 | 数据库乐观锁 | 异步任务拆分<br>🔹 SQL查询优化（响应时间降低65%）</li>\n</ul>\n<h3 id=\"平安消费金融-Java中级工程师-2020-1-2021-1\"><a href=\"#平安消费金融-Java中级工程师-2020-1-2021-1\" class=\"headerlink\" title=\"平安消费金融 | Java中级工程师 (2020.1-2021.1)\"></a><strong>平安消费金融</strong> | Java中级工程师 <em>(2020.1-2021.1)</em></h3><p><strong>风控系统</strong>  </p>\n<ul>\n<li>创新采用AOP注解实现风控拦截（代码侵入性降低90%）</li>\n<li>设计Redis索引机制提升基础数据查询效率（TPS提升8倍）</li>\n</ul>\n<p><strong>支付系统</strong>  </p>\n<ul>\n<li>开发公对公转账模块（日处理金额超2亿）</li>\n<li>实现定时任务幂等控制（失败重试机制）</li>\n</ul>\n<hr>\n<h2 id=\"🏆-项目成就\"><a href=\"#🏆-项目成就\" class=\"headerlink\" title=\"🏆 项目成就\"></a>🏆 项目成就</h2><h3 id=\"携程火车票系统\"><a href=\"#携程火车票系统\" class=\"headerlink\" title=\"携程火车票系统\"></a>携程火车票系统</h3><ul>\n<li><strong>技术架构</strong>：SpringBoot+MyBatis+Redis+MQ+ES  </li>\n<li><strong>核心贡献</strong>：  <ul>\n<li>开发抢票功能：通过MQ分片+延时队列实现毫秒级响应  </li>\n<li>支付模块：双锁机制（Redis分布式锁+数据库乐观锁）保障资金安全  </li>\n<li><a href=\"https://github.com/reactivegroup/capa-bff\">项目代码</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"平安金融系统\"><a href=\"#平安金融系统\" class=\"headerlink\" title=\"平安金融系统\"></a>平安金融系统</h3><ul>\n<li><strong>开户系统</strong>：  <ul>\n<li>实现银行二类户开户流程（开户成功率99.8%）  </li>\n<li>Apollo动态配置实现多银行渠道切换</li>\n</ul>\n</li>\n<li><strong>进件系统改造</strong>：  <ul>\n<li>流程引擎优化（审批时效缩短60%）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"📌-附加信息\"><a href=\"#📌-附加信息\" class=\"headerlink\" title=\"📌 附加信息\"></a>📌 附加信息</h2><ul>\n<li><strong>技术影响力</strong>：阅读JDK&#x2F;Spring源码，技术博客作者</li>\n<li><strong>语言能力</strong>：英语CET-6（技术文档阅读编写）</li>\n<li><strong>职业特质</strong>：代码洁癖 | 架构思维 | 技术驱动业务</li>\n</ul>\n"}],"Post":[{"_content":"Good morning. My name is Zhao Kaijie, a Senior Java Developer with over seven years of specialized experience in back-end development. I appreciate the opportunity to demonstrate how my expertise can contribute to your team.\n\nI specialize in full-stack Java back-end development and possess advanced expertise in Spring Ecosystem technologies, including Spring Boot, Spring Cloud, and Spring Security. My core strength lies in architecting and developing microservices-based business servers that streamline complex requirements. Specifically, I've:\n\nAbstracted intricate business logic into scalable system workflows\nReduced development cycles by 15-30% across three major projects\nBeyond my professional work, I maintain coding passion projects to expand my technical breadth, experimenting with GUI development and game engines alongside web servers.\n\nAs a current Senior Java Developer at Citi Financial, I own maintenance of our Deal Transaction Management System while leading backend server development for client-driven business requirements. I actively integrate technical advancements into our workflows.\n\nEarlier at Ctrip as a Senior Java Back-end Developer, I spearheaded development for the train ticketing platform where I:\n\nMigrated legacy monolithic systems to microservices\nCollaborated across four teams to unify API standards","source":"_drafts/introduction copy.md","raw":"Good morning. My name is Zhao Kaijie, a Senior Java Developer with over seven years of specialized experience in back-end development. I appreciate the opportunity to demonstrate how my expertise can contribute to your team.\n\nI specialize in full-stack Java back-end development and possess advanced expertise in Spring Ecosystem technologies, including Spring Boot, Spring Cloud, and Spring Security. My core strength lies in architecting and developing microservices-based business servers that streamline complex requirements. Specifically, I've:\n\nAbstracted intricate business logic into scalable system workflows\nReduced development cycles by 15-30% across three major projects\nBeyond my professional work, I maintain coding passion projects to expand my technical breadth, experimenting with GUI development and game engines alongside web servers.\n\nAs a current Senior Java Developer at Citi Financial, I own maintenance of our Deal Transaction Management System while leading backend server development for client-driven business requirements. I actively integrate technical advancements into our workflows.\n\nEarlier at Ctrip as a Senior Java Back-end Developer, I spearheaded development for the train ticketing platform where I:\n\nMigrated legacy monolithic systems to microservices\nCollaborated across four teams to unify API standards","slug":"introduction copy","published":0,"date":"2025-06-18T09:36:03.793Z","updated":"2025-06-28T00:48:55.984Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmcklki7900011wu143uvggvr","content":"<p>Good morning. My name is Zhao Kaijie, a Senior Java Developer with over seven years of specialized experience in back-end development. I appreciate the opportunity to demonstrate how my expertise can contribute to your team.</p>\n<p>I specialize in full-stack Java back-end development and possess advanced expertise in Spring Ecosystem technologies, including Spring Boot, Spring Cloud, and Spring Security. My core strength lies in architecting and developing microservices-based business servers that streamline complex requirements. Specifically, I’ve:</p>\n<p>Abstracted intricate business logic into scalable system workflows<br>Reduced development cycles by 15-30% across three major projects<br>Beyond my professional work, I maintain coding passion projects to expand my technical breadth, experimenting with GUI development and game engines alongside web servers.</p>\n<p>As a current Senior Java Developer at Citi Financial, I own maintenance of our Deal Transaction Management System while leading backend server development for client-driven business requirements. I actively integrate technical advancements into our workflows.</p>\n<p>Earlier at Ctrip as a Senior Java Back-end Developer, I spearheaded development for the train ticketing platform where I:</p>\n<p>Migrated legacy monolithic systems to microservices<br>Collaborated across four teams to unify API standards</p>\n","length":191,"excerpt":"","more":"<p>Good morning. My name is Zhao Kaijie, a Senior Java Developer with over seven years of specialized experience in back-end development. I appreciate the opportunity to demonstrate how my expertise can contribute to your team.</p>\n<p>I specialize in full-stack Java back-end development and possess advanced expertise in Spring Ecosystem technologies, including Spring Boot, Spring Cloud, and Spring Security. My core strength lies in architecting and developing microservices-based business servers that streamline complex requirements. Specifically, I’ve:</p>\n<p>Abstracted intricate business logic into scalable system workflows<br>Reduced development cycles by 15-30% across three major projects<br>Beyond my professional work, I maintain coding passion projects to expand my technical breadth, experimenting with GUI development and game engines alongside web servers.</p>\n<p>As a current Senior Java Developer at Citi Financial, I own maintenance of our Deal Transaction Management System while leading backend server development for client-driven business requirements. I actively integrate technical advancements into our workflows.</p>\n<p>Earlier at Ctrip as a Senior Java Back-end Developer, I spearheaded development for the train ticketing platform where I:</p>\n<p>Migrated legacy monolithic systems to microservices<br>Collaborated across four teams to unify API standards</p>\n"},{"_content":"Hi sir, I'm Zhao Kaijie, and I'm a Senior Java Developer with over 7 years specialized back end development experience. I really appreciate this opportunity to show how  my expertise could help our team.\n\nI specialized in full-stack Java Back-end Development with deep expertise in Spring-ecosystem, including Spring Boot, Spring Cloud, Spring security etc. My core strength is designing and developing business server with microservice architecture. I'm also very skilled at abstracting complex business requirement into efficient server system or system workflow, which has consistently accelerated development cycle in my projects.\n\nBesides work, I would like to do some coding for my self, not only web server, but also some other develop such as GUI, Game developing.\n\nI currently work at Citi Financial as Senior Java Developer. My main duty is to maintain Deal transaction management system and developing bank-end server for User's business requirement. I also used to do some technique related development during work.\n\nPreviously at Ctrip, I also worked as a Senior Java Back-end Developer. I used to work for train ticket department,","source":"_drafts/introduction.md","raw":"Hi sir, I'm Zhao Kaijie, and I'm a Senior Java Developer with over 7 years specialized back end development experience. I really appreciate this opportunity to show how  my expertise could help our team.\n\nI specialized in full-stack Java Back-end Development with deep expertise in Spring-ecosystem, including Spring Boot, Spring Cloud, Spring security etc. My core strength is designing and developing business server with microservice architecture. I'm also very skilled at abstracting complex business requirement into efficient server system or system workflow, which has consistently accelerated development cycle in my projects.\n\nBesides work, I would like to do some coding for my self, not only web server, but also some other develop such as GUI, Game developing.\n\nI currently work at Citi Financial as Senior Java Developer. My main duty is to maintain Deal transaction management system and developing bank-end server for User's business requirement. I also used to do some technique related development during work.\n\nPreviously at Ctrip, I also worked as a Senior Java Back-end Developer. I used to work for train ticket department,","slug":"introduction","published":0,"date":"2025-06-18T09:05:06.014Z","updated":"2025-06-28T00:48:55.984Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmcklki7a00031wu12xyh0oc7","content":"<p>Hi sir, I’m Zhao Kaijie, and I’m a Senior Java Developer with over 7 years specialized back end development experience. I really appreciate this opportunity to show how  my expertise could help our team.</p>\n<p>I specialized in full-stack Java Back-end Development with deep expertise in Spring-ecosystem, including Spring Boot, Spring Cloud, Spring security etc. My core strength is designing and developing business server with microservice architecture. I’m also very skilled at abstracting complex business requirement into efficient server system or system workflow, which has consistently accelerated development cycle in my projects.</p>\n<p>Besides work, I would like to do some coding for my self, not only web server, but also some other develop such as GUI, Game developing.</p>\n<p>I currently work at Citi Financial as Senior Java Developer. My main duty is to maintain Deal transaction management system and developing bank-end server for User’s business requirement. I also used to do some technique related development during work.</p>\n<p>Previously at Ctrip, I also worked as a Senior Java Back-end Developer. I used to work for train ticket department,</p>\n","length":181,"excerpt":"","more":"<p>Hi sir, I’m Zhao Kaijie, and I’m a Senior Java Developer with over 7 years specialized back end development experience. I really appreciate this opportunity to show how  my expertise could help our team.</p>\n<p>I specialized in full-stack Java Back-end Development with deep expertise in Spring-ecosystem, including Spring Boot, Spring Cloud, Spring security etc. My core strength is designing and developing business server with microservice architecture. I’m also very skilled at abstracting complex business requirement into efficient server system or system workflow, which has consistently accelerated development cycle in my projects.</p>\n<p>Besides work, I would like to do some coding for my self, not only web server, but also some other develop such as GUI, Game developing.</p>\n<p>I currently work at Citi Financial as Senior Java Developer. My main duty is to maintain Deal transaction management system and developing bank-end server for User’s business requirement. I also used to do some technique related development during work.</p>\n<p>Previously at Ctrip, I also worked as a Senior Java Back-end Developer. I used to work for train ticket department,</p>\n"},{"title":"A*寻路算法 C++ 实现","date":"2024-04-07T01:05:15.000Z","_content":"\n这几天在试着用c++和opengl写一个[连连看小游戏](https://github.com/voidvvv/LinkA)。发现坑还挺多。其中一个就是判断两个块之间是否可以连通，经过分析之后我使用了AStar寻路算法来完成判断。为了保证复用还使用了模板。但是抽象这一块费了很大的劲，因为需要让代码能够跟我游戏中定义的一些类来相配合。\n先说一下简单的思路：\n按照AStar寻路算法，就是从起点开始，依次判断周围连同点的cost大小，若联通点没有被经过或者之前经过的cost大于当前计算的cost，则使用当前的路径，否则使用之前的路径，依次判断，直到找到终点.\n\n<!-- more -->\n\n```c++\n// 首先先定义三个类，作为我们算法的基本类型，\n// 第一个，连通类，保存有连通两端的节点，以及当前连通所需要的cost\ntemplate <typename N>\nclass Connection\n{\npublic:\n    virtual float getCost() = 0;\n    virtual N *getFromNode() = 0;\n    virtual N *getToNode() = 0;\n};\n// 第二个，我们的地图，这里将地图抽象出来几个方法，1. 查询指定节点的所有连通，2. 查询指定节点的索引，3. 当前地图节点的数量（size）\ntemplate <typename N>\nclass Graph\n{\npublic:\n    virtual std::vector<Connection<N> *> getConnections(N *fromNode) = 0;\n    virtual std::vector<Connection<N> *> getConnections(N *fromNode, N* matchNode) = 0;\n    virtual int getIndex(N *node) = 0;\n    virtual int size() = 0;\n};\n// 第三个，就是我们算法中需要用到的节点记录类，用来记录某个节点以及其联通的额匹配对，以及节点的访问状态\n\nenum Node_Category\n{\n    UNVISITED,\n    OPEN,\n    CLOSE\n};\n\ntemplate <typename N>\nclass NodeRecord\n{\npublic:\n    N *node;\n\n    /** The incoming connection to the node */\n    Connection<N> *connection;\n\n    /** The actual cost from the start node. */\n    float costSoFar = 0;\n\n    /** The node category: {@link #UNVISITED}, {@link #OPEN} or {@link #CLOSED}. */\n    Node_Category category = Node_Category::UNVISITED;\n\n    /** ID of the current search. */\n    unsigned int searchId = 0;\n};\n```\n然后，我们定义我们的寻路算法类\n```c++\ntemplate <typename N>\nclass PathFinder\n{\npublic:\n    virtual bool searchNodePath(N *startNode, N *endNode,\n                                float (*_Heuristic)(N *, N *),\n                                bool (*_shouldStop)(N *, N *),\n                                std::vector<N *> &outPath) = 0;\n    // virtual bool searchNodePath(N *startNode, N *endNode, Heuristic<N> &, std::vector<N *> &outPath) = 0;\n\n    virtual void generateNodePath(N *startNode, std::vector<N *> &outPath) = 0;\n};\n```\n这个算法类有两个抽象方法，一个是查询路径，将返回结果放入一个vector中，另一个是生成节点路径，是为了在查询路径成功后，将路劲记录系下来的方法.\n下面是这个类的实现类:\n```c++\n\n#include \"AStar.h\"\n#include <memory>\n#include <algorithm>\n\ntemplate <typename N>\nclass AStarPathFinder : public PathFinder<N>\n{\nprivate:\n    unsigned int searchId = 0;\n    std::vector<NodeRecord<N> *> records;\n    std::shared_ptr<Graph<N>> graph;\n    NodeRecord<N> *current;\n\npublic:\n    NodeRecord<N> *getNodeRecord(N *node)\n    {\n        Graph<N> *gp = graph.get();\n        int index = gp->getIndex(node);\n        NodeRecord<N> *nodeRecord = records[index];\n        if (nodeRecord == NULL)\n        {\n            nodeRecord = new NodeRecord<N>();\n            nodeRecord->category = Node_Category::UNVISITED;\n            nodeRecord->searchId = this->searchId;\n            nodeRecord->connection = NULL;\n            records[index] = nodeRecord;\n        }\n        if (nodeRecord->searchId != this->searchId)\n        {\n            nodeRecord->searchId = this->searchId;\n            nodeRecord->connection = NULL;\n            nodeRecord->category = Node_Category::UNVISITED;\n        }\n        nodeRecord->node = node;\n        return nodeRecord;\n    }\n\n    void init(Graph<N> *_graph)\n    {\n        current = NULL;\n        records = std::vector<NodeRecord<N> *>(_graph->size());\n        this->graph.reset(_graph);\n        // this->graph = std::shared_ptr<Graph<N>>(_graph);\n    }\n    void generateNodePath(N *startNode, std::vector<N *> &outPath) override\n    {\n        // todo\n        while (current && current->connection)\n        {\n            outPath.push_back(current->node);\n            // current->connection->getFromNode\n            Graph<N> *gp = graph.get();\n            current = records[gp->getIndex(current->connection->getFromNode())];\n        }\n        outPath.push_back(startNode);\n    }\n\n    void visitChild(N *end, float (*_Heuristic)(N *, N *), std::vector<NodeRecord<N> *> &openList)\n    {\n        Graph<N> *graphPtr = this->graph.get();\n\n        std::vector<Connection<N> *> connections = graphPtr->getConnections(current->node,end);\n\n        for (int x = 0; x < connections.size(); x++)\n        {\n            Connection<N> *con = connections[x];\n            N *toNode = con->getToNode();\n            float nodeCost = current->costSoFar + con->getCost();\n\n            NodeRecord<N> *nrNode = getNodeRecord(toNode);\n\n            if (toNode == end)\n            {\n                nrNode->costSoFar = nodeCost;\n                nrNode->connection = con;\n\n                nrNode->category = Node_Category::OPEN;\n                openList.push_back(nrNode);\n                return;\n            }\n\n            if (nrNode->category == Node_Category::CLOSE && nrNode->costSoFar <= nodeCost)\n            {\n                continue;\n            }\n            else if (nrNode->category == Node_Category::OPEN)\n            {\n                if (nrNode->costSoFar <= nodeCost)\n                {\n                    continue;\n                }\n                openList.erase(std::find(openList.begin(), openList.end(), nrNode));\n            }\n\n            nrNode->costSoFar = nodeCost;\n            nrNode->connection = con;\n\n            nrNode->category = Node_Category::OPEN;\n            openList.push_back(nrNode);\n        }\n    }\n\n    bool searchNodePath(N *startNode, N *endNode,\n                        float (*_Heuristic)(N *, N *),\n                        bool (*_shouldStop)(N *, N *),\n                        std::vector<N *> &outPath) override\n    {\n        this->current = NULL;\n        std::vector<NodeRecord<N> *> openList;\n        this->searchId++;\n        NodeRecord<N> *nr = getNodeRecord(startNode);\n        nr->category = Node_Category::OPEN;\n        nr->connection = NULL;\n        openList.push_back(nr);\n\n        while (openList.size() > 0)\n        {\n            this->current = openList.back();\n            openList.pop_back();\n            this->current->category = Node_Category::CLOSE;\n\n            if (_shouldStop(this->current->node, endNode))\n            {\n                generateNodePath(startNode, outPath);\n                return true;\n            }\n            visitChild(endNode, _Heuristic, openList);\n        }\n        return false;\n    }\n};\n```\n\n其中最主要的算法逻辑是参考了[libgdx-AI框架](https://github.com/libgdx/gdx-ai)中的AStar寻路算法.\n之前有一段时间特别着迷的读这个框架源码。感觉收益颇丰.\n\n","source":"_posts/AStarFind.md","raw":"---\ntitle: A*寻路算法 C++ 实现\ndate: 2024-04-07T17:05:15+08:00\ncategories: \n- c++\n- algorithm\ntags:\n- algorithm\n- AStar\n---\n\n这几天在试着用c++和opengl写一个[连连看小游戏](https://github.com/voidvvv/LinkA)。发现坑还挺多。其中一个就是判断两个块之间是否可以连通，经过分析之后我使用了AStar寻路算法来完成判断。为了保证复用还使用了模板。但是抽象这一块费了很大的劲，因为需要让代码能够跟我游戏中定义的一些类来相配合。\n先说一下简单的思路：\n按照AStar寻路算法，就是从起点开始，依次判断周围连同点的cost大小，若联通点没有被经过或者之前经过的cost大于当前计算的cost，则使用当前的路径，否则使用之前的路径，依次判断，直到找到终点.\n\n<!-- more -->\n\n```c++\n// 首先先定义三个类，作为我们算法的基本类型，\n// 第一个，连通类，保存有连通两端的节点，以及当前连通所需要的cost\ntemplate <typename N>\nclass Connection\n{\npublic:\n    virtual float getCost() = 0;\n    virtual N *getFromNode() = 0;\n    virtual N *getToNode() = 0;\n};\n// 第二个，我们的地图，这里将地图抽象出来几个方法，1. 查询指定节点的所有连通，2. 查询指定节点的索引，3. 当前地图节点的数量（size）\ntemplate <typename N>\nclass Graph\n{\npublic:\n    virtual std::vector<Connection<N> *> getConnections(N *fromNode) = 0;\n    virtual std::vector<Connection<N> *> getConnections(N *fromNode, N* matchNode) = 0;\n    virtual int getIndex(N *node) = 0;\n    virtual int size() = 0;\n};\n// 第三个，就是我们算法中需要用到的节点记录类，用来记录某个节点以及其联通的额匹配对，以及节点的访问状态\n\nenum Node_Category\n{\n    UNVISITED,\n    OPEN,\n    CLOSE\n};\n\ntemplate <typename N>\nclass NodeRecord\n{\npublic:\n    N *node;\n\n    /** The incoming connection to the node */\n    Connection<N> *connection;\n\n    /** The actual cost from the start node. */\n    float costSoFar = 0;\n\n    /** The node category: {@link #UNVISITED}, {@link #OPEN} or {@link #CLOSED}. */\n    Node_Category category = Node_Category::UNVISITED;\n\n    /** ID of the current search. */\n    unsigned int searchId = 0;\n};\n```\n然后，我们定义我们的寻路算法类\n```c++\ntemplate <typename N>\nclass PathFinder\n{\npublic:\n    virtual bool searchNodePath(N *startNode, N *endNode,\n                                float (*_Heuristic)(N *, N *),\n                                bool (*_shouldStop)(N *, N *),\n                                std::vector<N *> &outPath) = 0;\n    // virtual bool searchNodePath(N *startNode, N *endNode, Heuristic<N> &, std::vector<N *> &outPath) = 0;\n\n    virtual void generateNodePath(N *startNode, std::vector<N *> &outPath) = 0;\n};\n```\n这个算法类有两个抽象方法，一个是查询路径，将返回结果放入一个vector中，另一个是生成节点路径，是为了在查询路径成功后，将路劲记录系下来的方法.\n下面是这个类的实现类:\n```c++\n\n#include \"AStar.h\"\n#include <memory>\n#include <algorithm>\n\ntemplate <typename N>\nclass AStarPathFinder : public PathFinder<N>\n{\nprivate:\n    unsigned int searchId = 0;\n    std::vector<NodeRecord<N> *> records;\n    std::shared_ptr<Graph<N>> graph;\n    NodeRecord<N> *current;\n\npublic:\n    NodeRecord<N> *getNodeRecord(N *node)\n    {\n        Graph<N> *gp = graph.get();\n        int index = gp->getIndex(node);\n        NodeRecord<N> *nodeRecord = records[index];\n        if (nodeRecord == NULL)\n        {\n            nodeRecord = new NodeRecord<N>();\n            nodeRecord->category = Node_Category::UNVISITED;\n            nodeRecord->searchId = this->searchId;\n            nodeRecord->connection = NULL;\n            records[index] = nodeRecord;\n        }\n        if (nodeRecord->searchId != this->searchId)\n        {\n            nodeRecord->searchId = this->searchId;\n            nodeRecord->connection = NULL;\n            nodeRecord->category = Node_Category::UNVISITED;\n        }\n        nodeRecord->node = node;\n        return nodeRecord;\n    }\n\n    void init(Graph<N> *_graph)\n    {\n        current = NULL;\n        records = std::vector<NodeRecord<N> *>(_graph->size());\n        this->graph.reset(_graph);\n        // this->graph = std::shared_ptr<Graph<N>>(_graph);\n    }\n    void generateNodePath(N *startNode, std::vector<N *> &outPath) override\n    {\n        // todo\n        while (current && current->connection)\n        {\n            outPath.push_back(current->node);\n            // current->connection->getFromNode\n            Graph<N> *gp = graph.get();\n            current = records[gp->getIndex(current->connection->getFromNode())];\n        }\n        outPath.push_back(startNode);\n    }\n\n    void visitChild(N *end, float (*_Heuristic)(N *, N *), std::vector<NodeRecord<N> *> &openList)\n    {\n        Graph<N> *graphPtr = this->graph.get();\n\n        std::vector<Connection<N> *> connections = graphPtr->getConnections(current->node,end);\n\n        for (int x = 0; x < connections.size(); x++)\n        {\n            Connection<N> *con = connections[x];\n            N *toNode = con->getToNode();\n            float nodeCost = current->costSoFar + con->getCost();\n\n            NodeRecord<N> *nrNode = getNodeRecord(toNode);\n\n            if (toNode == end)\n            {\n                nrNode->costSoFar = nodeCost;\n                nrNode->connection = con;\n\n                nrNode->category = Node_Category::OPEN;\n                openList.push_back(nrNode);\n                return;\n            }\n\n            if (nrNode->category == Node_Category::CLOSE && nrNode->costSoFar <= nodeCost)\n            {\n                continue;\n            }\n            else if (nrNode->category == Node_Category::OPEN)\n            {\n                if (nrNode->costSoFar <= nodeCost)\n                {\n                    continue;\n                }\n                openList.erase(std::find(openList.begin(), openList.end(), nrNode));\n            }\n\n            nrNode->costSoFar = nodeCost;\n            nrNode->connection = con;\n\n            nrNode->category = Node_Category::OPEN;\n            openList.push_back(nrNode);\n        }\n    }\n\n    bool searchNodePath(N *startNode, N *endNode,\n                        float (*_Heuristic)(N *, N *),\n                        bool (*_shouldStop)(N *, N *),\n                        std::vector<N *> &outPath) override\n    {\n        this->current = NULL;\n        std::vector<NodeRecord<N> *> openList;\n        this->searchId++;\n        NodeRecord<N> *nr = getNodeRecord(startNode);\n        nr->category = Node_Category::OPEN;\n        nr->connection = NULL;\n        openList.push_back(nr);\n\n        while (openList.size() > 0)\n        {\n            this->current = openList.back();\n            openList.pop_back();\n            this->current->category = Node_Category::CLOSE;\n\n            if (_shouldStop(this->current->node, endNode))\n            {\n                generateNodePath(startNode, outPath);\n                return true;\n            }\n            visitChild(endNode, _Heuristic, openList);\n        }\n        return false;\n    }\n};\n```\n\n其中最主要的算法逻辑是参考了[libgdx-AI框架](https://github.com/libgdx/gdx-ai)中的AStar寻路算法.\n之前有一段时间特别着迷的读这个框架源码。感觉收益颇丰.\n\n","slug":"AStarFind","published":1,"updated":"2025-05-25T11:55:04.765Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7b00051wu162mog3uz","content":"<p>这几天在试着用c++和opengl写一个<a href=\"https://github.com/voidvvv/LinkA\">连连看小游戏</a>。发现坑还挺多。其中一个就是判断两个块之间是否可以连通，经过分析之后我使用了AStar寻路算法来完成判断。为了保证复用还使用了模板。但是抽象这一块费了很大的劲，因为需要让代码能够跟我游戏中定义的一些类来相配合。<br>先说一下简单的思路：<br>按照AStar寻路算法，就是从起点开始，依次判断周围连同点的cost大小，若联通点没有被经过或者之前经过的cost大于当前计算的cost，则使用当前的路径，否则使用之前的路径，依次判断，直到找到终点.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先先定义三个类，作为我们算法的基本类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个，连通类，保存有连通两端的节点，以及当前连通所需要的cost</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Connection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getCost</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> N *<span class=\"title\">getFromNode</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> N *<span class=\"title\">getToNode</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 第二个，我们的地图，这里将地图抽象出来几个方法，1. 查询指定节点的所有连通，2. 查询指定节点的索引，3. 当前地图节点的数量（size）</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graph</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> std::vector&lt;Connection&lt;N&gt; *&gt; <span class=\"built_in\">getConnections</span>(N *fromNode) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> std::vector&lt;Connection&lt;N&gt; *&gt; <span class=\"built_in\">getConnections</span>(N *fromNode, N* matchNode) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">(N *node)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 第三个，就是我们算法中需要用到的节点记录类，用来记录某个节点以及其联通的额匹配对，以及节点的访问状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Node_Category</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UNVISITED,</span><br><span class=\"line\">    OPEN,</span><br><span class=\"line\">    CLOSE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NodeRecord</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    N *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The incoming connection to the node */</span></span><br><span class=\"line\">    Connection&lt;N&gt; *connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The actual cost from the start node. */</span></span><br><span class=\"line\">    <span class=\"type\">float</span> costSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The node category: &#123;@link #UNVISITED&#125;, &#123;@link #OPEN&#125; or &#123;@link #CLOSED&#125;. */</span></span><br><span class=\"line\">    Node_Category category = Node_Category::UNVISITED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** ID of the current search. */</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> searchId = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后，我们定义我们的寻路算法类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PathFinder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">searchNodePath</span><span class=\"params\">(N *startNode, N *endNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">float</span> (*_Heuristic)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">bool</span> (*_shouldStop)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                std::vector&lt;N *&gt; &amp;outPath)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// virtual bool searchNodePath(N *startNode, N *endNode, Heuristic&lt;N&gt; &amp;, std::vector&lt;N *&gt; &amp;outPath) = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">generateNodePath</span><span class=\"params\">(N *startNode, std::vector&lt;N *&gt; &amp;outPath)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个算法类有两个抽象方法，一个是查询路径，将返回结果放入一个vector中，另一个是生成节点路径，是为了在查询路径成功后，将路劲记录系下来的方法.<br>下面是这个类的实现类:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;AStar.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AStarPathFinder</span> : <span class=\"keyword\">public</span> PathFinder&lt;N&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> searchId = <span class=\"number\">0</span>;</span><br><span class=\"line\">    std::vector&lt;NodeRecord&lt;N&gt; *&gt; records;</span><br><span class=\"line\">    std::shared_ptr&lt;Graph&lt;N&gt;&gt; graph;</span><br><span class=\"line\">    NodeRecord&lt;N&gt; *current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">NodeRecord&lt;N&gt; *<span class=\"title\">getNodeRecord</span><span class=\"params\">(N *node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Graph&lt;N&gt; *gp = graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> index = gp-&gt;<span class=\"built_in\">getIndex</span>(node);</span><br><span class=\"line\">        NodeRecord&lt;N&gt; *nodeRecord = records[index];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodeRecord == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nodeRecord = <span class=\"keyword\">new</span> <span class=\"built_in\">NodeRecord</span>&lt;N&gt;();</span><br><span class=\"line\">            nodeRecord-&gt;category = Node_Category::UNVISITED;</span><br><span class=\"line\">            nodeRecord-&gt;searchId = <span class=\"keyword\">this</span>-&gt;searchId;</span><br><span class=\"line\">            nodeRecord-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            records[index] = nodeRecord;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodeRecord-&gt;searchId != <span class=\"keyword\">this</span>-&gt;searchId)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nodeRecord-&gt;searchId = <span class=\"keyword\">this</span>-&gt;searchId;</span><br><span class=\"line\">            nodeRecord-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            nodeRecord-&gt;category = Node_Category::UNVISITED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nodeRecord-&gt;node = node;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodeRecord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(Graph&lt;N&gt; *_graph)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        current = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        records = std::vector&lt;NodeRecord&lt;N&gt; *&gt;(_graph-&gt;<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;graph.<span class=\"built_in\">reset</span>(_graph);</span><br><span class=\"line\">        <span class=\"comment\">// this-&gt;graph = std::shared_ptr&lt;Graph&lt;N&gt;&gt;(_graph);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">generateNodePath</span><span class=\"params\">(N *startNode, std::vector&lt;N *&gt; &amp;outPath)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current &amp;&amp; current-&gt;connection)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            outPath.<span class=\"built_in\">push_back</span>(current-&gt;node);</span><br><span class=\"line\">            <span class=\"comment\">// current-&gt;connection-&gt;getFromNode</span></span><br><span class=\"line\">            Graph&lt;N&gt; *gp = graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">            current = records[gp-&gt;<span class=\"built_in\">getIndex</span>(current-&gt;connection-&gt;<span class=\"built_in\">getFromNode</span>())];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        outPath.<span class=\"built_in\">push_back</span>(startNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visitChild</span><span class=\"params\">(N *end, <span class=\"type\">float</span> (*_Heuristic)(N *, N *), std::vector&lt;NodeRecord&lt;N&gt; *&gt; &amp;openList)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Graph&lt;N&gt; *graphPtr = <span class=\"keyword\">this</span>-&gt;graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        std::vector&lt;Connection&lt;N&gt; *&gt; connections = graphPtr-&gt;<span class=\"built_in\">getConnections</span>(current-&gt;node,end);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; connections.<span class=\"built_in\">size</span>(); x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Connection&lt;N&gt; *con = connections[x];</span><br><span class=\"line\">            N *toNode = con-&gt;<span class=\"built_in\">getToNode</span>();</span><br><span class=\"line\">            <span class=\"type\">float</span> nodeCost = current-&gt;costSoFar + con-&gt;<span class=\"built_in\">getCost</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            NodeRecord&lt;N&gt; *nrNode = <span class=\"built_in\">getNodeRecord</span>(toNode);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (toNode == end)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nrNode-&gt;costSoFar = nodeCost;</span><br><span class=\"line\">                nrNode-&gt;connection = con;</span><br><span class=\"line\"></span><br><span class=\"line\">                nrNode-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">                openList.<span class=\"built_in\">push_back</span>(nrNode);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nrNode-&gt;category == Node_Category::CLOSE &amp;&amp; nrNode-&gt;costSoFar &lt;= nodeCost)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nrNode-&gt;category == Node_Category::OPEN)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nrNode-&gt;costSoFar &lt;= nodeCost)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                openList.<span class=\"built_in\">erase</span>(std::<span class=\"built_in\">find</span>(openList.<span class=\"built_in\">begin</span>(), openList.<span class=\"built_in\">end</span>(), nrNode));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            nrNode-&gt;costSoFar = nodeCost;</span><br><span class=\"line\">            nrNode-&gt;connection = con;</span><br><span class=\"line\"></span><br><span class=\"line\">            nrNode-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">            openList.<span class=\"built_in\">push_back</span>(nrNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">searchNodePath</span><span class=\"params\">(N *startNode, N *endNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">float</span> (*_Heuristic)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">bool</span> (*_shouldStop)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        std::vector&lt;N *&gt; &amp;outPath)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;current = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        std::vector&lt;NodeRecord&lt;N&gt; *&gt; openList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;searchId++;</span><br><span class=\"line\">        NodeRecord&lt;N&gt; *nr = <span class=\"built_in\">getNodeRecord</span>(startNode);</span><br><span class=\"line\">        nr-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">        nr-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        openList.<span class=\"built_in\">push_back</span>(nr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (openList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;current = openList.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">            openList.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;current-&gt;category = Node_Category::CLOSE;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_shouldStop(<span class=\"keyword\">this</span>-&gt;current-&gt;node, endNode))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">generateNodePath</span>(startNode, outPath);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">visitChild</span>(endNode, _Heuristic, openList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中最主要的算法逻辑是参考了<a href=\"https://github.com/libgdx/gdx-ai\">libgdx-AI框架</a>中的AStar寻路算法.<br>之前有一段时间特别着迷的读这个框架源码。感觉收益颇丰.</p>\n","length":979,"excerpt":"<p>这几天在试着用c++和opengl写一个<a href=\"https://github.com/voidvvv/LinkA\">连连看小游戏</a>。发现坑还挺多。其中一个就是判断两个块之间是否可以连通，经过分析之后我使用了AStar寻路算法来完成判断。为了保证复用还使用了模板。但是抽象这一块费了很大的劲，因为需要让代码能够跟我游戏中定义的一些类来相配合。<br>先说一下简单的思路：<br>按照AStar寻路算法，就是从起点开始，依次判断周围连同点的cost大小，若联通点没有被经过或者之前经过的cost大于当前计算的cost，则使用当前的路径，否则使用之前的路径，依次判断，直到找到终点.</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先先定义三个类，作为我们算法的基本类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个，连通类，保存有连通两端的节点，以及当前连通所需要的cost</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Connection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">float</span> <span class=\"title\">getCost</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> N *<span class=\"title\">getFromNode</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> N *<span class=\"title\">getToNode</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 第二个，我们的地图，这里将地图抽象出来几个方法，1. 查询指定节点的所有连通，2. 查询指定节点的索引，3. 当前地图节点的数量（size）</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Graph</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> std::vector&lt;Connection&lt;N&gt; *&gt; <span class=\"built_in\">getConnections</span>(N *fromNode) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> std::vector&lt;Connection&lt;N&gt; *&gt; <span class=\"built_in\">getConnections</span>(N *fromNode, N* matchNode) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">(N *node)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 第三个，就是我们算法中需要用到的节点记录类，用来记录某个节点以及其联通的额匹配对，以及节点的访问状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Node_Category</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UNVISITED,</span><br><span class=\"line\">    OPEN,</span><br><span class=\"line\">    CLOSE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NodeRecord</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    N *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The incoming connection to the node */</span></span><br><span class=\"line\">    Connection&lt;N&gt; *connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The actual cost from the start node. */</span></span><br><span class=\"line\">    <span class=\"type\">float</span> costSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The node category: &#123;@link #UNVISITED&#125;, &#123;@link #OPEN&#125; or &#123;@link #CLOSED&#125;. */</span></span><br><span class=\"line\">    Node_Category category = Node_Category::UNVISITED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** ID of the current search. */</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> searchId = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后，我们定义我们的寻路算法类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PathFinder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">searchNodePath</span><span class=\"params\">(N *startNode, N *endNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">float</span> (*_Heuristic)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                <span class=\"type\">bool</span> (*_shouldStop)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                std::vector&lt;N *&gt; &amp;outPath)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// virtual bool searchNodePath(N *startNode, N *endNode, Heuristic&lt;N&gt; &amp;, std::vector&lt;N *&gt; &amp;outPath) = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">generateNodePath</span><span class=\"params\">(N *startNode, std::vector&lt;N *&gt; &amp;outPath)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个算法类有两个抽象方法，一个是查询路径，将返回结果放入一个vector中，另一个是生成节点路径，是为了在查询路径成功后，将路劲记录系下来的方法.<br>下面是这个类的实现类:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;AStar.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> N&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AStarPathFinder</span> : <span class=\"keyword\">public</span> PathFinder&lt;N&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> searchId = <span class=\"number\">0</span>;</span><br><span class=\"line\">    std::vector&lt;NodeRecord&lt;N&gt; *&gt; records;</span><br><span class=\"line\">    std::shared_ptr&lt;Graph&lt;N&gt;&gt; graph;</span><br><span class=\"line\">    NodeRecord&lt;N&gt; *current;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">NodeRecord&lt;N&gt; *<span class=\"title\">getNodeRecord</span><span class=\"params\">(N *node)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Graph&lt;N&gt; *gp = graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> index = gp-&gt;<span class=\"built_in\">getIndex</span>(node);</span><br><span class=\"line\">        NodeRecord&lt;N&gt; *nodeRecord = records[index];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodeRecord == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nodeRecord = <span class=\"keyword\">new</span> <span class=\"built_in\">NodeRecord</span>&lt;N&gt;();</span><br><span class=\"line\">            nodeRecord-&gt;category = Node_Category::UNVISITED;</span><br><span class=\"line\">            nodeRecord-&gt;searchId = <span class=\"keyword\">this</span>-&gt;searchId;</span><br><span class=\"line\">            nodeRecord-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            records[index] = nodeRecord;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodeRecord-&gt;searchId != <span class=\"keyword\">this</span>-&gt;searchId)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nodeRecord-&gt;searchId = <span class=\"keyword\">this</span>-&gt;searchId;</span><br><span class=\"line\">            nodeRecord-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            nodeRecord-&gt;category = Node_Category::UNVISITED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nodeRecord-&gt;node = node;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodeRecord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(Graph&lt;N&gt; *_graph)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        current = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        records = std::vector&lt;NodeRecord&lt;N&gt; *&gt;(_graph-&gt;<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;graph.<span class=\"built_in\">reset</span>(_graph);</span><br><span class=\"line\">        <span class=\"comment\">// this-&gt;graph = std::shared_ptr&lt;Graph&lt;N&gt;&gt;(_graph);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">generateNodePath</span><span class=\"params\">(N *startNode, std::vector&lt;N *&gt; &amp;outPath)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current &amp;&amp; current-&gt;connection)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            outPath.<span class=\"built_in\">push_back</span>(current-&gt;node);</span><br><span class=\"line\">            <span class=\"comment\">// current-&gt;connection-&gt;getFromNode</span></span><br><span class=\"line\">            Graph&lt;N&gt; *gp = graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">            current = records[gp-&gt;<span class=\"built_in\">getIndex</span>(current-&gt;connection-&gt;<span class=\"built_in\">getFromNode</span>())];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        outPath.<span class=\"built_in\">push_back</span>(startNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visitChild</span><span class=\"params\">(N *end, <span class=\"type\">float</span> (*_Heuristic)(N *, N *), std::vector&lt;NodeRecord&lt;N&gt; *&gt; &amp;openList)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Graph&lt;N&gt; *graphPtr = <span class=\"keyword\">this</span>-&gt;graph.<span class=\"built_in\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        std::vector&lt;Connection&lt;N&gt; *&gt; connections = graphPtr-&gt;<span class=\"built_in\">getConnections</span>(current-&gt;node,end);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; connections.<span class=\"built_in\">size</span>(); x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Connection&lt;N&gt; *con = connections[x];</span><br><span class=\"line\">            N *toNode = con-&gt;<span class=\"built_in\">getToNode</span>();</span><br><span class=\"line\">            <span class=\"type\">float</span> nodeCost = current-&gt;costSoFar + con-&gt;<span class=\"built_in\">getCost</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            NodeRecord&lt;N&gt; *nrNode = <span class=\"built_in\">getNodeRecord</span>(toNode);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (toNode == end)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nrNode-&gt;costSoFar = nodeCost;</span><br><span class=\"line\">                nrNode-&gt;connection = con;</span><br><span class=\"line\"></span><br><span class=\"line\">                nrNode-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">                openList.<span class=\"built_in\">push_back</span>(nrNode);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nrNode-&gt;category == Node_Category::CLOSE &amp;&amp; nrNode-&gt;costSoFar &lt;= nodeCost)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nrNode-&gt;category == Node_Category::OPEN)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nrNode-&gt;costSoFar &lt;= nodeCost)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                openList.<span class=\"built_in\">erase</span>(std::<span class=\"built_in\">find</span>(openList.<span class=\"built_in\">begin</span>(), openList.<span class=\"built_in\">end</span>(), nrNode));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            nrNode-&gt;costSoFar = nodeCost;</span><br><span class=\"line\">            nrNode-&gt;connection = con;</span><br><span class=\"line\"></span><br><span class=\"line\">            nrNode-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">            openList.<span class=\"built_in\">push_back</span>(nrNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">searchNodePath</span><span class=\"params\">(N *startNode, N *endNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">float</span> (*_Heuristic)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        <span class=\"type\">bool</span> (*_shouldStop)(N *, N *),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        std::vector&lt;N *&gt; &amp;outPath)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;current = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        std::vector&lt;NodeRecord&lt;N&gt; *&gt; openList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;searchId++;</span><br><span class=\"line\">        NodeRecord&lt;N&gt; *nr = <span class=\"built_in\">getNodeRecord</span>(startNode);</span><br><span class=\"line\">        nr-&gt;category = Node_Category::OPEN;</span><br><span class=\"line\">        nr-&gt;connection = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        openList.<span class=\"built_in\">push_back</span>(nr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (openList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;current = openList.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">            openList.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;current-&gt;category = Node_Category::CLOSE;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_shouldStop(<span class=\"keyword\">this</span>-&gt;current-&gt;node, endNode))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">generateNodePath</span>(startNode, outPath);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">visitChild</span>(endNode, _Heuristic, openList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中最主要的算法逻辑是参考了<a href=\"https://github.com/libgdx/gdx-ai\">libgdx-AI框架</a>中的AStar寻路算法.<br>之前有一段时间特别着迷的读这个框架源码。感觉收益颇丰.</p>"},{"title":"LFU_storage_structure","date":"2025-06-13T05:04:41.000Z","_content":"\nthere are two main replacement policies used in redis, LRU(https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)  and [LFU](https://en.wikipedia.org/wiki/Least_frequently_used)\n\nthe LRU we can solve by use a simple LinkList [code](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU), but the LFU is a bit of difficult. It's necessary for me to write a note to record the way of thinking I have about it.\n<!--more-->\n## Thinking\naccording to the [LFU definition] (https://en.wikipedia.org/wiki/Least_frequently_used), it's a storage structure that would replace the least used element in this container when the size is reached out the capacity, to achieve this , we need to record the elements in a list order by used count, this is easy when we use the LinkList. as for the Node in LinkList, we need add a num to indicate how many times this node is called, since it's default value is , because every node is added to the LinkList is operated one time.\n\nIn the very beginning, I made a mistake to operate the tail element. when we get or update the tail, we need to do an extra check to see if this element is the only one in the record, and this is important.\nat mean time, we need to iterate to get the proper position for the node currently be edited, and this is also a pitfall I encountered. \n\nas same as LRU, I used an array to store every node(element), so that we can get each one by O(1) since we use LinkList which is not very easy to query a specific node (normal O(1)).\n\n## Code \n```java\nclass LFUCache {\n    class Node {\n        int key;\n        int val;\n        Node next;\n        Node pre;\n        int cnt = 1;\n\n        public Node() {\n        };\n\n        public Node(int key, int value) {\n            this.key = key;\n            this.val = value;\n        }\n    }\n\n    int capacity = 0;\n    final Node header = new Node();\n    Node tail = null;\n    int size = 0;\n    Node[] record;\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        record = new Node[100_000];\n        tail = header;\n    }\n    \n    public int get(int key) {\n        Node node = findByKey(key);\n        if (node != null) {\n            return node.val;\n        }\n        return -1;\n    }\n    \n    public void put(int key, int value) {\n        Node node = findByKey(key);\n        if (node != null) {\n            node.val = value;\n        } else {\n            node = new Node(key, value);\n            while (size >= capacity) {\n                removeTail();\n            }\n            addNewNode(node);\n        }\n    }\n\n    Node findByKey(int key) {\n        Node node = record[key];\n        if (node != null) {\n            \n            node.cnt++;\n            moveAheade(node);\n        }\n        return node;\n    }\n\n    void moveAheade (Node node) {\n        Node pre = node.pre;\n        Node initialPre = pre;\n        Node next = node.next;\n        pre.next = next;\n        if (next != null) {\n            next.pre = pre;\n        }\n        while (pre != header && pre.cnt <= node.cnt) {\n            pre = pre.pre;\n        }\n        Node pn = pre.next;\n        pre.next = node;\n        node.pre = pre;\n        node.next = pn;\n        if (pn != null) {\n            pn.pre = node;\n        }\n\n        if (tail == node) {\n            tail = initialPre == pre ? node : initialPre;\n        }\n    }\n\n    void removeTail () {\n        if (tail == header || tail == null) {\n            return;\n        }\n        record[tail.key] = null;\n        tail = tail.pre;\n        tail.next = null;\n        size--;\n    } \n\n    void addNewNode (Node node) {\n        tail.next = node;\n        node.pre = tail;\n        tail = node;\n        moveAheade(node);\n                record[node.key] = node;\n\n        size++;\n    }  \n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n","source":"_posts/LFU_storage_structure.md","raw":"---\ntitle: LFU_storage_structure\ndate: 2025-06-13T21:04:41+08:00\ntags:\n---\n\nthere are two main replacement policies used in redis, LRU(https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)  and [LFU](https://en.wikipedia.org/wiki/Least_frequently_used)\n\nthe LRU we can solve by use a simple LinkList [code](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU), but the LFU is a bit of difficult. It's necessary for me to write a note to record the way of thinking I have about it.\n<!--more-->\n## Thinking\naccording to the [LFU definition] (https://en.wikipedia.org/wiki/Least_frequently_used), it's a storage structure that would replace the least used element in this container when the size is reached out the capacity, to achieve this , we need to record the elements in a list order by used count, this is easy when we use the LinkList. as for the Node in LinkList, we need add a num to indicate how many times this node is called, since it's default value is , because every node is added to the LinkList is operated one time.\n\nIn the very beginning, I made a mistake to operate the tail element. when we get or update the tail, we need to do an extra check to see if this element is the only one in the record, and this is important.\nat mean time, we need to iterate to get the proper position for the node currently be edited, and this is also a pitfall I encountered. \n\nas same as LRU, I used an array to store every node(element), so that we can get each one by O(1) since we use LinkList which is not very easy to query a specific node (normal O(1)).\n\n## Code \n```java\nclass LFUCache {\n    class Node {\n        int key;\n        int val;\n        Node next;\n        Node pre;\n        int cnt = 1;\n\n        public Node() {\n        };\n\n        public Node(int key, int value) {\n            this.key = key;\n            this.val = value;\n        }\n    }\n\n    int capacity = 0;\n    final Node header = new Node();\n    Node tail = null;\n    int size = 0;\n    Node[] record;\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        record = new Node[100_000];\n        tail = header;\n    }\n    \n    public int get(int key) {\n        Node node = findByKey(key);\n        if (node != null) {\n            return node.val;\n        }\n        return -1;\n    }\n    \n    public void put(int key, int value) {\n        Node node = findByKey(key);\n        if (node != null) {\n            node.val = value;\n        } else {\n            node = new Node(key, value);\n            while (size >= capacity) {\n                removeTail();\n            }\n            addNewNode(node);\n        }\n    }\n\n    Node findByKey(int key) {\n        Node node = record[key];\n        if (node != null) {\n            \n            node.cnt++;\n            moveAheade(node);\n        }\n        return node;\n    }\n\n    void moveAheade (Node node) {\n        Node pre = node.pre;\n        Node initialPre = pre;\n        Node next = node.next;\n        pre.next = next;\n        if (next != null) {\n            next.pre = pre;\n        }\n        while (pre != header && pre.cnt <= node.cnt) {\n            pre = pre.pre;\n        }\n        Node pn = pre.next;\n        pre.next = node;\n        node.pre = pre;\n        node.next = pn;\n        if (pn != null) {\n            pn.pre = node;\n        }\n\n        if (tail == node) {\n            tail = initialPre == pre ? node : initialPre;\n        }\n    }\n\n    void removeTail () {\n        if (tail == header || tail == null) {\n            return;\n        }\n        record[tail.key] = null;\n        tail = tail.pre;\n        tail.next = null;\n        size--;\n    } \n\n    void addNewNode (Node node) {\n        tail.next = node;\n        node.pre = tail;\n        tail = node;\n        moveAheade(node);\n                record[node.key] = node;\n\n        size++;\n    }  \n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n","slug":"LFU_storage_structure","published":1,"updated":"2025-06-30T03:02:51.553Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7d00071wu139jm445f","content":"<p>there are two main replacement policies used in redis, LRU(<a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\">https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU</a>)  and <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\">LFU</a></p>\n<p>the LRU we can solve by use a simple LinkList <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\">code</a>, but the LFU is a bit of difficult. It’s necessary for me to write a note to record the way of thinking I have about it.</p>\n<span id=\"more\"></span>\n<h2 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h2><p>according to the [LFU definition] (<a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\">https://en.wikipedia.org/wiki/Least_frequently_used</a>), it’s a storage structure that would replace the least used element in this container when the size is reached out the capacity, to achieve this , we need to record the elements in a list order by used count, this is easy when we use the LinkList. as for the Node in LinkList, we need add a num to indicate how many times this node is called, since it’s default value is , because every node is added to the LinkList is operated one time.</p>\n<p>In the very beginning, I made a mistake to operate the tail element. when we get or update the tail, we need to do an extra check to see if this element is the only one in the record, and this is important.<br>at mean time, we need to iterate to get the proper position for the node currently be edited, and this is also a pitfall I encountered. </p>\n<p>as same as LRU, I used an array to store every node(element), so that we can get each one by O(1) since we use LinkList which is not very easy to query a specific node (normal O(1)).</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LFUCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        Node pre;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.val = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">capacity</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">header</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    Node[] record;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LFUCache</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capacity = capacity;</span><br><span class=\"line\">        record = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[<span class=\"number\">100_000</span>];</span><br><span class=\"line\">        tail = header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> findByKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> findByKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            node.val = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size &gt;= capacity) &#123;</span><br><span class=\"line\">                removeTail();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addNewNode(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node <span class=\"title function_\">findByKey</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> record[key];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            node.cnt++;</span><br><span class=\"line\">            moveAheade(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">moveAheade</span> <span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> node.pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">initialPre</span> <span class=\"operator\">=</span> pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">        pre.next = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            next.pre = pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pre != header &amp;&amp; pre.cnt &lt;= node.cnt) &#123;</span><br><span class=\"line\">            pre = pre.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pn</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        pre.next = node;</span><br><span class=\"line\">        node.pre = pre;</span><br><span class=\"line\">        node.next = pn;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pn.pre = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == node) &#123;</span><br><span class=\"line\">            tail = initialPre == pre ? node : initialPre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeTail</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == header || tail == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        record[tail.key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        tail = tail.pre;</span><br><span class=\"line\">        tail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addNewNode</span> <span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">        tail.next = node;</span><br><span class=\"line\">        node.pre = tail;</span><br><span class=\"line\">        tail = node;</span><br><span class=\"line\">        moveAheade(node);</span><br><span class=\"line\">                record[node.key] = node;</span><br><span class=\"line\"></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj.get(key);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.put(key,value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","length":477,"excerpt":"<p>there are two main replacement policies used in redis, LRU(<a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\">https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU</a>)  and <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\">LFU</a></p>\n<p>the LRU we can solve by use a simple LinkList <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\">code</a>, but the LFU is a bit of difficult. It’s necessary for me to write a note to record the way of thinking I have about it.</p>","more":"<h2 id=\"Thinking\"><a href=\"#Thinking\" class=\"headerlink\" title=\"Thinking\"></a>Thinking</h2><p>according to the [LFU definition] (<a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\">https://en.wikipedia.org/wiki/Least_frequently_used</a>), it’s a storage structure that would replace the least used element in this container when the size is reached out the capacity, to achieve this , we need to record the elements in a list order by used count, this is easy when we use the LinkList. as for the Node in LinkList, we need add a num to indicate how many times this node is called, since it’s default value is , because every node is added to the LinkList is operated one time.</p>\n<p>In the very beginning, I made a mistake to operate the tail element. when we get or update the tail, we need to do an extra check to see if this element is the only one in the record, and this is important.<br>at mean time, we need to iterate to get the proper position for the node currently be edited, and this is also a pitfall I encountered. </p>\n<p>as same as LRU, I used an array to store every node(element), so that we can get each one by O(1) since we use LinkList which is not very easy to query a specific node (normal O(1)).</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LFUCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        Node pre;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.val = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">capacity</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">header</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    Node[] record;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LFUCache</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capacity = capacity;</span><br><span class=\"line\">        record = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[<span class=\"number\">100_000</span>];</span><br><span class=\"line\">        tail = header;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> findByKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> findByKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            node.val = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size &gt;= capacity) &#123;</span><br><span class=\"line\">                removeTail();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addNewNode(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node <span class=\"title function_\">findByKey</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> record[key];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            node.cnt++;</span><br><span class=\"line\">            moveAheade(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">moveAheade</span> <span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> node.pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">initialPre</span> <span class=\"operator\">=</span> pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">        pre.next = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            next.pre = pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pre != header &amp;&amp; pre.cnt &lt;= node.cnt) &#123;</span><br><span class=\"line\">            pre = pre.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pn</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        pre.next = node;</span><br><span class=\"line\">        node.pre = pre;</span><br><span class=\"line\">        node.next = pn;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pn.pre = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == node) &#123;</span><br><span class=\"line\">            tail = initialPre == pre ? node : initialPre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeTail</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == header || tail == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        record[tail.key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        tail = tail.pre;</span><br><span class=\"line\">        tail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addNewNode</span> <span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">        tail.next = node;</span><br><span class=\"line\">        node.pre = tail;</span><br><span class=\"line\">        tail = node;</span><br><span class=\"line\">        moveAheade(node);</span><br><span class=\"line\">                record[node.key] = node;</span><br><span class=\"line\"></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj.get(key);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.put(key,value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"LIBGDX 游戏引擎","date":"2023-12-18T14:22:22.000Z","top":0,"_content":"\n# LIBGDX 游戏引擎\n{% cq %} 一款使用OpenGL 的 Java 游戏引擎 {% endcq %}\n![logo](libgdx_logo.svg)\n<!-- more -->\n\n\n\n## 介绍\n><b>libGDX</b> is a cross-platform Java game development framework based on OpenGL (ES), designed for Windows, Linux, macOS, Android, web browsers, and iOS. It provides a robust and well-established environment for rapid prototyping and iterative development. Unlike other frameworks, libGDX does not impose a specific design or coding style, allowing you the freedom to create games according to your preferences.<br><br>\ngithub： https://github.com/libgdx/libgdx\n<br>\n\n---\n## Hello World\n### 准备工作\n1. JDK： 建议 11-18. 我个人使用JDK11，感觉非常良好\n2. 开发工具，正常的java开发集成工具都可以，我个人使用JetBrain的Idea\n3. 依赖管理工具，libgdx使用的是gradle进行包管理，所以最好提前安装gradle。我本地安装的是7.4.2. 如果不提前手动下载，后面导入可能会麻烦一些。\n4. 初始化项目：\n    * 下载官方的初始化工具，目前地址： https://libgdx.com/wiki/start/project-generation （最新版）\n    * 或者可以下载 1.10 版，因为我就是用这个版本开发的。https://github.com/libgdx/libgdx/releases 可以在这里找到历史版本，选择1.10.0即可。\n\n### Init!\n好了，现在我们可以尝试开始我们的第一个项目了。<br> \n<br>\n首先，打开我们刚刚下载好的初始化工具： <br>\n![init01](Libgdx_Init01.png)\n<br>\n关于第6点打包模式，个人建议勾选desktop，方便桌面调试，或者直接开发桌面应用。andriod也推荐勾选，因为这个引擎起始主要是为了andriod游戏而做的，大部分资源文件都会放在andriod项目下。不管你开发的是什么应用。<br>\n至于更多的第三方依赖，暂时用不到，可以不需要管。然后，我们直接点击generate生成即可.<br>\n点击生成后，会自动在目标文件夹下生成初始化的代码，并且会尝试使用gradle导入依赖，但是此时极有可能因为本地JAVA_HOME等原因导入失败，这个失败我们可以先不去管，忽略它，直接使用我们的开发工具（我使用的IDEA）打开该项目即可。<br>\n在使用我们的开发工具打开项目后，首先建议修改默认的gradle配置，更改为自己下载好的版本。\n![init02](Libgdx_Init02.png)<br>\n这样，导入依赖会更快更方便，不然的话，我本地实测会比较慢。<br>\n然后接下来就让gradle自动构建就可以了。\n\n### Hello World\n构建好之后，项目看起来应该是这个样子的:\n![init03](Libgdx_Init03.png)<br>\n其中，desktop目录中，存在一个名为DesktopLauncher的启动类，我们可以直接运行这个启动类。应该会看到一个应用程序启动，如下图：<br>\n![init04](Libgdx_Init04.png)<br>\n如果看到这个画面，恭喜你，我们已经成功的初始化了一个游戏！\n\n---\n\n现在我们看到的仅仅是一个libgdx logo的图片以及红色背景。这显然不是我们最终想要的，我们至少想要一个自己的**hello world**<br>\n我们就需要认识一下core文件夹，下面有一个初始化自带的一个Class，MyGdxGame，它长这个样子：\n``` java\npackage com.mygdx.game;\n\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.utils.ScreenUtils;\n\npublic class MyGdxGame extends ApplicationAdapter {\n\tSpriteBatch batch; // 画笔，或者说专门画图片(Sprite)的画笔\n\tTexture img; // 图片，我们看到的libgdx logo 就是它\n\t\n\t@Override\n\tpublic void create () { // 当前类初始化的方法\n\t\tbatch = new SpriteBatch(); // 初始化画笔\n\t\timg = new Texture(\"badlogic.jpg\"); // 初始化 加载 图片\n\t}\n\n\t@Override\n\tpublic void render () { // 渲染函数，可以理解为程序的每一帧需要做什么，这里也是程序的主逻辑\n\t\tScreenUtils.clear(1, 0, 0, 1); // 设置屏幕背景色\n\t\tbatch.begin();\n\t\tbatch.draw(img, 0, 0); //  使用画笔绘制图片，图片的位置指定在 （0，0） 处\n\t\tbatch.end();\n\t}\n\t\n\t@Override\n\tpublic void dispose () { // 销毁方法，程序运行中的许多资源（Disposable）都需要释放\n\t\tbatch.dispose();\n\t\timg.dispose();\n\t}\n}\n\n```\n正是上面这段代码的render函数绘制出了我们的图片，这个其实也是整个程序的主逻辑。\n如果我们想要更改渲染的东西，那么我们要做的工作就是想办法在这里渲染我们想要的东西\n\n## 主要组件\n### **Game Screen**\ncom.badlogic.gdx.ApplicationListener 可以算作整个游戏的入口，我们需要手动实现它。它里面的render方法就是我们的主逻辑。但是但看这个接口，是有点抽象的，因为我们还不太了解具体该怎么做。幸好，libgdx给了我们一个比较好的实现类：**com.badlogic.gdx.Game**\n我们现在已经看到Game类是实现了ApplicationListener接口的，那么我们可以试着把系统自动给我们生成的MyGdxGame类改成继承Game类来试一下.更改后：\n```java\npublic class MyGdxGame extends Game { // 只有父类变成了Game\n\tSpriteBatch batch;\n\tTexture img;\n\t\n\t@Override\n\tpublic void create () {\n\t\tbatch = new SpriteBatch();\n\t\timg = new Texture(\"badlogic.jpg\");\n\t}\n\n\t@Override\n\tpublic void render () {\n\t\tScreenUtils.clear(1, 0, 0, 1);\n\t\tbatch.begin();\n\t\tbatch.draw(img, 0, 0);\n\t\tbatch.end();\n\t}\n\n\t@Override\n\tpublic void dispose () {\n\t\tbatch.dispose();\n\t\timg.dispose();\n\t}\n}\n```\n然后再次运行，发现没有变化，那么就证明我们更换正确了。我们现在开始就可以使用这个Game当作游戏的起点了！\n还有另外一个组件 **Screen**\n**Screen** 是一个接口，代码如下： \n{% codeblock  Screen.java lang:java %}\npublic interface Screen {\n\t\n\t/** Called when this screen becomes the current screen for a {@link Game}. */\n\tpublic void show ();\n\t\n\t/** Called when the screen should render itself.\n\t * @param delta The time in seconds since the last render. */\n\tpublic void render (float delta);\n\n\t/** @see ApplicationListener#resize(int, int) */\n\tpublic void resize (int width, int height);\n\n\t/** @see ApplicationListener#pause() */\n\tpublic void pause ();\n\n\t/** @see ApplicationListener#resume() */\n\tpublic void resume ();\n\n\t/** Called when this screen is no longer the current screen for a {@link Game}. */\n\tpublic void hide ();\n\n\t/** Called when this screen should release all resources. */\n\tpublic void dispose ();\n}\n{% endcodeblock   %}\n\n这里的render方法可以用了来**更好的**实现我们的逻辑，因为参数附加了当前帧与上一帧相差的秒数（float），可以更好的更新我们的逻辑。\n\nGame 中负责Screen的调度，我们可以通过 {% label primary@com.badlogic.gdx.Game#setScreen %}  方法来设置当前需要渲染以及更新的screen\n\n### **Batch**\nBatch 是我们整个程序的画笔，这个画笔有很多类型，并且由于每种batch都没有一个统一的抽象规范，目前是没有所谓的batch基类的，我们只能找到一些各种实现类。比如我们上面见到的  {% label primary@com.badlogic.gdx.graphics.g2d.SpriteBatch %} ，就是专门用于绘制纹理图片的，还有可以绘制各种形状的 {% label primary@com.badlogic.gdx.graphics.glutils.ShapeRenderer%},这个叫做render的类也是起到batch的作用。甚至还有可以绘制3D模型的 {% label primary@com.badlogic.gdx.graphics.g3d.ModelBatch %}\nbatch底层使用的起始都是opengl。这是一个计算机图形统一接口。\n\n### **Camera**\nCamera顾名思义，就是我们整个游戏中的{% label @相机%}, 它的作用其实是处理我们游戏中的各种坐标变换，游戏视角的切换等等\nCamera的底层其实是一个 {% label @四维矩阵%},这一部分也是OpenGL的知识.\n\n\n### **Input**\nInput是游戏中不可缺少的，负责处理用户输入，有了用户输入才能有交互，有了交互才能称之为游戏。\n在LibGDX中，Input 相关的交互全在  {% label @Gdx.input %} 这个全局静态引用中。 Input 最基础的用法是：\n{% codeblock  Input lang:java %}\n\t\t// 获取当前点击屏幕的坐标\n\t\tif (Gdx.input.isTouched()) {\n\t\t\tint x = Gdx.input.getX();\n\t\t\tint y = Gdx.input.getY();\n\t\t}\n{% endcodeblock   %}\n除此之外，还有很多使用方法，直接调用这个引用即可。\n需要注意：\n1. Gdx.input 这个全局静态引用的实现是基于你当前的系统来自动决定的。\n2. 上面这个获取坐标的方法获取到的其实是我们的屏幕坐标，也就是当前指针指向的像素点的坐标。这个坐标还需要使用我们的 {% label @Camera %} 换算才能被使用。Camera坐标换算可能需要在其他文章中仔细讲解.\n除了上面的这种最基本的控制，LibGDX还给我们提供了一种更加方便的封装，那就是 {% label success@com.badlogic.gdx.Input#setInputProcessor %}. 这个方法的参数 InputProcessor 是libgdx给我们封装好的一个输入处理接口，里面有几乎我们能用到的所有输入处理。我们只需要实现对应的输入处理方法即可。\n同时，libgdx还内置了一个InputMultiplexer来同时处理多个Input，源码比较简单，就是内置了一个集合遍历，故不在此详述。\n\n\n### **Asset**\nAsset,游戏资源，关于我们如何加载游戏资源，我们可以使用 {% label success@Gdx.files %} 这个全局静态引用来获取我们所需要的文件。\n获取到的文件是一个 {% label @com.badlogic.gdx.files.FileHandle %}, 我们可以使用这个handle来生成我们想要的各种游戏内素材，比如：\n\n{% codeblock  Asset lang:java %}\n        Texture pic = new Texture(Gdx.files.internal(\"图片位置\")); // 获取图片\n        Music music = Gdx.audio.newMusic(Gdx.files.internal(\"音乐文件位置\")) ;// 获取长音乐;\n        Sound sound = Gdx.audio.newSound(Gdx.files.internal(\"音乐文件位置\")) ;// 获取短音效;\n{% endcodeblock   %}\n这里文件位置使用的是internal。internal代表是从我们项目内部来获取资源的。\n![asset01](Libgdx_asset01.png)\n这也是我们初始代码获取默认图片的方式\n\n关于几种file的获取方式，可以参考chatgpt的回答：\n```\nClasspath (类路径)：\n\n路径类型： classpath:/path/to/file\n说明： 这是相对于类路径的文件位置。这意味着文件应该位于你的类路径（例如，src 目录）下。\n示例： 如果你有一个位于 \"assets/images/myimage.png\" 的文件，你可以通过 Gdx.files.classpath(\"assets/images/myimage.png\") 获取它。\nInternal (内部文件)：\n\n路径类型： internal:/path/to/file\n说明： 这是相对于应用程序的根目录的文件位置。这通常用于存储在应用程序打包时一起分发的资源。\n示例： 如果你的应用程序包含 \"data/config.txt\" 文件，你可以通过 Gdx.files.internal(\"data/config.txt\") 获取它。\nExternal (外部文件)：\n\n路径类型： external:/path/to/file\n说明： 这是外部存储设备上的文件位置，例如 SD 卡。这允许你访问设备上的外部文件系统。\n示例： 如果你希望访问 SD 卡上的 \"MyApp/data/config.txt\" 文件，你可以通过 Gdx.files.external(\"MyApp/data/config.txt\") 获取它。\nAbsolute (绝对路径)：\n\n路径类型： absolute:/path/to/file\n说明： 这是一个绝对路径，允许你指定文件系统中的完整路径。\n示例： 如果你有一个绝对路径为 \"/home/user/documents/file.txt\" 的文件，你可以通过 Gdx.files.absolute(\"/home/user/documents/file.txt\") 获取它。\n```\n总之，我目前最常用的就是internal\n\n## LibGDX 内置 Enviroment\nlibgdx 内置了一些可以用来在程序运行中获取资源或者修改程序参数的功能类。这些enviroment被以单例模式放在了 com.badlogic.gdx.Gdx 类中。\n其中每一项都会根据当前运行的系统来分别init。\n{% codeblock  Gdx lang:java %}\npublic class Gdx {\n\tpublic static Application app;\n\tpublic static Graphics graphics;\n\tpublic static Audio audio;\n\tpublic static Input input;\n\tpublic static Files files;\n\tpublic static Net net;\n\n\tpublic static GL20 gl;\n\tpublic static GL20 gl20;\n\tpublic static GL30 gl30;\n}\n{% endcodeblock %}\n\n比如，我们可以使用其中的 audio 来管理音频，可以使用files来管理文件资源，可以使用input来处理输入。\n\n## 参考\n[官方文档](https://libgdx.com/wiki/start/project-generation)\n[官方simple教程](https://libgdx.com/wiki/start/a-simple-game)","source":"_posts/LIBGDX-Record.md","raw":"---\ntitle: LIBGDX 游戏引擎\ndate: 2023-12-18 22:22:22\ntop: 0\ncategories: \n- java\n- libgdx\ntags: \n- [java]\n- [game]\n- [libgdx]\n---\n\n# LIBGDX 游戏引擎\n{% cq %} 一款使用OpenGL 的 Java 游戏引擎 {% endcq %}\n![logo](libgdx_logo.svg)\n<!-- more -->\n\n\n\n## 介绍\n><b>libGDX</b> is a cross-platform Java game development framework based on OpenGL (ES), designed for Windows, Linux, macOS, Android, web browsers, and iOS. It provides a robust and well-established environment for rapid prototyping and iterative development. Unlike other frameworks, libGDX does not impose a specific design or coding style, allowing you the freedom to create games according to your preferences.<br><br>\ngithub： https://github.com/libgdx/libgdx\n<br>\n\n---\n## Hello World\n### 准备工作\n1. JDK： 建议 11-18. 我个人使用JDK11，感觉非常良好\n2. 开发工具，正常的java开发集成工具都可以，我个人使用JetBrain的Idea\n3. 依赖管理工具，libgdx使用的是gradle进行包管理，所以最好提前安装gradle。我本地安装的是7.4.2. 如果不提前手动下载，后面导入可能会麻烦一些。\n4. 初始化项目：\n    * 下载官方的初始化工具，目前地址： https://libgdx.com/wiki/start/project-generation （最新版）\n    * 或者可以下载 1.10 版，因为我就是用这个版本开发的。https://github.com/libgdx/libgdx/releases 可以在这里找到历史版本，选择1.10.0即可。\n\n### Init!\n好了，现在我们可以尝试开始我们的第一个项目了。<br> \n<br>\n首先，打开我们刚刚下载好的初始化工具： <br>\n![init01](Libgdx_Init01.png)\n<br>\n关于第6点打包模式，个人建议勾选desktop，方便桌面调试，或者直接开发桌面应用。andriod也推荐勾选，因为这个引擎起始主要是为了andriod游戏而做的，大部分资源文件都会放在andriod项目下。不管你开发的是什么应用。<br>\n至于更多的第三方依赖，暂时用不到，可以不需要管。然后，我们直接点击generate生成即可.<br>\n点击生成后，会自动在目标文件夹下生成初始化的代码，并且会尝试使用gradle导入依赖，但是此时极有可能因为本地JAVA_HOME等原因导入失败，这个失败我们可以先不去管，忽略它，直接使用我们的开发工具（我使用的IDEA）打开该项目即可。<br>\n在使用我们的开发工具打开项目后，首先建议修改默认的gradle配置，更改为自己下载好的版本。\n![init02](Libgdx_Init02.png)<br>\n这样，导入依赖会更快更方便，不然的话，我本地实测会比较慢。<br>\n然后接下来就让gradle自动构建就可以了。\n\n### Hello World\n构建好之后，项目看起来应该是这个样子的:\n![init03](Libgdx_Init03.png)<br>\n其中，desktop目录中，存在一个名为DesktopLauncher的启动类，我们可以直接运行这个启动类。应该会看到一个应用程序启动，如下图：<br>\n![init04](Libgdx_Init04.png)<br>\n如果看到这个画面，恭喜你，我们已经成功的初始化了一个游戏！\n\n---\n\n现在我们看到的仅仅是一个libgdx logo的图片以及红色背景。这显然不是我们最终想要的，我们至少想要一个自己的**hello world**<br>\n我们就需要认识一下core文件夹，下面有一个初始化自带的一个Class，MyGdxGame，它长这个样子：\n``` java\npackage com.mygdx.game;\n\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.utils.ScreenUtils;\n\npublic class MyGdxGame extends ApplicationAdapter {\n\tSpriteBatch batch; // 画笔，或者说专门画图片(Sprite)的画笔\n\tTexture img; // 图片，我们看到的libgdx logo 就是它\n\t\n\t@Override\n\tpublic void create () { // 当前类初始化的方法\n\t\tbatch = new SpriteBatch(); // 初始化画笔\n\t\timg = new Texture(\"badlogic.jpg\"); // 初始化 加载 图片\n\t}\n\n\t@Override\n\tpublic void render () { // 渲染函数，可以理解为程序的每一帧需要做什么，这里也是程序的主逻辑\n\t\tScreenUtils.clear(1, 0, 0, 1); // 设置屏幕背景色\n\t\tbatch.begin();\n\t\tbatch.draw(img, 0, 0); //  使用画笔绘制图片，图片的位置指定在 （0，0） 处\n\t\tbatch.end();\n\t}\n\t\n\t@Override\n\tpublic void dispose () { // 销毁方法，程序运行中的许多资源（Disposable）都需要释放\n\t\tbatch.dispose();\n\t\timg.dispose();\n\t}\n}\n\n```\n正是上面这段代码的render函数绘制出了我们的图片，这个其实也是整个程序的主逻辑。\n如果我们想要更改渲染的东西，那么我们要做的工作就是想办法在这里渲染我们想要的东西\n\n## 主要组件\n### **Game Screen**\ncom.badlogic.gdx.ApplicationListener 可以算作整个游戏的入口，我们需要手动实现它。它里面的render方法就是我们的主逻辑。但是但看这个接口，是有点抽象的，因为我们还不太了解具体该怎么做。幸好，libgdx给了我们一个比较好的实现类：**com.badlogic.gdx.Game**\n我们现在已经看到Game类是实现了ApplicationListener接口的，那么我们可以试着把系统自动给我们生成的MyGdxGame类改成继承Game类来试一下.更改后：\n```java\npublic class MyGdxGame extends Game { // 只有父类变成了Game\n\tSpriteBatch batch;\n\tTexture img;\n\t\n\t@Override\n\tpublic void create () {\n\t\tbatch = new SpriteBatch();\n\t\timg = new Texture(\"badlogic.jpg\");\n\t}\n\n\t@Override\n\tpublic void render () {\n\t\tScreenUtils.clear(1, 0, 0, 1);\n\t\tbatch.begin();\n\t\tbatch.draw(img, 0, 0);\n\t\tbatch.end();\n\t}\n\n\t@Override\n\tpublic void dispose () {\n\t\tbatch.dispose();\n\t\timg.dispose();\n\t}\n}\n```\n然后再次运行，发现没有变化，那么就证明我们更换正确了。我们现在开始就可以使用这个Game当作游戏的起点了！\n还有另外一个组件 **Screen**\n**Screen** 是一个接口，代码如下： \n{% codeblock  Screen.java lang:java %}\npublic interface Screen {\n\t\n\t/** Called when this screen becomes the current screen for a {@link Game}. */\n\tpublic void show ();\n\t\n\t/** Called when the screen should render itself.\n\t * @param delta The time in seconds since the last render. */\n\tpublic void render (float delta);\n\n\t/** @see ApplicationListener#resize(int, int) */\n\tpublic void resize (int width, int height);\n\n\t/** @see ApplicationListener#pause() */\n\tpublic void pause ();\n\n\t/** @see ApplicationListener#resume() */\n\tpublic void resume ();\n\n\t/** Called when this screen is no longer the current screen for a {@link Game}. */\n\tpublic void hide ();\n\n\t/** Called when this screen should release all resources. */\n\tpublic void dispose ();\n}\n{% endcodeblock   %}\n\n这里的render方法可以用了来**更好的**实现我们的逻辑，因为参数附加了当前帧与上一帧相差的秒数（float），可以更好的更新我们的逻辑。\n\nGame 中负责Screen的调度，我们可以通过 {% label primary@com.badlogic.gdx.Game#setScreen %}  方法来设置当前需要渲染以及更新的screen\n\n### **Batch**\nBatch 是我们整个程序的画笔，这个画笔有很多类型，并且由于每种batch都没有一个统一的抽象规范，目前是没有所谓的batch基类的，我们只能找到一些各种实现类。比如我们上面见到的  {% label primary@com.badlogic.gdx.graphics.g2d.SpriteBatch %} ，就是专门用于绘制纹理图片的，还有可以绘制各种形状的 {% label primary@com.badlogic.gdx.graphics.glutils.ShapeRenderer%},这个叫做render的类也是起到batch的作用。甚至还有可以绘制3D模型的 {% label primary@com.badlogic.gdx.graphics.g3d.ModelBatch %}\nbatch底层使用的起始都是opengl。这是一个计算机图形统一接口。\n\n### **Camera**\nCamera顾名思义，就是我们整个游戏中的{% label @相机%}, 它的作用其实是处理我们游戏中的各种坐标变换，游戏视角的切换等等\nCamera的底层其实是一个 {% label @四维矩阵%},这一部分也是OpenGL的知识.\n\n\n### **Input**\nInput是游戏中不可缺少的，负责处理用户输入，有了用户输入才能有交互，有了交互才能称之为游戏。\n在LibGDX中，Input 相关的交互全在  {% label @Gdx.input %} 这个全局静态引用中。 Input 最基础的用法是：\n{% codeblock  Input lang:java %}\n\t\t// 获取当前点击屏幕的坐标\n\t\tif (Gdx.input.isTouched()) {\n\t\t\tint x = Gdx.input.getX();\n\t\t\tint y = Gdx.input.getY();\n\t\t}\n{% endcodeblock   %}\n除此之外，还有很多使用方法，直接调用这个引用即可。\n需要注意：\n1. Gdx.input 这个全局静态引用的实现是基于你当前的系统来自动决定的。\n2. 上面这个获取坐标的方法获取到的其实是我们的屏幕坐标，也就是当前指针指向的像素点的坐标。这个坐标还需要使用我们的 {% label @Camera %} 换算才能被使用。Camera坐标换算可能需要在其他文章中仔细讲解.\n除了上面的这种最基本的控制，LibGDX还给我们提供了一种更加方便的封装，那就是 {% label success@com.badlogic.gdx.Input#setInputProcessor %}. 这个方法的参数 InputProcessor 是libgdx给我们封装好的一个输入处理接口，里面有几乎我们能用到的所有输入处理。我们只需要实现对应的输入处理方法即可。\n同时，libgdx还内置了一个InputMultiplexer来同时处理多个Input，源码比较简单，就是内置了一个集合遍历，故不在此详述。\n\n\n### **Asset**\nAsset,游戏资源，关于我们如何加载游戏资源，我们可以使用 {% label success@Gdx.files %} 这个全局静态引用来获取我们所需要的文件。\n获取到的文件是一个 {% label @com.badlogic.gdx.files.FileHandle %}, 我们可以使用这个handle来生成我们想要的各种游戏内素材，比如：\n\n{% codeblock  Asset lang:java %}\n        Texture pic = new Texture(Gdx.files.internal(\"图片位置\")); // 获取图片\n        Music music = Gdx.audio.newMusic(Gdx.files.internal(\"音乐文件位置\")) ;// 获取长音乐;\n        Sound sound = Gdx.audio.newSound(Gdx.files.internal(\"音乐文件位置\")) ;// 获取短音效;\n{% endcodeblock   %}\n这里文件位置使用的是internal。internal代表是从我们项目内部来获取资源的。\n![asset01](Libgdx_asset01.png)\n这也是我们初始代码获取默认图片的方式\n\n关于几种file的获取方式，可以参考chatgpt的回答：\n```\nClasspath (类路径)：\n\n路径类型： classpath:/path/to/file\n说明： 这是相对于类路径的文件位置。这意味着文件应该位于你的类路径（例如，src 目录）下。\n示例： 如果你有一个位于 \"assets/images/myimage.png\" 的文件，你可以通过 Gdx.files.classpath(\"assets/images/myimage.png\") 获取它。\nInternal (内部文件)：\n\n路径类型： internal:/path/to/file\n说明： 这是相对于应用程序的根目录的文件位置。这通常用于存储在应用程序打包时一起分发的资源。\n示例： 如果你的应用程序包含 \"data/config.txt\" 文件，你可以通过 Gdx.files.internal(\"data/config.txt\") 获取它。\nExternal (外部文件)：\n\n路径类型： external:/path/to/file\n说明： 这是外部存储设备上的文件位置，例如 SD 卡。这允许你访问设备上的外部文件系统。\n示例： 如果你希望访问 SD 卡上的 \"MyApp/data/config.txt\" 文件，你可以通过 Gdx.files.external(\"MyApp/data/config.txt\") 获取它。\nAbsolute (绝对路径)：\n\n路径类型： absolute:/path/to/file\n说明： 这是一个绝对路径，允许你指定文件系统中的完整路径。\n示例： 如果你有一个绝对路径为 \"/home/user/documents/file.txt\" 的文件，你可以通过 Gdx.files.absolute(\"/home/user/documents/file.txt\") 获取它。\n```\n总之，我目前最常用的就是internal\n\n## LibGDX 内置 Enviroment\nlibgdx 内置了一些可以用来在程序运行中获取资源或者修改程序参数的功能类。这些enviroment被以单例模式放在了 com.badlogic.gdx.Gdx 类中。\n其中每一项都会根据当前运行的系统来分别init。\n{% codeblock  Gdx lang:java %}\npublic class Gdx {\n\tpublic static Application app;\n\tpublic static Graphics graphics;\n\tpublic static Audio audio;\n\tpublic static Input input;\n\tpublic static Files files;\n\tpublic static Net net;\n\n\tpublic static GL20 gl;\n\tpublic static GL20 gl20;\n\tpublic static GL30 gl30;\n}\n{% endcodeblock %}\n\n比如，我们可以使用其中的 audio 来管理音频，可以使用files来管理文件资源，可以使用input来处理输入。\n\n## 参考\n[官方文档](https://libgdx.com/wiki/start/project-generation)\n[官方simple教程](https://libgdx.com/wiki/start/a-simple-game)","slug":"LIBGDX-Record","published":1,"updated":"2024-03-02T14:34:03.602Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7e000b1wu17d138uay","content":"<h1 id=\"LIBGDX-游戏引擎\"><a href=\"#LIBGDX-游戏引擎\" class=\"headerlink\" title=\"LIBGDX 游戏引擎\"></a>LIBGDX 游戏引擎</h1><blockquote class=\"blockquote-center\">\n<p>一款使用OpenGL 的 Java 游戏引擎 </p>\n\n</blockquote>\n<p><img src=\"/2023/12/18/LIBGDX-Record/libgdx_logo.svg\" alt=\"logo\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p><b>libGDX</b> is a cross-platform Java game development framework based on OpenGL (ES), designed for Windows, Linux, macOS, Android, web browsers, and iOS. It provides a robust and well-established environment for rapid prototyping and iterative development. Unlike other frameworks, libGDX does not impose a specific design or coding style, allowing you the freedom to create games according to your preferences.<br><br><br>github： <a href=\"https://github.com/libgdx/libgdx\">https://github.com/libgdx/libgdx</a><br><br></p>\n</blockquote>\n<hr>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>JDK： 建议 11-18. 我个人使用JDK11，感觉非常良好</li>\n<li>开发工具，正常的java开发集成工具都可以，我个人使用JetBrain的Idea</li>\n<li>依赖管理工具，libgdx使用的是gradle进行包管理，所以最好提前安装gradle。我本地安装的是7.4.2. 如果不提前手动下载，后面导入可能会麻烦一些。</li>\n<li>初始化项目：<ul>\n<li>下载官方的初始化工具，目前地址： <a href=\"https://libgdx.com/wiki/start/project-generation\">https://libgdx.com/wiki/start/project-generation</a> （最新版）</li>\n<li>或者可以下载 1.10 版，因为我就是用这个版本开发的。<a href=\"https://github.com/libgdx/libgdx/releases\">https://github.com/libgdx/libgdx/releases</a> 可以在这里找到历史版本，选择1.10.0即可。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init!\"></a>Init!</h3><p>好了，现在我们可以尝试开始我们的第一个项目了。<br><br><br><br>首先，打开我们刚刚下载好的初始化工具： <br><br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init01.png\" alt=\"init01\"><br><br><br>关于第6点打包模式，个人建议勾选desktop，方便桌面调试，或者直接开发桌面应用。andriod也推荐勾选，因为这个引擎起始主要是为了andriod游戏而做的，大部分资源文件都会放在andriod项目下。不管你开发的是什么应用。<br><br>至于更多的第三方依赖，暂时用不到，可以不需要管。然后，我们直接点击generate生成即可.<br><br>点击生成后，会自动在目标文件夹下生成初始化的代码，并且会尝试使用gradle导入依赖，但是此时极有可能因为本地JAVA_HOME等原因导入失败，这个失败我们可以先不去管，忽略它，直接使用我们的开发工具（我使用的IDEA）打开该项目即可。<br><br>在使用我们的开发工具打开项目后，首先建议修改默认的gradle配置，更改为自己下载好的版本。<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init02.png\" alt=\"init02\"><br><br>这样，导入依赖会更快更方便，不然的话，我本地实测会比较慢。<br><br>然后接下来就让gradle自动构建就可以了。</p>\n<h3 id=\"Hello-World-1\"><a href=\"#Hello-World-1\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>构建好之后，项目看起来应该是这个样子的:<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init03.png\" alt=\"init03\"><br><br>其中，desktop目录中，存在一个名为DesktopLauncher的启动类，我们可以直接运行这个启动类。应该会看到一个应用程序启动，如下图：<br><br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init04.png\" alt=\"init04\"><br><br>如果看到这个画面，恭喜你，我们已经成功的初始化了一个游戏！</p>\n<hr>\n<p>现在我们看到的仅仅是一个libgdx logo的图片以及红色背景。这显然不是我们最终想要的，我们至少想要一个自己的<strong>hello world</strong><br><br>我们就需要认识一下core文件夹，下面有一个初始化自带的一个Class，MyGdxGame，它长这个样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mygdx.game;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.ApplicationAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.Texture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g2d.SpriteBatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.ScreenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGdxGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationAdapter</span> &#123;</span><br><span class=\"line\">\tSpriteBatch batch; <span class=\"comment\">// 画笔，或者说专门画图片(Sprite)的画笔</span></span><br><span class=\"line\">\tTexture img; <span class=\"comment\">// 图片，我们看到的libgdx logo 就是它</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 当前类初始化的方法</span></span><br><span class=\"line\">\t\tbatch = <span class=\"keyword\">new</span> <span class=\"title class_\">SpriteBatch</span>(); <span class=\"comment\">// 初始化画笔</span></span><br><span class=\"line\">\t\timg = <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>); <span class=\"comment\">// 初始化 加载 图片</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 渲染函数，可以理解为程序的每一帧需要做什么，这里也是程序的主逻辑</span></span><br><span class=\"line\">\t\tScreenUtils.clear(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 设置屏幕背景色</span></span><br><span class=\"line\">\t\tbatch.begin();</span><br><span class=\"line\">\t\tbatch.draw(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//  使用画笔绘制图片，图片的位置指定在 （0，0） 处</span></span><br><span class=\"line\">\t\tbatch.end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 销毁方法，程序运行中的许多资源（Disposable）都需要释放</span></span><br><span class=\"line\">\t\tbatch.dispose();</span><br><span class=\"line\">\t\timg.dispose();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正是上面这段代码的render函数绘制出了我们的图片，这个其实也是整个程序的主逻辑。<br>如果我们想要更改渲染的东西，那么我们要做的工作就是想办法在这里渲染我们想要的东西</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><h3 id=\"Game-Screen\"><a href=\"#Game-Screen\" class=\"headerlink\" title=\"Game Screen\"></a><strong>Game Screen</strong></h3><p>com.badlogic.gdx.ApplicationListener 可以算作整个游戏的入口，我们需要手动实现它。它里面的render方法就是我们的主逻辑。但是但看这个接口，是有点抽象的，因为我们还不太了解具体该怎么做。幸好，libgdx给了我们一个比较好的实现类：<strong>com.badlogic.gdx.Game</strong><br>我们现在已经看到Game类是实现了ApplicationListener接口的，那么我们可以试着把系统自动给我们生成的MyGdxGame类改成继承Game类来试一下.更改后：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGdxGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Game</span> &#123; <span class=\"comment\">// 只有父类变成了Game</span></span><br><span class=\"line\">\tSpriteBatch batch;</span><br><span class=\"line\">\tTexture img;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tbatch = <span class=\"keyword\">new</span> <span class=\"title class_\">SpriteBatch</span>();</span><br><span class=\"line\">\t\timg = <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tScreenUtils.clear(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tbatch.begin();</span><br><span class=\"line\">\t\tbatch.draw(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tbatch.end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tbatch.dispose();</span><br><span class=\"line\">\t\timg.dispose();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再次运行，发现没有变化，那么就证明我们更换正确了。我们现在开始就可以使用这个Game当作游戏的起点了！<br>还有另外一个组件 <strong>Screen</strong><br><strong>Screen</strong> 是一个接口，代码如下： </p>\n<figure class=\"highlight java\"><figcaption><span>Screen.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Screen</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen becomes the current screen for a &#123;<span class=\"doctag\">@link</span> Game&#125;. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span> <span class=\"params\">()</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/** Called when the screen should render itself.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> delta The time in seconds since the last render. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">(<span class=\"type\">float</span> delta)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#resize(int, int) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resize</span> <span class=\"params\">(<span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#pause() */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pause</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#resume() */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resume</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen is no longer the current screen for a &#123;<span class=\"doctag\">@link</span> Game&#125;. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hide</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen should release all resources. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的render方法可以用了来<strong>更好的</strong>实现我们的逻辑，因为参数附加了当前帧与上一帧相差的秒数（float），可以更好的更新我们的逻辑。</p>\n<p>Game 中负责Screen的调度，我们可以通过 <mark class=\"label primary\">com.badlogic.gdx.Game#setScreen</mark>  方法来设置当前需要渲染以及更新的screen</p>\n<h3 id=\"Batch\"><a href=\"#Batch\" class=\"headerlink\" title=\"Batch\"></a><strong>Batch</strong></h3><p>Batch 是我们整个程序的画笔，这个画笔有很多类型，并且由于每种batch都没有一个统一的抽象规范，目前是没有所谓的batch基类的，我们只能找到一些各种实现类。比如我们上面见到的  <mark class=\"label primary\">com.badlogic.gdx.graphics.g2d.SpriteBatch</mark> ，就是专门用于绘制纹理图片的，还有可以绘制各种形状的 <mark class=\"label primary\">com.badlogic.gdx.graphics.glutils.ShapeRenderer</mark>,这个叫做render的类也是起到batch的作用。甚至还有可以绘制3D模型的 <mark class=\"label primary\">com.badlogic.gdx.graphics.g3d.ModelBatch</mark><br>batch底层使用的起始都是opengl。这是一个计算机图形统一接口。</p>\n<h3 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a><strong>Camera</strong></h3><p>Camera顾名思义，就是我们整个游戏中的<mark class=\"label \">相机</mark>, 它的作用其实是处理我们游戏中的各种坐标变换，游戏视角的切换等等<br>Camera的底层其实是一个 <mark class=\"label \">四维矩阵</mark>,这一部分也是OpenGL的知识.</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a><strong>Input</strong></h3><p>Input是游戏中不可缺少的，负责处理用户输入，有了用户输入才能有交互，有了交互才能称之为游戏。<br>在LibGDX中，Input 相关的交互全在  <mark class=\"label \">Gdx.input</mark> 这个全局静态引用中。 Input 最基础的用法是：</p>\n<figure class=\"highlight java\"><figcaption><span>Input</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前点击屏幕的坐标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Gdx.input.isTouched()) &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> Gdx.input.getX();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> Gdx.input.getY();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外，还有很多使用方法，直接调用这个引用即可。<br>需要注意：</p>\n<ol>\n<li>Gdx.input 这个全局静态引用的实现是基于你当前的系统来自动决定的。</li>\n<li>上面这个获取坐标的方法获取到的其实是我们的屏幕坐标，也就是当前指针指向的像素点的坐标。这个坐标还需要使用我们的 <mark class=\"label \">Camera</mark> 换算才能被使用。Camera坐标换算可能需要在其他文章中仔细讲解.<br>除了上面的这种最基本的控制，LibGDX还给我们提供了一种更加方便的封装，那就是 <mark class=\"label success\">com.badlogic.gdx.Input#setInputProcessor</mark>. 这个方法的参数 InputProcessor 是libgdx给我们封装好的一个输入处理接口，里面有几乎我们能用到的所有输入处理。我们只需要实现对应的输入处理方法即可。<br>同时，libgdx还内置了一个InputMultiplexer来同时处理多个Input，源码比较简单，就是内置了一个集合遍历，故不在此详述。</li>\n</ol>\n<h3 id=\"Asset\"><a href=\"#Asset\" class=\"headerlink\" title=\"Asset\"></a><strong>Asset</strong></h3><p>Asset,游戏资源，关于我们如何加载游戏资源，我们可以使用 <mark class=\"label success\">Gdx.files</mark> 这个全局静态引用来获取我们所需要的文件。<br>获取到的文件是一个 <mark class=\"label \">com.badlogic.gdx.files.FileHandle</mark>, 我们可以使用这个handle来生成我们想要的各种游戏内素材，比如：</p>\n<figure class=\"highlight java\"><figcaption><span>Asset</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Texture</span> <span class=\"variable\">pic</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(Gdx.files.internal(<span class=\"string\">&quot;图片位置&quot;</span>)); <span class=\"comment\">// 获取图片</span></span><br><span class=\"line\"><span class=\"type\">Music</span> <span class=\"variable\">music</span> <span class=\"operator\">=</span> Gdx.audio.newMusic(Gdx.files.internal(<span class=\"string\">&quot;音乐文件位置&quot;</span>)) ;<span class=\"comment\">// 获取长音乐;</span></span><br><span class=\"line\"><span class=\"type\">Sound</span> <span class=\"variable\">sound</span> <span class=\"operator\">=</span> Gdx.audio.newSound(Gdx.files.internal(<span class=\"string\">&quot;音乐文件位置&quot;</span>)) ;<span class=\"comment\">// 获取短音效;</span></span><br></pre></td></tr></table></figure>\n<p>这里文件位置使用的是internal。internal代表是从我们项目内部来获取资源的。<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_asset01.png\" alt=\"asset01\"><br>这也是我们初始代码获取默认图片的方式</p>\n<p>关于几种file的获取方式，可以参考chatgpt的回答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classpath (类路径)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： classpath:/path/to/file</span><br><span class=\"line\">说明： 这是相对于类路径的文件位置。这意味着文件应该位于你的类路径（例如，src 目录）下。</span><br><span class=\"line\">示例： 如果你有一个位于 &quot;assets/images/myimage.png&quot; 的文件，你可以通过 Gdx.files.classpath(&quot;assets/images/myimage.png&quot;) 获取它。</span><br><span class=\"line\">Internal (内部文件)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： internal:/path/to/file</span><br><span class=\"line\">说明： 这是相对于应用程序的根目录的文件位置。这通常用于存储在应用程序打包时一起分发的资源。</span><br><span class=\"line\">示例： 如果你的应用程序包含 &quot;data/config.txt&quot; 文件，你可以通过 Gdx.files.internal(&quot;data/config.txt&quot;) 获取它。</span><br><span class=\"line\">External (外部文件)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： external:/path/to/file</span><br><span class=\"line\">说明： 这是外部存储设备上的文件位置，例如 SD 卡。这允许你访问设备上的外部文件系统。</span><br><span class=\"line\">示例： 如果你希望访问 SD 卡上的 &quot;MyApp/data/config.txt&quot; 文件，你可以通过 Gdx.files.external(&quot;MyApp/data/config.txt&quot;) 获取它。</span><br><span class=\"line\">Absolute (绝对路径)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： absolute:/path/to/file</span><br><span class=\"line\">说明： 这是一个绝对路径，允许你指定文件系统中的完整路径。</span><br><span class=\"line\">示例： 如果你有一个绝对路径为 &quot;/home/user/documents/file.txt&quot; 的文件，你可以通过 Gdx.files.absolute(&quot;/home/user/documents/file.txt&quot;) 获取它。</span><br></pre></td></tr></table></figure>\n<p>总之，我目前最常用的就是internal</p>\n<h2 id=\"LibGDX-内置-Enviroment\"><a href=\"#LibGDX-内置-Enviroment\" class=\"headerlink\" title=\"LibGDX 内置 Enviroment\"></a>LibGDX 内置 Enviroment</h2><p>libgdx 内置了一些可以用来在程序运行中获取资源或者修改程序参数的功能类。这些enviroment被以单例模式放在了 com.badlogic.gdx.Gdx 类中。<br>其中每一项都会根据当前运行的系统来分别init。</p>\n<figure class=\"highlight java\"><figcaption><span>Gdx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Gdx</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Application app;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Graphics graphics;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Audio audio;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Input input;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Files files;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Net net;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL20 gl;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL20 gl20;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL30 gl30;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如，我们可以使用其中的 audio 来管理音频，可以使用files来管理文件资源，可以使用input来处理输入。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://libgdx.com/wiki/start/project-generation\">官方文档</a><br><a href=\"https://libgdx.com/wiki/start/a-simple-game\">官方simple教程</a></p>\n","length":2753,"excerpt":"<h1 id=\"LIBGDX-游戏引擎\"><a href=\"#LIBGDX-游戏引擎\" class=\"headerlink\" title=\"LIBGDX 游戏引擎\"></a>LIBGDX 游戏引擎</h1><blockquote class=\"blockquote-center\">\n<p>一款使用OpenGL 的 Java 游戏引擎 </p>\n\n</blockquote>\n<p><img src=\"/2023/12/18/LIBGDX-Record/libgdx_logo.svg\" alt=\"logo\"></p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p><b>libGDX</b> is a cross-platform Java game development framework based on OpenGL (ES), designed for Windows, Linux, macOS, Android, web browsers, and iOS. It provides a robust and well-established environment for rapid prototyping and iterative development. Unlike other frameworks, libGDX does not impose a specific design or coding style, allowing you the freedom to create games according to your preferences.<br><br><br>github： <a href=\"https://github.com/libgdx/libgdx\">https://github.com/libgdx/libgdx</a><br><br></p>\n</blockquote>\n<hr>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>JDK： 建议 11-18. 我个人使用JDK11，感觉非常良好</li>\n<li>开发工具，正常的java开发集成工具都可以，我个人使用JetBrain的Idea</li>\n<li>依赖管理工具，libgdx使用的是gradle进行包管理，所以最好提前安装gradle。我本地安装的是7.4.2. 如果不提前手动下载，后面导入可能会麻烦一些。</li>\n<li>初始化项目：<ul>\n<li>下载官方的初始化工具，目前地址： <a href=\"https://libgdx.com/wiki/start/project-generation\">https://libgdx.com/wiki/start/project-generation</a> （最新版）</li>\n<li>或者可以下载 1.10 版，因为我就是用这个版本开发的。<a href=\"https://github.com/libgdx/libgdx/releases\">https://github.com/libgdx/libgdx/releases</a> 可以在这里找到历史版本，选择1.10.0即可。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init!\"></a>Init!</h3><p>好了，现在我们可以尝试开始我们的第一个项目了。<br><br><br><br>首先，打开我们刚刚下载好的初始化工具： <br><br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init01.png\" alt=\"init01\"><br><br><br>关于第6点打包模式，个人建议勾选desktop，方便桌面调试，或者直接开发桌面应用。andriod也推荐勾选，因为这个引擎起始主要是为了andriod游戏而做的，大部分资源文件都会放在andriod项目下。不管你开发的是什么应用。<br><br>至于更多的第三方依赖，暂时用不到，可以不需要管。然后，我们直接点击generate生成即可.<br><br>点击生成后，会自动在目标文件夹下生成初始化的代码，并且会尝试使用gradle导入依赖，但是此时极有可能因为本地JAVA_HOME等原因导入失败，这个失败我们可以先不去管，忽略它，直接使用我们的开发工具（我使用的IDEA）打开该项目即可。<br><br>在使用我们的开发工具打开项目后，首先建议修改默认的gradle配置，更改为自己下载好的版本。<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init02.png\" alt=\"init02\"><br><br>这样，导入依赖会更快更方便，不然的话，我本地实测会比较慢。<br><br>然后接下来就让gradle自动构建就可以了。</p>\n<h3 id=\"Hello-World-1\"><a href=\"#Hello-World-1\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>构建好之后，项目看起来应该是这个样子的:<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init03.png\" alt=\"init03\"><br><br>其中，desktop目录中，存在一个名为DesktopLauncher的启动类，我们可以直接运行这个启动类。应该会看到一个应用程序启动，如下图：<br><br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_Init04.png\" alt=\"init04\"><br><br>如果看到这个画面，恭喜你，我们已经成功的初始化了一个游戏！</p>\n<hr>\n<p>现在我们看到的仅仅是一个libgdx logo的图片以及红色背景。这显然不是我们最终想要的，我们至少想要一个自己的<strong>hello world</strong><br><br>我们就需要认识一下core文件夹，下面有一个初始化自带的一个Class，MyGdxGame，它长这个样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mygdx.game;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.ApplicationAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.Texture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g2d.SpriteBatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.ScreenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGdxGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationAdapter</span> &#123;</span><br><span class=\"line\">\tSpriteBatch batch; <span class=\"comment\">// 画笔，或者说专门画图片(Sprite)的画笔</span></span><br><span class=\"line\">\tTexture img; <span class=\"comment\">// 图片，我们看到的libgdx logo 就是它</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 当前类初始化的方法</span></span><br><span class=\"line\">\t\tbatch = <span class=\"keyword\">new</span> <span class=\"title class_\">SpriteBatch</span>(); <span class=\"comment\">// 初始化画笔</span></span><br><span class=\"line\">\t\timg = <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>); <span class=\"comment\">// 初始化 加载 图片</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 渲染函数，可以理解为程序的每一帧需要做什么，这里也是程序的主逻辑</span></span><br><span class=\"line\">\t\tScreenUtils.clear(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 设置屏幕背景色</span></span><br><span class=\"line\">\t\tbatch.begin();</span><br><span class=\"line\">\t\tbatch.draw(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//  使用画笔绘制图片，图片的位置指定在 （0，0） 处</span></span><br><span class=\"line\">\t\tbatch.end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span> &#123; <span class=\"comment\">// 销毁方法，程序运行中的许多资源（Disposable）都需要释放</span></span><br><span class=\"line\">\t\tbatch.dispose();</span><br><span class=\"line\">\t\timg.dispose();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正是上面这段代码的render函数绘制出了我们的图片，这个其实也是整个程序的主逻辑。<br>如果我们想要更改渲染的东西，那么我们要做的工作就是想办法在这里渲染我们想要的东西</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><h3 id=\"Game-Screen\"><a href=\"#Game-Screen\" class=\"headerlink\" title=\"Game Screen\"></a><strong>Game Screen</strong></h3><p>com.badlogic.gdx.ApplicationListener 可以算作整个游戏的入口，我们需要手动实现它。它里面的render方法就是我们的主逻辑。但是但看这个接口，是有点抽象的，因为我们还不太了解具体该怎么做。幸好，libgdx给了我们一个比较好的实现类：<strong>com.badlogic.gdx.Game</strong><br>我们现在已经看到Game类是实现了ApplicationListener接口的，那么我们可以试着把系统自动给我们生成的MyGdxGame类改成继承Game类来试一下.更改后：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGdxGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Game</span> &#123; <span class=\"comment\">// 只有父类变成了Game</span></span><br><span class=\"line\">\tSpriteBatch batch;</span><br><span class=\"line\">\tTexture img;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tbatch = <span class=\"keyword\">new</span> <span class=\"title class_\">SpriteBatch</span>();</span><br><span class=\"line\">\t\timg = <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tScreenUtils.clear(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tbatch.begin();</span><br><span class=\"line\">\t\tbatch.draw(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tbatch.end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tbatch.dispose();</span><br><span class=\"line\">\t\timg.dispose();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再次运行，发现没有变化，那么就证明我们更换正确了。我们现在开始就可以使用这个Game当作游戏的起点了！<br>还有另外一个组件 <strong>Screen</strong><br><strong>Screen</strong> 是一个接口，代码如下： </p>\n<figure class=\"highlight java\"><figcaption><span>Screen.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Screen</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen becomes the current screen for a &#123;<span class=\"doctag\">@link</span> Game&#125;. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span> <span class=\"params\">()</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/** Called when the screen should render itself.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> delta The time in seconds since the last render. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">(<span class=\"type\">float</span> delta)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#resize(int, int) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resize</span> <span class=\"params\">(<span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#pause() */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pause</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@see</span> ApplicationListener#resume() */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resume</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen is no longer the current screen for a &#123;<span class=\"doctag\">@link</span> Game&#125;. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hide</span> <span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Called when this screen should release all resources. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dispose</span> <span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的render方法可以用了来<strong>更好的</strong>实现我们的逻辑，因为参数附加了当前帧与上一帧相差的秒数（float），可以更好的更新我们的逻辑。</p>\n<p>Game 中负责Screen的调度，我们可以通过 <mark class=\"label primary\">com.badlogic.gdx.Game#setScreen</mark>  方法来设置当前需要渲染以及更新的screen</p>\n<h3 id=\"Batch\"><a href=\"#Batch\" class=\"headerlink\" title=\"Batch\"></a><strong>Batch</strong></h3><p>Batch 是我们整个程序的画笔，这个画笔有很多类型，并且由于每种batch都没有一个统一的抽象规范，目前是没有所谓的batch基类的，我们只能找到一些各种实现类。比如我们上面见到的  <mark class=\"label primary\">com.badlogic.gdx.graphics.g2d.SpriteBatch</mark> ，就是专门用于绘制纹理图片的，还有可以绘制各种形状的 <mark class=\"label primary\">com.badlogic.gdx.graphics.glutils.ShapeRenderer</mark>,这个叫做render的类也是起到batch的作用。甚至还有可以绘制3D模型的 <mark class=\"label primary\">com.badlogic.gdx.graphics.g3d.ModelBatch</mark><br>batch底层使用的起始都是opengl。这是一个计算机图形统一接口。</p>\n<h3 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a><strong>Camera</strong></h3><p>Camera顾名思义，就是我们整个游戏中的<mark class=\"label \">相机</mark>, 它的作用其实是处理我们游戏中的各种坐标变换，游戏视角的切换等等<br>Camera的底层其实是一个 <mark class=\"label \">四维矩阵</mark>,这一部分也是OpenGL的知识.</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a><strong>Input</strong></h3><p>Input是游戏中不可缺少的，负责处理用户输入，有了用户输入才能有交互，有了交互才能称之为游戏。<br>在LibGDX中，Input 相关的交互全在  <mark class=\"label \">Gdx.input</mark> 这个全局静态引用中。 Input 最基础的用法是：</p>\n<figure class=\"highlight java\"><figcaption><span>Input</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前点击屏幕的坐标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Gdx.input.isTouched()) &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> Gdx.input.getX();</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> Gdx.input.getY();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外，还有很多使用方法，直接调用这个引用即可。<br>需要注意：</p>\n<ol>\n<li>Gdx.input 这个全局静态引用的实现是基于你当前的系统来自动决定的。</li>\n<li>上面这个获取坐标的方法获取到的其实是我们的屏幕坐标，也就是当前指针指向的像素点的坐标。这个坐标还需要使用我们的 <mark class=\"label \">Camera</mark> 换算才能被使用。Camera坐标换算可能需要在其他文章中仔细讲解.<br>除了上面的这种最基本的控制，LibGDX还给我们提供了一种更加方便的封装，那就是 <mark class=\"label success\">com.badlogic.gdx.Input#setInputProcessor</mark>. 这个方法的参数 InputProcessor 是libgdx给我们封装好的一个输入处理接口，里面有几乎我们能用到的所有输入处理。我们只需要实现对应的输入处理方法即可。<br>同时，libgdx还内置了一个InputMultiplexer来同时处理多个Input，源码比较简单，就是内置了一个集合遍历，故不在此详述。</li>\n</ol>\n<h3 id=\"Asset\"><a href=\"#Asset\" class=\"headerlink\" title=\"Asset\"></a><strong>Asset</strong></h3><p>Asset,游戏资源，关于我们如何加载游戏资源，我们可以使用 <mark class=\"label success\">Gdx.files</mark> 这个全局静态引用来获取我们所需要的文件。<br>获取到的文件是一个 <mark class=\"label \">com.badlogic.gdx.files.FileHandle</mark>, 我们可以使用这个handle来生成我们想要的各种游戏内素材，比如：</p>\n<figure class=\"highlight java\"><figcaption><span>Asset</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Texture</span> <span class=\"variable\">pic</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(Gdx.files.internal(<span class=\"string\">&quot;图片位置&quot;</span>)); <span class=\"comment\">// 获取图片</span></span><br><span class=\"line\"><span class=\"type\">Music</span> <span class=\"variable\">music</span> <span class=\"operator\">=</span> Gdx.audio.newMusic(Gdx.files.internal(<span class=\"string\">&quot;音乐文件位置&quot;</span>)) ;<span class=\"comment\">// 获取长音乐;</span></span><br><span class=\"line\"><span class=\"type\">Sound</span> <span class=\"variable\">sound</span> <span class=\"operator\">=</span> Gdx.audio.newSound(Gdx.files.internal(<span class=\"string\">&quot;音乐文件位置&quot;</span>)) ;<span class=\"comment\">// 获取短音效;</span></span><br></pre></td></tr></table></figure>\n<p>这里文件位置使用的是internal。internal代表是从我们项目内部来获取资源的。<br><img src=\"/2023/12/18/LIBGDX-Record/Libgdx_asset01.png\" alt=\"asset01\"><br>这也是我们初始代码获取默认图片的方式</p>\n<p>关于几种file的获取方式，可以参考chatgpt的回答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classpath (类路径)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： classpath:/path/to/file</span><br><span class=\"line\">说明： 这是相对于类路径的文件位置。这意味着文件应该位于你的类路径（例如，src 目录）下。</span><br><span class=\"line\">示例： 如果你有一个位于 &quot;assets/images/myimage.png&quot; 的文件，你可以通过 Gdx.files.classpath(&quot;assets/images/myimage.png&quot;) 获取它。</span><br><span class=\"line\">Internal (内部文件)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： internal:/path/to/file</span><br><span class=\"line\">说明： 这是相对于应用程序的根目录的文件位置。这通常用于存储在应用程序打包时一起分发的资源。</span><br><span class=\"line\">示例： 如果你的应用程序包含 &quot;data/config.txt&quot; 文件，你可以通过 Gdx.files.internal(&quot;data/config.txt&quot;) 获取它。</span><br><span class=\"line\">External (外部文件)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： external:/path/to/file</span><br><span class=\"line\">说明： 这是外部存储设备上的文件位置，例如 SD 卡。这允许你访问设备上的外部文件系统。</span><br><span class=\"line\">示例： 如果你希望访问 SD 卡上的 &quot;MyApp/data/config.txt&quot; 文件，你可以通过 Gdx.files.external(&quot;MyApp/data/config.txt&quot;) 获取它。</span><br><span class=\"line\">Absolute (绝对路径)：</span><br><span class=\"line\"></span><br><span class=\"line\">路径类型： absolute:/path/to/file</span><br><span class=\"line\">说明： 这是一个绝对路径，允许你指定文件系统中的完整路径。</span><br><span class=\"line\">示例： 如果你有一个绝对路径为 &quot;/home/user/documents/file.txt&quot; 的文件，你可以通过 Gdx.files.absolute(&quot;/home/user/documents/file.txt&quot;) 获取它。</span><br></pre></td></tr></table></figure>\n<p>总之，我目前最常用的就是internal</p>\n<h2 id=\"LibGDX-内置-Enviroment\"><a href=\"#LibGDX-内置-Enviroment\" class=\"headerlink\" title=\"LibGDX 内置 Enviroment\"></a>LibGDX 内置 Enviroment</h2><p>libgdx 内置了一些可以用来在程序运行中获取资源或者修改程序参数的功能类。这些enviroment被以单例模式放在了 com.badlogic.gdx.Gdx 类中。<br>其中每一项都会根据当前运行的系统来分别init。</p>\n<figure class=\"highlight java\"><figcaption><span>Gdx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Gdx</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Application app;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Graphics graphics;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Audio audio;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Input input;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Files files;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Net net;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL20 gl;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL20 gl20;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GL30 gl30;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如，我们可以使用其中的 audio 来管理音频，可以使用files来管理文件资源，可以使用input来处理输入。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://libgdx.com/wiki/start/project-generation\">官方文档</a><br><a href=\"https://libgdx.com/wiki/start/a-simple-game\">官方simple教程</a></p>"},{"title":"在C++中使用freetype显示中文的问题","date":"2024-03-30T17:43:10.000Z","_content":"\n# 问题\n在使用opengl渲染时，尝试使用freetype来渲染文字，但是在渲染中文汉字的时候遇到了问题，无法正确渲染中文\n\n# 解决方案\n直接先说解决方案，在从face中获取glyph时，使用wstring代替string或者char *，并且在渲染查找glyph时，也这么做:\n\n<!-- more -->\n\n```c++\n\nvoid demo()\n{\n    std::wstring text = L\"HelloWorld中文测试\";\n    FT_Library ft;\n    camera = new OrthographicCamera(800, 600);\n    // All functions return a value different than 0 whenever an error occurred\n    if (FT_Init_FreeType(&ft))\n        std::cout << \"ERROR::FREETYPE: Could not init FreeType Library\" << std::endl;\n    FT_Face face;\n    if (FT_New_Face(ft, \"C:/Windows/Fonts/SIMLI.TTF\", 0, &face))\n        std::cout << \"ERROR::FREETYPE: Failed to load font\" << std::endl;\n\n    FT_Set_Pixel_Sizes(face, 0, 20);\n\n    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n    for (int x = 0; x < size; x++)\n    {\n        wchar_t c = text[x];\n        // FT_ULong\n        GLint ch = static_cast<GLint>(c);\n        if (CharacterCache.find(ch) != CharacterCache.end())\n        {\n            return;\n        }\n        // Load character glyph\n        // FT_Load_Glyph\n        // FT_Get_Char_Index(face, text[i])\n        if (FT_Load_Glyph(face, FT_Get_Char_Index(face, ch), FT_LOAD_RENDER))\n        {\n            std::cout << \"ERROR::FREETYTPE: Failed to load Glyph\" << std::endl;\n            continue;\n        }\n        // Generate texture\n        GLuint texture;\n        glGenTextures(1, &texture);\n        glBindTexture(GL_TEXTURE_2D, texture);\n        glTexImage2D(\n            GL_TEXTURE_2D,\n            0,\n            GL_RED,\n            face->glyph->bitmap.width,\n            face->glyph->bitmap.rows,\n            0,\n            GL_RED,\n            GL_UNSIGNED_BYTE,\n            face->glyph->bitmap.buffer);\n        // Set texture options\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n        std::cout << \"ch: \" << ch << \" bind to id: \" << texture << std::endl;\n\n        // Now store character for later use\n        Character character = {\n            texture,\n            glm::ivec2(face->glyph->bitmap.width, face->glyph->bitmap.rows),\n            glm::ivec2(face->glyph->bitmap_left, face->glyph->bitmap_top),\n            face->glyph->advance.x};\n        // CharacterCache.insert(std::pair<FT_ULong, Character>(ch, character));\n        CharacterCache[ch] = character;\n    }\n}\n```\n\n渲染时的代码如下:\n```c++\nvoid demoRender () {\n    std::wstring text = L\"HelloWorld中文测试\";\n     // Activate corresponding render state\n    glEnable(GL_BLEND);\n    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n    program->use();\n    glUniform3f(glGetUniformLocation(program->ID, \"u_color\"), color.x, color.y, color.z);\n    program->setUniformMat4(\"projection\", camera->projection);\n    glActiveTexture(GL_TEXTURE0);\n    glBindVertexArray(VAO);\n\n    for (int i = 0; i < size; i++)\n    {\n        Character ch = CharacterCache[text[i]];\n\n        GLfloat xpos = x + ch.Bearing.x * scale;\n        GLfloat ypos = y - (ch.Size.y - ch.Bearing.y) * scale;\n\n        GLfloat w = ch.Size.x * scale;\n        GLfloat h = ch.Size.y * scale;\n        // Update VBO for each character\n        GLfloat vertices[6][4] = {\n            {xpos, ypos + h, 0.0, 0.0},\n            {xpos, ypos, 0.0, 1.0},\n            {xpos + w, ypos, 1.0, 1.0},\n\n            {xpos, ypos + h, 0.0, 0.0},\n            {xpos + w, ypos, 1.0, 1.0},\n            {xpos + w, ypos + h, 1.0, 0.0}};\n        // Render glyph texture over quad\n        glBindTexture(GL_TEXTURE_2D, ch.TextureID);\n        // Update content of VBO memory\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertices), vertices); // Be sure to use glBufferSubData and not glBufferData\n        glBindBuffer(GL_ARRAY_BUFFER, 0);\n        // Render quad\n        glDrawArrays(GL_TRIANGLES, 0, 6);\n        // Now advance cursors for next glyph (note that advance is number of 1/64 pixels)\n        x += (ch.Advance >> 6) * scale; // Bitshift by 6 to get value in pixels (2^6 = 64 (divide amount of 1/64th pixels by 64 to get amount of pixels))\n        // text++;\n    }\n    glBindVertexArray(0);\n    glBindTexture(GL_TEXTURE_2D, 0);\n    glDisable(GL_BLEND);\n}\n```\n好了，freetype已经可以正常显示中文了。\n![2024-03-31T095450](2024-03-31T095450.png)\n# 排查过程\n首先，我是按照 [教程](https://learnopengl-cn.github.io/06%20In%20Practice/02%20Text%20Rendering) 来学习freetype渲染文字的。\n教程原版是英文的，所以原版教程中的渲染只有基础的128个ascII码。我这边便想到了拓展到实现中文渲染。（因为在libGDX中，也是使用freetype，是可以正常渲染中文的）.\n\n于是我便写了如下的代码:\n```c++\n\nvoid CharacterManager::create(std::string &text)\n{\n    FT_Library ft;\n    camera = new OrthographicCamera(800, 600);\n    // All functions return a value different than 0 whenever an error occurred\n    if (FT_Init_FreeType(&ft))\n        std::cout << \"ERROR::FREETYPE: Could not init FreeType Library\" << std::endl;\n    FT_Face face;\n    if (FT_New_Face(ft, \"C:/Windows/Fonts/BRLNSDB.TTF\", 0, &face))\n        std::cout << \"ERROR::FREETYPE: Failed to load font\" << std::endl;\n\n    // Set size to load glyphs as\n    FT_Set_Pixel_Sizes(face, 0, 48);\n    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\n    for (int x = 0; x < text.size(); x++)\n    {\n        char c = text[x];\n\n        // FT_ULong\n        loadCharater(c, face);\n    }\n\n    FT_Done_Face(face);\n    FT_Done_FreeType(ft);\n    glGenVertexArrays(1, &VAO);\n    glGenBuffers(1, &VBO);\n    glBindVertexArray(VAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat) * 6 * 4, NULL, GL_DYNAMIC_DRAW);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 4 * sizeof(GLfloat), 0);\n    glBindBuffer(GL_ARRAY_BUFFER, 0);\n    glBindVertexArray(0);\n}\n\n```\n注意，我这里使用的是`std::string`,底层还是char数组.\n于是，在render的时候所有的中文全部被变成了**未定义的方框**。\n这个时候我比较好奇了，最主要的是控制台是可以正常输出这段字符串char数组的。\n于是我先`百度`了c++ freetype 中文 等关键字，刷到了这篇[CSDN文章](https://blog.csdn.net/qq_22655017/article/details/90034431),我意识到了，中文跟一般的英文字符不一样，中文使用的unicode，一个unicode = 2byte。\n但是在c++中，char是等同于byte的。所以一个char是无法存储一个中文汉字的。\n> 这点跟JAVA不一样，java中，char类型底层就是两个字节，所以可以正常使用中文.可能java底层的c++代码中，char使用的就是wchar\n\n于是，我把代码中的char*换成了wchar_t,但是我首先想到的是先在控制台输出一下wchar_t，以免对项目有不必要的改动。\n这一试，就出现了问题，控制台无法打印wchar_t，于是，我感觉可能是出问题了，我就去`stack overflow`搜了wchar 与 char之间的转换，以及如何让系统使用wchar。但是好像并没有特别好的结果。\n\n但最后我突然想到，freetype是查找char使用方法`FT_Get_Char_Index`中,charcode的类型其实是 `FT_ULong`，是一个无符号的long，c++中`long`的范围至少有32位，那么我直接使用wstring中的wchar强转成long来直接放入查找可以吗？\n于是我就进行了尝试，结果是OK的。\n\n# 总结\n这个问题其实本身并不难，甚至比较基础，但是查询过程中，由于对c++熟悉度不够，还是走了很多弯路。甚至中间曾经出现过使用nullptr的情况，这些跟java有太多不一样了。\n\n但最后，如何在控制台输出wchar还是没有解决。\n对于这个问题，我有自己的想法<span style='text-decoration: line-through;'>(猜测)</span>,那就是控制台是windows平台的，windows平台可能对底层的char进行了自己的优化，在展示时会根据char值来判断是否是unicode来进行展示，判断是unicode则使用unicode来展示，所以直接cout输出char数组是可以展示中文的。\n但是对于wchar，可能windows底层并没有对其优化，想要展示还需要我们开发做一些其他工作。\n至于java为什么即使使用宽字节也可以正常展示中文，我猜测可能是虚拟机（VM）底层对其进行了优化，使其能够将宽字节正确处理成unicode。\n\n最后附上[项目地址](https://github.com/voidvvv/LinkA)","source":"_posts/c++_freetype_unicode.md","raw":"---\ntitle: 在C++中使用freetype显示中文的问题\ndate: 2024-03-31T09:43:10+08:00\ncategories:\n- issue\ntags:\n- C++\n- FreeType\n---\n\n# 问题\n在使用opengl渲染时，尝试使用freetype来渲染文字，但是在渲染中文汉字的时候遇到了问题，无法正确渲染中文\n\n# 解决方案\n直接先说解决方案，在从face中获取glyph时，使用wstring代替string或者char *，并且在渲染查找glyph时，也这么做:\n\n<!-- more -->\n\n```c++\n\nvoid demo()\n{\n    std::wstring text = L\"HelloWorld中文测试\";\n    FT_Library ft;\n    camera = new OrthographicCamera(800, 600);\n    // All functions return a value different than 0 whenever an error occurred\n    if (FT_Init_FreeType(&ft))\n        std::cout << \"ERROR::FREETYPE: Could not init FreeType Library\" << std::endl;\n    FT_Face face;\n    if (FT_New_Face(ft, \"C:/Windows/Fonts/SIMLI.TTF\", 0, &face))\n        std::cout << \"ERROR::FREETYPE: Failed to load font\" << std::endl;\n\n    FT_Set_Pixel_Sizes(face, 0, 20);\n\n    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n    for (int x = 0; x < size; x++)\n    {\n        wchar_t c = text[x];\n        // FT_ULong\n        GLint ch = static_cast<GLint>(c);\n        if (CharacterCache.find(ch) != CharacterCache.end())\n        {\n            return;\n        }\n        // Load character glyph\n        // FT_Load_Glyph\n        // FT_Get_Char_Index(face, text[i])\n        if (FT_Load_Glyph(face, FT_Get_Char_Index(face, ch), FT_LOAD_RENDER))\n        {\n            std::cout << \"ERROR::FREETYTPE: Failed to load Glyph\" << std::endl;\n            continue;\n        }\n        // Generate texture\n        GLuint texture;\n        glGenTextures(1, &texture);\n        glBindTexture(GL_TEXTURE_2D, texture);\n        glTexImage2D(\n            GL_TEXTURE_2D,\n            0,\n            GL_RED,\n            face->glyph->bitmap.width,\n            face->glyph->bitmap.rows,\n            0,\n            GL_RED,\n            GL_UNSIGNED_BYTE,\n            face->glyph->bitmap.buffer);\n        // Set texture options\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n        std::cout << \"ch: \" << ch << \" bind to id: \" << texture << std::endl;\n\n        // Now store character for later use\n        Character character = {\n            texture,\n            glm::ivec2(face->glyph->bitmap.width, face->glyph->bitmap.rows),\n            glm::ivec2(face->glyph->bitmap_left, face->glyph->bitmap_top),\n            face->glyph->advance.x};\n        // CharacterCache.insert(std::pair<FT_ULong, Character>(ch, character));\n        CharacterCache[ch] = character;\n    }\n}\n```\n\n渲染时的代码如下:\n```c++\nvoid demoRender () {\n    std::wstring text = L\"HelloWorld中文测试\";\n     // Activate corresponding render state\n    glEnable(GL_BLEND);\n    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n    program->use();\n    glUniform3f(glGetUniformLocation(program->ID, \"u_color\"), color.x, color.y, color.z);\n    program->setUniformMat4(\"projection\", camera->projection);\n    glActiveTexture(GL_TEXTURE0);\n    glBindVertexArray(VAO);\n\n    for (int i = 0; i < size; i++)\n    {\n        Character ch = CharacterCache[text[i]];\n\n        GLfloat xpos = x + ch.Bearing.x * scale;\n        GLfloat ypos = y - (ch.Size.y - ch.Bearing.y) * scale;\n\n        GLfloat w = ch.Size.x * scale;\n        GLfloat h = ch.Size.y * scale;\n        // Update VBO for each character\n        GLfloat vertices[6][4] = {\n            {xpos, ypos + h, 0.0, 0.0},\n            {xpos, ypos, 0.0, 1.0},\n            {xpos + w, ypos, 1.0, 1.0},\n\n            {xpos, ypos + h, 0.0, 0.0},\n            {xpos + w, ypos, 1.0, 1.0},\n            {xpos + w, ypos + h, 1.0, 0.0}};\n        // Render glyph texture over quad\n        glBindTexture(GL_TEXTURE_2D, ch.TextureID);\n        // Update content of VBO memory\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertices), vertices); // Be sure to use glBufferSubData and not glBufferData\n        glBindBuffer(GL_ARRAY_BUFFER, 0);\n        // Render quad\n        glDrawArrays(GL_TRIANGLES, 0, 6);\n        // Now advance cursors for next glyph (note that advance is number of 1/64 pixels)\n        x += (ch.Advance >> 6) * scale; // Bitshift by 6 to get value in pixels (2^6 = 64 (divide amount of 1/64th pixels by 64 to get amount of pixels))\n        // text++;\n    }\n    glBindVertexArray(0);\n    glBindTexture(GL_TEXTURE_2D, 0);\n    glDisable(GL_BLEND);\n}\n```\n好了，freetype已经可以正常显示中文了。\n![2024-03-31T095450](2024-03-31T095450.png)\n# 排查过程\n首先，我是按照 [教程](https://learnopengl-cn.github.io/06%20In%20Practice/02%20Text%20Rendering) 来学习freetype渲染文字的。\n教程原版是英文的，所以原版教程中的渲染只有基础的128个ascII码。我这边便想到了拓展到实现中文渲染。（因为在libGDX中，也是使用freetype，是可以正常渲染中文的）.\n\n于是我便写了如下的代码:\n```c++\n\nvoid CharacterManager::create(std::string &text)\n{\n    FT_Library ft;\n    camera = new OrthographicCamera(800, 600);\n    // All functions return a value different than 0 whenever an error occurred\n    if (FT_Init_FreeType(&ft))\n        std::cout << \"ERROR::FREETYPE: Could not init FreeType Library\" << std::endl;\n    FT_Face face;\n    if (FT_New_Face(ft, \"C:/Windows/Fonts/BRLNSDB.TTF\", 0, &face))\n        std::cout << \"ERROR::FREETYPE: Failed to load font\" << std::endl;\n\n    // Set size to load glyphs as\n    FT_Set_Pixel_Sizes(face, 0, 48);\n    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\n    for (int x = 0; x < text.size(); x++)\n    {\n        char c = text[x];\n\n        // FT_ULong\n        loadCharater(c, face);\n    }\n\n    FT_Done_Face(face);\n    FT_Done_FreeType(ft);\n    glGenVertexArrays(1, &VAO);\n    glGenBuffers(1, &VBO);\n    glBindVertexArray(VAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat) * 6 * 4, NULL, GL_DYNAMIC_DRAW);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 4 * sizeof(GLfloat), 0);\n    glBindBuffer(GL_ARRAY_BUFFER, 0);\n    glBindVertexArray(0);\n}\n\n```\n注意，我这里使用的是`std::string`,底层还是char数组.\n于是，在render的时候所有的中文全部被变成了**未定义的方框**。\n这个时候我比较好奇了，最主要的是控制台是可以正常输出这段字符串char数组的。\n于是我先`百度`了c++ freetype 中文 等关键字，刷到了这篇[CSDN文章](https://blog.csdn.net/qq_22655017/article/details/90034431),我意识到了，中文跟一般的英文字符不一样，中文使用的unicode，一个unicode = 2byte。\n但是在c++中，char是等同于byte的。所以一个char是无法存储一个中文汉字的。\n> 这点跟JAVA不一样，java中，char类型底层就是两个字节，所以可以正常使用中文.可能java底层的c++代码中，char使用的就是wchar\n\n于是，我把代码中的char*换成了wchar_t,但是我首先想到的是先在控制台输出一下wchar_t，以免对项目有不必要的改动。\n这一试，就出现了问题，控制台无法打印wchar_t，于是，我感觉可能是出问题了，我就去`stack overflow`搜了wchar 与 char之间的转换，以及如何让系统使用wchar。但是好像并没有特别好的结果。\n\n但最后我突然想到，freetype是查找char使用方法`FT_Get_Char_Index`中,charcode的类型其实是 `FT_ULong`，是一个无符号的long，c++中`long`的范围至少有32位，那么我直接使用wstring中的wchar强转成long来直接放入查找可以吗？\n于是我就进行了尝试，结果是OK的。\n\n# 总结\n这个问题其实本身并不难，甚至比较基础，但是查询过程中，由于对c++熟悉度不够，还是走了很多弯路。甚至中间曾经出现过使用nullptr的情况，这些跟java有太多不一样了。\n\n但最后，如何在控制台输出wchar还是没有解决。\n对于这个问题，我有自己的想法<span style='text-decoration: line-through;'>(猜测)</span>,那就是控制台是windows平台的，windows平台可能对底层的char进行了自己的优化，在展示时会根据char值来判断是否是unicode来进行展示，判断是unicode则使用unicode来展示，所以直接cout输出char数组是可以展示中文的。\n但是对于wchar，可能windows底层并没有对其优化，想要展示还需要我们开发做一些其他工作。\n至于java为什么即使使用宽字节也可以正常展示中文，我猜测可能是虚拟机（VM）底层对其进行了优化，使其能够将宽字节正确处理成unicode。\n\n最后附上[项目地址](https://github.com/voidvvv/LinkA)","slug":"c++_freetype_unicode","published":1,"updated":"2025-05-25T11:55:04.766Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7f000d1wu17wfkgt0v","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在使用opengl渲染时，尝试使用freetype来渲染文字，但是在渲染中文汉字的时候遇到了问题，无法正确渲染中文</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>直接先说解决方案，在从face中获取glyph时，使用wstring代替string或者char *，并且在渲染查找glyph时，也这么做:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::wstring text = <span class=\"string\">L&quot;HelloWorld中文测试&quot;</span>;</span><br><span class=\"line\">    FT_Library ft;</span><br><span class=\"line\">    camera = <span class=\"keyword\">new</span> <span class=\"built_in\">OrthographicCamera</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">    <span class=\"comment\">// All functions return a value different than 0 whenever an error occurred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Init_FreeType</span>(&amp;ft))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Could not init FreeType Library&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    FT_Face face;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_New_Face</span>(ft, <span class=\"string\">&quot;C:/Windows/Fonts/SIMLI.TTF&quot;</span>, <span class=\"number\">0</span>, &amp;face))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Failed to load font&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FT_Set_Pixel_Sizes</span>(face, <span class=\"number\">0</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glPixelStorei</span>(GL_UNPACK_ALIGNMENT, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; size; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">wchar_t</span> c = text[x];</span><br><span class=\"line\">        <span class=\"comment\">// FT_ULong</span></span><br><span class=\"line\">        GLint ch = <span class=\"built_in\">static_cast</span>&lt;GLint&gt;(c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CharacterCache.<span class=\"built_in\">find</span>(ch) != CharacterCache.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Load character glyph</span></span><br><span class=\"line\">        <span class=\"comment\">// FT_Load_Glyph</span></span><br><span class=\"line\">        <span class=\"comment\">// FT_Get_Char_Index(face, text[i])</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Load_Glyph</span>(face, <span class=\"built_in\">FT_Get_Char_Index</span>(face, ch), FT_LOAD_RENDER))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYTPE: Failed to load Glyph&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Generate texture</span></span><br><span class=\"line\">        GLuint texture;</span><br><span class=\"line\">        <span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br><span class=\"line\">        <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\">        <span class=\"built_in\">glTexImage2D</span>(</span><br><span class=\"line\">            GL_TEXTURE_2D,</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            GL_RED,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.width,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.rows,</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            GL_RED,</span><br><span class=\"line\">            GL_UNSIGNED_BYTE,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.buffer);</span><br><span class=\"line\">        <span class=\"comment\">// Set texture options</span></span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ch: &quot;</span> &lt;&lt; ch &lt;&lt; <span class=\"string\">&quot; bind to id: &quot;</span> &lt;&lt; texture &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now store character for later use</span></span><br><span class=\"line\">        Character character = &#123;</span><br><span class=\"line\">            texture,</span><br><span class=\"line\">            glm::<span class=\"built_in\">ivec2</span>(face-&gt;glyph-&gt;bitmap.width, face-&gt;glyph-&gt;bitmap.rows),</span><br><span class=\"line\">            glm::<span class=\"built_in\">ivec2</span>(face-&gt;glyph-&gt;bitmap_left, face-&gt;glyph-&gt;bitmap_top),</span><br><span class=\"line\">            face-&gt;glyph-&gt;advance.x&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// CharacterCache.insert(std::pair&lt;FT_ULong, Character&gt;(ch, character));</span></span><br><span class=\"line\">        CharacterCache[ch] = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染时的代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demoRender</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::wstring text = <span class=\"string\">L&quot;HelloWorld中文测试&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// Activate corresponding render state</span></span><br><span class=\"line\">    <span class=\"built_in\">glEnable</span>(GL_BLEND);</span><br><span class=\"line\">    <span class=\"built_in\">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class=\"line\">    program-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glUniform3f</span>(<span class=\"built_in\">glGetUniformLocation</span>(program-&gt;ID, <span class=\"string\">&quot;u_color&quot;</span>), color.x, color.y, color.z);</span><br><span class=\"line\">    program-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;projection&quot;</span>, camera-&gt;projection);</span><br><span class=\"line\">    <span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Character ch = CharacterCache[text[i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        GLfloat xpos = x + ch.Bearing.x * scale;</span><br><span class=\"line\">        GLfloat ypos = y - (ch.Size.y - ch.Bearing.y) * scale;</span><br><span class=\"line\"></span><br><span class=\"line\">        GLfloat w = ch.Size.x * scale;</span><br><span class=\"line\">        GLfloat h = ch.Size.y * scale;</span><br><span class=\"line\">        <span class=\"comment\">// Update VBO for each character</span></span><br><span class=\"line\">        GLfloat vertices[<span class=\"number\">6</span>][<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">            &#123;xpos, ypos + h, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos, ypos, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;xpos, ypos + h, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos + h, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// Render glyph texture over quad</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, ch.TextureID);</span><br><span class=\"line\">        <span class=\"comment\">// Update content of VBO memory</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">        <span class=\"built_in\">glBufferSubData</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vertices), vertices); <span class=\"comment\">// Be sure to use glBufferSubData and not glBufferData</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Render quad</span></span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Now advance cursors for next glyph (note that advance is number of 1/64 pixels)</span></span><br><span class=\"line\">        x += (ch.Advance &gt;&gt; <span class=\"number\">6</span>) * scale; <span class=\"comment\">// Bitshift by 6 to get value in pixels (2^6 = 64 (divide amount of 1/64th pixels by 64 to get amount of pixels))</span></span><br><span class=\"line\">        <span class=\"comment\">// text++;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glDisable</span>(GL_BLEND);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，freetype已经可以正常显示中文了。<br><img src=\"/2024/03/31/c++_freetype_unicode/2024-03-31T095450.png\" alt=\"2024-03-31T095450\"></p>\n<h1 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h1><p>首先，我是按照 <a href=\"https://learnopengl-cn.github.io/06%20In%20Practice/02%20Text%20Rendering\">教程</a> 来学习freetype渲染文字的。<br>教程原版是英文的，所以原版教程中的渲染只有基础的128个ascII码。我这边便想到了拓展到实现中文渲染。（因为在libGDX中，也是使用freetype，是可以正常渲染中文的）.</p>\n<p>于是我便写了如下的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CharacterManager::create</span><span class=\"params\">(std::string &amp;text)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FT_Library ft;</span><br><span class=\"line\">    camera = <span class=\"keyword\">new</span> <span class=\"built_in\">OrthographicCamera</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">    <span class=\"comment\">// All functions return a value different than 0 whenever an error occurred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Init_FreeType</span>(&amp;ft))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Could not init FreeType Library&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    FT_Face face;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_New_Face</span>(ft, <span class=\"string\">&quot;C:/Windows/Fonts/BRLNSDB.TTF&quot;</span>, <span class=\"number\">0</span>, &amp;face))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Failed to load font&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set size to load glyphs as</span></span><br><span class=\"line\">    <span class=\"built_in\">FT_Set_Pixel_Sizes</span>(face, <span class=\"number\">0</span>, <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glPixelStorei</span>(GL_UNPACK_ALIGNMENT, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; text.<span class=\"built_in\">size</span>(); x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = text[x];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// FT_ULong</span></span><br><span class=\"line\">        <span class=\"built_in\">loadCharater</span>(c, face);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FT_Done_Face</span>(face);</span><br><span class=\"line\">    <span class=\"built_in\">FT_Done_FreeType</span>(ft);</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(GLfloat) * <span class=\"number\">6</span> * <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>, GL_DYNAMIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">4</span> * <span class=\"built_in\">sizeof</span>(GLfloat), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意，我这里使用的是<code>std::string</code>,底层还是char数组.<br>于是，在render的时候所有的中文全部被变成了<strong>未定义的方框</strong>。<br>这个时候我比较好奇了，最主要的是控制台是可以正常输出这段字符串char数组的。<br>于是我先<code>百度</code>了c++ freetype 中文 等关键字，刷到了这篇<a href=\"https://blog.csdn.net/qq_22655017/article/details/90034431\">CSDN文章</a>,我意识到了，中文跟一般的英文字符不一样，中文使用的unicode，一个unicode &#x3D; 2byte。<br>但是在c++中，char是等同于byte的。所以一个char是无法存储一个中文汉字的。</p>\n<blockquote>\n<p>这点跟JAVA不一样，java中，char类型底层就是两个字节，所以可以正常使用中文.可能java底层的c++代码中，char使用的就是wchar</p>\n</blockquote>\n<p>于是，我把代码中的char*换成了wchar_t,但是我首先想到的是先在控制台输出一下wchar_t，以免对项目有不必要的改动。<br>这一试，就出现了问题，控制台无法打印wchar_t，于是，我感觉可能是出问题了，我就去<code>stack overflow</code>搜了wchar 与 char之间的转换，以及如何让系统使用wchar。但是好像并没有特别好的结果。</p>\n<p>但最后我突然想到，freetype是查找char使用方法<code>FT_Get_Char_Index</code>中,charcode的类型其实是 <code>FT_ULong</code>，是一个无符号的long，c++中<code>long</code>的范围至少有32位，那么我直接使用wstring中的wchar强转成long来直接放入查找可以吗？<br>于是我就进行了尝试，结果是OK的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这个问题其实本身并不难，甚至比较基础，但是查询过程中，由于对c++熟悉度不够，还是走了很多弯路。甚至中间曾经出现过使用nullptr的情况，这些跟java有太多不一样了。</p>\n<p>但最后，如何在控制台输出wchar还是没有解决。<br>对于这个问题，我有自己的想法<span style='text-decoration: line-through;'>(猜测)</span>,那就是控制台是windows平台的，windows平台可能对底层的char进行了自己的优化，在展示时会根据char值来判断是否是unicode来进行展示，判断是unicode则使用unicode来展示，所以直接cout输出char数组是可以展示中文的。<br>但是对于wchar，可能windows底层并没有对其优化，想要展示还需要我们开发做一些其他工作。<br>至于java为什么即使使用宽字节也可以正常展示中文，我猜测可能是虚拟机（VM）底层对其进行了优化，使其能够将宽字节正确处理成unicode。</p>\n<p>最后附上<a href=\"https://github.com/voidvvv/LinkA\">项目地址</a></p>\n","length":1434,"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在使用opengl渲染时，尝试使用freetype来渲染文字，但是在渲染中文汉字的时候遇到了问题，无法正确渲染中文</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>直接先说解决方案，在从face中获取glyph时，使用wstring代替string或者char *，并且在渲染查找glyph时，也这么做:</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::wstring text = <span class=\"string\">L&quot;HelloWorld中文测试&quot;</span>;</span><br><span class=\"line\">    FT_Library ft;</span><br><span class=\"line\">    camera = <span class=\"keyword\">new</span> <span class=\"built_in\">OrthographicCamera</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">    <span class=\"comment\">// All functions return a value different than 0 whenever an error occurred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Init_FreeType</span>(&amp;ft))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Could not init FreeType Library&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    FT_Face face;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_New_Face</span>(ft, <span class=\"string\">&quot;C:/Windows/Fonts/SIMLI.TTF&quot;</span>, <span class=\"number\">0</span>, &amp;face))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Failed to load font&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FT_Set_Pixel_Sizes</span>(face, <span class=\"number\">0</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glPixelStorei</span>(GL_UNPACK_ALIGNMENT, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; size; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">wchar_t</span> c = text[x];</span><br><span class=\"line\">        <span class=\"comment\">// FT_ULong</span></span><br><span class=\"line\">        GLint ch = <span class=\"built_in\">static_cast</span>&lt;GLint&gt;(c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CharacterCache.<span class=\"built_in\">find</span>(ch) != CharacterCache.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Load character glyph</span></span><br><span class=\"line\">        <span class=\"comment\">// FT_Load_Glyph</span></span><br><span class=\"line\">        <span class=\"comment\">// FT_Get_Char_Index(face, text[i])</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Load_Glyph</span>(face, <span class=\"built_in\">FT_Get_Char_Index</span>(face, ch), FT_LOAD_RENDER))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYTPE: Failed to load Glyph&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Generate texture</span></span><br><span class=\"line\">        GLuint texture;</span><br><span class=\"line\">        <span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br><span class=\"line\">        <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\">        <span class=\"built_in\">glTexImage2D</span>(</span><br><span class=\"line\">            GL_TEXTURE_2D,</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            GL_RED,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.width,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.rows,</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            GL_RED,</span><br><span class=\"line\">            GL_UNSIGNED_BYTE,</span><br><span class=\"line\">            face-&gt;glyph-&gt;bitmap.buffer);</span><br><span class=\"line\">        <span class=\"comment\">// Set texture options</span></span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class=\"line\">        <span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ch: &quot;</span> &lt;&lt; ch &lt;&lt; <span class=\"string\">&quot; bind to id: &quot;</span> &lt;&lt; texture &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now store character for later use</span></span><br><span class=\"line\">        Character character = &#123;</span><br><span class=\"line\">            texture,</span><br><span class=\"line\">            glm::<span class=\"built_in\">ivec2</span>(face-&gt;glyph-&gt;bitmap.width, face-&gt;glyph-&gt;bitmap.rows),</span><br><span class=\"line\">            glm::<span class=\"built_in\">ivec2</span>(face-&gt;glyph-&gt;bitmap_left, face-&gt;glyph-&gt;bitmap_top),</span><br><span class=\"line\">            face-&gt;glyph-&gt;advance.x&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// CharacterCache.insert(std::pair&lt;FT_ULong, Character&gt;(ch, character));</span></span><br><span class=\"line\">        CharacterCache[ch] = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染时的代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">demoRender</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::wstring text = <span class=\"string\">L&quot;HelloWorld中文测试&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">// Activate corresponding render state</span></span><br><span class=\"line\">    <span class=\"built_in\">glEnable</span>(GL_BLEND);</span><br><span class=\"line\">    <span class=\"built_in\">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class=\"line\">    program-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glUniform3f</span>(<span class=\"built_in\">glGetUniformLocation</span>(program-&gt;ID, <span class=\"string\">&quot;u_color&quot;</span>), color.x, color.y, color.z);</span><br><span class=\"line\">    program-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;projection&quot;</span>, camera-&gt;projection);</span><br><span class=\"line\">    <span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Character ch = CharacterCache[text[i]];</span><br><span class=\"line\"></span><br><span class=\"line\">        GLfloat xpos = x + ch.Bearing.x * scale;</span><br><span class=\"line\">        GLfloat ypos = y - (ch.Size.y - ch.Bearing.y) * scale;</span><br><span class=\"line\"></span><br><span class=\"line\">        GLfloat w = ch.Size.x * scale;</span><br><span class=\"line\">        GLfloat h = ch.Size.y * scale;</span><br><span class=\"line\">        <span class=\"comment\">// Update VBO for each character</span></span><br><span class=\"line\">        GLfloat vertices[<span class=\"number\">6</span>][<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">            &#123;xpos, ypos + h, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos, ypos, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;xpos, ypos + h, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>&#125;,</span><br><span class=\"line\">            &#123;xpos + w, ypos + h, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// Render glyph texture over quad</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, ch.TextureID);</span><br><span class=\"line\">        <span class=\"comment\">// Update content of VBO memory</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">        <span class=\"built_in\">glBufferSubData</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vertices), vertices); <span class=\"comment\">// Be sure to use glBufferSubData and not glBufferData</span></span><br><span class=\"line\">        <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Render quad</span></span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Now advance cursors for next glyph (note that advance is number of 1/64 pixels)</span></span><br><span class=\"line\">        x += (ch.Advance &gt;&gt; <span class=\"number\">6</span>) * scale; <span class=\"comment\">// Bitshift by 6 to get value in pixels (2^6 = 64 (divide amount of 1/64th pixels by 64 to get amount of pixels))</span></span><br><span class=\"line\">        <span class=\"comment\">// text++;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glDisable</span>(GL_BLEND);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，freetype已经可以正常显示中文了。<br><img src=\"/2024/03/31/c++_freetype_unicode/2024-03-31T095450.png\" alt=\"2024-03-31T095450\"></p>\n<h1 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h1><p>首先，我是按照 <a href=\"https://learnopengl-cn.github.io/06%20In%20Practice/02%20Text%20Rendering\">教程</a> 来学习freetype渲染文字的。<br>教程原版是英文的，所以原版教程中的渲染只有基础的128个ascII码。我这边便想到了拓展到实现中文渲染。（因为在libGDX中，也是使用freetype，是可以正常渲染中文的）.</p>\n<p>于是我便写了如下的代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CharacterManager::create</span><span class=\"params\">(std::string &amp;text)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FT_Library ft;</span><br><span class=\"line\">    camera = <span class=\"keyword\">new</span> <span class=\"built_in\">OrthographicCamera</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br><span class=\"line\">    <span class=\"comment\">// All functions return a value different than 0 whenever an error occurred</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_Init_FreeType</span>(&amp;ft))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Could not init FreeType Library&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    FT_Face face;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">FT_New_Face</span>(ft, <span class=\"string\">&quot;C:/Windows/Fonts/BRLNSDB.TTF&quot;</span>, <span class=\"number\">0</span>, &amp;face))</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::FREETYPE: Failed to load font&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set size to load glyphs as</span></span><br><span class=\"line\">    <span class=\"built_in\">FT_Set_Pixel_Sizes</span>(face, <span class=\"number\">0</span>, <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glPixelStorei</span>(GL_UNPACK_ALIGNMENT, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; text.<span class=\"built_in\">size</span>(); x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = text[x];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// FT_ULong</span></span><br><span class=\"line\">        <span class=\"built_in\">loadCharater</span>(c, face);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">FT_Done_Face</span>(face);</span><br><span class=\"line\">    <span class=\"built_in\">FT_Done_FreeType</span>(ft);</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(GLfloat) * <span class=\"number\">6</span> * <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>, GL_DYNAMIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">4</span> * <span class=\"built_in\">sizeof</span>(GLfloat), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意，我这里使用的是<code>std::string</code>,底层还是char数组.<br>于是，在render的时候所有的中文全部被变成了<strong>未定义的方框</strong>。<br>这个时候我比较好奇了，最主要的是控制台是可以正常输出这段字符串char数组的。<br>于是我先<code>百度</code>了c++ freetype 中文 等关键字，刷到了这篇<a href=\"https://blog.csdn.net/qq_22655017/article/details/90034431\">CSDN文章</a>,我意识到了，中文跟一般的英文字符不一样，中文使用的unicode，一个unicode &#x3D; 2byte。<br>但是在c++中，char是等同于byte的。所以一个char是无法存储一个中文汉字的。</p>\n<blockquote>\n<p>这点跟JAVA不一样，java中，char类型底层就是两个字节，所以可以正常使用中文.可能java底层的c++代码中，char使用的就是wchar</p>\n</blockquote>\n<p>于是，我把代码中的char*换成了wchar_t,但是我首先想到的是先在控制台输出一下wchar_t，以免对项目有不必要的改动。<br>这一试，就出现了问题，控制台无法打印wchar_t，于是，我感觉可能是出问题了，我就去<code>stack overflow</code>搜了wchar 与 char之间的转换，以及如何让系统使用wchar。但是好像并没有特别好的结果。</p>\n<p>但最后我突然想到，freetype是查找char使用方法<code>FT_Get_Char_Index</code>中,charcode的类型其实是 <code>FT_ULong</code>，是一个无符号的long，c++中<code>long</code>的范围至少有32位，那么我直接使用wstring中的wchar强转成long来直接放入查找可以吗？<br>于是我就进行了尝试，结果是OK的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这个问题其实本身并不难，甚至比较基础，但是查询过程中，由于对c++熟悉度不够，还是走了很多弯路。甚至中间曾经出现过使用nullptr的情况，这些跟java有太多不一样了。</p>\n<p>但最后，如何在控制台输出wchar还是没有解决。<br>对于这个问题，我有自己的想法<span style='text-decoration: line-through;'>(猜测)</span>,那就是控制台是windows平台的，windows平台可能对底层的char进行了自己的优化，在展示时会根据char值来判断是否是unicode来进行展示，判断是unicode则使用unicode来展示，所以直接cout输出char数组是可以展示中文的。<br>但是对于wchar，可能windows底层并没有对其优化，想要展示还需要我们开发做一些其他工作。<br>至于java为什么即使使用宽字节也可以正常展示中文，我猜测可能是虚拟机（VM）底层对其进行了优化，使其能够将宽字节正确处理成unicode。</p>\n<p>最后附上<a href=\"https://github.com/voidvvv/LinkA\">项目地址</a></p>"},{"title":"c++_template","date":"2025-06-30T02:04:57.000Z","_content":"\nc++ 中的模板，就是类似于java中的泛型，但是与java泛型又不太一样。作为强类型语言，Java中的泛型由于无法确定具体class，并且由于泛型擦除的存在，使得每个泛型在jvm中其实都是以Object的形式存储的。但是c++的模板确是在编译器确定类型，由此我们就可以在代码中对泛型进行预期之内的操作.\n\n<!--more-->\n\n```c++\ntemplate <typename Iter, typename Func>\nvoid processElements(Iter begin, Iter end, Func processor)\n{\n    for (auto it = begin; it != end; ++it)\n    {\n        processor(*it); // 调用传入的函数对象处理当前元素\n    } // 返回一个默认构造的对象\n}\n```\n上面就是c++定义模板方法的方式。我们可以看到，``Func processor`` 这个泛型``Func``我们其实不知道具体类型。但是由于c++编译器会在编译器就将其类型确定，所以我们可以在用到这个方法的地方，将``Func processor``传入成为一个方法引用。\n\n```c++\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    processElements(vec.begin(), vec.end(), [](int x) { std::cout << x << \" \"; });\n    std::cout << std::endl;\n```\n\n这样，c++编译器便会在编译期将检查参数类型是否与内部使用符合。若不符合，则会在编译期报错导致编译失败.","source":"_posts/c++_template.md","raw":"---\ntitle: c++_template\ndate: 2025-06-30T18:04:57+08:00\ntags:\n- C++\n---\n\nc++ 中的模板，就是类似于java中的泛型，但是与java泛型又不太一样。作为强类型语言，Java中的泛型由于无法确定具体class，并且由于泛型擦除的存在，使得每个泛型在jvm中其实都是以Object的形式存储的。但是c++的模板确是在编译器确定类型，由此我们就可以在代码中对泛型进行预期之内的操作.\n\n<!--more-->\n\n```c++\ntemplate <typename Iter, typename Func>\nvoid processElements(Iter begin, Iter end, Func processor)\n{\n    for (auto it = begin; it != end; ++it)\n    {\n        processor(*it); // 调用传入的函数对象处理当前元素\n    } // 返回一个默认构造的对象\n}\n```\n上面就是c++定义模板方法的方式。我们可以看到，``Func processor`` 这个泛型``Func``我们其实不知道具体类型。但是由于c++编译器会在编译器就将其类型确定，所以我们可以在用到这个方法的地方，将``Func processor``传入成为一个方法引用。\n\n```c++\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    processElements(vec.begin(), vec.end(), [](int x) { std::cout << x << \" \"; });\n    std::cout << std::endl;\n```\n\n这样，c++编译器便会在编译期将检查参数类型是否与内部使用符合。若不符合，则会在编译期报错导致编译失败.","slug":"c++_template","published":1,"updated":"2025-07-01T14:16:56.441Z","_id":"cmcklki7g000f1wu17vpp0cij","comments":1,"layout":"post","photos":[],"content":"<p>c++ 中的模板，就是类似于java中的泛型，但是与java泛型又不太一样。作为强类型语言，Java中的泛型由于无法确定具体class，并且由于泛型擦除的存在，使得每个泛型在jvm中其实都是以Object的形式存储的。但是c++的模板确是在编译器确定类型，由此我们就可以在代码中对泛型进行预期之内的操作.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Iter, <span class=\"keyword\">typename</span> Func&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processElements</span><span class=\"params\">(Iter begin, Iter end, Func processor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = begin; it != end; ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processor</span>(*it); <span class=\"comment\">// 调用传入的函数对象处理当前元素</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// 返回一个默认构造的对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是c++定义模板方法的方式。我们可以看到，<code>Func processor</code> 这个泛型<code>Func</code>我们其实不知道具体类型。但是由于c++编译器会在编译器就将其类型确定，所以我们可以在用到这个方法的地方，将<code>Func processor</code>传入成为一个方法引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">processElements</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), [](<span class=\"type\">int</span> x) &#123; std::cout &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; &quot;</span>; &#125;);</span><br><span class=\"line\">std::cout &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>这样，c++编译器便会在编译期将检查参数类型是否与内部使用符合。若不符合，则会在编译期报错导致编译失败.</p>\n","length":321,"excerpt":"<p>c++ 中的模板，就是类似于java中的泛型，但是与java泛型又不太一样。作为强类型语言，Java中的泛型由于无法确定具体class，并且由于泛型擦除的存在，使得每个泛型在jvm中其实都是以Object的形式存储的。但是c++的模板确是在编译器确定类型，由此我们就可以在代码中对泛型进行预期之内的操作.</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Iter, <span class=\"keyword\">typename</span> Func&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processElements</span><span class=\"params\">(Iter begin, Iter end, Func processor)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = begin; it != end; ++it)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processor</span>(*it); <span class=\"comment\">// 调用传入的函数对象处理当前元素</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// 返回一个默认构造的对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是c++定义模板方法的方式。我们可以看到，<code>Func processor</code> 这个泛型<code>Func</code>我们其实不知道具体类型。但是由于c++编译器会在编译器就将其类型确定，所以我们可以在用到这个方法的地方，将<code>Func processor</code>传入成为一个方法引用。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">processElements</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), [](<span class=\"type\">int</span> x) &#123; std::cout &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; &quot;</span>; &#125;);</span><br><span class=\"line\">std::cout &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>这样，c++编译器便会在编译期将检查参数类型是否与内部使用符合。若不符合，则会在编译期报错导致编译失败.</p>"},{"title":"c++与unreal学习","date":"2023-12-18T11:42:40.000Z","_content":"# C++基础：\n\n> 仅仅作为本人java开发，自学c++的学习笔记。因为有java基础，所以基础内容记录不会很详细\n\n<!-- more -->\n## 基础\n\n编译器(也是开发工具)：\n\nvisual studio 2017. 下载地址：https://visualstudio.microsoft.com/zh-hans/vs/community/\n\n### visual studio 基本操作：\n\nctrl+k，然后 ctrl+c ，行注释一段代码。 格式：// 与java相同\n\nctrl+k，然后ctrl+u，取消一段代码的注释。\n\n菜鸟基础学习地址：https://www.runoob.com/cplusplus/cpp-tutorial.html\n\n### helloworld步骤：\n\n1. 使用visual studio新建一个空白项目，取名helloworld\n\n2. 在源文件处，新建项目。选择cpp文件。取名helloWorld\n\n3. 编写如下代码：\n\n   ```c++\n   // <>表示程序将会首先且只会去你的系统类库目录查找你所想引入的类或者包;\n   // \"\"表示程序会首先从你的当前目录查找你所想引入的类或者包,如果没有找到,将去系统类库目录找.\n   \n   #include \"iostream\"\n   using namespace std;\n   \n   \n   int main() {\n   \tcout << \"hello world\" << endl;\n   \n   \tsystem(\"pause\");\n   \treturn 0;\n   \n   }\n   ```\n\n4. 点击本地windows调试，可以看到输出 hello world\n\n### 常量\n\n定义常量两种方式：\n\n1. #define 宏常量。 #define  name  value，例如：#define dayOfMonth  7\n2. 在变量前加 **const**关键字。\n\n常量是不可以更改的。一旦修改就会报错。类似于java的final\n\n### 基本数据类型\n\n1. 整型：**int**。8个字节。与java相同。并且具有构造方法\n\n2. 实型（浮点型）： 对应java中的**float，double**。并与java含义相同\n\n3. 字符型：**char**,与java用法相同。字符的ascii码\n\n4. 转义字符：参见正则\n\n5. 字符串类型：因为沿用于c语言，可以直接将char数组定义为字符串。例如：char str[] = \"hello world\"\n\n   同时也有自己的对象风格，string str = \"hello world\"。需要注意，若要在代码中定义sting类型数据，需要引入头文件 #include \"string\"\n\n6. 布尔类型：**bool**.基本与java相同。不同的在于，在输出bool时，其实质就是一个字节。表示为1（真），或0（假）。\n\n### 标准输入输出流\n\n```c++\n// 在引入头文件后：\n#include \"iostream\"\nusing namespace std;\n\n// 可以在代码中使用如下cout左移来输出数据\ncout << \"aaa\" <<endl;\n// 可以使用cin右移运算符来输入数据\nint a;\ncin >> a;\n// 若定义的数据为int，输入的是字母，则会赋值为0\n```\n\n### 变量\n\n用法与java大致相同。不过c++具有指针，引用的概念，可以更自由的访问内存。\n\n> 需要注意的是，当c++中， type a = b ; 的时候，会创建一个变量b的副本给a的引用。此时，a，b是两个独立的变量。各自分别改变值，对另一个没有影响。\n\n### 数组\n\n定义与java相同。每个数据类型都相同。并且需要一块连续的内存空间\n\n声明方式：\n\n1.  int arr[2] = {1,2}; 即在声明变量后加[]中括号，并且规定大小，等于号右边放入数组初始值。初始值个数不能超过规定大小，否则会报错\n2. int arr[2]; 声明大小，不给初始值，会默认用0填充。对象的话，会用空参数对象填充\n3.  int arr[] = {1,2},自动推导数组长度。\n\n需要注意的是：**c++中，数组的名称的本质，其实是指向第一个元素的一个指针。所以可以用指针解引用的方式取出第一个元素。又由于数组内存空间是连续的，所以可以使用名称++，来获取下一个元素的指针.获取数组长度的方法，可以用 sizeof函数，sizeof(数组)/sizeof(数组[0]).**\n\n### 指针与引用：\n\n> c++中的一个难点。c++指针在32位系统下，占4个字节。在64位系统下，占8个字节，即为一个int（不管指针内存的数据类型）\n\n指针就是指指向一块内存区域的地址，下面的代码展示指针的相关用法:\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include \"string\"\n\n#define dayOfMonth  7\n\nint main() {\n\tint a = 20;\n\t// 这里的&a为把a所代表的内存空间拿出来，来让p指针来指向该空间。\n\tint *p = &a;\n\tcout << p << endl;\n    \n    // 下面这一步是对指针解引用。就是将指针所指向内存空间的值（或对象）拿出来。这里就拿val来接受\n    int val = *p;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n\n在变量前加 * 号，可以将其定义为指针。指针 = 引用，代表指针指向某一块引用。上面int * p ,就是定义了一个类型为int的指针。指针指向变量a所在的内存空间。这里&a就是a变量所在内存空间的引用。因为指针需要指向引用，所以等号右边就需要是一个引用；\n\n关于引用，就是一块内存，指针就是内存地址，而上面代码中的a，就是该内存当前的名字。详细可以看下面的代码：\n\n```c++\n\nint main() {\n\t// 声明一个int型的变量a，初始值为20；\n\tint a = 20;\n\t// 声明一个int型的变量b，初始值为30；\n\tint b = a;\n\t// 声明一个int类型的变量c，其引用的是a的地址；\n\tint &c = a;\n\n\ta++;\n\tcout << \"a++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\tb++;\n\tcout << \"b++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\tc++;\n\tcout << \"c++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n\n可以看到，c用的是a的引用，即c所用的内存空间，就是a所在的内存空间。所以当a改变时，c也会跟着改变。c改变时，a也会跟着改变。但是b就跟a和c没关系。只是用a的值做了个克隆构造函数，在另一块内存创建了一个新对象。\n\n#### 空指针：\n\n内存条中，由操作系统所占用，我们的程序无法访问的内存区域。一般位0-255号内存。即0-255内存若要访问，就会导致空指针异常（npe）\n\n#### 野指针：\n\n指向非法内存空间的指针。具体是值我们程序没有申请的内存空间，若要解引用，则会抛异常\n\n#### 指针取值\n\n在有当前指针的情况下，一般是需要解引用 *p解引用来获取指针指向内存的数据。但是如果目标区域是对象，则可以用 ->来获取对象参数或者执行方法.\n\n\n\n### 流程控制：for循环，while循环，if判断，三目运算法\n\n与java一样\n\n### c++流程控制：goto关键字\n\n可以在代码中直接跳到某个位置。实际开发中，由于代码可读性差，可以被break和continue代替等原因，不会使用。这也是java中goto作为未实现的保留关键字的原因\n\n### 函数（java中的方法）\n\n我们上面写的main函数，就是函数的一种。具有返回值，函数名，入参。并且c++中main方法需要无惨，并且返回int\n\n#### 函数值传递：\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include \"string\"\n\nvoid say(int a) {\n\ta += 50;\n\tcout << \"say方法中的a：\"<<a << endl;\n}\n\nint main(){\n\tint a = 10;\n\tsay(a);\n\tcout << \"say方法外的a：\" << a << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 上面代码可以看到方法内和方法外打印的a的值是不一样的，这个也是java对于基本类型的处理，传入一个值得副本，对值得改变，无法对原值产生影响。\n// 值传递对于对象，也是拷贝一个副本作为方法参数，所以即使在方法内修改对象的属性，外面的对象属性也不会发生变化。\n```\n\n#### 函数的引用传递：\n\n```c++\nvoid say2(int &a) {\n\ta += 50;\n\tcout << \"say方法中的a：\" << a << endl;\n}\n\nint main(){\n\tint a = 10;\n\tsay2(a);\n\tcout << \"say方法外的a：\" << a << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 则会发现，方法内外的a的值都发生了变化。这是因为传入方法内的是a的引用，方法参数a与外面的a代表同一块内存空间。修改的也是同一块内存空间。java对象采用的即此传递\n```\n\n#### 函数指针传递\n\n```c++\nvoid say3(int *p) {\n\t*p += 50;\n\tint a = *p;\n\tcout << \"say方法中的a：\" << a << endl;\n\tcout << \"say方法中的p：\" << p << endl;\n\n}\n\n\nint main(){\n\tint a = 10;\n\tint *p = &a;\n\n\tsay3(p);\n\n\tcout << \"say方法外的a：\" << a << endl;\n\tcout << \"say方法外的p：\" << p << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 上面代码可以看到，若直接解引用然后赋值，会影响外面的数据。若int a = *p； 然后a++，则不会影响外部数据\n```\n\n#### 函数重载：\n\n与java一样\n\n#### 默认参数:\n\nc++中，函数的入参可以有默认值。若调用者不传对应参数，则方法会自动使用默认值。\n\n需要注意，在声明函数的时候若使用了默认值，则在实现的时候不能有默认值。并且默认参数的函数本质是函数重载，所以有任何相同调用方法的别的函数存在，编译就会报错\n\n#### 占位参数\n\n区别于java的一个点，函数的入参可以只写一个类型，而不写名称。称之为站位参数。占位参数在调用时，需要传入对应类型的站位参数来调用函数。应该是用于函数重载的\n\n```c++\nvoid say(int a) {\n\tcout << \"aaa\" << endl;\n}\n\nvoid say(int a,int) {\n\tcout << a << endl;\n}\n\nint main(){\n\tsay(10,10);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n\n\n#### 函数的声明\n\n与函数的定义相对，在函数声明前，是无法使用的。编译器会找不到函数。若先进行声明，（无函数体，类似于java的抽象方法），下面就可以用这个方法了。然后，编译器在执行的时候，会找该方法的实现。方法声明可以多次，但是实现只能是一次。若有多次实现，会报错。\n\n### c++关键字：const\n\n被const修饰的变量为常量，我们上面已经知道,可以作为变量。但是对于const修饰指针，以及对象，则另有说法。\n\n#### const修饰指针\n\n````c++\nint main(){\n\t// 基准\n\tint a = 20;\n\t// 与a引用不同，值不同\n\tint b = 30;\n\t// 与a引用不同，值相同\n\tint c = 20;\n\t// 与a引用相同\n\tint &d = a;\n\n\t// 常量指针，指针可以改指向，但是指针指向的内存空间不可以改\n\tconst int* p1 = &a;\n\t// 指针常量  指针指向不可以改，但是指针内的内存空间可以改\n\tint* const p2 = &a;\n\t// 全都不能改\n\tconst int*  const p3 = &a;\n\n\n\tcout << *p1 << endl;\n\t//*p1 = b;// 修改p1的值，报错\n\tp1 = &c;// 修改p1的指向为c，不报错\n\tp1 = &b;// 修改p1的指向为b，不报错\n\tcout << *p1 << endl;\n\n\t//p2 = &b;// 试图修改p2的指向，报错\n\t*p2 = b;// 修改p2的值，不报错\n\n\t*p3 = b;// 修改p3的值，报错\n\tp3 = &c; // 修改p3的指向，报错 \n\n\tsystem(\"pause\");\n\treturn 0;\n}\n````\n\n#### const修饰对象：\n\n该对象及其内部属性全部不能改\n\n#### 常量引用：\n\n一般情况，int &a =10,即将一个引用等于一个常量是非法的。但是可以在前面加const，来使其合法。该引用变为常量引用，无法修改内存中的值\n\n## 核心\n\n### 面向对象\n\nc++中，定义类有两种方式，1. 定义结构体struct，2. 定义class。两种方式几乎没区别。在网上看到的区别为：struct默认权限类型为public，class默认权限类型为private。\n\n#### c++类\n\n```c++\nclass MyStruct\n{\nprivate:\n\tstring name;\n\tint age;\nprotected:\n    string lastName;\npublic:\n\tMyStruct(int age,string name) {\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t}\n};\n// 权限修饰符的写法与java有差异。定义一个权限区，然后将该权限的属性或函数写进去即可。权限定义也跟java一致。private私有，public公共，protected保护，子类可见\n\tMyStruct(int age,string name) {\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t}\n\n\tMyStruct( MyStruct& origin) {\n\t\t// 拷贝构造\n\t}\n\n\t~MyStruct() {\n\t\t// 析构函数\n\t}\n```\n\n> 注意：c++类定义完后，需要加分号 ;\n\n#### 构造函数，析构函数：\n\n一个类，默认会有无参构造，这个跟java一致。并且自定义有参构造，会默认覆盖无惨构造。还有一个拷贝构造入参为自己本类的类型，使用浅克隆将属性赋值到本对象.\n\n还有一个析构函数，在对象销毁时会调用，一般用来释放内存;\n\n#### 初始化列表：\n\n```c++\n// 是跟在构造方法后，初始化类属性的方法\n// 使用上面的MyStruct类\n\tMyStruct():name(\"zhangsan\"),age(20) {\n\t}\n// 上面是个空参构造，但是在调用时会初始化name和age。值就是括号中的值\n// 或者有参构造，\n\tMyStruct(int age,string name):name(name),age(age) {\n\t\t\n\t}\n\n```\n\n#### 静态成员变量与函数\n\n属性前加static。规则与java差不多。\n\n调用方式:  类名::成员名称\n\n```c++\nclass People{\n    static int i;\n    \n    static void test(){\n        cout<< i <<endl;\n        \n    }\n    \n}\n\nint main(){\n    People::test();\n    return 0;\n}\n```\n\n\n\n#### this指针\n\n与java的this类似。不过这里的this不是对象，而是指针。需要解引用或者使用 ->\n\n#### 空指针相关：\n\nc++中，空指针是可以调用成员函数的。但是前提是需要函数中没有用到this。若用到了this，则会报异常。否则成功运行\n\n#### const\n\nconst修饰函数，函数变为常函数。常函数只能调用常量（const修饰的）或者mutable修饰的变量。是为了保护对象内部的属性不被乱改\n\nconst修饰对象名称，则该对象只可以调用常函数\n\n#### 友元\n\n关键字：friend. 可以声明一个类或者函数作为友元。该类或者该函数可以访问本类私有属性及函数\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include <string>\n\nclass A {\n    // 类做友元\n\tfriend class B;\n    // 成员函数做友元\n    friend void B::visit(A a);\n    // 全局函数也可以做友元\nprivate:\n\tint a_i;\n\tstring a_m;\n\tvoid privateTest() {\n\t\tcout << \"A private\" << endl;\n\t}\n};\n\nclass B {\nprivate:\n\tint b_i;\n\tstring b_m;\npublic:\n\tvoid visit(A a) {\n\t\ta.privateTest();\n\t}\n};\nint main() {\n\tB b;\n\tA a;\n\tb.visit(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 继承\n\n类似于java继承，但是c++允许多继承。\n\n```c++\n// 继承语法：\nclass A{\n    // 定义类A\n}\n\nclass B:public A{\n    // 定义类B，继承类A。\n}\n\n```\n\n继承也有限定。public：将父类属性及方法按照原有访问权限继承。protected：将父类public的属性以及函数改为protected继承到自身。private：将父类属性及函数继承过来，但是权限全变为private；\n\n在单继承后，子类在不重写父类方法的情况下，调用函数是父类的函数。若重写了函数，则调用的是自己的。\n\n若想调用父类的函数，需要 对象名.父类类名::方法名（参数）;例如：\n\n```c++\nclass B {\nprivate:\n\tint b_i;\n\tstring b_m;\n\npublic:\n\n\tvoid visit(A a) {\n\t\ta.privateTest();\n\t}\n\n\n};\n\nclass D {\nprivate:\n\tint b_i;\n\tstring b_m;\n\npublic:\n\n\tvoid visit(A a) {\n\t\tcout << \"d visit\" << endl;\n\t}\n\n\n};\n\nclass C:public B,public D  {\n\n\npublic:\n\n\n};\nint main() {\n\tB b;\n\tA a;\n\tC c;\n\tb.visit(a);\n// 调用父类方法\n\tc.B::visit(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n#### 菱形继承-virtual关键字\n\n多继承，难免会有A,B两个父类有相同的成员或者方法。并且该情况会引出父类方法实现无用的结果。\n\n则在继承时加入virtual关键字虚继承。则在编译时不会生成父类，在执行时才会。这样，相同的数据只会有一份，按照子类为准。\n\nvirtual也可以修饰方法，称为虚方法，在父类引用指向子类实例时，c++中，调用父类引用的方法，会执行父类实现。若方法为虚方法，则类中会存储虚基类指针，调用父类引用子类实现的对象的方法，会调用子类函数。\n\n```c++\nvirtual void say() = 0;\n// 称为纯虚函数。类似于java的抽象接口。有纯虚函数的类无法实例化对象。子类若若不实现纯虚函数，则子类也无法实例化对象\n```\n\n#### 函数模板 类模板\n\njava中的泛型。其实java的泛型就是从c++的模板变过来的。\n\n```c++\n// 语法\ntemplate <class T> // 下面跟着类，就是类模板。跟着函数，则是函数模板\nclass Person<T>{\n    \n}    \n```\n\n基本语法如上。大致上跟java里差不多。\n\n方法模板中，可以根据入参来自动判断模板类型。而类没有自动判断。\n\n类模板可以 class T = int 来指定默认值;若类模板函数在类外实现，需要在实现前加上模板声明\n\n### 运算符重写\n\n运算符：==，>>,<<,() 都可以重写。返回值类型   operator==（入参）{方法体}\n\n```c++\n// 重写== （可以类比于java重写equals），在类内\nbool operator== (obj o){\n    \n}\n// 若重写左移，可以在全局重写. 第一个参数是调用方，第二个参数是右侧（可视为java的tosting）\n\nostream operator<<(ostream& cout,obj o){\n    cout<< 拼接obj的属性 <<endl;\n    return cout;\n}\n```\n\n\n\n### 分文件编写\n\n在前面讲到了，c++可以是先写好方法定义，然后去实现的。平时开发习惯将类声明以及类方法实现放在两个不同文件，声明为.h后缀的头文件，一般放属性，以及函数定义。实现是.cpp后缀的实现，引入对应头文件来编写方法实现。\n\n**需要注意的是，若类模板份文件编写，则要注意类模板函数是在执行的时候生成的。导致引入头文件不会导入函数，编译器会不认得这个函数。cpp实现文件自然也加载不到。**\n\n\n\n## STL\n\n类比于java的容器。有list，map，set等。主要是使用模板技术。\n\nstl主要分为：容器，迭代器，算法,仿函数，适配器，空间配置器。\n\n#### 迭代器\n\n大部分容器使用.begin()方法会获取迭代器的开始指针，解引用后可以获得该处对象\n\n### 容器\n\n#### vector容器--单边数组\n\n类比于java的list；\n\n```c++\n// 基本使用\nvoid vectortest() {\n\tvector<int> v;\n\tfor (int x = 0; x < 10; x++) {\n\t\tv.push_back(x);\n\n\t}\n\tvector<int>::iterator it=v.begin();\n\tvector<int>::iterator ite = v.end();\n\t// 遍历vector\n\twhile\n        (it != ite) {\n\t\tcout << *it << endl;\n\t\tit++;\n\t}\n\n}\n```\n\n##### 常用函数 api：\n\n```c++\n// 重写运算符 = 用来初始化一个集合\n// assign(begin,end)  用来将指定迭代器中间选中部分的数据复制到本集合中\n// assign(n,element)  将n个指定元素复制到本集合中\nempty();//容器是否为空\ncapacity();// 容器的容量\nsize();// 容器的大小（当前元素个数）\nresize(int);// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以默认值填充\nresize(int，ele);// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以ele填充\n// 插入与删除\npush_back(ele);// 将元素放在集合尾部\npop_back();// 删除最后一个元素\nclear(); // 清除所有元素\nerase(iterator);// 删除指定迭代器指向的元素\ninsert(iterator,ele);// 在指定位置插入元素\n// 存取\nat(index);// 获取指定索引处元素\noperator[];// 获取指定id处元素 -- 可以存\nfront();// 返回最前面的元素\nback();// 返回最后一个元素\nswap(vec);// 互换元素\nreserrve(int);// 预留指定长度空间.预留位置内存不初始化.无法访问\n```\n\n#### deque -双端数组.可头插可尾插\n\n常用api:\n\n```c++\npush_front(ele);// 数组前段插入元素\npush_back(ele);// 后方插入元素\npop_front();// 删除头元素\npop_back();//删除尾部\n// deque无容量限制.类似于双向链表.其他api类比于vector\n```\n\n","source":"_posts/cpp-and-unreal.md","raw":"---\ntitle: c++与unreal学习\ndate: 2023-12-18 19:42:40\ncategories:\n- c++\ntags:\n- c++\n---\n# C++基础：\n\n> 仅仅作为本人java开发，自学c++的学习笔记。因为有java基础，所以基础内容记录不会很详细\n\n<!-- more -->\n## 基础\n\n编译器(也是开发工具)：\n\nvisual studio 2017. 下载地址：https://visualstudio.microsoft.com/zh-hans/vs/community/\n\n### visual studio 基本操作：\n\nctrl+k，然后 ctrl+c ，行注释一段代码。 格式：// 与java相同\n\nctrl+k，然后ctrl+u，取消一段代码的注释。\n\n菜鸟基础学习地址：https://www.runoob.com/cplusplus/cpp-tutorial.html\n\n### helloworld步骤：\n\n1. 使用visual studio新建一个空白项目，取名helloworld\n\n2. 在源文件处，新建项目。选择cpp文件。取名helloWorld\n\n3. 编写如下代码：\n\n   ```c++\n   // <>表示程序将会首先且只会去你的系统类库目录查找你所想引入的类或者包;\n   // \"\"表示程序会首先从你的当前目录查找你所想引入的类或者包,如果没有找到,将去系统类库目录找.\n   \n   #include \"iostream\"\n   using namespace std;\n   \n   \n   int main() {\n   \tcout << \"hello world\" << endl;\n   \n   \tsystem(\"pause\");\n   \treturn 0;\n   \n   }\n   ```\n\n4. 点击本地windows调试，可以看到输出 hello world\n\n### 常量\n\n定义常量两种方式：\n\n1. #define 宏常量。 #define  name  value，例如：#define dayOfMonth  7\n2. 在变量前加 **const**关键字。\n\n常量是不可以更改的。一旦修改就会报错。类似于java的final\n\n### 基本数据类型\n\n1. 整型：**int**。8个字节。与java相同。并且具有构造方法\n\n2. 实型（浮点型）： 对应java中的**float，double**。并与java含义相同\n\n3. 字符型：**char**,与java用法相同。字符的ascii码\n\n4. 转义字符：参见正则\n\n5. 字符串类型：因为沿用于c语言，可以直接将char数组定义为字符串。例如：char str[] = \"hello world\"\n\n   同时也有自己的对象风格，string str = \"hello world\"。需要注意，若要在代码中定义sting类型数据，需要引入头文件 #include \"string\"\n\n6. 布尔类型：**bool**.基本与java相同。不同的在于，在输出bool时，其实质就是一个字节。表示为1（真），或0（假）。\n\n### 标准输入输出流\n\n```c++\n// 在引入头文件后：\n#include \"iostream\"\nusing namespace std;\n\n// 可以在代码中使用如下cout左移来输出数据\ncout << \"aaa\" <<endl;\n// 可以使用cin右移运算符来输入数据\nint a;\ncin >> a;\n// 若定义的数据为int，输入的是字母，则会赋值为0\n```\n\n### 变量\n\n用法与java大致相同。不过c++具有指针，引用的概念，可以更自由的访问内存。\n\n> 需要注意的是，当c++中， type a = b ; 的时候，会创建一个变量b的副本给a的引用。此时，a，b是两个独立的变量。各自分别改变值，对另一个没有影响。\n\n### 数组\n\n定义与java相同。每个数据类型都相同。并且需要一块连续的内存空间\n\n声明方式：\n\n1.  int arr[2] = {1,2}; 即在声明变量后加[]中括号，并且规定大小，等于号右边放入数组初始值。初始值个数不能超过规定大小，否则会报错\n2. int arr[2]; 声明大小，不给初始值，会默认用0填充。对象的话，会用空参数对象填充\n3.  int arr[] = {1,2},自动推导数组长度。\n\n需要注意的是：**c++中，数组的名称的本质，其实是指向第一个元素的一个指针。所以可以用指针解引用的方式取出第一个元素。又由于数组内存空间是连续的，所以可以使用名称++，来获取下一个元素的指针.获取数组长度的方法，可以用 sizeof函数，sizeof(数组)/sizeof(数组[0]).**\n\n### 指针与引用：\n\n> c++中的一个难点。c++指针在32位系统下，占4个字节。在64位系统下，占8个字节，即为一个int（不管指针内存的数据类型）\n\n指针就是指指向一块内存区域的地址，下面的代码展示指针的相关用法:\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include \"string\"\n\n#define dayOfMonth  7\n\nint main() {\n\tint a = 20;\n\t// 这里的&a为把a所代表的内存空间拿出来，来让p指针来指向该空间。\n\tint *p = &a;\n\tcout << p << endl;\n    \n    // 下面这一步是对指针解引用。就是将指针所指向内存空间的值（或对象）拿出来。这里就拿val来接受\n    int val = *p;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n\n在变量前加 * 号，可以将其定义为指针。指针 = 引用，代表指针指向某一块引用。上面int * p ,就是定义了一个类型为int的指针。指针指向变量a所在的内存空间。这里&a就是a变量所在内存空间的引用。因为指针需要指向引用，所以等号右边就需要是一个引用；\n\n关于引用，就是一块内存，指针就是内存地址，而上面代码中的a，就是该内存当前的名字。详细可以看下面的代码：\n\n```c++\n\nint main() {\n\t// 声明一个int型的变量a，初始值为20；\n\tint a = 20;\n\t// 声明一个int型的变量b，初始值为30；\n\tint b = a;\n\t// 声明一个int类型的变量c，其引用的是a的地址；\n\tint &c = a;\n\n\ta++;\n\tcout << \"a++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\tb++;\n\tcout << \"b++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\tc++;\n\tcout << \"c++后：\" << \"a: \" << a << \"b: \" << b << \"c: \" << c << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n\n可以看到，c用的是a的引用，即c所用的内存空间，就是a所在的内存空间。所以当a改变时，c也会跟着改变。c改变时，a也会跟着改变。但是b就跟a和c没关系。只是用a的值做了个克隆构造函数，在另一块内存创建了一个新对象。\n\n#### 空指针：\n\n内存条中，由操作系统所占用，我们的程序无法访问的内存区域。一般位0-255号内存。即0-255内存若要访问，就会导致空指针异常（npe）\n\n#### 野指针：\n\n指向非法内存空间的指针。具体是值我们程序没有申请的内存空间，若要解引用，则会抛异常\n\n#### 指针取值\n\n在有当前指针的情况下，一般是需要解引用 *p解引用来获取指针指向内存的数据。但是如果目标区域是对象，则可以用 ->来获取对象参数或者执行方法.\n\n\n\n### 流程控制：for循环，while循环，if判断，三目运算法\n\n与java一样\n\n### c++流程控制：goto关键字\n\n可以在代码中直接跳到某个位置。实际开发中，由于代码可读性差，可以被break和continue代替等原因，不会使用。这也是java中goto作为未实现的保留关键字的原因\n\n### 函数（java中的方法）\n\n我们上面写的main函数，就是函数的一种。具有返回值，函数名，入参。并且c++中main方法需要无惨，并且返回int\n\n#### 函数值传递：\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include \"string\"\n\nvoid say(int a) {\n\ta += 50;\n\tcout << \"say方法中的a：\"<<a << endl;\n}\n\nint main(){\n\tint a = 10;\n\tsay(a);\n\tcout << \"say方法外的a：\" << a << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 上面代码可以看到方法内和方法外打印的a的值是不一样的，这个也是java对于基本类型的处理，传入一个值得副本，对值得改变，无法对原值产生影响。\n// 值传递对于对象，也是拷贝一个副本作为方法参数，所以即使在方法内修改对象的属性，外面的对象属性也不会发生变化。\n```\n\n#### 函数的引用传递：\n\n```c++\nvoid say2(int &a) {\n\ta += 50;\n\tcout << \"say方法中的a：\" << a << endl;\n}\n\nint main(){\n\tint a = 10;\n\tsay2(a);\n\tcout << \"say方法外的a：\" << a << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 则会发现，方法内外的a的值都发生了变化。这是因为传入方法内的是a的引用，方法参数a与外面的a代表同一块内存空间。修改的也是同一块内存空间。java对象采用的即此传递\n```\n\n#### 函数指针传递\n\n```c++\nvoid say3(int *p) {\n\t*p += 50;\n\tint a = *p;\n\tcout << \"say方法中的a：\" << a << endl;\n\tcout << \"say方法中的p：\" << p << endl;\n\n}\n\n\nint main(){\n\tint a = 10;\n\tint *p = &a;\n\n\tsay3(p);\n\n\tcout << \"say方法外的a：\" << a << endl;\n\tcout << \"say方法外的p：\" << p << endl;\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n// 上面代码可以看到，若直接解引用然后赋值，会影响外面的数据。若int a = *p； 然后a++，则不会影响外部数据\n```\n\n#### 函数重载：\n\n与java一样\n\n#### 默认参数:\n\nc++中，函数的入参可以有默认值。若调用者不传对应参数，则方法会自动使用默认值。\n\n需要注意，在声明函数的时候若使用了默认值，则在实现的时候不能有默认值。并且默认参数的函数本质是函数重载，所以有任何相同调用方法的别的函数存在，编译就会报错\n\n#### 占位参数\n\n区别于java的一个点，函数的入参可以只写一个类型，而不写名称。称之为站位参数。占位参数在调用时，需要传入对应类型的站位参数来调用函数。应该是用于函数重载的\n\n```c++\nvoid say(int a) {\n\tcout << \"aaa\" << endl;\n}\n\nvoid say(int a,int) {\n\tcout << a << endl;\n}\n\nint main(){\n\tsay(10,10);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n\n\n#### 函数的声明\n\n与函数的定义相对，在函数声明前，是无法使用的。编译器会找不到函数。若先进行声明，（无函数体，类似于java的抽象方法），下面就可以用这个方法了。然后，编译器在执行的时候，会找该方法的实现。方法声明可以多次，但是实现只能是一次。若有多次实现，会报错。\n\n### c++关键字：const\n\n被const修饰的变量为常量，我们上面已经知道,可以作为变量。但是对于const修饰指针，以及对象，则另有说法。\n\n#### const修饰指针\n\n````c++\nint main(){\n\t// 基准\n\tint a = 20;\n\t// 与a引用不同，值不同\n\tint b = 30;\n\t// 与a引用不同，值相同\n\tint c = 20;\n\t// 与a引用相同\n\tint &d = a;\n\n\t// 常量指针，指针可以改指向，但是指针指向的内存空间不可以改\n\tconst int* p1 = &a;\n\t// 指针常量  指针指向不可以改，但是指针内的内存空间可以改\n\tint* const p2 = &a;\n\t// 全都不能改\n\tconst int*  const p3 = &a;\n\n\n\tcout << *p1 << endl;\n\t//*p1 = b;// 修改p1的值，报错\n\tp1 = &c;// 修改p1的指向为c，不报错\n\tp1 = &b;// 修改p1的指向为b，不报错\n\tcout << *p1 << endl;\n\n\t//p2 = &b;// 试图修改p2的指向，报错\n\t*p2 = b;// 修改p2的值，不报错\n\n\t*p3 = b;// 修改p3的值，报错\n\tp3 = &c; // 修改p3的指向，报错 \n\n\tsystem(\"pause\");\n\treturn 0;\n}\n````\n\n#### const修饰对象：\n\n该对象及其内部属性全部不能改\n\n#### 常量引用：\n\n一般情况，int &a =10,即将一个引用等于一个常量是非法的。但是可以在前面加const，来使其合法。该引用变为常量引用，无法修改内存中的值\n\n## 核心\n\n### 面向对象\n\nc++中，定义类有两种方式，1. 定义结构体struct，2. 定义class。两种方式几乎没区别。在网上看到的区别为：struct默认权限类型为public，class默认权限类型为private。\n\n#### c++类\n\n```c++\nclass MyStruct\n{\nprivate:\n\tstring name;\n\tint age;\nprotected:\n    string lastName;\npublic:\n\tMyStruct(int age,string name) {\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t}\n};\n// 权限修饰符的写法与java有差异。定义一个权限区，然后将该权限的属性或函数写进去即可。权限定义也跟java一致。private私有，public公共，protected保护，子类可见\n\tMyStruct(int age,string name) {\n\t\tthis->age = age;\n\t\tthis->name = name;\n\t}\n\n\tMyStruct( MyStruct& origin) {\n\t\t// 拷贝构造\n\t}\n\n\t~MyStruct() {\n\t\t// 析构函数\n\t}\n```\n\n> 注意：c++类定义完后，需要加分号 ;\n\n#### 构造函数，析构函数：\n\n一个类，默认会有无参构造，这个跟java一致。并且自定义有参构造，会默认覆盖无惨构造。还有一个拷贝构造入参为自己本类的类型，使用浅克隆将属性赋值到本对象.\n\n还有一个析构函数，在对象销毁时会调用，一般用来释放内存;\n\n#### 初始化列表：\n\n```c++\n// 是跟在构造方法后，初始化类属性的方法\n// 使用上面的MyStruct类\n\tMyStruct():name(\"zhangsan\"),age(20) {\n\t}\n// 上面是个空参构造，但是在调用时会初始化name和age。值就是括号中的值\n// 或者有参构造，\n\tMyStruct(int age,string name):name(name),age(age) {\n\t\t\n\t}\n\n```\n\n#### 静态成员变量与函数\n\n属性前加static。规则与java差不多。\n\n调用方式:  类名::成员名称\n\n```c++\nclass People{\n    static int i;\n    \n    static void test(){\n        cout<< i <<endl;\n        \n    }\n    \n}\n\nint main(){\n    People::test();\n    return 0;\n}\n```\n\n\n\n#### this指针\n\n与java的this类似。不过这里的this不是对象，而是指针。需要解引用或者使用 ->\n\n#### 空指针相关：\n\nc++中，空指针是可以调用成员函数的。但是前提是需要函数中没有用到this。若用到了this，则会报异常。否则成功运行\n\n#### const\n\nconst修饰函数，函数变为常函数。常函数只能调用常量（const修饰的）或者mutable修饰的变量。是为了保护对象内部的属性不被乱改\n\nconst修饰对象名称，则该对象只可以调用常函数\n\n#### 友元\n\n关键字：friend. 可以声明一个类或者函数作为友元。该类或者该函数可以访问本类私有属性及函数\n\n```c++\n#include \"iostream\"\nusing namespace std;\n#include <string>\n\nclass A {\n    // 类做友元\n\tfriend class B;\n    // 成员函数做友元\n    friend void B::visit(A a);\n    // 全局函数也可以做友元\nprivate:\n\tint a_i;\n\tstring a_m;\n\tvoid privateTest() {\n\t\tcout << \"A private\" << endl;\n\t}\n};\n\nclass B {\nprivate:\n\tint b_i;\n\tstring b_m;\npublic:\n\tvoid visit(A a) {\n\t\ta.privateTest();\n\t}\n};\nint main() {\n\tB b;\n\tA a;\n\tb.visit(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n### 继承\n\n类似于java继承，但是c++允许多继承。\n\n```c++\n// 继承语法：\nclass A{\n    // 定义类A\n}\n\nclass B:public A{\n    // 定义类B，继承类A。\n}\n\n```\n\n继承也有限定。public：将父类属性及方法按照原有访问权限继承。protected：将父类public的属性以及函数改为protected继承到自身。private：将父类属性及函数继承过来，但是权限全变为private；\n\n在单继承后，子类在不重写父类方法的情况下，调用函数是父类的函数。若重写了函数，则调用的是自己的。\n\n若想调用父类的函数，需要 对象名.父类类名::方法名（参数）;例如：\n\n```c++\nclass B {\nprivate:\n\tint b_i;\n\tstring b_m;\n\npublic:\n\n\tvoid visit(A a) {\n\t\ta.privateTest();\n\t}\n\n\n};\n\nclass D {\nprivate:\n\tint b_i;\n\tstring b_m;\n\npublic:\n\n\tvoid visit(A a) {\n\t\tcout << \"d visit\" << endl;\n\t}\n\n\n};\n\nclass C:public B,public D  {\n\n\npublic:\n\n\n};\nint main() {\n\tB b;\n\tA a;\n\tC c;\n\tb.visit(a);\n// 调用父类方法\n\tc.B::visit(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n#### 菱形继承-virtual关键字\n\n多继承，难免会有A,B两个父类有相同的成员或者方法。并且该情况会引出父类方法实现无用的结果。\n\n则在继承时加入virtual关键字虚继承。则在编译时不会生成父类，在执行时才会。这样，相同的数据只会有一份，按照子类为准。\n\nvirtual也可以修饰方法，称为虚方法，在父类引用指向子类实例时，c++中，调用父类引用的方法，会执行父类实现。若方法为虚方法，则类中会存储虚基类指针，调用父类引用子类实现的对象的方法，会调用子类函数。\n\n```c++\nvirtual void say() = 0;\n// 称为纯虚函数。类似于java的抽象接口。有纯虚函数的类无法实例化对象。子类若若不实现纯虚函数，则子类也无法实例化对象\n```\n\n#### 函数模板 类模板\n\njava中的泛型。其实java的泛型就是从c++的模板变过来的。\n\n```c++\n// 语法\ntemplate <class T> // 下面跟着类，就是类模板。跟着函数，则是函数模板\nclass Person<T>{\n    \n}    \n```\n\n基本语法如上。大致上跟java里差不多。\n\n方法模板中，可以根据入参来自动判断模板类型。而类没有自动判断。\n\n类模板可以 class T = int 来指定默认值;若类模板函数在类外实现，需要在实现前加上模板声明\n\n### 运算符重写\n\n运算符：==，>>,<<,() 都可以重写。返回值类型   operator==（入参）{方法体}\n\n```c++\n// 重写== （可以类比于java重写equals），在类内\nbool operator== (obj o){\n    \n}\n// 若重写左移，可以在全局重写. 第一个参数是调用方，第二个参数是右侧（可视为java的tosting）\n\nostream operator<<(ostream& cout,obj o){\n    cout<< 拼接obj的属性 <<endl;\n    return cout;\n}\n```\n\n\n\n### 分文件编写\n\n在前面讲到了，c++可以是先写好方法定义，然后去实现的。平时开发习惯将类声明以及类方法实现放在两个不同文件，声明为.h后缀的头文件，一般放属性，以及函数定义。实现是.cpp后缀的实现，引入对应头文件来编写方法实现。\n\n**需要注意的是，若类模板份文件编写，则要注意类模板函数是在执行的时候生成的。导致引入头文件不会导入函数，编译器会不认得这个函数。cpp实现文件自然也加载不到。**\n\n\n\n## STL\n\n类比于java的容器。有list，map，set等。主要是使用模板技术。\n\nstl主要分为：容器，迭代器，算法,仿函数，适配器，空间配置器。\n\n#### 迭代器\n\n大部分容器使用.begin()方法会获取迭代器的开始指针，解引用后可以获得该处对象\n\n### 容器\n\n#### vector容器--单边数组\n\n类比于java的list；\n\n```c++\n// 基本使用\nvoid vectortest() {\n\tvector<int> v;\n\tfor (int x = 0; x < 10; x++) {\n\t\tv.push_back(x);\n\n\t}\n\tvector<int>::iterator it=v.begin();\n\tvector<int>::iterator ite = v.end();\n\t// 遍历vector\n\twhile\n        (it != ite) {\n\t\tcout << *it << endl;\n\t\tit++;\n\t}\n\n}\n```\n\n##### 常用函数 api：\n\n```c++\n// 重写运算符 = 用来初始化一个集合\n// assign(begin,end)  用来将指定迭代器中间选中部分的数据复制到本集合中\n// assign(n,element)  将n个指定元素复制到本集合中\nempty();//容器是否为空\ncapacity();// 容器的容量\nsize();// 容器的大小（当前元素个数）\nresize(int);// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以默认值填充\nresize(int，ele);// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以ele填充\n// 插入与删除\npush_back(ele);// 将元素放在集合尾部\npop_back();// 删除最后一个元素\nclear(); // 清除所有元素\nerase(iterator);// 删除指定迭代器指向的元素\ninsert(iterator,ele);// 在指定位置插入元素\n// 存取\nat(index);// 获取指定索引处元素\noperator[];// 获取指定id处元素 -- 可以存\nfront();// 返回最前面的元素\nback();// 返回最后一个元素\nswap(vec);// 互换元素\nreserrve(int);// 预留指定长度空间.预留位置内存不初始化.无法访问\n```\n\n#### deque -双端数组.可头插可尾插\n\n常用api:\n\n```c++\npush_front(ele);// 数组前段插入元素\npush_back(ele);// 后方插入元素\npop_front();// 删除头元素\npop_back();//删除尾部\n// deque无容量限制.类似于双向链表.其他api类比于vector\n```\n\n","slug":"cpp-and-unreal","published":1,"updated":"2024-03-02T14:34:03.603Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7h000j1wu140ns68he","content":"<h1 id=\"C-基础：\"><a href=\"#C-基础：\" class=\"headerlink\" title=\"C++基础：\"></a>C++基础：</h1><blockquote>\n<p>仅仅作为本人java开发，自学c++的学习笔记。因为有java基础，所以基础内容记录不会很详细</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>编译器(也是开发工具)：</p>\n<p>visual studio 2017. 下载地址：<a href=\"https://visualstudio.microsoft.com/zh-hans/vs/community/\">https://visualstudio.microsoft.com/zh-hans/vs/community/</a></p>\n<h3 id=\"visual-studio-基本操作：\"><a href=\"#visual-studio-基本操作：\" class=\"headerlink\" title=\"visual studio 基本操作：\"></a>visual studio 基本操作：</h3><p>ctrl+k，然后 ctrl+c ，行注释一段代码。 格式：&#x2F;&#x2F; 与java相同</p>\n<p>ctrl+k，然后ctrl+u，取消一段代码的注释。</p>\n<p>菜鸟基础学习地址：<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">https://www.runoob.com/cplusplus/cpp-tutorial.html</a></p>\n<h3 id=\"helloworld步骤：\"><a href=\"#helloworld步骤：\" class=\"headerlink\" title=\"helloworld步骤：\"></a>helloworld步骤：</h3><ol>\n<li><p>使用visual studio新建一个空白项目，取名helloworld</p>\n</li>\n<li><p>在源文件处，新建项目。选择cpp文件。取名helloWorld</p>\n</li>\n<li><p>编写如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;&gt;表示程序将会首先且只会去你的系统类库目录查找你所想引入的类或者包;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;&quot;表示程序会首先从你的当前目录查找你所想引入的类或者包,如果没有找到,将去系统类库目录找.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击本地windows调试，可以看到输出 hello world</p>\n</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>定义常量两种方式：</p>\n<ol>\n<li>#define 宏常量。 #define  name  value，例如：#define dayOfMonth  7</li>\n<li>在变量前加 <strong>const</strong>关键字。</li>\n</ol>\n<p>常量是不可以更改的。一旦修改就会报错。类似于java的final</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li><p>整型：<strong>int</strong>。8个字节。与java相同。并且具有构造方法</p>\n</li>\n<li><p>实型（浮点型）： 对应java中的<strong>float，double</strong>。并与java含义相同</p>\n</li>\n<li><p>字符型：<strong>char</strong>,与java用法相同。字符的ascii码</p>\n</li>\n<li><p>转义字符：参见正则</p>\n</li>\n<li><p>字符串类型：因为沿用于c语言，可以直接将char数组定义为字符串。例如：char str[] &#x3D; “hello world”</p>\n<p>同时也有自己的对象风格，string str &#x3D; “hello world”。需要注意，若要在代码中定义sting类型数据，需要引入头文件 #include “string”</p>\n</li>\n<li><p>布尔类型：<strong>bool</strong>.基本与java相同。不同的在于，在输出bool时，其实质就是一个字节。表示为1（真），或0（假）。</p>\n</li>\n</ol>\n<h3 id=\"标准输入输出流\"><a href=\"#标准输入输出流\" class=\"headerlink\" title=\"标准输入输出流\"></a>标准输入输出流</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在引入头文件后：</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以在代码中使用如下cout左移来输出数据</span></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;aaa&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\"><span class=\"comment\">// 可以使用cin右移运算符来输入数据</span></span><br><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\"><span class=\"comment\">// 若定义的数据为int，输入的是字母，则会赋值为0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>用法与java大致相同。不过c++具有指针，引用的概念，可以更自由的访问内存。</p>\n<blockquote>\n<p>需要注意的是，当c++中， type a &#x3D; b ; 的时候，会创建一个变量b的副本给a的引用。此时，a，b是两个独立的变量。各自分别改变值，对另一个没有影响。</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>定义与java相同。每个数据类型都相同。并且需要一块连续的内存空间</p>\n<p>声明方式：</p>\n<ol>\n<li>int arr[2] &#x3D; {1,2}; 即在声明变量后加[]中括号，并且规定大小，等于号右边放入数组初始值。初始值个数不能超过规定大小，否则会报错</li>\n<li>int arr[2]; 声明大小，不给初始值，会默认用0填充。对象的话，会用空参数对象填充</li>\n<li>int arr[] &#x3D; {1,2},自动推导数组长度。</li>\n</ol>\n<p>需要注意的是：<strong>c++中，数组的名称的本质，其实是指向第一个元素的一个指针。所以可以用指针解引用的方式取出第一个元素。又由于数组内存空间是连续的，所以可以使用名称++，来获取下一个元素的指针.获取数组长度的方法，可以用 sizeof函数，sizeof(数组)&#x2F;sizeof(数组[0]).</strong></p>\n<h3 id=\"指针与引用：\"><a href=\"#指针与引用：\" class=\"headerlink\" title=\"指针与引用：\"></a>指针与引用：</h3><blockquote>\n<p>c++中的一个难点。c++指针在32位系统下，占4个字节。在64位系统下，占8个字节，即为一个int（不管指针内存的数据类型）</p>\n</blockquote>\n<p>指针就是指指向一块内存区域的地址，下面的代码展示指针的相关用法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;string&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dayOfMonth  7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的&amp;a为把a所代表的内存空间拿出来，来让p指针来指向该空间。</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = &amp;a;</span><br><span class=\"line\">\tcout &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 下面这一步是对指针解引用。就是将指针所指向内存空间的值（或对象）拿出来。这里就拿val来接受</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val = *p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在变量前加 * 号，可以将其定义为指针。指针 &#x3D; 引用，代表指针指向某一块引用。上面int * p ,就是定义了一个类型为int的指针。指针指向变量a所在的内存空间。这里&amp;a就是a变量所在内存空间的引用。因为指针需要指向引用，所以等号右边就需要是一个引用；</p>\n<p>关于引用，就是一块内存，指针就是内存地址，而上面代码中的a，就是该内存当前的名字。详细可以看下面的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int型的变量a，初始值为20；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int型的变量b，初始值为30；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = a;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int类型的变量c，其引用的是a的地址；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;c = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">\tb++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">\tc++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，c用的是a的引用，即c所用的内存空间，就是a所在的内存空间。所以当a改变时，c也会跟着改变。c改变时，a也会跟着改变。但是b就跟a和c没关系。只是用a的值做了个克隆构造函数，在另一块内存创建了一个新对象。</p>\n<h4 id=\"空指针：\"><a href=\"#空指针：\" class=\"headerlink\" title=\"空指针：\"></a>空指针：</h4><p>内存条中，由操作系统所占用，我们的程序无法访问的内存区域。一般位0-255号内存。即0-255内存若要访问，就会导致空指针异常（npe）</p>\n<h4 id=\"野指针：\"><a href=\"#野指针：\" class=\"headerlink\" title=\"野指针：\"></a>野指针：</h4><p>指向非法内存空间的指针。具体是值我们程序没有申请的内存空间，若要解引用，则会抛异常</p>\n<h4 id=\"指针取值\"><a href=\"#指针取值\" class=\"headerlink\" title=\"指针取值\"></a>指针取值</h4><p>在有当前指针的情况下，一般是需要解引用 *p解引用来获取指针指向内存的数据。但是如果目标区域是对象，则可以用 -&gt;来获取对象参数或者执行方法.</p>\n<h3 id=\"流程控制：for循环，while循环，if判断，三目运算法\"><a href=\"#流程控制：for循环，while循环，if判断，三目运算法\" class=\"headerlink\" title=\"流程控制：for循环，while循环，if判断，三目运算法\"></a>流程控制：for循环，while循环，if判断，三目运算法</h3><p>与java一样</p>\n<h3 id=\"c-流程控制：goto关键字\"><a href=\"#c-流程控制：goto关键字\" class=\"headerlink\" title=\"c++流程控制：goto关键字\"></a>c++流程控制：goto关键字</h3><p>可以在代码中直接跳到某个位置。实际开发中，由于代码可读性差，可以被break和continue代替等原因，不会使用。这也是java中goto作为未实现的保留关键字的原因</p>\n<h3 id=\"函数（java中的方法）\"><a href=\"#函数（java中的方法）\" class=\"headerlink\" title=\"函数（java中的方法）\"></a>函数（java中的方法）</h3><p>我们上面写的main函数，就是函数的一种。具有返回值，函数名，入参。并且c++中main方法需要无惨，并且返回int</p>\n<h4 id=\"函数值传递：\"><a href=\"#函数值传递：\" class=\"headerlink\" title=\"函数值传递：\"></a>函数值传递：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;string&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\ta += <span class=\"number\">50</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span>&lt;&lt;a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(a);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面代码可以看到方法内和方法外打印的a的值是不一样的，这个也是java对于基本类型的处理，传入一个值得副本，对值得改变，无法对原值产生影响。</span></span><br><span class=\"line\"><span class=\"comment\">// 值传递对于对象，也是拷贝一个副本作为方法参数，所以即使在方法内修改对象的属性，外面的对象属性也不会发生变化。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数的引用传递：\"><a href=\"#函数的引用传递：\" class=\"headerlink\" title=\"函数的引用传递：\"></a>函数的引用传递：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say2</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a)</span> </span>&#123;</span><br><span class=\"line\">\ta += <span class=\"number\">50</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">say2</span>(a);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 则会发现，方法内外的a的值都发生了变化。这是因为传入方法内的是a的引用，方法参数a与外面的a代表同一块内存空间。修改的也是同一块内存空间。java对象采用的即此传递</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数指针传递\"><a href=\"#函数指针传递\" class=\"headerlink\" title=\"函数指针传递\"></a>函数指针传递</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say3</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span> </span>&#123;</span><br><span class=\"line\">\t*p += <span class=\"number\">50</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = *p;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的p：&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">say3</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的p：&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面代码可以看到，若直接解引用然后赋值，会影响外面的数据。若int a = *p； 然后a++，则不会影响外部数据</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数重载：\"><a href=\"#函数重载：\" class=\"headerlink\" title=\"函数重载：\"></a>函数重载：</h4><p>与java一样</p>\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数:\"></a>默认参数:</h4><p>c++中，函数的入参可以有默认值。若调用者不传对应参数，则方法会自动使用默认值。</p>\n<p>需要注意，在声明函数的时候若使用了默认值，则在实现的时候不能有默认值。并且默认参数的函数本质是函数重载，所以有任何相同调用方法的别的函数存在，编译就会报错</p>\n<h4 id=\"占位参数\"><a href=\"#占位参数\" class=\"headerlink\" title=\"占位参数\"></a>占位参数</h4><p>区别于java的一个点，函数的入参可以只写一个类型，而不写名称。称之为站位参数。占位参数在调用时，需要传入对应类型的站位参数来调用函数。应该是用于函数重载的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;aaa&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>与函数的定义相对，在函数声明前，是无法使用的。编译器会找不到函数。若先进行声明，（无函数体，类似于java的抽象方法），下面就可以用这个方法了。然后，编译器在执行的时候，会找该方法的实现。方法声明可以多次，但是实现只能是一次。若有多次实现，会报错。</p>\n<h3 id=\"c-关键字：const\"><a href=\"#c-关键字：const\" class=\"headerlink\" title=\"c++关键字：const\"></a>c++关键字：const</h3><p>被const修饰的变量为常量，我们上面已经知道,可以作为变量。但是对于const修饰指针，以及对象，则另有说法。</p>\n<h4 id=\"const修饰指针\"><a href=\"#const修饰指针\" class=\"headerlink\" title=\"const修饰指针\"></a>const修饰指针</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 基准</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用不同，值不同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">30</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用不同，值相同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> c = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用相同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;d = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 常量指针，指针可以改指向，但是指针指向的内存空间不可以改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>* p1 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">// 指针常量  指针指向不可以改，但是指针内的内存空间可以改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* <span class=\"type\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">// 全都不能改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>*  <span class=\"type\">const</span> p3 = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = b;// 修改p1的值，报错</span></span><br><span class=\"line\">\tp1 = &amp;c;<span class=\"comment\">// 修改p1的指向为c，不报错</span></span><br><span class=\"line\">\tp1 = &amp;b;<span class=\"comment\">// 修改p1的指向为b，不报错</span></span><br><span class=\"line\">\tcout &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b;// 试图修改p2的指向，报错</span></span><br><span class=\"line\">\t*p2 = b;<span class=\"comment\">// 修改p2的值，不报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t*p3 = b;<span class=\"comment\">// 修改p3的值，报错</span></span><br><span class=\"line\">\tp3 = &amp;c; <span class=\"comment\">// 修改p3的指向，报错 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const修饰对象：\"><a href=\"#const修饰对象：\" class=\"headerlink\" title=\"const修饰对象：\"></a>const修饰对象：</h4><p>该对象及其内部属性全部不能改</p>\n<h4 id=\"常量引用：\"><a href=\"#常量引用：\" class=\"headerlink\" title=\"常量引用：\"></a>常量引用：</h4><p>一般情况，int &amp;a &#x3D;10,即将一个引用等于一个常量是非法的。但是可以在前面加const，来使其合法。该引用变为常量引用，无法修改内存中的值</p>\n<h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>c++中，定义类有两种方式，1. 定义结构体struct，2. 定义class。两种方式几乎没区别。在网上看到的区别为：struct默认权限类型为public，class默认权限类型为private。</p>\n<h4 id=\"c-类\"><a href=\"#c-类\" class=\"headerlink\" title=\"c++类\"></a>c++类</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStruct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    string lastName;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 权限修饰符的写法与java有差异。定义一个权限区，然后将该权限的属性或函数写进去即可。权限定义也跟java一致。private私有，public公共，protected保护，子类可见</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>( MyStruct&amp; origin) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">MyStruct</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：c++类定义完后，需要加分号 ;</p>\n</blockquote>\n<h4 id=\"构造函数，析构函数：\"><a href=\"#构造函数，析构函数：\" class=\"headerlink\" title=\"构造函数，析构函数：\"></a>构造函数，析构函数：</h4><p>一个类，默认会有无参构造，这个跟java一致。并且自定义有参构造，会默认覆盖无惨构造。还有一个拷贝构造入参为自己本类的类型，使用浅克隆将属性赋值到本对象.</p>\n<p>还有一个析构函数，在对象销毁时会调用，一般用来释放内存;</p>\n<h4 id=\"初始化列表：\"><a href=\"#初始化列表：\" class=\"headerlink\" title=\"初始化列表：\"></a>初始化列表：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是跟在构造方法后，初始化类属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用上面的MyStruct类</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>():<span class=\"built_in\">name</span>(<span class=\"string\">&quot;zhangsan&quot;</span>),<span class=\"built_in\">age</span>(<span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面是个空参构造，但是在调用时会初始化name和age。值就是括号中的值</span></span><br><span class=\"line\"><span class=\"comment\">// 或者有参构造，</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name):<span class=\"built_in\">name</span>(name),<span class=\"built_in\">age</span>(age) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态成员变量与函数\"><a href=\"#静态成员变量与函数\" class=\"headerlink\" title=\"静态成员变量与函数\"></a>静态成员变量与函数</h4><p>属性前加static。规则与java差不多。</p>\n<p>调用方式:  类名::成员名称</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cout&lt;&lt; i &lt;&lt;endl;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    People::<span class=\"built_in\">test</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h4><p>与java的this类似。不过这里的this不是对象，而是指针。需要解引用或者使用 -&gt;</p>\n<h4 id=\"空指针相关：\"><a href=\"#空指针相关：\" class=\"headerlink\" title=\"空指针相关：\"></a>空指针相关：</h4><p>c++中，空指针是可以调用成员函数的。但是前提是需要函数中没有用到this。若用到了this，则会报异常。否则成功运行</p>\n<h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>const修饰函数，函数变为常函数。常函数只能调用常量（const修饰的）或者mutable修饰的变量。是为了保护对象内部的属性不被乱改</p>\n<p>const修饰对象名称，则该对象只可以调用常函数</p>\n<h4 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h4><p>关键字：friend. 可以声明一个类或者函数作为友元。该类或者该函数可以访问本类私有属性及函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类做友元</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成员函数做友元</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">B::visit</span><span class=\"params\">(A a)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 全局函数也可以做友元</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> a_i;</span><br><span class=\"line\">\tstring a_m;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">privateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;A private&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"built_in\">privateTest</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tb.<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>类似于java继承，但是c++允许多继承。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承语法：</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义类A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>:<span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义类B，继承类A。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>继承也有限定。public：将父类属性及方法按照原有访问权限继承。protected：将父类public的属性以及函数改为protected继承到自身。private：将父类属性及函数继承过来，但是权限全变为private；</p>\n<p>在单继承后，子类在不重写父类方法的情况下，调用函数是父类的函数。若重写了函数，则调用的是自己的。</p>\n<p>若想调用父类的函数，需要 对象名.父类类名::方法名（参数）;例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"built_in\">privateTest</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;d visit&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>:<span class=\"keyword\">public</span> B,<span class=\"keyword\">public</span> D  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tC c;</span><br><span class=\"line\">\tb.<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"><span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">\tc.B::<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菱形继承-virtual关键字\"><a href=\"#菱形继承-virtual关键字\" class=\"headerlink\" title=\"菱形继承-virtual关键字\"></a>菱形继承-virtual关键字</h4><p>多继承，难免会有A,B两个父类有相同的成员或者方法。并且该情况会引出父类方法实现无用的结果。</p>\n<p>则在继承时加入virtual关键字虚继承。则在编译时不会生成父类，在执行时才会。这样，相同的数据只会有一份，按照子类为准。</p>\n<p>virtual也可以修饰方法，称为虚方法，在父类引用指向子类实例时，c++中，调用父类引用的方法，会执行父类实现。若方法为虚方法，则类中会存储虚基类指针，调用父类引用子类实现的对象的方法，会调用子类函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 称为纯虚函数。类似于java的抽象接口。有纯虚函数的类无法实例化对象。子类若若不实现纯虚函数，则子类也无法实例化对象</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数模板-类模板\"><a href=\"#函数模板-类模板\" class=\"headerlink\" title=\"函数模板 类模板\"></a>函数模板 类模板</h4><p>java中的泛型。其实java的泛型就是从c++的模板变过来的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt; <span class=\"comment\">// 下面跟着类，就是类模板。跟着函数，则是函数模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<p>基本语法如上。大致上跟java里差不多。</p>\n<p>方法模板中，可以根据入参来自动判断模板类型。而类没有自动判断。</p>\n<p>类模板可以 class T &#x3D; int 来指定默认值;若类模板函数在类外实现，需要在实现前加上模板声明</p>\n<h3 id=\"运算符重写\"><a href=\"#运算符重写\" class=\"headerlink\" title=\"运算符重写\"></a>运算符重写</h3><p>运算符：&#x3D;&#x3D;，&gt;&gt;,&lt;&lt;,() 都可以重写。返回值类型   operator&#x3D;&#x3D;（入参）{方法体}</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写== （可以类比于java重写equals），在类内</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== (obj o)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 若重写左移，可以在全局重写. 第一个参数是调用方，第二个参数是右侧（可视为java的tosting）</span></span><br><span class=\"line\"></span><br><span class=\"line\">ostream <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; cout,obj o)&#123;</span><br><span class=\"line\">    cout&lt;&lt; 拼接obj的属性 &lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cout;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分文件编写\"><a href=\"#分文件编写\" class=\"headerlink\" title=\"分文件编写\"></a>分文件编写</h3><p>在前面讲到了，c++可以是先写好方法定义，然后去实现的。平时开发习惯将类声明以及类方法实现放在两个不同文件，声明为.h后缀的头文件，一般放属性，以及函数定义。实现是.cpp后缀的实现，引入对应头文件来编写方法实现。</p>\n<p><strong>需要注意的是，若类模板份文件编写，则要注意类模板函数是在执行的时候生成的。导致引入头文件不会导入函数，编译器会不认得这个函数。cpp实现文件自然也加载不到。</strong></p>\n<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2><p>类比于java的容器。有list，map，set等。主要是使用模板技术。</p>\n<p>stl主要分为：容器，迭代器，算法,仿函数，适配器，空间配置器。</p>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>大部分容器使用.begin()方法会获取迭代器的开始指针，解引用后可以获得该处对象</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"vector容器–单边数组\"><a href=\"#vector容器–单边数组\" class=\"headerlink\" title=\"vector容器–单边数组\"></a>vector容器–单边数组</h4><p>类比于java的list；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vectortest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++) &#123;</span><br><span class=\"line\">\t\tv.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator it=v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator ite = v.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历vector</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span></span><br><span class=\"line\">        (it != ite) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">\t\tit++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用函数-api：\"><a href=\"#常用函数-api：\" class=\"headerlink\" title=\"常用函数 api：\"></a>常用函数 api：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写运算符 = 用来初始化一个集合</span></span><br><span class=\"line\"><span class=\"comment\">// assign(begin,end)  用来将指定迭代器中间选中部分的数据复制到本集合中</span></span><br><span class=\"line\"><span class=\"comment\">// assign(n,element)  将n个指定元素复制到本集合中</span></span><br><span class=\"line\"><span class=\"built_in\">empty</span>();<span class=\"comment\">//容器是否为空</span></span><br><span class=\"line\"><span class=\"built_in\">capacity</span>();<span class=\"comment\">// 容器的容量</span></span><br><span class=\"line\"><span class=\"built_in\">size</span>();<span class=\"comment\">// 容器的大小（当前元素个数）</span></span><br><span class=\"line\"><span class=\"built_in\">resize</span>(<span class=\"type\">int</span>);<span class=\"comment\">// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以默认值填充</span></span><br><span class=\"line\"><span class=\"built_in\">resize</span>(<span class=\"type\">int</span>，ele);<span class=\"comment\">// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以ele填充</span></span><br><span class=\"line\"><span class=\"comment\">// 插入与删除</span></span><br><span class=\"line\"><span class=\"built_in\">push_back</span>(ele);<span class=\"comment\">// 将元素放在集合尾部</span></span><br><span class=\"line\"><span class=\"built_in\">pop_back</span>();<span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">clear</span>(); <span class=\"comment\">// 清除所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">erase</span>(iterator);<span class=\"comment\">// 删除指定迭代器指向的元素</span></span><br><span class=\"line\"><span class=\"built_in\">insert</span>(iterator,ele);<span class=\"comment\">// 在指定位置插入元素</span></span><br><span class=\"line\"><span class=\"comment\">// 存取</span></span><br><span class=\"line\"><span class=\"built_in\">at</span>(index);<span class=\"comment\">// 获取指定索引处元素</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[];<span class=\"comment\">// 获取指定id处元素 -- 可以存</span></span><br><span class=\"line\"><span class=\"built_in\">front</span>();<span class=\"comment\">// 返回最前面的元素</span></span><br><span class=\"line\"><span class=\"built_in\">back</span>();<span class=\"comment\">// 返回最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">swap</span>(vec);<span class=\"comment\">// 互换元素</span></span><br><span class=\"line\"><span class=\"built_in\">reserrve</span>(<span class=\"type\">int</span>);<span class=\"comment\">// 预留指定长度空间.预留位置内存不初始化.无法访问</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"deque-双端数组-可头插可尾插\"><a href=\"#deque-双端数组-可头插可尾插\" class=\"headerlink\" title=\"deque -双端数组.可头插可尾插\"></a>deque -双端数组.可头插可尾插</h4><p>常用api:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">push_front</span>(ele);<span class=\"comment\">// 数组前段插入元素</span></span><br><span class=\"line\"><span class=\"built_in\">push_back</span>(ele);<span class=\"comment\">// 后方插入元素</span></span><br><span class=\"line\"><span class=\"built_in\">pop_front</span>();<span class=\"comment\">// 删除头元素</span></span><br><span class=\"line\"><span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除尾部</span></span><br><span class=\"line\"><span class=\"comment\">// deque无容量限制.类似于双向链表.其他api类比于vector</span></span><br></pre></td></tr></table></figure>\n\n","length":4821,"excerpt":"<h1 id=\"C-基础：\"><a href=\"#C-基础：\" class=\"headerlink\" title=\"C++基础：\"></a>C++基础：</h1><blockquote>\n<p>仅仅作为本人java开发，自学c++的学习笔记。因为有java基础，所以基础内容记录不会很详细</p>\n</blockquote>","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>编译器(也是开发工具)：</p>\n<p>visual studio 2017. 下载地址：<a href=\"https://visualstudio.microsoft.com/zh-hans/vs/community/\">https://visualstudio.microsoft.com/zh-hans/vs/community/</a></p>\n<h3 id=\"visual-studio-基本操作：\"><a href=\"#visual-studio-基本操作：\" class=\"headerlink\" title=\"visual studio 基本操作：\"></a>visual studio 基本操作：</h3><p>ctrl+k，然后 ctrl+c ，行注释一段代码。 格式：&#x2F;&#x2F; 与java相同</p>\n<p>ctrl+k，然后ctrl+u，取消一段代码的注释。</p>\n<p>菜鸟基础学习地址：<a href=\"https://www.runoob.com/cplusplus/cpp-tutorial.html\">https://www.runoob.com/cplusplus/cpp-tutorial.html</a></p>\n<h3 id=\"helloworld步骤：\"><a href=\"#helloworld步骤：\" class=\"headerlink\" title=\"helloworld步骤：\"></a>helloworld步骤：</h3><ol>\n<li><p>使用visual studio新建一个空白项目，取名helloworld</p>\n</li>\n<li><p>在源文件处，新建项目。选择cpp文件。取名helloWorld</p>\n</li>\n<li><p>编写如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;&gt;表示程序将会首先且只会去你的系统类库目录查找你所想引入的类或者包;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;&quot;表示程序会首先从你的当前目录查找你所想引入的类或者包,如果没有找到,将去系统类库目录找.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击本地windows调试，可以看到输出 hello world</p>\n</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>定义常量两种方式：</p>\n<ol>\n<li>#define 宏常量。 #define  name  value，例如：#define dayOfMonth  7</li>\n<li>在变量前加 <strong>const</strong>关键字。</li>\n</ol>\n<p>常量是不可以更改的。一旦修改就会报错。类似于java的final</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li><p>整型：<strong>int</strong>。8个字节。与java相同。并且具有构造方法</p>\n</li>\n<li><p>实型（浮点型）： 对应java中的<strong>float，double</strong>。并与java含义相同</p>\n</li>\n<li><p>字符型：<strong>char</strong>,与java用法相同。字符的ascii码</p>\n</li>\n<li><p>转义字符：参见正则</p>\n</li>\n<li><p>字符串类型：因为沿用于c语言，可以直接将char数组定义为字符串。例如：char str[] &#x3D; “hello world”</p>\n<p>同时也有自己的对象风格，string str &#x3D; “hello world”。需要注意，若要在代码中定义sting类型数据，需要引入头文件 #include “string”</p>\n</li>\n<li><p>布尔类型：<strong>bool</strong>.基本与java相同。不同的在于，在输出bool时，其实质就是一个字节。表示为1（真），或0（假）。</p>\n</li>\n</ol>\n<h3 id=\"标准输入输出流\"><a href=\"#标准输入输出流\" class=\"headerlink\" title=\"标准输入输出流\"></a>标准输入输出流</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在引入头文件后：</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以在代码中使用如下cout左移来输出数据</span></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;aaa&quot;</span> &lt;&lt;endl;</span><br><span class=\"line\"><span class=\"comment\">// 可以使用cin右移运算符来输入数据</span></span><br><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\"><span class=\"comment\">// 若定义的数据为int，输入的是字母，则会赋值为0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>用法与java大致相同。不过c++具有指针，引用的概念，可以更自由的访问内存。</p>\n<blockquote>\n<p>需要注意的是，当c++中， type a &#x3D; b ; 的时候，会创建一个变量b的副本给a的引用。此时，a，b是两个独立的变量。各自分别改变值，对另一个没有影响。</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>定义与java相同。每个数据类型都相同。并且需要一块连续的内存空间</p>\n<p>声明方式：</p>\n<ol>\n<li>int arr[2] &#x3D; {1,2}; 即在声明变量后加[]中括号，并且规定大小，等于号右边放入数组初始值。初始值个数不能超过规定大小，否则会报错</li>\n<li>int arr[2]; 声明大小，不给初始值，会默认用0填充。对象的话，会用空参数对象填充</li>\n<li>int arr[] &#x3D; {1,2},自动推导数组长度。</li>\n</ol>\n<p>需要注意的是：<strong>c++中，数组的名称的本质，其实是指向第一个元素的一个指针。所以可以用指针解引用的方式取出第一个元素。又由于数组内存空间是连续的，所以可以使用名称++，来获取下一个元素的指针.获取数组长度的方法，可以用 sizeof函数，sizeof(数组)&#x2F;sizeof(数组[0]).</strong></p>\n<h3 id=\"指针与引用：\"><a href=\"#指针与引用：\" class=\"headerlink\" title=\"指针与引用：\"></a>指针与引用：</h3><blockquote>\n<p>c++中的一个难点。c++指针在32位系统下，占4个字节。在64位系统下，占8个字节，即为一个int（不管指针内存的数据类型）</p>\n</blockquote>\n<p>指针就是指指向一块内存区域的地址，下面的代码展示指针的相关用法:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;string&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dayOfMonth  7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的&amp;a为把a所代表的内存空间拿出来，来让p指针来指向该空间。</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = &amp;a;</span><br><span class=\"line\">\tcout &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 下面这一步是对指针解引用。就是将指针所指向内存空间的值（或对象）拿出来。这里就拿val来接受</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val = *p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在变量前加 * 号，可以将其定义为指针。指针 &#x3D; 引用，代表指针指向某一块引用。上面int * p ,就是定义了一个类型为int的指针。指针指向变量a所在的内存空间。这里&amp;a就是a变量所在内存空间的引用。因为指针需要指向引用，所以等号右边就需要是一个引用；</p>\n<p>关于引用，就是一块内存，指针就是内存地址，而上面代码中的a，就是该内存当前的名字。详细可以看下面的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int型的变量a，初始值为20；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int型的变量b，初始值为30；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = a;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一个int类型的变量c，其引用的是a的地址；</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;c = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">\tb++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">\tc++;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c++后：&quot;</span> &lt;&lt; <span class=\"string\">&quot;a: &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot;b: &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;c: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，c用的是a的引用，即c所用的内存空间，就是a所在的内存空间。所以当a改变时，c也会跟着改变。c改变时，a也会跟着改变。但是b就跟a和c没关系。只是用a的值做了个克隆构造函数，在另一块内存创建了一个新对象。</p>\n<h4 id=\"空指针：\"><a href=\"#空指针：\" class=\"headerlink\" title=\"空指针：\"></a>空指针：</h4><p>内存条中，由操作系统所占用，我们的程序无法访问的内存区域。一般位0-255号内存。即0-255内存若要访问，就会导致空指针异常（npe）</p>\n<h4 id=\"野指针：\"><a href=\"#野指针：\" class=\"headerlink\" title=\"野指针：\"></a>野指针：</h4><p>指向非法内存空间的指针。具体是值我们程序没有申请的内存空间，若要解引用，则会抛异常</p>\n<h4 id=\"指针取值\"><a href=\"#指针取值\" class=\"headerlink\" title=\"指针取值\"></a>指针取值</h4><p>在有当前指针的情况下，一般是需要解引用 *p解引用来获取指针指向内存的数据。但是如果目标区域是对象，则可以用 -&gt;来获取对象参数或者执行方法.</p>\n<h3 id=\"流程控制：for循环，while循环，if判断，三目运算法\"><a href=\"#流程控制：for循环，while循环，if判断，三目运算法\" class=\"headerlink\" title=\"流程控制：for循环，while循环，if判断，三目运算法\"></a>流程控制：for循环，while循环，if判断，三目运算法</h3><p>与java一样</p>\n<h3 id=\"c-流程控制：goto关键字\"><a href=\"#c-流程控制：goto关键字\" class=\"headerlink\" title=\"c++流程控制：goto关键字\"></a>c++流程控制：goto关键字</h3><p>可以在代码中直接跳到某个位置。实际开发中，由于代码可读性差，可以被break和continue代替等原因，不会使用。这也是java中goto作为未实现的保留关键字的原因</p>\n<h3 id=\"函数（java中的方法）\"><a href=\"#函数（java中的方法）\" class=\"headerlink\" title=\"函数（java中的方法）\"></a>函数（java中的方法）</h3><p>我们上面写的main函数，就是函数的一种。具有返回值，函数名，入参。并且c++中main方法需要无惨，并且返回int</p>\n<h4 id=\"函数值传递：\"><a href=\"#函数值传递：\" class=\"headerlink\" title=\"函数值传递：\"></a>函数值传递：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;string&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\ta += <span class=\"number\">50</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span>&lt;&lt;a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(a);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面代码可以看到方法内和方法外打印的a的值是不一样的，这个也是java对于基本类型的处理，传入一个值得副本，对值得改变，无法对原值产生影响。</span></span><br><span class=\"line\"><span class=\"comment\">// 值传递对于对象，也是拷贝一个副本作为方法参数，所以即使在方法内修改对象的属性，外面的对象属性也不会发生变化。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数的引用传递：\"><a href=\"#函数的引用传递：\" class=\"headerlink\" title=\"函数的引用传递：\"></a>函数的引用传递：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say2</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a)</span> </span>&#123;</span><br><span class=\"line\">\ta += <span class=\"number\">50</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">say2</span>(a);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 则会发现，方法内外的a的值都发生了变化。这是因为传入方法内的是a的引用，方法参数a与外面的a代表同一块内存空间。修改的也是同一块内存空间。java对象采用的即此传递</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数指针传递\"><a href=\"#函数指针传递\" class=\"headerlink\" title=\"函数指针传递\"></a>函数指针传递</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say3</span><span class=\"params\">(<span class=\"type\">int</span> *p)</span> </span>&#123;</span><br><span class=\"line\">\t*p += <span class=\"number\">50</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = *p;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法中的p：&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">say3</span>(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的a：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;say方法外的p：&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面代码可以看到，若直接解引用然后赋值，会影响外面的数据。若int a = *p； 然后a++，则不会影响外部数据</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数重载：\"><a href=\"#函数重载：\" class=\"headerlink\" title=\"函数重载：\"></a>函数重载：</h4><p>与java一样</p>\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数:\"></a>默认参数:</h4><p>c++中，函数的入参可以有默认值。若调用者不传对应参数，则方法会自动使用默认值。</p>\n<p>需要注意，在声明函数的时候若使用了默认值，则在实现的时候不能有默认值。并且默认参数的函数本质是函数重载，所以有任何相同调用方法的别的函数存在，编译就会报错</p>\n<h4 id=\"占位参数\"><a href=\"#占位参数\" class=\"headerlink\" title=\"占位参数\"></a>占位参数</h4><p>区别于java的一个点，函数的入参可以只写一个类型，而不写名称。称之为站位参数。占位参数在调用时，需要传入对应类型的站位参数来调用函数。应该是用于函数重载的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;aaa&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">say</span>(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>与函数的定义相对，在函数声明前，是无法使用的。编译器会找不到函数。若先进行声明，（无函数体，类似于java的抽象方法），下面就可以用这个方法了。然后，编译器在执行的时候，会找该方法的实现。方法声明可以多次，但是实现只能是一次。若有多次实现，会报错。</p>\n<h3 id=\"c-关键字：const\"><a href=\"#c-关键字：const\" class=\"headerlink\" title=\"c++关键字：const\"></a>c++关键字：const</h3><p>被const修饰的变量为常量，我们上面已经知道,可以作为变量。但是对于const修饰指针，以及对象，则另有说法。</p>\n<h4 id=\"const修饰指针\"><a href=\"#const修饰指针\" class=\"headerlink\" title=\"const修饰指针\"></a>const修饰指针</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 基准</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用不同，值不同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">30</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用不同，值相同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> c = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 与a引用相同</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;d = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 常量指针，指针可以改指向，但是指针指向的内存空间不可以改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>* p1 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">// 指针常量  指针指向不可以改，但是指针内的内存空间可以改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* <span class=\"type\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">// 全都不能改</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>*  <span class=\"type\">const</span> p3 = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = b;// 修改p1的值，报错</span></span><br><span class=\"line\">\tp1 = &amp;c;<span class=\"comment\">// 修改p1的指向为c，不报错</span></span><br><span class=\"line\">\tp1 = &amp;b;<span class=\"comment\">// 修改p1的指向为b，不报错</span></span><br><span class=\"line\">\tcout &lt;&lt; *p1 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b;// 试图修改p2的指向，报错</span></span><br><span class=\"line\">\t*p2 = b;<span class=\"comment\">// 修改p2的值，不报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t*p3 = b;<span class=\"comment\">// 修改p3的值，报错</span></span><br><span class=\"line\">\tp3 = &amp;c; <span class=\"comment\">// 修改p3的指向，报错 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const修饰对象：\"><a href=\"#const修饰对象：\" class=\"headerlink\" title=\"const修饰对象：\"></a>const修饰对象：</h4><p>该对象及其内部属性全部不能改</p>\n<h4 id=\"常量引用：\"><a href=\"#常量引用：\" class=\"headerlink\" title=\"常量引用：\"></a>常量引用：</h4><p>一般情况，int &amp;a &#x3D;10,即将一个引用等于一个常量是非法的。但是可以在前面加const，来使其合法。该引用变为常量引用，无法修改内存中的值</p>\n<h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>c++中，定义类有两种方式，1. 定义结构体struct，2. 定义class。两种方式几乎没区别。在网上看到的区别为：struct默认权限类型为public，class默认权限类型为private。</p>\n<h4 id=\"c-类\"><a href=\"#c-类\" class=\"headerlink\" title=\"c++类\"></a>c++类</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStruct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    string lastName;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 权限修饰符的写法与java有差异。定义一个权限区，然后将该权限的属性或函数写进去即可。权限定义也跟java一致。private私有，public公共，protected保护，子类可见</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>( MyStruct&amp; origin) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">MyStruct</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：c++类定义完后，需要加分号 ;</p>\n</blockquote>\n<h4 id=\"构造函数，析构函数：\"><a href=\"#构造函数，析构函数：\" class=\"headerlink\" title=\"构造函数，析构函数：\"></a>构造函数，析构函数：</h4><p>一个类，默认会有无参构造，这个跟java一致。并且自定义有参构造，会默认覆盖无惨构造。还有一个拷贝构造入参为自己本类的类型，使用浅克隆将属性赋值到本对象.</p>\n<p>还有一个析构函数，在对象销毁时会调用，一般用来释放内存;</p>\n<h4 id=\"初始化列表：\"><a href=\"#初始化列表：\" class=\"headerlink\" title=\"初始化列表：\"></a>初始化列表：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是跟在构造方法后，初始化类属性的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用上面的MyStruct类</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>():<span class=\"built_in\">name</span>(<span class=\"string\">&quot;zhangsan&quot;</span>),<span class=\"built_in\">age</span>(<span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上面是个空参构造，但是在调用时会初始化name和age。值就是括号中的值</span></span><br><span class=\"line\"><span class=\"comment\">// 或者有参构造，</span></span><br><span class=\"line\">\t<span class=\"built_in\">MyStruct</span>(<span class=\"type\">int</span> age,string name):<span class=\"built_in\">name</span>(name),<span class=\"built_in\">age</span>(age) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态成员变量与函数\"><a href=\"#静态成员变量与函数\" class=\"headerlink\" title=\"静态成员变量与函数\"></a>静态成员变量与函数</h4><p>属性前加static。规则与java差不多。</p>\n<p>调用方式:  类名::成员名称</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cout&lt;&lt; i &lt;&lt;endl;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    People::<span class=\"built_in\">test</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h4><p>与java的this类似。不过这里的this不是对象，而是指针。需要解引用或者使用 -&gt;</p>\n<h4 id=\"空指针相关：\"><a href=\"#空指针相关：\" class=\"headerlink\" title=\"空指针相关：\"></a>空指针相关：</h4><p>c++中，空指针是可以调用成员函数的。但是前提是需要函数中没有用到this。若用到了this，则会报异常。否则成功运行</p>\n<h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>const修饰函数，函数变为常函数。常函数只能调用常量（const修饰的）或者mutable修饰的变量。是为了保护对象内部的属性不被乱改</p>\n<p>const修饰对象名称，则该对象只可以调用常函数</p>\n<h4 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h4><p>关键字：friend. 可以声明一个类或者函数作为友元。该类或者该函数可以访问本类私有属性及函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类做友元</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成员函数做友元</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">B::visit</span><span class=\"params\">(A a)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 全局函数也可以做友元</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> a_i;</span><br><span class=\"line\">\tstring a_m;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">privateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;A private&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"built_in\">privateTest</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tb.<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>类似于java继承，但是c++允许多继承。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承语法：</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义类A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>:<span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义类B，继承类A。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>继承也有限定。public：将父类属性及方法按照原有访问权限继承。protected：将父类public的属性以及函数改为protected继承到自身。private：将父类属性及函数继承过来，但是权限全变为private；</p>\n<p>在单继承后，子类在不重写父类方法的情况下，调用函数是父类的函数。若重写了函数，则调用的是自己的。</p>\n<p>若想调用父类的函数，需要 对象名.父类类名::方法名（参数）;例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"built_in\">privateTest</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> b_i;</span><br><span class=\"line\">\tstring b_m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;d visit&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>:<span class=\"keyword\">public</span> B,<span class=\"keyword\">public</span> D  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tC c;</span><br><span class=\"line\">\tb.<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"><span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">\tc.B::<span class=\"built_in\">visit</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菱形继承-virtual关键字\"><a href=\"#菱形继承-virtual关键字\" class=\"headerlink\" title=\"菱形继承-virtual关键字\"></a>菱形继承-virtual关键字</h4><p>多继承，难免会有A,B两个父类有相同的成员或者方法。并且该情况会引出父类方法实现无用的结果。</p>\n<p>则在继承时加入virtual关键字虚继承。则在编译时不会生成父类，在执行时才会。这样，相同的数据只会有一份，按照子类为准。</p>\n<p>virtual也可以修饰方法，称为虚方法，在父类引用指向子类实例时，c++中，调用父类引用的方法，会执行父类实现。若方法为虚方法，则类中会存储虚基类指针，调用父类引用子类实现的对象的方法，会调用子类函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 称为纯虚函数。类似于java的抽象接口。有纯虚函数的类无法实例化对象。子类若若不实现纯虚函数，则子类也无法实例化对象</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数模板-类模板\"><a href=\"#函数模板-类模板\" class=\"headerlink\" title=\"函数模板 类模板\"></a>函数模板 类模板</h4><p>java中的泛型。其实java的泛型就是从c++的模板变过来的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt; <span class=\"comment\">// 下面跟着类，就是类模板。跟着函数，则是函数模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<p>基本语法如上。大致上跟java里差不多。</p>\n<p>方法模板中，可以根据入参来自动判断模板类型。而类没有自动判断。</p>\n<p>类模板可以 class T &#x3D; int 来指定默认值;若类模板函数在类外实现，需要在实现前加上模板声明</p>\n<h3 id=\"运算符重写\"><a href=\"#运算符重写\" class=\"headerlink\" title=\"运算符重写\"></a>运算符重写</h3><p>运算符：&#x3D;&#x3D;，&gt;&gt;,&lt;&lt;,() 都可以重写。返回值类型   operator&#x3D;&#x3D;（入参）{方法体}</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写== （可以类比于java重写equals），在类内</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== (obj o)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 若重写左移，可以在全局重写. 第一个参数是调用方，第二个参数是右侧（可视为java的tosting）</span></span><br><span class=\"line\"></span><br><span class=\"line\">ostream <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; cout,obj o)&#123;</span><br><span class=\"line\">    cout&lt;&lt; 拼接obj的属性 &lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cout;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分文件编写\"><a href=\"#分文件编写\" class=\"headerlink\" title=\"分文件编写\"></a>分文件编写</h3><p>在前面讲到了，c++可以是先写好方法定义，然后去实现的。平时开发习惯将类声明以及类方法实现放在两个不同文件，声明为.h后缀的头文件，一般放属性，以及函数定义。实现是.cpp后缀的实现，引入对应头文件来编写方法实现。</p>\n<p><strong>需要注意的是，若类模板份文件编写，则要注意类模板函数是在执行的时候生成的。导致引入头文件不会导入函数，编译器会不认得这个函数。cpp实现文件自然也加载不到。</strong></p>\n<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2><p>类比于java的容器。有list，map，set等。主要是使用模板技术。</p>\n<p>stl主要分为：容器，迭代器，算法,仿函数，适配器，空间配置器。</p>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>大部分容器使用.begin()方法会获取迭代器的开始指针，解引用后可以获得该处对象</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"vector容器–单边数组\"><a href=\"#vector容器–单边数组\" class=\"headerlink\" title=\"vector容器–单边数组\"></a>vector容器–单边数组</h4><p>类比于java的list；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">vectortest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++) &#123;</span><br><span class=\"line\">\t\tv.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator it=v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator ite = v.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历vector</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span></span><br><span class=\"line\">        (it != ite) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">\t\tit++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用函数-api：\"><a href=\"#常用函数-api：\" class=\"headerlink\" title=\"常用函数 api：\"></a>常用函数 api：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写运算符 = 用来初始化一个集合</span></span><br><span class=\"line\"><span class=\"comment\">// assign(begin,end)  用来将指定迭代器中间选中部分的数据复制到本集合中</span></span><br><span class=\"line\"><span class=\"comment\">// assign(n,element)  将n个指定元素复制到本集合中</span></span><br><span class=\"line\"><span class=\"built_in\">empty</span>();<span class=\"comment\">//容器是否为空</span></span><br><span class=\"line\"><span class=\"built_in\">capacity</span>();<span class=\"comment\">// 容器的容量</span></span><br><span class=\"line\"><span class=\"built_in\">size</span>();<span class=\"comment\">// 容器的大小（当前元素个数）</span></span><br><span class=\"line\"><span class=\"built_in\">resize</span>(<span class=\"type\">int</span>);<span class=\"comment\">// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以默认值填充</span></span><br><span class=\"line\"><span class=\"built_in\">resize</span>(<span class=\"type\">int</span>，ele);<span class=\"comment\">// 重新指定容器大小。若当前元素个数超过大小，则删除末尾元素。若不足，则以ele填充</span></span><br><span class=\"line\"><span class=\"comment\">// 插入与删除</span></span><br><span class=\"line\"><span class=\"built_in\">push_back</span>(ele);<span class=\"comment\">// 将元素放在集合尾部</span></span><br><span class=\"line\"><span class=\"built_in\">pop_back</span>();<span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">clear</span>(); <span class=\"comment\">// 清除所有元素</span></span><br><span class=\"line\"><span class=\"built_in\">erase</span>(iterator);<span class=\"comment\">// 删除指定迭代器指向的元素</span></span><br><span class=\"line\"><span class=\"built_in\">insert</span>(iterator,ele);<span class=\"comment\">// 在指定位置插入元素</span></span><br><span class=\"line\"><span class=\"comment\">// 存取</span></span><br><span class=\"line\"><span class=\"built_in\">at</span>(index);<span class=\"comment\">// 获取指定索引处元素</span></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[];<span class=\"comment\">// 获取指定id处元素 -- 可以存</span></span><br><span class=\"line\"><span class=\"built_in\">front</span>();<span class=\"comment\">// 返回最前面的元素</span></span><br><span class=\"line\"><span class=\"built_in\">back</span>();<span class=\"comment\">// 返回最后一个元素</span></span><br><span class=\"line\"><span class=\"built_in\">swap</span>(vec);<span class=\"comment\">// 互换元素</span></span><br><span class=\"line\"><span class=\"built_in\">reserrve</span>(<span class=\"type\">int</span>);<span class=\"comment\">// 预留指定长度空间.预留位置内存不初始化.无法访问</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"deque-双端数组-可头插可尾插\"><a href=\"#deque-双端数组-可头插可尾插\" class=\"headerlink\" title=\"deque -双端数组.可头插可尾插\"></a>deque -双端数组.可头插可尾插</h4><p>常用api:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">push_front</span>(ele);<span class=\"comment\">// 数组前段插入元素</span></span><br><span class=\"line\"><span class=\"built_in\">push_back</span>(ele);<span class=\"comment\">// 后方插入元素</span></span><br><span class=\"line\"><span class=\"built_in\">pop_front</span>();<span class=\"comment\">// 删除头元素</span></span><br><span class=\"line\"><span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除尾部</span></span><br><span class=\"line\"><span class=\"comment\">// deque无容量限制.类似于双向链表.其他api类比于vector</span></span><br></pre></td></tr></table></figure>"},{"title":"docker学习记录","date":"2023-12-18T11:19:31.000Z","_content":"\ndocker 学习\n<!-- more -->\n\n教程参考[B站狂神视频](https://www.bilibili.com/video/BV1og4y1q7M4?p=11)：\n# 环境\nlinux CentOs7 系统内核3.0以上\n# 安装\n[参照官方文档](https://docs.docker.com/engine/install/centos/)\n[Fedora] (https://docs.docker.com/engine/install/fedora/)\n\n```shell\n## 首先卸载老版本（如果有的话） 移除老版本\n $ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n               \n ## 安装需要的安装包\nsudo yum install -y yum-utils\n## 设置镜像仓库（国外 -- 不建议）\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \n## 国内阿里云镜像(推荐)\nsudo  yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo\n\n## 或者\nsudo dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo\n\n\n## 更细yum软件包索引\nyum makecache fast\n\n## 安装docker相关内容 docker-ce 社区办--推荐  ee--企业版 不推荐\nsudo yum install docker-ce docker-ce-cli containerd.io\n\n## 启动docker\nsudo systemctl start docker\n## 查看版本 可以查看是否安装成功\ndocker version\n## 启动镜像并设置为开机自启\nsystemctl start docker.service\nsystemctl enable docker.service\n\n## helloworld\nsudo docker run hello-world\n## 查看下载镜像\ndocker images\n\n## 卸载docker\nsudo yum remove docker-ce docker-ce-cli containerd.io\n## 删除资源\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n\n## 配置阿里云镜像加速\n\n```\n\n# 镜像基本命令\n```shell\ndocker version\ndocker info\ndocker --help\n\n```\n\n[docker帮助文档官网](https://docs.docker.com/reference/)\n\n# 镜像命令\n---\ndocker images:查看当前所有的镜像\n docker images [OPTIONS] [REPOSITORY[:TAG]]\n```shell\n## 展示所有镜像\ndocker images -a \n## 只展示id\ndocker images -q\n```\n![在这里插入图片描述](demo1.png)\ndocker search -- 搜索镜像\n```shell\n## 搜索mysql镜像\ndocker search mysql\n\n## 搜索\n```\ndocker pull 下载镜像\n```shell\ndocker pull mysql ## 下载mysql镜像\n\ndocker pull mysql:5.0 ## 指定版本下载mysql\n\n## docker 镜像分层下载\n```\n\ndocker rmi: 删除镜像\n```shell\ndocker rmi imageId|imageName  根据镜像id或者名称删除镜像\n\ndocker rmi -f ${docker images -aq}  ## 批量删除。${} 是先查询出来，然后删除所查询的镜像\n\ndocker rmi -f name1 name2 name3  ## 删除多个镜像\n\n```\n# 容器命令\n---\n有了镜像才可以创建容器,这里下载centos容器并启动\n```shell\n## 下载镜像\ndocker pull centos\n\n## 启动容器\ndocker run [可选参数] image\n\n## 参数说明\n--name \t名称\n-d \t\t以后台方式运行\n-i\t\t使用交互方式运行，进入容器查看内容\n-t\n-p \t\t指定容器的端口  -p 8080:8080\n\t主机端口:容器端口\n\t容器端口\n-P(大写) 随机指定端口\n--rm \t运行完退出后会删除容器\n\ndocker run -it centos /bin/bash ## 启动并进入容器\n\nexist ## 在容器中使用可以退出当前容器\n\n\n## 列出所有正在运行的容器\ndocker ps\ndocker ps -a ## 包含所有当前运行以及曾经运行过得容器\ndocker ps -n=7  ## 显示最近创建的容器列表\ndocker ps -q ## 只显示容器编号\n\n## 退出容器\nexist ## 退出并停止\nctrl + P + Q ## 容器不停止，但是退出\n\n## 删除容器\ndocker rm 容器id ## 根据id删除容器 加-f强制删除\n\ndocker rm  -f  [参数]  ## 类似于镜像删除\n# 启动 停止 容器\ndocker start 容器id  ## 通过容器id启动容器\ndocker restart ## 重启容器\ndocker stop  ## 容器停止\ndocker kill ## 强制容器停止\n```\n# 其他常用命令\n---\n```shell\ndocker run -d centos ## 后台启动centos ，但是会自动停止。因为centos需要作为前台。像tomcat这种就不需要，直接后台就可以\n\n## 查看日志\ndocker logs [OPTIONS] CONTAINER\n-t ## 显示时间戳\n-f ## 跟随输出显示\n--details ## 指定显示行数 后面需要跟数字\n\n## 查看容器中的进程命令\ndocker top CONTAINER [ps OPTIONS]\n\n## 查看容器元数据\ndocker inspect\n\n## 进入当前正在运行的容器\ndocker exec -it 容器id  # 进入容器后开启一个新的终端\n\ndocker attach 容器id ## 进入容器正在执行的终端\n\n## 将容器内的文件拷贝到当前服务器主机上\ndocker cp 容器id:/home/text.java /home\n## 将容器中/home/text.java的文件拷贝到当前主机上的/home文件夹,在容器停止时也可以拷贝\n\n```\ncommit镜像\n```shell\n\t## 跟git类似，相当于从镜像生成容器，然后更改容器，若想将容器此时的状态记录成镜像则需要执行以下命令\n\tdocker commit -a \"作者\" -m \"嗯update\" 容器id  镜像名称:版本号\n\t## 几乎完全照搬git思路即可\n\t\n```\n\n# 容器数据卷\n将容器内部的文件与当前系统中的文件绑定共享\n```shell\n## 将主机文件与容器内部某路径文件共享。两个对文件的操作均会同步，类似于双向绑定\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n\n## 查看\ndocker inspect 容器id\n\n## 其中有一部分 mounts 就是挂载信息\n\n## 挂载相关命令\ndocker volume --help\n\n## 查看当前都有哪些挂载\ndocker volume ls  \n\n## 想看某个挂载的具体数据\ndocker volume inspect 挂载名\n\n## 其中有个数据为mountpoint，代表挂载的路径。\n## 路径一般为：/var/lib/docker/volumes/挂载名/_data\n\n## 尽量使用具名挂载\n## 设置容器对于当前文件的权限\ndocker run -it -v  主机目录文件:容器内部文件:ro|rw\n# ro: 只读\n# rw: 可写\n\n## 还可以指定容器挂载\ndocker run -it -name test --volumes-from 另一个容器名称  要启动的容器名称:版本号\n```\n## 具名挂载\n```shell\n## 指定主机目录\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n```\n## 匿名挂载\n```shell\n## 不指定主机目录,会生成一串hash串代替文件名\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n```\n\n# Dockerfile\n用来构建docker镜像的构建文件.\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/dea64458ca24474b89e2abfe7434bfc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdm9pZHZ2dg==,size_20,color_FFFFFF,t_70,g_se,x_16)\n需要知道，dockerfile中，#开头的语句默认为注释，不会被编译执行\n\n文件字段：\n```shell\nFROM\t\t\t#基础镜像\nMAINTAINER\t\t#维护者（邮箱）\nRUN\t\t\t\t# 需要执行什么东西\nADD\t\t\t\t# 需要添加什么文件，如果是tar.gz会自动解压\nWORKDIR\t\t\t# 工作目录\nVOLUME\t\t\t# 挂载的目录，默认匿名挂载\nEXPOSE\t\t\t# 暴露的端口\nCMD\t\t\t\t# 指定容器启动时执行的命令，会跟在ENTRYPOINT 后面当做其参数\nENTRYPOINT \t\t# 启动时执行的命令\nENV\t\t\t\t# 设置当前镜像内的环境变量\n```\n### 构建自己的镜像\n1. 编写Dockerfile文件\n```shell\nFROM\t\t\tJAVA:8\nMAINTAINER\t\tVOIVVVV(voidvvv@git.com)\nWORKDIR\t\t\t/usr/local\nADD\t\t\t\tspringboot_image_demo.jar /app.jar\nCMD\t\t\t\t[\"--server.port=8080\"]\nENTRYPOINT \t\t[\"java\",\"-jar\",\"app.jar\"]\n```\nspringboot项目从github源码直接打包构建镜像\n```shell\nFROM maven:3.3-jdk-8\n\nVOLUME /tmp\n\nWORKDIR /code\n\n# Prepare by downloading dependencies\nADD pom.xml /code/pom.xml  \n#RUN [\"mvn\", \"dependency:resolve\"]\n#RUN [\"mvn\", \"verify\"]\n\n# Adding source, compile and package into a fat jar\nADD src /code/src\nRUN [\"mvn\", \"clean\", \"install\"]\n\nRUN [\"ls\", \"/code/target\"]\nRUN [\"pwd\"]\nRUN [\"ls\", \"-ltrh\", \"/code/target/myspringboot.jar\"]\n\nEXPOSE 8080\n\nENTRYPOINT [ \"java\", \"-jar\", \"/code/target/myspringboot.jar\" ]\n```\n\n\n2. build 镜像\n```shell\ndocker build -f Dockerfile文件名 -t 镜像名称:版本号 .(这个点代表构建所需的环境)\n\ndocker build -f Dockerfile文件名 -t 镜像名称:版本号 .\n\n## 其中构建所需的环境使用一个点，代表使用当前文件夹下作为环境。Dockerfile中的命令比如文件添加复制什么的也都基于这里来拿.Dockerfile文件也是从这里读取的.\n## 这个环境可以为 \n\t. \t\t\t当前文件夹下\n\ttar.gz\t\t压缩包内的所有文件\n\tgit仓库\t\t指定某个仓库，还可以指定分支，文件夹，就以该仓库指定分支指定文件夹下的内容为环境构建镜像\n\t\n```\n","source":"_posts/docker-study.md","raw":"---\ntitle: docker学习记录\ndate: 2023-12-18 19:19:31\ncategories:\n- docker\ntags:\n- docker\n- container\n---\n\ndocker 学习\n<!-- more -->\n\n教程参考[B站狂神视频](https://www.bilibili.com/video/BV1og4y1q7M4?p=11)：\n# 环境\nlinux CentOs7 系统内核3.0以上\n# 安装\n[参照官方文档](https://docs.docker.com/engine/install/centos/)\n[Fedora] (https://docs.docker.com/engine/install/fedora/)\n\n```shell\n## 首先卸载老版本（如果有的话） 移除老版本\n $ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n               \n ## 安装需要的安装包\nsudo yum install -y yum-utils\n## 设置镜像仓库（国外 -- 不建议）\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \n## 国内阿里云镜像(推荐)\nsudo  yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo\n\n## 或者\nsudo dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo\n\n\n## 更细yum软件包索引\nyum makecache fast\n\n## 安装docker相关内容 docker-ce 社区办--推荐  ee--企业版 不推荐\nsudo yum install docker-ce docker-ce-cli containerd.io\n\n## 启动docker\nsudo systemctl start docker\n## 查看版本 可以查看是否安装成功\ndocker version\n## 启动镜像并设置为开机自启\nsystemctl start docker.service\nsystemctl enable docker.service\n\n## helloworld\nsudo docker run hello-world\n## 查看下载镜像\ndocker images\n\n## 卸载docker\nsudo yum remove docker-ce docker-ce-cli containerd.io\n## 删除资源\nsudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n\n## 配置阿里云镜像加速\n\n```\n\n# 镜像基本命令\n```shell\ndocker version\ndocker info\ndocker --help\n\n```\n\n[docker帮助文档官网](https://docs.docker.com/reference/)\n\n# 镜像命令\n---\ndocker images:查看当前所有的镜像\n docker images [OPTIONS] [REPOSITORY[:TAG]]\n```shell\n## 展示所有镜像\ndocker images -a \n## 只展示id\ndocker images -q\n```\n![在这里插入图片描述](demo1.png)\ndocker search -- 搜索镜像\n```shell\n## 搜索mysql镜像\ndocker search mysql\n\n## 搜索\n```\ndocker pull 下载镜像\n```shell\ndocker pull mysql ## 下载mysql镜像\n\ndocker pull mysql:5.0 ## 指定版本下载mysql\n\n## docker 镜像分层下载\n```\n\ndocker rmi: 删除镜像\n```shell\ndocker rmi imageId|imageName  根据镜像id或者名称删除镜像\n\ndocker rmi -f ${docker images -aq}  ## 批量删除。${} 是先查询出来，然后删除所查询的镜像\n\ndocker rmi -f name1 name2 name3  ## 删除多个镜像\n\n```\n# 容器命令\n---\n有了镜像才可以创建容器,这里下载centos容器并启动\n```shell\n## 下载镜像\ndocker pull centos\n\n## 启动容器\ndocker run [可选参数] image\n\n## 参数说明\n--name \t名称\n-d \t\t以后台方式运行\n-i\t\t使用交互方式运行，进入容器查看内容\n-t\n-p \t\t指定容器的端口  -p 8080:8080\n\t主机端口:容器端口\n\t容器端口\n-P(大写) 随机指定端口\n--rm \t运行完退出后会删除容器\n\ndocker run -it centos /bin/bash ## 启动并进入容器\n\nexist ## 在容器中使用可以退出当前容器\n\n\n## 列出所有正在运行的容器\ndocker ps\ndocker ps -a ## 包含所有当前运行以及曾经运行过得容器\ndocker ps -n=7  ## 显示最近创建的容器列表\ndocker ps -q ## 只显示容器编号\n\n## 退出容器\nexist ## 退出并停止\nctrl + P + Q ## 容器不停止，但是退出\n\n## 删除容器\ndocker rm 容器id ## 根据id删除容器 加-f强制删除\n\ndocker rm  -f  [参数]  ## 类似于镜像删除\n# 启动 停止 容器\ndocker start 容器id  ## 通过容器id启动容器\ndocker restart ## 重启容器\ndocker stop  ## 容器停止\ndocker kill ## 强制容器停止\n```\n# 其他常用命令\n---\n```shell\ndocker run -d centos ## 后台启动centos ，但是会自动停止。因为centos需要作为前台。像tomcat这种就不需要，直接后台就可以\n\n## 查看日志\ndocker logs [OPTIONS] CONTAINER\n-t ## 显示时间戳\n-f ## 跟随输出显示\n--details ## 指定显示行数 后面需要跟数字\n\n## 查看容器中的进程命令\ndocker top CONTAINER [ps OPTIONS]\n\n## 查看容器元数据\ndocker inspect\n\n## 进入当前正在运行的容器\ndocker exec -it 容器id  # 进入容器后开启一个新的终端\n\ndocker attach 容器id ## 进入容器正在执行的终端\n\n## 将容器内的文件拷贝到当前服务器主机上\ndocker cp 容器id:/home/text.java /home\n## 将容器中/home/text.java的文件拷贝到当前主机上的/home文件夹,在容器停止时也可以拷贝\n\n```\ncommit镜像\n```shell\n\t## 跟git类似，相当于从镜像生成容器，然后更改容器，若想将容器此时的状态记录成镜像则需要执行以下命令\n\tdocker commit -a \"作者\" -m \"嗯update\" 容器id  镜像名称:版本号\n\t## 几乎完全照搬git思路即可\n\t\n```\n\n# 容器数据卷\n将容器内部的文件与当前系统中的文件绑定共享\n```shell\n## 将主机文件与容器内部某路径文件共享。两个对文件的操作均会同步，类似于双向绑定\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n\n## 查看\ndocker inspect 容器id\n\n## 其中有一部分 mounts 就是挂载信息\n\n## 挂载相关命令\ndocker volume --help\n\n## 查看当前都有哪些挂载\ndocker volume ls  \n\n## 想看某个挂载的具体数据\ndocker volume inspect 挂载名\n\n## 其中有个数据为mountpoint，代表挂载的路径。\n## 路径一般为：/var/lib/docker/volumes/挂载名/_data\n\n## 尽量使用具名挂载\n## 设置容器对于当前文件的权限\ndocker run -it -v  主机目录文件:容器内部文件:ro|rw\n# ro: 只读\n# rw: 可写\n\n## 还可以指定容器挂载\ndocker run -it -name test --volumes-from 另一个容器名称  要启动的容器名称:版本号\n```\n## 具名挂载\n```shell\n## 指定主机目录\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n```\n## 匿名挂载\n```shell\n## 不指定主机目录,会生成一串hash串代替文件名\ndocker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash \n```\n\n# Dockerfile\n用来构建docker镜像的构建文件.\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/dea64458ca24474b89e2abfe7434bfc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdm9pZHZ2dg==,size_20,color_FFFFFF,t_70,g_se,x_16)\n需要知道，dockerfile中，#开头的语句默认为注释，不会被编译执行\n\n文件字段：\n```shell\nFROM\t\t\t#基础镜像\nMAINTAINER\t\t#维护者（邮箱）\nRUN\t\t\t\t# 需要执行什么东西\nADD\t\t\t\t# 需要添加什么文件，如果是tar.gz会自动解压\nWORKDIR\t\t\t# 工作目录\nVOLUME\t\t\t# 挂载的目录，默认匿名挂载\nEXPOSE\t\t\t# 暴露的端口\nCMD\t\t\t\t# 指定容器启动时执行的命令，会跟在ENTRYPOINT 后面当做其参数\nENTRYPOINT \t\t# 启动时执行的命令\nENV\t\t\t\t# 设置当前镜像内的环境变量\n```\n### 构建自己的镜像\n1. 编写Dockerfile文件\n```shell\nFROM\t\t\tJAVA:8\nMAINTAINER\t\tVOIVVVV(voidvvv@git.com)\nWORKDIR\t\t\t/usr/local\nADD\t\t\t\tspringboot_image_demo.jar /app.jar\nCMD\t\t\t\t[\"--server.port=8080\"]\nENTRYPOINT \t\t[\"java\",\"-jar\",\"app.jar\"]\n```\nspringboot项目从github源码直接打包构建镜像\n```shell\nFROM maven:3.3-jdk-8\n\nVOLUME /tmp\n\nWORKDIR /code\n\n# Prepare by downloading dependencies\nADD pom.xml /code/pom.xml  \n#RUN [\"mvn\", \"dependency:resolve\"]\n#RUN [\"mvn\", \"verify\"]\n\n# Adding source, compile and package into a fat jar\nADD src /code/src\nRUN [\"mvn\", \"clean\", \"install\"]\n\nRUN [\"ls\", \"/code/target\"]\nRUN [\"pwd\"]\nRUN [\"ls\", \"-ltrh\", \"/code/target/myspringboot.jar\"]\n\nEXPOSE 8080\n\nENTRYPOINT [ \"java\", \"-jar\", \"/code/target/myspringboot.jar\" ]\n```\n\n\n2. build 镜像\n```shell\ndocker build -f Dockerfile文件名 -t 镜像名称:版本号 .(这个点代表构建所需的环境)\n\ndocker build -f Dockerfile文件名 -t 镜像名称:版本号 .\n\n## 其中构建所需的环境使用一个点，代表使用当前文件夹下作为环境。Dockerfile中的命令比如文件添加复制什么的也都基于这里来拿.Dockerfile文件也是从这里读取的.\n## 这个环境可以为 \n\t. \t\t\t当前文件夹下\n\ttar.gz\t\t压缩包内的所有文件\n\tgit仓库\t\t指定某个仓库，还可以指定分支，文件夹，就以该仓库指定分支指定文件夹下的内容为环境构建镜像\n\t\n```\n","slug":"docker-study","published":1,"updated":"2025-05-25T11:55:04.766Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7h000l1wu112n60047","content":"<p>docker 学习</p>\n<span id=\"more\"></span>\n\n<p>教程参考<a href=\"https://www.bilibili.com/video/BV1og4y1q7M4?p=11\">B站狂神视频</a>：</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>linux CentOs7 系统内核3.0以上</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://docs.docker.com/engine/install/centos/\">参照官方文档</a><br>[Fedora] (<a href=\"https://docs.docker.com/engine/install/fedora/\">https://docs.docker.com/engine/install/fedora/</a>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 首先卸载老版本（如果有的话） 移除老版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"> $ </span><span class=\"language-bash\">sudo yum remove docker \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-client \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-client-latest \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-common \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-latest \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-latest-logrotate \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-logrotate \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-engine</span></span><br><span class=\"line\">               </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\"><span class=\"comment\"># 安装需要的安装包</span></span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置镜像仓库（国外 -- 不建议）</span></span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 国内阿里云镜像(推荐)</span></span></span><br><span class=\"line\">sudo  yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 或者</span></span></span><br><span class=\"line\">sudo dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 更细yum软件包索引</span></span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 安装docker相关内容 docker-ce 社区办--推荐  ee--企业版 不推荐</span></span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动docker</span></span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看版本 可以查看是否安装成功</span></span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动镜像并设置为开机自启</span></span></span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\">systemctl enable docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># helloworld</span></span></span><br><span class=\"line\">sudo docker run hello-world</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看下载镜像</span></span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 卸载docker</span></span></span><br><span class=\"line\">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 删除资源</span></span></span><br><span class=\"line\">sudo rm -rf /var/lib/docker</span><br><span class=\"line\">sudo rm -rf /var/lib/containerd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 配置阿里云镜像加速</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像基本命令\"><a href=\"#镜像基本命令\" class=\"headerlink\" title=\"镜像基本命令\"></a>镜像基本命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\">docker info</span><br><span class=\"line\">docker --help</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/reference/\">docker帮助文档官网</a></p>\n<h1 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h1><hr>\n<p>docker images:查看当前所有的镜像<br> docker images [OPTIONS] [REPOSITORY[:TAG]]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 展示所有镜像</span></span></span><br><span class=\"line\">docker images -a </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 只展示id</span></span></span><br><span class=\"line\">docker images -q</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/12/18/docker-study/demo1.png\" alt=\"在这里插入图片描述\"><br>docker search – 搜索镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 搜索mysql镜像</span></span></span><br><span class=\"line\">docker search mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 搜索</span></span></span><br></pre></td></tr></table></figure>\n<p>docker pull 下载镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql ## 下载mysql镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull mysql:5.0 ## 指定版本下载mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># docker 镜像分层下载</span></span></span><br></pre></td></tr></table></figure>\n\n<p>docker rmi: 删除镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageId|imageName  根据镜像id或者名称删除镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f $&#123;docker images -aq&#125;  ## 批量删除。$&#123;&#125; 是先查询出来，然后删除所查询的镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f name1 name2 name3  ## 删除多个镜像</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h1><hr>\n<p>有了镜像才可以创建容器,这里下载centos容器并启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 下载镜像</span></span></span><br><span class=\"line\">docker pull centos</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动容器</span></span></span><br><span class=\"line\">docker run [可选参数] image</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 参数说明</span></span></span><br><span class=\"line\">--name \t名称</span><br><span class=\"line\">-d \t\t以后台方式运行</span><br><span class=\"line\">-i\t\t使用交互方式运行，进入容器查看内容</span><br><span class=\"line\">-t</span><br><span class=\"line\">-p \t\t指定容器的端口  -p 8080:8080</span><br><span class=\"line\">\t主机端口:容器端口</span><br><span class=\"line\">\t容器端口</span><br><span class=\"line\">-P(大写) 随机指定端口</span><br><span class=\"line\">--rm \t运行完退出后会删除容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it centos /bin/bash ## 启动并进入容器</span><br><span class=\"line\"></span><br><span class=\"line\">exist ## 在容器中使用可以退出当前容器</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 列出所有正在运行的容器</span></span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\">docker ps -a ## 包含所有当前运行以及曾经运行过得容器</span><br><span class=\"line\">docker ps -n=7  ## 显示最近创建的容器列表</span><br><span class=\"line\">docker ps -q ## 只显示容器编号</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 退出容器</span></span></span><br><span class=\"line\">exist ## 退出并停止</span><br><span class=\"line\">ctrl + P + Q ## 容器不停止，但是退出</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 删除容器</span></span></span><br><span class=\"line\">docker rm 容器id ## 根据id删除容器 加-f强制删除</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm  -f  [参数]  ## 类似于镜像删除</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 停止 容器</span></span><br><span class=\"line\">docker start 容器id  ## 通过容器id启动容器</span><br><span class=\"line\">docker restart ## 重启容器</span><br><span class=\"line\">docker stop  ## 容器停止</span><br><span class=\"line\">docker kill ## 强制容器停止</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h1><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d centos ## 后台启动centos ，但是会自动停止。因为centos需要作为前台。像tomcat这种就不需要，直接后台就可以</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看日志</span></span></span><br><span class=\"line\">docker logs [OPTIONS] CONTAINER</span><br><span class=\"line\">-t ## 显示时间戳</span><br><span class=\"line\">-f ## 跟随输出显示</span><br><span class=\"line\">--details ## 指定显示行数 后面需要跟数字</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看容器中的进程命令</span></span></span><br><span class=\"line\">docker top CONTAINER [ps OPTIONS]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看容器元数据</span></span></span><br><span class=\"line\">docker inspect</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 进入当前正在运行的容器</span></span></span><br><span class=\"line\">docker exec -it 容器id  # 进入容器后开启一个新的终端</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id ## 进入容器正在执行的终端</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将容器内的文件拷贝到当前服务器主机上</span></span></span><br><span class=\"line\">docker cp 容器id:/home/text.java /home</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将容器中/home/text.java的文件拷贝到当前主机上的/home文件夹,在容器停止时也可以拷贝</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>commit镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 跟git类似，相当于从镜像生成容器，然后更改容器，若想将容器此时的状态记录成镜像则需要执行以下命令</span></span></span><br><span class=\"line\">docker commit -a &quot;作者&quot; -m &quot;嗯update&quot; 容器id  镜像名称:版本号</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 几乎完全照搬git思路即可</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h1><p>将容器内部的文件与当前系统中的文件绑定共享</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将主机文件与容器内部某路径文件共享。两个对文件的操作均会同步，类似于双向绑定</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看</span></span></span><br><span class=\"line\">docker inspect 容器id</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中有一部分 mounts 就是挂载信息</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 挂载相关命令</span></span></span><br><span class=\"line\">docker volume --help</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看当前都有哪些挂载</span></span></span><br><span class=\"line\">docker volume ls  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 想看某个挂载的具体数据</span></span></span><br><span class=\"line\">docker volume inspect 挂载名</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中有个数据为mountpoint，代表挂载的路径。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 路径一般为：/var/lib/docker/volumes/挂载名/_data</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 尽量使用具名挂载</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置容器对于当前文件的权限</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件:ro|rw</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ro: 只读</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rw: 可写</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 还可以指定容器挂载</span></span></span><br><span class=\"line\">docker run -it -name test --volumes-from 另一个容器名称  要启动的容器名称:版本号</span><br></pre></td></tr></table></figure>\n<h2 id=\"具名挂载\"><a href=\"#具名挂载\" class=\"headerlink\" title=\"具名挂载\"></a>具名挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 指定主机目录</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名挂载\"><a href=\"#匿名挂载\" class=\"headerlink\" title=\"匿名挂载\"></a>匿名挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 不指定主机目录,会生成一串hash串代替文件名</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h1><p>用来构建docker镜像的构建文件.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/dea64458ca24474b89e2abfe7434bfc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdm9pZHZ2dg==,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>需要知道，dockerfile中，#开头的语句默认为注释，不会被编译执行</p>\n<p>文件字段：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM\t\t\t#基础镜像</span><br><span class=\"line\">MAINTAINER\t\t#维护者（邮箱）</span><br><span class=\"line\">RUN\t\t\t\t# 需要执行什么东西</span><br><span class=\"line\">ADD\t\t\t\t# 需要添加什么文件，如果是tar.gz会自动解压</span><br><span class=\"line\">WORKDIR\t\t\t# 工作目录</span><br><span class=\"line\">VOLUME\t\t\t# 挂载的目录，默认匿名挂载</span><br><span class=\"line\">EXPOSE\t\t\t# 暴露的端口</span><br><span class=\"line\">CMD\t\t\t\t# 指定容器启动时执行的命令，会跟在ENTRYPOINT 后面当做其参数</span><br><span class=\"line\">ENTRYPOINT \t\t# 启动时执行的命令</span><br><span class=\"line\">ENV\t\t\t\t# 设置当前镜像内的环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建自己的镜像\"><a href=\"#构建自己的镜像\" class=\"headerlink\" title=\"构建自己的镜像\"></a>构建自己的镜像</h3><ol>\n<li>编写Dockerfile文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM\t\t\tJAVA:8</span><br><span class=\"line\">MAINTAINER\t\tVOIVVVV(voidvvv@git.com)</span><br><span class=\"line\">WORKDIR\t\t\t/usr/local</span><br><span class=\"line\">ADD\t\t\t\tspringboot_image_demo.jar /app.jar</span><br><span class=\"line\">CMD\t\t\t\t[&quot;--server.port=8080&quot;]</span><br><span class=\"line\">ENTRYPOINT \t\t[&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>\n<p>springboot项目从github源码直接打包构建镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM maven:3.3-jdk-8</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /code</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prepare by downloading dependencies</span></span><br><span class=\"line\">ADD pom.xml /code/pom.xml  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN [<span class=\"string\">&quot;mvn&quot;</span>, <span class=\"string\">&quot;dependency:resolve&quot;</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN [<span class=\"string\">&quot;mvn&quot;</span>, <span class=\"string\">&quot;verify&quot;</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Adding <span class=\"built_in\">source</span>, compile and package into a fat jar</span></span><br><span class=\"line\">ADD src /code/src</span><br><span class=\"line\">RUN [&quot;mvn&quot;, &quot;clean&quot;, &quot;install&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [&quot;ls&quot;, &quot;/code/target&quot;]</span><br><span class=\"line\">RUN [&quot;pwd&quot;]</span><br><span class=\"line\">RUN [&quot;ls&quot;, &quot;-ltrh&quot;, &quot;/code/target/myspringboot.jar&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [ &quot;java&quot;, &quot;-jar&quot;, &quot;/code/target/myspringboot.jar&quot; ]</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>build 镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -f Dockerfile文件名 -t 镜像名称:版本号 .(这个点代表构建所需的环境)</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -f Dockerfile文件名 -t 镜像名称:版本号 .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中构建所需的环境使用一个点，代表使用当前文件夹下作为环境。Dockerfile中的命令比如文件添加复制什么的也都基于这里来拿.Dockerfile文件也是从这里读取的.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 这个环境可以为</span></span> </span><br><span class=\"line\">\t. \t\t\t当前文件夹下</span><br><span class=\"line\">\ttar.gz\t\t压缩包内的所有文件</span><br><span class=\"line\">\tgit仓库\t\t指定某个仓库，还可以指定分支，文件夹，就以该仓库指定分支指定文件夹下的内容为环境构建镜像</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n","length":1821,"excerpt":"<p>docker 学习</p>","more":"<p>教程参考<a href=\"https://www.bilibili.com/video/BV1og4y1q7M4?p=11\">B站狂神视频</a>：</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>linux CentOs7 系统内核3.0以上</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://docs.docker.com/engine/install/centos/\">参照官方文档</a><br>[Fedora] (<a href=\"https://docs.docker.com/engine/install/fedora/\">https://docs.docker.com/engine/install/fedora/</a>)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 首先卸载老版本（如果有的话） 移除老版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"> $ </span><span class=\"language-bash\">sudo yum remove docker \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-client \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-client-latest \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-common \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-latest \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-latest-logrotate \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-logrotate \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                  docker-engine</span></span><br><span class=\"line\">               </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\"><span class=\"comment\"># 安装需要的安装包</span></span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置镜像仓库（国外 -- 不建议）</span></span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 国内阿里云镜像(推荐)</span></span></span><br><span class=\"line\">sudo  yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 或者</span></span></span><br><span class=\"line\">sudo dnf config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 更细yum软件包索引</span></span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 安装docker相关内容 docker-ce 社区办--推荐  ee--企业版 不推荐</span></span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动docker</span></span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看版本 可以查看是否安装成功</span></span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动镜像并设置为开机自启</span></span></span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\">systemctl enable docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># helloworld</span></span></span><br><span class=\"line\">sudo docker run hello-world</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看下载镜像</span></span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 卸载docker</span></span></span><br><span class=\"line\">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 删除资源</span></span></span><br><span class=\"line\">sudo rm -rf /var/lib/docker</span><br><span class=\"line\">sudo rm -rf /var/lib/containerd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 配置阿里云镜像加速</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像基本命令\"><a href=\"#镜像基本命令\" class=\"headerlink\" title=\"镜像基本命令\"></a>镜像基本命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\">docker info</span><br><span class=\"line\">docker --help</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/reference/\">docker帮助文档官网</a></p>\n<h1 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h1><hr>\n<p>docker images:查看当前所有的镜像<br> docker images [OPTIONS] [REPOSITORY[:TAG]]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 展示所有镜像</span></span></span><br><span class=\"line\">docker images -a </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 只展示id</span></span></span><br><span class=\"line\">docker images -q</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2023/12/18/docker-study/demo1.png\" alt=\"在这里插入图片描述\"><br>docker search – 搜索镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 搜索mysql镜像</span></span></span><br><span class=\"line\">docker search mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 搜索</span></span></span><br></pre></td></tr></table></figure>\n<p>docker pull 下载镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql ## 下载mysql镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull mysql:5.0 ## 指定版本下载mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># docker 镜像分层下载</span></span></span><br></pre></td></tr></table></figure>\n\n<p>docker rmi: 删除镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi imageId|imageName  根据镜像id或者名称删除镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f $&#123;docker images -aq&#125;  ## 批量删除。$&#123;&#125; 是先查询出来，然后删除所查询的镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f name1 name2 name3  ## 删除多个镜像</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h1><hr>\n<p>有了镜像才可以创建容器,这里下载centos容器并启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 下载镜像</span></span></span><br><span class=\"line\">docker pull centos</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 启动容器</span></span></span><br><span class=\"line\">docker run [可选参数] image</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 参数说明</span></span></span><br><span class=\"line\">--name \t名称</span><br><span class=\"line\">-d \t\t以后台方式运行</span><br><span class=\"line\">-i\t\t使用交互方式运行，进入容器查看内容</span><br><span class=\"line\">-t</span><br><span class=\"line\">-p \t\t指定容器的端口  -p 8080:8080</span><br><span class=\"line\">\t主机端口:容器端口</span><br><span class=\"line\">\t容器端口</span><br><span class=\"line\">-P(大写) 随机指定端口</span><br><span class=\"line\">--rm \t运行完退出后会删除容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it centos /bin/bash ## 启动并进入容器</span><br><span class=\"line\"></span><br><span class=\"line\">exist ## 在容器中使用可以退出当前容器</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 列出所有正在运行的容器</span></span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\">docker ps -a ## 包含所有当前运行以及曾经运行过得容器</span><br><span class=\"line\">docker ps -n=7  ## 显示最近创建的容器列表</span><br><span class=\"line\">docker ps -q ## 只显示容器编号</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 退出容器</span></span></span><br><span class=\"line\">exist ## 退出并停止</span><br><span class=\"line\">ctrl + P + Q ## 容器不停止，但是退出</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 删除容器</span></span></span><br><span class=\"line\">docker rm 容器id ## 根据id删除容器 加-f强制删除</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm  -f  [参数]  ## 类似于镜像删除</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 停止 容器</span></span><br><span class=\"line\">docker start 容器id  ## 通过容器id启动容器</span><br><span class=\"line\">docker restart ## 重启容器</span><br><span class=\"line\">docker stop  ## 容器停止</span><br><span class=\"line\">docker kill ## 强制容器停止</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h1><hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d centos ## 后台启动centos ，但是会自动停止。因为centos需要作为前台。像tomcat这种就不需要，直接后台就可以</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看日志</span></span></span><br><span class=\"line\">docker logs [OPTIONS] CONTAINER</span><br><span class=\"line\">-t ## 显示时间戳</span><br><span class=\"line\">-f ## 跟随输出显示</span><br><span class=\"line\">--details ## 指定显示行数 后面需要跟数字</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看容器中的进程命令</span></span></span><br><span class=\"line\">docker top CONTAINER [ps OPTIONS]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看容器元数据</span></span></span><br><span class=\"line\">docker inspect</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 进入当前正在运行的容器</span></span></span><br><span class=\"line\">docker exec -it 容器id  # 进入容器后开启一个新的终端</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id ## 进入容器正在执行的终端</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将容器内的文件拷贝到当前服务器主机上</span></span></span><br><span class=\"line\">docker cp 容器id:/home/text.java /home</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将容器中/home/text.java的文件拷贝到当前主机上的/home文件夹,在容器停止时也可以拷贝</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>commit镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 跟git类似，相当于从镜像生成容器，然后更改容器，若想将容器此时的状态记录成镜像则需要执行以下命令</span></span></span><br><span class=\"line\">docker commit -a &quot;作者&quot; -m &quot;嗯update&quot; 容器id  镜像名称:版本号</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 几乎完全照搬git思路即可</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h1><p>将容器内部的文件与当前系统中的文件绑定共享</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 将主机文件与容器内部某路径文件共享。两个对文件的操作均会同步，类似于双向绑定</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看</span></span></span><br><span class=\"line\">docker inspect 容器id</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中有一部分 mounts 就是挂载信息</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 挂载相关命令</span></span></span><br><span class=\"line\">docker volume --help</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 查看当前都有哪些挂载</span></span></span><br><span class=\"line\">docker volume ls  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 想看某个挂载的具体数据</span></span></span><br><span class=\"line\">docker volume inspect 挂载名</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中有个数据为mountpoint，代表挂载的路径。</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 路径一般为：/var/lib/docker/volumes/挂载名/_data</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 尽量使用具名挂载</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 设置容器对于当前文件的权限</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件:ro|rw</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ro: 只读</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rw: 可写</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 还可以指定容器挂载</span></span></span><br><span class=\"line\">docker run -it -name test --volumes-from 另一个容器名称  要启动的容器名称:版本号</span><br></pre></td></tr></table></figure>\n<h2 id=\"具名挂载\"><a href=\"#具名挂载\" class=\"headerlink\" title=\"具名挂载\"></a>具名挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 指定主机目录</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名挂载\"><a href=\"#匿名挂载\" class=\"headerlink\" title=\"匿名挂载\"></a>匿名挂载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 不指定主机目录,会生成一串hash串代替文件名</span></span></span><br><span class=\"line\">docker run -it -v  主机目录文件:容器内部文件  mysql  /bin/bash </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h1><p>用来构建docker镜像的构建文件.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/dea64458ca24474b89e2abfe7434bfc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAdm9pZHZ2dg==,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>需要知道，dockerfile中，#开头的语句默认为注释，不会被编译执行</p>\n<p>文件字段：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM\t\t\t#基础镜像</span><br><span class=\"line\">MAINTAINER\t\t#维护者（邮箱）</span><br><span class=\"line\">RUN\t\t\t\t# 需要执行什么东西</span><br><span class=\"line\">ADD\t\t\t\t# 需要添加什么文件，如果是tar.gz会自动解压</span><br><span class=\"line\">WORKDIR\t\t\t# 工作目录</span><br><span class=\"line\">VOLUME\t\t\t# 挂载的目录，默认匿名挂载</span><br><span class=\"line\">EXPOSE\t\t\t# 暴露的端口</span><br><span class=\"line\">CMD\t\t\t\t# 指定容器启动时执行的命令，会跟在ENTRYPOINT 后面当做其参数</span><br><span class=\"line\">ENTRYPOINT \t\t# 启动时执行的命令</span><br><span class=\"line\">ENV\t\t\t\t# 设置当前镜像内的环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建自己的镜像\"><a href=\"#构建自己的镜像\" class=\"headerlink\" title=\"构建自己的镜像\"></a>构建自己的镜像</h3><ol>\n<li>编写Dockerfile文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM\t\t\tJAVA:8</span><br><span class=\"line\">MAINTAINER\t\tVOIVVVV(voidvvv@git.com)</span><br><span class=\"line\">WORKDIR\t\t\t/usr/local</span><br><span class=\"line\">ADD\t\t\t\tspringboot_image_demo.jar /app.jar</span><br><span class=\"line\">CMD\t\t\t\t[&quot;--server.port=8080&quot;]</span><br><span class=\"line\">ENTRYPOINT \t\t[&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>\n<p>springboot项目从github源码直接打包构建镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM maven:3.3-jdk-8</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /code</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prepare by downloading dependencies</span></span><br><span class=\"line\">ADD pom.xml /code/pom.xml  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN [<span class=\"string\">&quot;mvn&quot;</span>, <span class=\"string\">&quot;dependency:resolve&quot;</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RUN [<span class=\"string\">&quot;mvn&quot;</span>, <span class=\"string\">&quot;verify&quot;</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Adding <span class=\"built_in\">source</span>, compile and package into a fat jar</span></span><br><span class=\"line\">ADD src /code/src</span><br><span class=\"line\">RUN [&quot;mvn&quot;, &quot;clean&quot;, &quot;install&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">RUN [&quot;ls&quot;, &quot;/code/target&quot;]</span><br><span class=\"line\">RUN [&quot;pwd&quot;]</span><br><span class=\"line\">RUN [&quot;ls&quot;, &quot;-ltrh&quot;, &quot;/code/target/myspringboot.jar&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [ &quot;java&quot;, &quot;-jar&quot;, &quot;/code/target/myspringboot.jar&quot; ]</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>build 镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -f Dockerfile文件名 -t 镜像名称:版本号 .(这个点代表构建所需的环境)</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -f Dockerfile文件名 -t 镜像名称:版本号 .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 其中构建所需的环境使用一个点，代表使用当前文件夹下作为环境。Dockerfile中的命令比如文件添加复制什么的也都基于这里来拿.Dockerfile文件也是从这里读取的.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 这个环境可以为</span></span> </span><br><span class=\"line\">\t. \t\t\t当前文件夹下</span><br><span class=\"line\">\ttar.gz\t\t压缩包内的所有文件</span><br><span class=\"line\">\tgit仓库\t\t指定某个仓库，还可以指定分支，文件夹，就以该仓库指定分支指定文件夹下的内容为环境构建镜像</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>"},{"title":"GOLANG","date":"2023-12-29T06:38:57.000Z","_content":"\ngo lang 学习记录，以及一些遇到的问题\n![logo](logo.jpg)\n\n<!-- more -->\n\n## 安装\n主页：  https://go.dev/  下载\n下载后直接安装。\n\n安装后查询： \n``` shell\ngo version\n```\n若出现版本展示，则视为安装成功\n\n### 配置代理 proxy\n``` shell\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n","source":"_posts/go-lang-study.md","raw":"---\ntitle: GOLANG\ndate: 2023-12-29 14:38:57\ncategories: \n- GOLANG\ntags: \n- [GO]\n- [study]\n---\n\ngo lang 学习记录，以及一些遇到的问题\n![logo](logo.jpg)\n\n<!-- more -->\n\n## 安装\n主页：  https://go.dev/  下载\n下载后直接安装。\n\n安装后查询： \n``` shell\ngo version\n```\n若出现版本展示，则视为安装成功\n\n### 配置代理 proxy\n``` shell\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n","slug":"go-lang-study","published":1,"updated":"2024-03-02T14:34:03.604Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7i000p1wu11opsgt9p","content":"<p>go lang 学习记录，以及一些遇到的问题<br><img src=\"/2023/12/29/go-lang-study/logo.jpg\" alt=\"logo\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>主页：  <a href=\"https://go.dev/\">https://go.dev/</a>  下载<br>下载后直接安装。</p>\n<p>安装后查询： </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n<p>若出现版本展示，则视为安装成功</p>\n<h3 id=\"配置代理-proxy\"><a href=\"#配置代理-proxy\" class=\"headerlink\" title=\"配置代理 proxy\"></a>配置代理 proxy</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure>\n","length":72,"excerpt":"<p>go lang 学习记录，以及一些遇到的问题<br><img src=\"/2023/12/29/go-lang-study/logo.jpg\" alt=\"logo\"></p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>主页：  <a href=\"https://go.dev/\">https://go.dev/</a>  下载<br>下载后直接安装。</p>\n<p>安装后查询： </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n<p>若出现版本展示，则视为安装成功</p>\n<h3 id=\"配置代理-proxy\"><a href=\"#配置代理-proxy\" class=\"headerlink\" title=\"配置代理 proxy\"></a>配置代理 proxy</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure>"},{"title":"java包获取路径","date":"2023-12-18T11:24:53.000Z","_content":"\n相关问题总结;\n在获取根目录时：\n<!-- more -->>\n```java\n\n    public static void main(String[] args) throws IOException {\n\n        URL resource = MyTest.class.getResource(\"/\");\n        URL resource2 = MyTest.class.getResource(\"\");\n        URL resource3 = MyTest.class.getClassLoader().getResource(\"\");\n        URL resource4 = MyTest.class.getClassLoader().getResource(\"/\");\n\n        URL resource5 = MyTest.class.getClassLoader().getClass().getResource(\"\");\n        URL resource6 = MyTest.class.getClassLoader().getClass().getResource(\"/\");\n\n        String path = MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n\n        System.out.println(\"codesource:\"+path); // jar包和idea环境均获取相同值，为当前项目路径\n        File f = new File(path);\n        System.out.println(\"exist？\"+f.exists());\n\n        String path2 = System.getProperty(\"java.class.path\");\n        System.out.println(\"path2::\"+path2); // 获取环境变量,jar 中就是获取当前jar包名称。\n\n        System.out.println(\"class / :\"+resource); // idea中获取当前项目地址,jar中为null\n        System.out.println(\"class 空 :\"+resource2); // idea 中获取当前类所在位置。 jar中也是，但是不是file，是jar格式\n        System.out.println(\"classloader / :\"+resource4); // idea null  jar  null\n        System.out.println(\"classloader 空 :\"+resource3); // idea 当前项目地址  jar null\n\n        System.out.println(\"loader+class/:\"+resource6); // idea 当前项目地址 jar 空\n        System.out.println(\"loader+class 空:\"+resource5); // idea null  jar null\n\n        // 找到jar包内，properties指定位置路径下所有指定类型的文件\n        if (path.endsWith(\".jar\")){ // 若是jar包，则需要这样做来获取文件\n            System.out.println(\"jar execute\");\n            JarFile jarFile = new JarFile(path);\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()){\n                JarEntry jarEntry = entries.nextElement();\n                String name = jarEntry.getName(); // 全类名(/cn/text/A.class),以及包名\n//                System.out.println(name);\n                if (name.startsWith(\"fxml/\")&&name.endsWith(\".txt\")){\n                    System.out.println(\"zhjao\");\n                    BufferedReader b = new BufferedReader(new BufferedReader(new InputStreamReader(MyTest.class.getResourceAsStream(\"/\"+name))));\n                    String s = b.readLine();\n                    System.out.println(s);\n                }\n            }\n        }\n\n        InputStream resourceAsStream = MyTest.class.getResourceAsStream(\"/config.properties\"); // idea与jar均相同，获取jar项目内文件输入流\n        Properties p = new Properties();\n        p.load(resourceAsStream);\n        System.out.println(p);\n\n\n    }\n```\n\n在获取文件情况下：\n\n```java\n    public void testtt() throws IOException {\n\n        URL resource = MyTest.class.getResource(\"/config.properties\");\n        URL resource2 = MyTest.class.getResource(\"config.properties\");\n        URL resource3 = MyTest.class.getClassLoader().getResource(\"config.properties\");\n        URL resource4 = MyTest.class.getClassLoader().getResource(\"/config.properties\");\n\n        URL resource5 = MyTest.class.getClassLoader().getClass().getResource(\"config.properties\");\n        URL resource6 = MyTest.class.getClassLoader().getClass().getResource(\"/config.properties\");\n\n        String path = MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n\n        System.out.println(\"codesource:\"+path); // jar包和idea环境均获取相同值，为当前项目路径\n        File f = new File(path);\n        System.out.println(\"exist？\"+f.exists());\n\n        String path2 = System.getProperty(\"java.class.path\");\n        System.out.println(\"path2::\"+path2); // 获取环境变量,jar 中就是获取当前jar包名称。\n\n        System.out.println(\"class / :\"+resource); // idea jar中均可以取到,jar 中是jar模式\n        System.out.println(\"class 空 :\"+resource2); // idea jar 均为空\n        System.out.println(\"classloader / :\"+resource4); // idea null  jar  null\n        System.out.println(\"classloader 空 :\"+resource3); // idea 可以取到资源  jar 可以取到 jar模式\n\n        System.out.println(\"loader+class/:\"+resource6); // idea 可以取到资源  jar 可以取到 jar模式\n        System.out.println(\"loader+class 空:\"+resource5); // idea null  jar null\n\n        // 找到jar包内，properties指定位置路径下所有指定类型的文件\n        if (path.endsWith(\".jar\")){ // 若是jar包，则需要这样做来获取文件\n            System.out.println(\"jar execute\");\n            JarFile jarFile = new JarFile(path);\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()){\n                JarEntry jarEntry = entries.nextElement();\n                String name = jarEntry.getName(); // 全类名(/cn/text/A.class),以及包名\n//                System.out.println(name);\n                if (name.startsWith(\"fxml/\")&&name.endsWith(\".txt\")){\n                    System.out.println(\"zhjao\");\n                    BufferedReader b = new BufferedReader(new BufferedReader(new InputStreamReader(MyTest.class.getClassLoader().getResourceAsStream(name))));\n                    String s = b.readLine();\n                    System.out.println(s);\n                }\n            }\n        }\n\n        InputStream resourceAsStream = MyTest.class.getResourceAsStream(\"/config.properties\"); // idea与jar均相同，获取jar项目内文件输入流\n        Properties p = new Properties();\n        p.load(resourceAsStream);\n        System.out.println(p);\n\n    }\n```\n","source":"_posts/java-package.md","raw":"---\ntitle: java包获取路径\ndate: 2023-12-18 19:24:53\ncategories:\n- java\ntags:\n- java\n---\n\n相关问题总结;\n在获取根目录时：\n<!-- more -->>\n```java\n\n    public static void main(String[] args) throws IOException {\n\n        URL resource = MyTest.class.getResource(\"/\");\n        URL resource2 = MyTest.class.getResource(\"\");\n        URL resource3 = MyTest.class.getClassLoader().getResource(\"\");\n        URL resource4 = MyTest.class.getClassLoader().getResource(\"/\");\n\n        URL resource5 = MyTest.class.getClassLoader().getClass().getResource(\"\");\n        URL resource6 = MyTest.class.getClassLoader().getClass().getResource(\"/\");\n\n        String path = MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n\n        System.out.println(\"codesource:\"+path); // jar包和idea环境均获取相同值，为当前项目路径\n        File f = new File(path);\n        System.out.println(\"exist？\"+f.exists());\n\n        String path2 = System.getProperty(\"java.class.path\");\n        System.out.println(\"path2::\"+path2); // 获取环境变量,jar 中就是获取当前jar包名称。\n\n        System.out.println(\"class / :\"+resource); // idea中获取当前项目地址,jar中为null\n        System.out.println(\"class 空 :\"+resource2); // idea 中获取当前类所在位置。 jar中也是，但是不是file，是jar格式\n        System.out.println(\"classloader / :\"+resource4); // idea null  jar  null\n        System.out.println(\"classloader 空 :\"+resource3); // idea 当前项目地址  jar null\n\n        System.out.println(\"loader+class/:\"+resource6); // idea 当前项目地址 jar 空\n        System.out.println(\"loader+class 空:\"+resource5); // idea null  jar null\n\n        // 找到jar包内，properties指定位置路径下所有指定类型的文件\n        if (path.endsWith(\".jar\")){ // 若是jar包，则需要这样做来获取文件\n            System.out.println(\"jar execute\");\n            JarFile jarFile = new JarFile(path);\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()){\n                JarEntry jarEntry = entries.nextElement();\n                String name = jarEntry.getName(); // 全类名(/cn/text/A.class),以及包名\n//                System.out.println(name);\n                if (name.startsWith(\"fxml/\")&&name.endsWith(\".txt\")){\n                    System.out.println(\"zhjao\");\n                    BufferedReader b = new BufferedReader(new BufferedReader(new InputStreamReader(MyTest.class.getResourceAsStream(\"/\"+name))));\n                    String s = b.readLine();\n                    System.out.println(s);\n                }\n            }\n        }\n\n        InputStream resourceAsStream = MyTest.class.getResourceAsStream(\"/config.properties\"); // idea与jar均相同，获取jar项目内文件输入流\n        Properties p = new Properties();\n        p.load(resourceAsStream);\n        System.out.println(p);\n\n\n    }\n```\n\n在获取文件情况下：\n\n```java\n    public void testtt() throws IOException {\n\n        URL resource = MyTest.class.getResource(\"/config.properties\");\n        URL resource2 = MyTest.class.getResource(\"config.properties\");\n        URL resource3 = MyTest.class.getClassLoader().getResource(\"config.properties\");\n        URL resource4 = MyTest.class.getClassLoader().getResource(\"/config.properties\");\n\n        URL resource5 = MyTest.class.getClassLoader().getClass().getResource(\"config.properties\");\n        URL resource6 = MyTest.class.getClassLoader().getClass().getResource(\"/config.properties\");\n\n        String path = MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();\n\n        System.out.println(\"codesource:\"+path); // jar包和idea环境均获取相同值，为当前项目路径\n        File f = new File(path);\n        System.out.println(\"exist？\"+f.exists());\n\n        String path2 = System.getProperty(\"java.class.path\");\n        System.out.println(\"path2::\"+path2); // 获取环境变量,jar 中就是获取当前jar包名称。\n\n        System.out.println(\"class / :\"+resource); // idea jar中均可以取到,jar 中是jar模式\n        System.out.println(\"class 空 :\"+resource2); // idea jar 均为空\n        System.out.println(\"classloader / :\"+resource4); // idea null  jar  null\n        System.out.println(\"classloader 空 :\"+resource3); // idea 可以取到资源  jar 可以取到 jar模式\n\n        System.out.println(\"loader+class/:\"+resource6); // idea 可以取到资源  jar 可以取到 jar模式\n        System.out.println(\"loader+class 空:\"+resource5); // idea null  jar null\n\n        // 找到jar包内，properties指定位置路径下所有指定类型的文件\n        if (path.endsWith(\".jar\")){ // 若是jar包，则需要这样做来获取文件\n            System.out.println(\"jar execute\");\n            JarFile jarFile = new JarFile(path);\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()){\n                JarEntry jarEntry = entries.nextElement();\n                String name = jarEntry.getName(); // 全类名(/cn/text/A.class),以及包名\n//                System.out.println(name);\n                if (name.startsWith(\"fxml/\")&&name.endsWith(\".txt\")){\n                    System.out.println(\"zhjao\");\n                    BufferedReader b = new BufferedReader(new BufferedReader(new InputStreamReader(MyTest.class.getClassLoader().getResourceAsStream(name))));\n                    String s = b.readLine();\n                    System.out.println(s);\n                }\n            }\n        }\n\n        InputStream resourceAsStream = MyTest.class.getResourceAsStream(\"/config.properties\"); // idea与jar均相同，获取jar项目内文件输入流\n        Properties p = new Properties();\n        p.load(resourceAsStream);\n        System.out.println(p);\n\n    }\n```\n","slug":"java-package","published":1,"updated":"2024-03-02T14:34:03.604Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7j000s1wu151wb2gg6","content":"<p>相关问题总结;<br>在获取根目录时：</p>\n<span id=\"more\"></span>>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource2</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource3</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource4</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource5</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource6</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;codesource:&quot;</span>+path); <span class=\"comment\">// jar包和idea环境均获取相同值，为当前项目路径</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(path);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;exist？&quot;</span>+f.exists());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;path2::&quot;</span>+path2); <span class=\"comment\">// 获取环境变量,jar 中就是获取当前jar包名称。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class / :&quot;</span>+resource); <span class=\"comment\">// idea中获取当前项目地址,jar中为null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class 空 :&quot;</span>+resource2); <span class=\"comment\">// idea 中获取当前类所在位置。 jar中也是，但是不是file，是jar格式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader / :&quot;</span>+resource4); <span class=\"comment\">// idea null  jar  null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader 空 :&quot;</span>+resource3); <span class=\"comment\">// idea 当前项目地址  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class/:&quot;</span>+resource6); <span class=\"comment\">// idea 当前项目地址 jar 空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class 空:&quot;</span>+resource5); <span class=\"comment\">// idea null  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到jar包内，properties指定位置路径下所有指定类型的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.endsWith(<span class=\"string\">&quot;.jar&quot;</span>))&#123; <span class=\"comment\">// 若是jar包，则需要这样做来获取文件</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;jar execute&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JarFile</span> <span class=\"variable\">jarFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JarFile</span>(path);</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">                <span class=\"type\">JarEntry</span> <span class=\"variable\">jarEntry</span> <span class=\"operator\">=</span> entries.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jarEntry.getName(); <span class=\"comment\">// 全类名(/cn/text/A.class),以及包名</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(name);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.startsWith(<span class=\"string\">&quot;fxml/&quot;</span>)&amp;&amp;name.endsWith(<span class=\"string\">&quot;.txt&quot;</span>))&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;zhjao&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">BufferedReader</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/&quot;</span>+name))));</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> b.readLine();</span><br><span class=\"line\">                    System.out.println(s);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/config.properties&quot;</span>); <span class=\"comment\">// idea与jar均相同，获取jar项目内文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        p.load(resourceAsStream);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在获取文件情况下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testtt</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource2</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource3</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource4</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource5</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource6</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;codesource:&quot;</span>+path); <span class=\"comment\">// jar包和idea环境均获取相同值，为当前项目路径</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(path);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;exist？&quot;</span>+f.exists());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;path2::&quot;</span>+path2); <span class=\"comment\">// 获取环境变量,jar 中就是获取当前jar包名称。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class / :&quot;</span>+resource); <span class=\"comment\">// idea jar中均可以取到,jar 中是jar模式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class 空 :&quot;</span>+resource2); <span class=\"comment\">// idea jar 均为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader / :&quot;</span>+resource4); <span class=\"comment\">// idea null  jar  null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader 空 :&quot;</span>+resource3); <span class=\"comment\">// idea 可以取到资源  jar 可以取到 jar模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class/:&quot;</span>+resource6); <span class=\"comment\">// idea 可以取到资源  jar 可以取到 jar模式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class 空:&quot;</span>+resource5); <span class=\"comment\">// idea null  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到jar包内，properties指定位置路径下所有指定类型的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.endsWith(<span class=\"string\">&quot;.jar&quot;</span>))&#123; <span class=\"comment\">// 若是jar包，则需要这样做来获取文件</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;jar execute&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JarFile</span> <span class=\"variable\">jarFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JarFile</span>(path);</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">                <span class=\"type\">JarEntry</span> <span class=\"variable\">jarEntry</span> <span class=\"operator\">=</span> entries.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jarEntry.getName(); <span class=\"comment\">// 全类名(/cn/text/A.class),以及包名</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(name);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.startsWith(<span class=\"string\">&quot;fxml/&quot;</span>)&amp;&amp;name.endsWith(<span class=\"string\">&quot;.txt&quot;</span>))&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;zhjao&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">BufferedReader</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(MyTest.class.getClassLoader().getResourceAsStream(name))));</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> b.readLine();</span><br><span class=\"line\">                    System.out.println(s);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/config.properties&quot;</span>); <span class=\"comment\">// idea与jar均相同，获取jar项目内文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        p.load(resourceAsStream);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","length":627,"excerpt":"<p>相关问题总结;<br>在获取根目录时：</p>","more":">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource2</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource3</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource4</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource5</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource6</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;codesource:&quot;</span>+path); <span class=\"comment\">// jar包和idea环境均获取相同值，为当前项目路径</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(path);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;exist？&quot;</span>+f.exists());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;path2::&quot;</span>+path2); <span class=\"comment\">// 获取环境变量,jar 中就是获取当前jar包名称。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class / :&quot;</span>+resource); <span class=\"comment\">// idea中获取当前项目地址,jar中为null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class 空 :&quot;</span>+resource2); <span class=\"comment\">// idea 中获取当前类所在位置。 jar中也是，但是不是file，是jar格式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader / :&quot;</span>+resource4); <span class=\"comment\">// idea null  jar  null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader 空 :&quot;</span>+resource3); <span class=\"comment\">// idea 当前项目地址  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class/:&quot;</span>+resource6); <span class=\"comment\">// idea 当前项目地址 jar 空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class 空:&quot;</span>+resource5); <span class=\"comment\">// idea null  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到jar包内，properties指定位置路径下所有指定类型的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.endsWith(<span class=\"string\">&quot;.jar&quot;</span>))&#123; <span class=\"comment\">// 若是jar包，则需要这样做来获取文件</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;jar execute&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JarFile</span> <span class=\"variable\">jarFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JarFile</span>(path);</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">                <span class=\"type\">JarEntry</span> <span class=\"variable\">jarEntry</span> <span class=\"operator\">=</span> entries.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jarEntry.getName(); <span class=\"comment\">// 全类名(/cn/text/A.class),以及包名</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(name);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.startsWith(<span class=\"string\">&quot;fxml/&quot;</span>)&amp;&amp;name.endsWith(<span class=\"string\">&quot;.txt&quot;</span>))&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;zhjao&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">BufferedReader</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/&quot;</span>+name))));</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> b.readLine();</span><br><span class=\"line\">                    System.out.println(s);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/config.properties&quot;</span>); <span class=\"comment\">// idea与jar均相同，获取jar项目内文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        p.load(resourceAsStream);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在获取文件情况下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testtt</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource2</span> <span class=\"operator\">=</span> MyTest.class.getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource3</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource4</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource5</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;config.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">resource6</span> <span class=\"operator\">=</span> MyTest.class.getClassLoader().getClass().getResource(<span class=\"string\">&quot;/config.properties&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> MyTest.class.getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;codesource:&quot;</span>+path); <span class=\"comment\">// jar包和idea环境均获取相同值，为当前项目路径</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(path);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;exist？&quot;</span>+f.exists());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;path2::&quot;</span>+path2); <span class=\"comment\">// 获取环境变量,jar 中就是获取当前jar包名称。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class / :&quot;</span>+resource); <span class=\"comment\">// idea jar中均可以取到,jar 中是jar模式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;class 空 :&quot;</span>+resource2); <span class=\"comment\">// idea jar 均为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader / :&quot;</span>+resource4); <span class=\"comment\">// idea null  jar  null</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;classloader 空 :&quot;</span>+resource3); <span class=\"comment\">// idea 可以取到资源  jar 可以取到 jar模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class/:&quot;</span>+resource6); <span class=\"comment\">// idea 可以取到资源  jar 可以取到 jar模式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;loader+class 空:&quot;</span>+resource5); <span class=\"comment\">// idea null  jar null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到jar包内，properties指定位置路径下所有指定类型的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.endsWith(<span class=\"string\">&quot;.jar&quot;</span>))&#123; <span class=\"comment\">// 若是jar包，则需要这样做来获取文件</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;jar execute&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">JarFile</span> <span class=\"variable\">jarFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JarFile</span>(path);</span><br><span class=\"line\">            Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (entries.hasMoreElements())&#123;</span><br><span class=\"line\">                <span class=\"type\">JarEntry</span> <span class=\"variable\">jarEntry</span> <span class=\"operator\">=</span> entries.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> jarEntry.getName(); <span class=\"comment\">// 全类名(/cn/text/A.class),以及包名</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(name);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.startsWith(<span class=\"string\">&quot;fxml/&quot;</span>)&amp;&amp;name.endsWith(<span class=\"string\">&quot;.txt&quot;</span>))&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;zhjao&quot;</span>);</span><br><span class=\"line\">                    <span class=\"type\">BufferedReader</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(MyTest.class.getClassLoader().getResourceAsStream(name))));</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> b.readLine();</span><br><span class=\"line\">                    System.out.println(s);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">resourceAsStream</span> <span class=\"operator\">=</span> MyTest.class.getResourceAsStream(<span class=\"string\">&quot;/config.properties&quot;</span>); <span class=\"comment\">// idea与jar均相同，获取jar项目内文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        p.load(resourceAsStream);</span><br><span class=\"line\">        System.out.println(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode_1298_Maximum Candies You Can Get from Boxes","date":"2025-06-03T06:11:02.000Z","_content":"\n![2025-06-03T221137](2025-06-03T221137.png)\n\n<!-- more -->\n\n## 描述\n{%note info%}\nYou have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\n\nstatus[i] is 1 if the ith box is open and 0 if the ith box is closed,\ncandies[i] is the number of candies in the ith box,\nkeys[i] is a list of the labels of the boxes you can open after opening the ith box.\ncontainedBoxes[i] is a list of the boxes you found inside the ith box.\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn the maximum number of candies you can get following the rules above.\n{% endnote %}\n\n## 思路\n这道题我感觉比较简单，直接bfs遍历即可。\n首先，我们需要三个集合（使用数组也可以），来记录我们当前所持有的boxes，我们当前可用的boxes，我们当前持有的钥匙\n然后我们不断循环遍历可用的boxes集合，每当遍历一个元素就将其弹出。直至其为空\n每遍历一个可用的boxes集合，我们就需要执行一下操作：\n1. 将该box中的所有boxes取出放入持有的boxes集合中\n2. 将该box中的所有钥匙取出放入持有的钥匙集合中\n在一个阶段遍历完后，从持有boxes集合中不断取出box尝试与持有的keys集合来比对，若该box对应的status为1或者我们当前有该box的钥匙即可打开该盒子，即将其放入可用boxes集合中\n\n## 代码\n```java\nclass Solution {\n    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {\n        Set<Integer> availableBoxes = new HashSet<>();\n        Set<Integer> holdBoxes = new HashSet<>();\n        Set<Integer> holdKeys = new HashSet<>();\n        // init\n        for (int i : initialBoxes) {\n            if (status[i] == 1) {\n                availableBoxes.add(i);\n                int[] subKeys = keys[i];\n                for (int subKey : subKeys) {\n                    holdKeys.add(subKey);\n                }\n                int[] subBoxes = containedBoxes[i];\n                for (int subBox : subBoxes) {\n                    holdBoxes.add(subBox);\n                }\n            } else {\n                holdBoxes.add(i);\n            }\n            \n        }\n        int ans = 0;\n        while (!availableBoxes.isEmpty()) {\n            var it = availableBoxes.iterator();\n            \n            while (it.hasNext()) {\n                int box = it.next();\n                it.remove();\n                ans += candies[box];\n                \n                // sub boxes\n                int[] subBoxes = containedBoxes[box];\n                for (int subBox : subBoxes) {\n                    holdBoxes.add(subBox);\n                }\n                int[] subKeys = keys[box];\n                for (int subKey : subKeys) {\n                    holdKeys.add(subKey);\n                }\n\n            }\n            var hbi = holdBoxes.iterator();\n            // var hki = holdKeys.iterator();\n            while (hbi.hasNext()) {\n                int holdNextBox =  hbi.next();\n                if (holdKeys.contains(holdNextBox) || status[holdNextBox] == 1) {\n                    hbi.remove();\n                    holdKeys.remove(holdNextBox);\n                    availableBoxes.add(holdNextBox);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```","source":"_posts/lk_1298_hard.md","raw":"---\ntitle: leetcode_1298_Maximum Candies You Can Get from Boxes\ndate: 2025-06-03T22:11:02+08:00\ntags:\n- bfs\ncategories:\n- 算法\n---\n\n![2025-06-03T221137](2025-06-03T221137.png)\n\n<!-- more -->\n\n## 描述\n{%note info%}\nYou have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\n\nstatus[i] is 1 if the ith box is open and 0 if the ith box is closed,\ncandies[i] is the number of candies in the ith box,\nkeys[i] is a list of the labels of the boxes you can open after opening the ith box.\ncontainedBoxes[i] is a list of the boxes you found inside the ith box.\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn the maximum number of candies you can get following the rules above.\n{% endnote %}\n\n## 思路\n这道题我感觉比较简单，直接bfs遍历即可。\n首先，我们需要三个集合（使用数组也可以），来记录我们当前所持有的boxes，我们当前可用的boxes，我们当前持有的钥匙\n然后我们不断循环遍历可用的boxes集合，每当遍历一个元素就将其弹出。直至其为空\n每遍历一个可用的boxes集合，我们就需要执行一下操作：\n1. 将该box中的所有boxes取出放入持有的boxes集合中\n2. 将该box中的所有钥匙取出放入持有的钥匙集合中\n在一个阶段遍历完后，从持有boxes集合中不断取出box尝试与持有的keys集合来比对，若该box对应的status为1或者我们当前有该box的钥匙即可打开该盒子，即将其放入可用boxes集合中\n\n## 代码\n```java\nclass Solution {\n    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {\n        Set<Integer> availableBoxes = new HashSet<>();\n        Set<Integer> holdBoxes = new HashSet<>();\n        Set<Integer> holdKeys = new HashSet<>();\n        // init\n        for (int i : initialBoxes) {\n            if (status[i] == 1) {\n                availableBoxes.add(i);\n                int[] subKeys = keys[i];\n                for (int subKey : subKeys) {\n                    holdKeys.add(subKey);\n                }\n                int[] subBoxes = containedBoxes[i];\n                for (int subBox : subBoxes) {\n                    holdBoxes.add(subBox);\n                }\n            } else {\n                holdBoxes.add(i);\n            }\n            \n        }\n        int ans = 0;\n        while (!availableBoxes.isEmpty()) {\n            var it = availableBoxes.iterator();\n            \n            while (it.hasNext()) {\n                int box = it.next();\n                it.remove();\n                ans += candies[box];\n                \n                // sub boxes\n                int[] subBoxes = containedBoxes[box];\n                for (int subBox : subBoxes) {\n                    holdBoxes.add(subBox);\n                }\n                int[] subKeys = keys[box];\n                for (int subKey : subKeys) {\n                    holdKeys.add(subKey);\n                }\n\n            }\n            var hbi = holdBoxes.iterator();\n            // var hki = holdKeys.iterator();\n            while (hbi.hasNext()) {\n                int holdNextBox =  hbi.next();\n                if (holdKeys.contains(holdNextBox) || status[holdNextBox] == 1) {\n                    hbi.remove();\n                    holdKeys.remove(holdNextBox);\n                    availableBoxes.add(holdNextBox);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```","slug":"lk_1298_hard","published":1,"updated":"2025-06-03T14:21:22.113Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7j000x1wu186c8ha6z","content":"<p><img src=\"/2025/06/03/lk_1298_hard/2025-06-03T221137.png\" alt=\"2025-06-03T221137\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><div class=\"note info\"><p>You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:</p>\n<p>status[i] is 1 if the ith box is open and 0 if the ith box is closed,<br>candies[i] is the number of candies in the ith box,<br>keys[i] is a list of the labels of the boxes you can open after opening the ith box.<br>containedBoxes[i] is a list of the boxes you found inside the ith box.<br>You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.</p>\n<p>Return the maximum number of candies you can get following the rules above.</p>\n</div>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这道题我感觉比较简单，直接bfs遍历即可。<br>首先，我们需要三个集合（使用数组也可以），来记录我们当前所持有的boxes，我们当前可用的boxes，我们当前持有的钥匙<br>然后我们不断循环遍历可用的boxes集合，每当遍历一个元素就将其弹出。直至其为空<br>每遍历一个可用的boxes集合，我们就需要执行一下操作：</p>\n<ol>\n<li>将该box中的所有boxes取出放入持有的boxes集合中</li>\n<li>将该box中的所有钥匙取出放入持有的钥匙集合中<br>在一个阶段遍历完后，从持有boxes集合中不断取出box尝试与持有的keys集合来比对，若该box对应的status为1或者我们当前有该box的钥匙即可打开该盒子，即将其放入可用boxes集合中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxCandies</span><span class=\"params\">(<span class=\"type\">int</span>[] status, <span class=\"type\">int</span>[] candies, <span class=\"type\">int</span>[][] keys, <span class=\"type\">int</span>[][] containedBoxes, <span class=\"type\">int</span>[] initialBoxes)</span> &#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; availableBoxes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Integer&gt; holdBoxes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Integer&gt; holdKeys = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// init</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : initialBoxes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                availableBoxes.add(i);</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subKeys = keys[i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subKey : subKeys) &#123;</span><br><span class=\"line\">                    holdKeys.add(subKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subBoxes = containedBoxes[i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subBox : subBoxes) &#123;</span><br><span class=\"line\">                    holdBoxes.add(subBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                holdBoxes.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!availableBoxes.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">it</span> <span class=\"operator\">=</span> availableBoxes.iterator();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">box</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">                ans += candies[box];</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// sub boxes</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] subBoxes = containedBoxes[box];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subBox : subBoxes) &#123;</span><br><span class=\"line\">                    holdBoxes.add(subBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subKeys = keys[box];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subKey : subKeys) &#123;</span><br><span class=\"line\">                    holdKeys.add(subKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">hbi</span> <span class=\"operator\">=</span> holdBoxes.iterator();</span><br><span class=\"line\">            <span class=\"comment\">// var hki = holdKeys.iterator();</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (hbi.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">holdNextBox</span> <span class=\"operator\">=</span>  hbi.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (holdKeys.contains(holdNextBox) || status[holdNextBox] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    hbi.remove();</span><br><span class=\"line\">                    holdKeys.remove(holdNextBox);</span><br><span class=\"line\">                    availableBoxes.add(holdNextBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":520,"excerpt":"<p><img src=\"/2025/06/03/lk_1298_hard/2025-06-03T221137.png\" alt=\"2025-06-03T221137\"></p>","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><div class=\"note info\"><p>You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:</p>\n<p>status[i] is 1 if the ith box is open and 0 if the ith box is closed,<br>candies[i] is the number of candies in the ith box,<br>keys[i] is a list of the labels of the boxes you can open after opening the ith box.<br>containedBoxes[i] is a list of the boxes you found inside the ith box.<br>You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.</p>\n<p>Return the maximum number of candies you can get following the rules above.</p>\n</div>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这道题我感觉比较简单，直接bfs遍历即可。<br>首先，我们需要三个集合（使用数组也可以），来记录我们当前所持有的boxes，我们当前可用的boxes，我们当前持有的钥匙<br>然后我们不断循环遍历可用的boxes集合，每当遍历一个元素就将其弹出。直至其为空<br>每遍历一个可用的boxes集合，我们就需要执行一下操作：</p>\n<ol>\n<li>将该box中的所有boxes取出放入持有的boxes集合中</li>\n<li>将该box中的所有钥匙取出放入持有的钥匙集合中<br>在一个阶段遍历完后，从持有boxes集合中不断取出box尝试与持有的keys集合来比对，若该box对应的status为1或者我们当前有该box的钥匙即可打开该盒子，即将其放入可用boxes集合中</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxCandies</span><span class=\"params\">(<span class=\"type\">int</span>[] status, <span class=\"type\">int</span>[] candies, <span class=\"type\">int</span>[][] keys, <span class=\"type\">int</span>[][] containedBoxes, <span class=\"type\">int</span>[] initialBoxes)</span> &#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; availableBoxes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Integer&gt; holdBoxes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Integer&gt; holdKeys = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// init</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : initialBoxes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                availableBoxes.add(i);</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subKeys = keys[i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subKey : subKeys) &#123;</span><br><span class=\"line\">                    holdKeys.add(subKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subBoxes = containedBoxes[i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subBox : subBoxes) &#123;</span><br><span class=\"line\">                    holdBoxes.add(subBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                holdBoxes.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!availableBoxes.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">it</span> <span class=\"operator\">=</span> availableBoxes.iterator();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">box</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">                it.remove();</span><br><span class=\"line\">                ans += candies[box];</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// sub boxes</span></span><br><span class=\"line\">                <span class=\"type\">int</span>[] subBoxes = containedBoxes[box];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subBox : subBoxes) &#123;</span><br><span class=\"line\">                    holdBoxes.add(subBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] subKeys = keys[box];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> subKey : subKeys) &#123;</span><br><span class=\"line\">                    holdKeys.add(subKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">hbi</span> <span class=\"operator\">=</span> holdBoxes.iterator();</span><br><span class=\"line\">            <span class=\"comment\">// var hki = holdKeys.iterator();</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (hbi.hasNext()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">holdNextBox</span> <span class=\"operator\">=</span>  hbi.next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (holdKeys.contains(holdNextBox) || status[holdNextBox] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    hbi.remove();</span><br><span class=\"line\">                    holdKeys.remove(holdNextBox);</span><br><span class=\"line\">                    availableBoxes.add(holdNextBox);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-135-Candy","date":"2025-06-02T04:27:36.000Z","_content":"\nThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\n<!-- more -->\n\n![2025-06-02T203114](2025-06-02T203114.png)\n\n[题目](https://leetcode.cn/problems/candy/description/)\n\n## 思路\n对于这个题，乍一看以为很简单，以为只需要遍历ratings 数组找到高点更新其值即可。但是看了测试用例仔细想过后，发现并不是这么简单。\n首先，一个元素的rating高于左侧的元素的rating，那么该索引处获得的糖果需要比左侧高，右侧同理。\n* 一开始我想到了从前向后遍历，若当前index的rating比前一个元素的rating高，那么就将其更新为前一个元素的candy + 1，否则保持1.这样做看起来很好，但是如果遇见连续降序的rating排列就不奏效了：因为连续降序，所以遍历到的每一个元素都比前一个低，按照前面说的，我们需要将其全部保持为1.但是对于连续降序的排列，我们应该将前一个索引的糖果进行增加。\n* 于是乎，我就想到了在出现降序排列时，就对candy数组中之前的索引进行回溯，对每个索引对应的rating与其之索引的rating进行判断，若当前元素大于后一个索引的rating，那么就将该元素对应的candy变为其之后的索引的candy数+1，然后不断向前(--)遍历。此时，大部分的测试用例均可以通过。但是仍有一些会因为超时无法通过\n* 根据观察，超时无法通过的测试用例是一个长达20000，整个数据均为降序的排列。按照我们之前写的代码，我们每当遇到降序就进行回溯更新，会导致我们超时。所以，我发现回溯可以暂时放置，只有在出现增序或者数组完毕后，再进行回溯，这样可以极大的减少回溯次数，即使回溯次数很多，也能保证回溯的长度很短，保证时间复杂度。\n* 最后，由于处理不慎，我的算法对于最后一位的元素判断出现了些问题。最后终于解决，解决方法就是在回溯后对当前元素以及之前元素进行判断（即类似第一步的想法）\n\n\n## 代码\n```java\nclass Solution {\n    public int candy(int[] ratings) {\n        int n = ratings.length;\n        int[] record = new int[n];\n        Deque<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && ratings[i] >= ratings[i - 1]) {\n\n                int size = queue.size();\n                for (int x = 0; x < size; x++) {\n                    int v = queue.pollLast();\n                    if (ratings[v] > ratings[v + 1] && record[v] <= record[v + 1]) {\n                        record[v] = record[v + 1] + 1;\n                    }\n                    // queue.offerFirst(v);\n                }\n                if (ratings[i] > ratings[i - 1] && record[i] <= record[i - 1])\n                    record[i] = record[i - 1] + 1;\n                queue.offerLast(i);\n            } else if (i == 0 || ratings[i] < ratings[i - 1]) {\n                // int size = queue.size();\n                // for (int x = 0; x < size; x++) {\n                //     int v = queue.pollLast();\n                //     if (record[v] <= record[v + 1]) {\n                //         record[v] = record[v+1] + 1;\n                //     }\n                //     queue.offerFirst(v);\n                // }\n                queue.offerLast(i);\n            }\n            // System.out.println(Arrays.toString(record));\n        }\n        int size = queue.size();\n        for (int x = 0; x < size; x++) {\n            int v = queue.pollLast();\n            if (v < n - 1 && ratings[v] > ratings[v + 1] && record[v] <= record[v + 1]) {\n                record[v] = record[v + 1] + 1;\n            }\n            // queue.offerFirst(v);\n        }\n        System.out.println(Arrays.toString(record));\n        int sum = 0;\n        for (int num : record) {\n            sum += num;\n        }\n        sum += n;\n        return sum;\n    }\n}\n```","source":"_posts/lk_135_hard.md","raw":"---\ntitle: leetcode-135-Candy\ndate: 2025-06-02T20:27:36+08:00\ncategories:\n- 算法\n---\n\nThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\n\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\n<!-- more -->\n\n![2025-06-02T203114](2025-06-02T203114.png)\n\n[题目](https://leetcode.cn/problems/candy/description/)\n\n## 思路\n对于这个题，乍一看以为很简单，以为只需要遍历ratings 数组找到高点更新其值即可。但是看了测试用例仔细想过后，发现并不是这么简单。\n首先，一个元素的rating高于左侧的元素的rating，那么该索引处获得的糖果需要比左侧高，右侧同理。\n* 一开始我想到了从前向后遍历，若当前index的rating比前一个元素的rating高，那么就将其更新为前一个元素的candy + 1，否则保持1.这样做看起来很好，但是如果遇见连续降序的rating排列就不奏效了：因为连续降序，所以遍历到的每一个元素都比前一个低，按照前面说的，我们需要将其全部保持为1.但是对于连续降序的排列，我们应该将前一个索引的糖果进行增加。\n* 于是乎，我就想到了在出现降序排列时，就对candy数组中之前的索引进行回溯，对每个索引对应的rating与其之索引的rating进行判断，若当前元素大于后一个索引的rating，那么就将该元素对应的candy变为其之后的索引的candy数+1，然后不断向前(--)遍历。此时，大部分的测试用例均可以通过。但是仍有一些会因为超时无法通过\n* 根据观察，超时无法通过的测试用例是一个长达20000，整个数据均为降序的排列。按照我们之前写的代码，我们每当遇到降序就进行回溯更新，会导致我们超时。所以，我发现回溯可以暂时放置，只有在出现增序或者数组完毕后，再进行回溯，这样可以极大的减少回溯次数，即使回溯次数很多，也能保证回溯的长度很短，保证时间复杂度。\n* 最后，由于处理不慎，我的算法对于最后一位的元素判断出现了些问题。最后终于解决，解决方法就是在回溯后对当前元素以及之前元素进行判断（即类似第一步的想法）\n\n\n## 代码\n```java\nclass Solution {\n    public int candy(int[] ratings) {\n        int n = ratings.length;\n        int[] record = new int[n];\n        Deque<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && ratings[i] >= ratings[i - 1]) {\n\n                int size = queue.size();\n                for (int x = 0; x < size; x++) {\n                    int v = queue.pollLast();\n                    if (ratings[v] > ratings[v + 1] && record[v] <= record[v + 1]) {\n                        record[v] = record[v + 1] + 1;\n                    }\n                    // queue.offerFirst(v);\n                }\n                if (ratings[i] > ratings[i - 1] && record[i] <= record[i - 1])\n                    record[i] = record[i - 1] + 1;\n                queue.offerLast(i);\n            } else if (i == 0 || ratings[i] < ratings[i - 1]) {\n                // int size = queue.size();\n                // for (int x = 0; x < size; x++) {\n                //     int v = queue.pollLast();\n                //     if (record[v] <= record[v + 1]) {\n                //         record[v] = record[v+1] + 1;\n                //     }\n                //     queue.offerFirst(v);\n                // }\n                queue.offerLast(i);\n            }\n            // System.out.println(Arrays.toString(record));\n        }\n        int size = queue.size();\n        for (int x = 0; x < size; x++) {\n            int v = queue.pollLast();\n            if (v < n - 1 && ratings[v] > ratings[v + 1] && record[v] <= record[v + 1]) {\n                record[v] = record[v + 1] + 1;\n            }\n            // queue.offerFirst(v);\n        }\n        System.out.println(Arrays.toString(record));\n        int sum = 0;\n        for (int num : record) {\n            sum += num;\n        }\n        sum += n;\n        return sum;\n    }\n}\n```","slug":"lk_135_hard","published":1,"updated":"2025-06-28T00:48:55.990Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7j000z1wu19rsxe20b","content":"<p>There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.</p>\n<p>You are giving candies to these children subjected to the following requirements:</p>\n<p>Each child must have at least one candy.<br>Children with a higher rating get more candies than their neighbors.<br>Return the minimum number of candies you need to have to distribute the candies to the children.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/2025/06/02/lk_135_hard/2025-06-02T203114.png\" alt=\"2025-06-02T203114\"></p>\n<p><a href=\"https://leetcode.cn/problems/candy/description/\">题目</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>对于这个题，乍一看以为很简单，以为只需要遍历ratings 数组找到高点更新其值即可。但是看了测试用例仔细想过后，发现并不是这么简单。<br>首先，一个元素的rating高于左侧的元素的rating，那么该索引处获得的糖果需要比左侧高，右侧同理。</p>\n<ul>\n<li>一开始我想到了从前向后遍历，若当前index的rating比前一个元素的rating高，那么就将其更新为前一个元素的candy + 1，否则保持1.这样做看起来很好，但是如果遇见连续降序的rating排列就不奏效了：因为连续降序，所以遍历到的每一个元素都比前一个低，按照前面说的，我们需要将其全部保持为1.但是对于连续降序的排列，我们应该将前一个索引的糖果进行增加。</li>\n<li>于是乎，我就想到了在出现降序排列时，就对candy数组中之前的索引进行回溯，对每个索引对应的rating与其之索引的rating进行判断，若当前元素大于后一个索引的rating，那么就将该元素对应的candy变为其之后的索引的candy数+1，然后不断向前(–)遍历。此时，大部分的测试用例均可以通过。但是仍有一些会因为超时无法通过</li>\n<li>根据观察，超时无法通过的测试用例是一个长达20000，整个数据均为降序的排列。按照我们之前写的代码，我们每当遇到降序就进行回溯更新，会导致我们超时。所以，我发现回溯可以暂时放置，只有在出现增序或者数组完毕后，再进行回溯，这样可以极大的减少回溯次数，即使回溯次数很多，也能保证回溯的长度很短，保证时间复杂度。</li>\n<li>最后，由于处理不慎，我的算法对于最后一位的元素判断出现了些问题。最后终于解决，解决方法就是在回溯后对当前元素以及之前元素进行判断（即类似第一步的想法）</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">candy</span><span class=\"params\">(<span class=\"type\">int</span>[] ratings)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> ratings.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; ratings[i] &gt;= ratings[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; size; x++) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> queue.pollLast();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ratings[v] &gt; ratings[v + <span class=\"number\">1</span>] &amp;&amp; record[v] &lt;= record[v + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        record[v] = record[v + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// queue.offerFirst(v);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ratings[i] &gt; ratings[i - <span class=\"number\">1</span>] &amp;&amp; record[i] &lt;= record[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                    record[i] = record[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                queue.offerLast(i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || ratings[i] &lt; ratings[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// int size = queue.size();</span></span><br><span class=\"line\">                <span class=\"comment\">// for (int x = 0; x &lt; size; x++) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     int v = queue.pollLast();</span></span><br><span class=\"line\">                <span class=\"comment\">//     if (record[v] &lt;= record[v + 1]) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         record[v] = record[v+1] + 1;</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">//     queue.offerFirst(v);</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                queue.offerLast(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(Arrays.toString(record));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; size; x++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> queue.pollLast();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v &lt; n - <span class=\"number\">1</span> &amp;&amp; ratings[v] &gt; ratings[v + <span class=\"number\">1</span>] &amp;&amp; record[v] &lt;= record[v + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                record[v] = record[v + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// queue.offerFirst(v);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(record));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : record) &#123;</span><br><span class=\"line\">            sum += num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":826,"excerpt":"<p>There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.</p>\n<p>You are giving candies to these children subjected to the following requirements:</p>\n<p>Each child must have at least one candy.<br>Children with a higher rating get more candies than their neighbors.<br>Return the minimum number of candies you need to have to distribute the candies to the children.</p>","more":"<p><img src=\"/2025/06/02/lk_135_hard/2025-06-02T203114.png\" alt=\"2025-06-02T203114\"></p>\n<p><a href=\"https://leetcode.cn/problems/candy/description/\">题目</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>对于这个题，乍一看以为很简单，以为只需要遍历ratings 数组找到高点更新其值即可。但是看了测试用例仔细想过后，发现并不是这么简单。<br>首先，一个元素的rating高于左侧的元素的rating，那么该索引处获得的糖果需要比左侧高，右侧同理。</p>\n<ul>\n<li>一开始我想到了从前向后遍历，若当前index的rating比前一个元素的rating高，那么就将其更新为前一个元素的candy + 1，否则保持1.这样做看起来很好，但是如果遇见连续降序的rating排列就不奏效了：因为连续降序，所以遍历到的每一个元素都比前一个低，按照前面说的，我们需要将其全部保持为1.但是对于连续降序的排列，我们应该将前一个索引的糖果进行增加。</li>\n<li>于是乎，我就想到了在出现降序排列时，就对candy数组中之前的索引进行回溯，对每个索引对应的rating与其之索引的rating进行判断，若当前元素大于后一个索引的rating，那么就将该元素对应的candy变为其之后的索引的candy数+1，然后不断向前(–)遍历。此时，大部分的测试用例均可以通过。但是仍有一些会因为超时无法通过</li>\n<li>根据观察，超时无法通过的测试用例是一个长达20000，整个数据均为降序的排列。按照我们之前写的代码，我们每当遇到降序就进行回溯更新，会导致我们超时。所以，我发现回溯可以暂时放置，只有在出现增序或者数组完毕后，再进行回溯，这样可以极大的减少回溯次数，即使回溯次数很多，也能保证回溯的长度很短，保证时间复杂度。</li>\n<li>最后，由于处理不慎，我的算法对于最后一位的元素判断出现了些问题。最后终于解决，解决方法就是在回溯后对当前元素以及之前元素进行判断（即类似第一步的想法）</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">candy</span><span class=\"params\">(<span class=\"type\">int</span>[] ratings)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> ratings.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; ratings[i] &gt;= ratings[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; size; x++) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> queue.pollLast();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ratings[v] &gt; ratings[v + <span class=\"number\">1</span>] &amp;&amp; record[v] &lt;= record[v + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        record[v] = record[v + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// queue.offerFirst(v);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ratings[i] &gt; ratings[i - <span class=\"number\">1</span>] &amp;&amp; record[i] &lt;= record[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                    record[i] = record[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                queue.offerLast(i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || ratings[i] &lt; ratings[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// int size = queue.size();</span></span><br><span class=\"line\">                <span class=\"comment\">// for (int x = 0; x &lt; size; x++) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     int v = queue.pollLast();</span></span><br><span class=\"line\">                <span class=\"comment\">//     if (record[v] &lt;= record[v + 1]) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//         record[v] = record[v+1] + 1;</span></span><br><span class=\"line\">                <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">                <span class=\"comment\">//     queue.offerFirst(v);</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                queue.offerLast(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(Arrays.toString(record));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; size; x++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> queue.pollLast();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v &lt; n - <span class=\"number\">1</span> &amp;&amp; ratings[v] &gt; ratings[v + <span class=\"number\">1</span>] &amp;&amp; record[v] &lt;= record[v + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                record[v] = record[v + <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// queue.offerFirst(v);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(record));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : record) &#123;</span><br><span class=\"line\">            sum += num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode_2359_Find Closest Node to Given Two Nodes","date":"2025-05-30T05:30:39.000Z","_content":"\nYou are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\n\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.\n\nYou are also given two integers node1 and node2.\n\nReturn the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.\n\nNote that edges may contain cycles.\n\n<!--more-->\n\n[原题](https://leetcode.cn/problems/find-closest-node-to-given-two-nodes/description/)\n\n![2025-05-30T215336](2025-05-30T215336.png)\n\n## 思路\n根据题意，我们需要在有向图中，找出两个指定node所共同能到达的点，并且该点到达两个node的距离尽可能短。\n那么我们就可以分别列出两个node所能到达的所有点。有点类似与寻路算法(AStar)，但是会更简单，因为此题中每个点只会指向一个另外的点，即每个点只会延伸出一条connection，所以不需要进行dfs或者bfs，直接链式的向下遍历即可。\n需要注意，题目明确提出graph会出现环(cycle)，所以我们需要注意处理，处理的方法也简单，只需要记录到达当前点所花费的步数即可。。遍历到某一node时，判断该步数是否为初始值(-1)，若是初始值，则表明之前没有处理过，需要处理该点。但如果该点的step不为初始值，那么就需要判断是否继续处理了。\n\n## 代码\n```java\nclass Solution {\n    public int closestMeetingNode(int[] edges, int node1, int node2) {\n        int n = edges.length;\n\n        int[] node1Record = new int[n]; // 标记node1所能访问的点\n        Arrays.fill(node1Record, -1);\n\n        int[] node2Record = new int[n]; // node2 所能访问的点\n        Arrays.fill(node2Record, -1);\n\n        addRecord(node1Record, edges, node1, 0);\n        addRecord(node2Record, edges, node2, 0);\n        // System.out.println(Arrays.toString(edges));\n\n        // System.out.println(Arrays.toString(node1Record));\n        // System.out.println(Arrays.toString(node2Record));\n        int min = -1;\n        int node = -1;\n        for (int i = 0; i < n; i++) {\n            if (node1Record[i] >=0 && node2Record[i] >= 0) {\n                if (min < 0) {\n                    min = Math.max(node1Record[i], node2Record[i]);\n                    node = i;\n                } else {\n                    if (min > Math.max(node1Record[i], node2Record[i])) {\n                        min = Math.max(node1Record[i], node2Record[i]);\n                        node = i;\n                    }\n                }\n            }\n        }\n        // System.out.println(node + \" _   \" + min);\n        return node;\n\n    }\n\n    void addRecord(int[] record, int[] edges, int node, int step) {\n\n        if (record[node] > step || record[node] < 0) {\n            record[node] = step;\n\n            if (edges[node] == -1) {\n                return;\n            }\n            addRecord(record, edges, edges[node], step + 1);\n\n        }\n\n    }\n}\n\n```","source":"_posts/lk_2359_medium.md","raw":"---\ntitle: leetcode_2359_Find Closest Node to Given Two Nodes\ndate: 2025-05-30T21:30:39+08:00\ncategories: \n- 算法\n---\n\nYou are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\n\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.\n\nYou are also given two integers node1 and node2.\n\nReturn the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.\n\nNote that edges may contain cycles.\n\n<!--more-->\n\n[原题](https://leetcode.cn/problems/find-closest-node-to-given-two-nodes/description/)\n\n![2025-05-30T215336](2025-05-30T215336.png)\n\n## 思路\n根据题意，我们需要在有向图中，找出两个指定node所共同能到达的点，并且该点到达两个node的距离尽可能短。\n那么我们就可以分别列出两个node所能到达的所有点。有点类似与寻路算法(AStar)，但是会更简单，因为此题中每个点只会指向一个另外的点，即每个点只会延伸出一条connection，所以不需要进行dfs或者bfs，直接链式的向下遍历即可。\n需要注意，题目明确提出graph会出现环(cycle)，所以我们需要注意处理，处理的方法也简单，只需要记录到达当前点所花费的步数即可。。遍历到某一node时，判断该步数是否为初始值(-1)，若是初始值，则表明之前没有处理过，需要处理该点。但如果该点的step不为初始值，那么就需要判断是否继续处理了。\n\n## 代码\n```java\nclass Solution {\n    public int closestMeetingNode(int[] edges, int node1, int node2) {\n        int n = edges.length;\n\n        int[] node1Record = new int[n]; // 标记node1所能访问的点\n        Arrays.fill(node1Record, -1);\n\n        int[] node2Record = new int[n]; // node2 所能访问的点\n        Arrays.fill(node2Record, -1);\n\n        addRecord(node1Record, edges, node1, 0);\n        addRecord(node2Record, edges, node2, 0);\n        // System.out.println(Arrays.toString(edges));\n\n        // System.out.println(Arrays.toString(node1Record));\n        // System.out.println(Arrays.toString(node2Record));\n        int min = -1;\n        int node = -1;\n        for (int i = 0; i < n; i++) {\n            if (node1Record[i] >=0 && node2Record[i] >= 0) {\n                if (min < 0) {\n                    min = Math.max(node1Record[i], node2Record[i]);\n                    node = i;\n                } else {\n                    if (min > Math.max(node1Record[i], node2Record[i])) {\n                        min = Math.max(node1Record[i], node2Record[i]);\n                        node = i;\n                    }\n                }\n            }\n        }\n        // System.out.println(node + \" _   \" + min);\n        return node;\n\n    }\n\n    void addRecord(int[] record, int[] edges, int node, int step) {\n\n        if (record[node] > step || record[node] < 0) {\n            record[node] = step;\n\n            if (edges[node] == -1) {\n                return;\n            }\n            addRecord(record, edges, edges[node], step + 1);\n\n        }\n\n    }\n}\n\n```","slug":"lk_2359_medium","published":1,"updated":"2025-06-28T00:48:55.991Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7k00131wu11bxr7l30","content":"<p>You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.</p>\n<p>The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] &#x3D;&#x3D; -1.</p>\n<p>You are also given two integers node1 and node2.</p>\n<p>Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.</p>\n<p>Note that edges may contain cycles.</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://leetcode.cn/problems/find-closest-node-to-given-two-nodes/description/\">原题</a></p>\n<p><img src=\"/2025/05/30/lk_2359_medium/2025-05-30T215336.png\" alt=\"2025-05-30T215336\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题意，我们需要在有向图中，找出两个指定node所共同能到达的点，并且该点到达两个node的距离尽可能短。<br>那么我们就可以分别列出两个node所能到达的所有点。有点类似与寻路算法(AStar)，但是会更简单，因为此题中每个点只会指向一个另外的点，即每个点只会延伸出一条connection，所以不需要进行dfs或者bfs，直接链式的向下遍历即可。<br>需要注意，题目明确提出graph会出现环(cycle)，所以我们需要注意处理，处理的方法也简单，只需要记录到达当前点所花费的步数即可。。遍历到某一node时，判断该步数是否为初始值(-1)，若是初始值，则表明之前没有处理过，需要处理该点。但如果该点的step不为初始值，那么就需要判断是否继续处理了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">closestMeetingNode</span><span class=\"params\">(<span class=\"type\">int</span>[] edges, <span class=\"type\">int</span> node1, <span class=\"type\">int</span> node2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] node1Record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n]; <span class=\"comment\">// 标记node1所能访问的点</span></span><br><span class=\"line\">        Arrays.fill(node1Record, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] node2Record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n]; <span class=\"comment\">// node2 所能访问的点</span></span><br><span class=\"line\">        Arrays.fill(node2Record, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        addRecord(node1Record, edges, node1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        addRecord(node2Record, edges, node2, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(edges));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(node1Record));</span></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(node2Record));</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node1Record[i] &gt;=<span class=\"number\">0</span> &amp;&amp; node2Record[i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    min = Math.max(node1Record[i], node2Record[i]);</span><br><span class=\"line\">                    node = i;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (min &gt; Math.max(node1Record[i], node2Record[i])) &#123;</span><br><span class=\"line\">                        min = Math.max(node1Record[i], node2Record[i]);</span><br><span class=\"line\">                        node = i;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(node + &quot; _   &quot; + min);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addRecord</span><span class=\"params\">(<span class=\"type\">int</span>[] record, <span class=\"type\">int</span>[] edges, <span class=\"type\">int</span> node, <span class=\"type\">int</span> step)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (record[node] &gt; step || record[node] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            record[node] = step;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[node] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addRecord(record, edges, edges[node], step + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":546,"excerpt":"<p>You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.</p>\n<p>The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] &#x3D;&#x3D; -1.</p>\n<p>You are also given two integers node1 and node2.</p>\n<p>Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.</p>\n<p>Note that edges may contain cycles.</p>","more":"<p><a href=\"https://leetcode.cn/problems/find-closest-node-to-given-two-nodes/description/\">原题</a></p>\n<p><img src=\"/2025/05/30/lk_2359_medium/2025-05-30T215336.png\" alt=\"2025-05-30T215336\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题意，我们需要在有向图中，找出两个指定node所共同能到达的点，并且该点到达两个node的距离尽可能短。<br>那么我们就可以分别列出两个node所能到达的所有点。有点类似与寻路算法(AStar)，但是会更简单，因为此题中每个点只会指向一个另外的点，即每个点只会延伸出一条connection，所以不需要进行dfs或者bfs，直接链式的向下遍历即可。<br>需要注意，题目明确提出graph会出现环(cycle)，所以我们需要注意处理，处理的方法也简单，只需要记录到达当前点所花费的步数即可。。遍历到某一node时，判断该步数是否为初始值(-1)，若是初始值，则表明之前没有处理过，需要处理该点。但如果该点的step不为初始值，那么就需要判断是否继续处理了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">closestMeetingNode</span><span class=\"params\">(<span class=\"type\">int</span>[] edges, <span class=\"type\">int</span> node1, <span class=\"type\">int</span> node2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] node1Record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n]; <span class=\"comment\">// 标记node1所能访问的点</span></span><br><span class=\"line\">        Arrays.fill(node1Record, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] node2Record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n]; <span class=\"comment\">// node2 所能访问的点</span></span><br><span class=\"line\">        Arrays.fill(node2Record, -<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        addRecord(node1Record, edges, node1, <span class=\"number\">0</span>);</span><br><span class=\"line\">        addRecord(node2Record, edges, node2, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(edges));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(node1Record));</span></span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(node2Record));</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node1Record[i] &gt;=<span class=\"number\">0</span> &amp;&amp; node2Record[i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    min = Math.max(node1Record[i], node2Record[i]);</span><br><span class=\"line\">                    node = i;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (min &gt; Math.max(node1Record[i], node2Record[i])) &#123;</span><br><span class=\"line\">                        min = Math.max(node1Record[i], node2Record[i]);</span><br><span class=\"line\">                        node = i;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(node + &quot; _   &quot; + min);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addRecord</span><span class=\"params\">(<span class=\"type\">int</span>[] record, <span class=\"type\">int</span>[] edges, <span class=\"type\">int</span> node, <span class=\"type\">int</span> step)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (record[node] &gt; step || record[node] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            record[node] = step;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[node] == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addRecord(record, edges, edges[node], step + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"leetcode-146-[LRU Cache]","date":"2025-06-09T01:37:40.000Z","_content":"\nDesign a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions get and put must each run in O(1) average time complexity.\n\n<!--more-->\n[题目](https://leetcode.cn/problems/lru-cache/description/)\n\n## 思路\nLRU(``Least Recently Used``)是一种数据置换算法，核心思路就是将数据集合按照最近所使用的时间进行排序，越是近期使用过的，就会越在前面。在达到容器的上限(capacity)后，再次放入新的元素后会将最末尾（最久未被使用的元素）抛弃。\n在这种规定下，我们每当put 或是get一个元素后，该元素都会被放置到头(head)处，若是put后元素数量超过上限，则需要将尾部(``tail``)抛弃\n根据这种规则，我们可以发现，使用``链表``可以更好的实现将数据移动到头部，以及断开tail链接的操作。\n\n需要注意的一点是，get到元素后，移动元素时，需要首先考虑该元素是否已经为head节点。若已经是head，则无需操作。否则需要进行移动操作。\n在移动时，也需要注意，如果该节点是tail节点，那么需要将tail节点改变指向。\n\n{% note info %}\n需要注意，直接通过链表进行get，当调用次数过多，并且均未命中时，会导致每次都遍历一遍整个链表，导致超时。\n此时我们需要使用缓存。我这里因为考虑到输入key的范围为[0, 10000], 所以直接使用了数组来存储node节点。在get时，最直接查询对应key索引处的node是否存在即可。\n但是引入缓存后，需额外注意一点，就是在移除tail时需要将tail对应的缓存也一并移除，否则会查询到不存在的数据\n{% endnote %}\n\n\n## code\n```java\nclass LRUCache {\n    class Node {\n        Node next;\n        Node pre;\n        int key;\n        int value;\n\n        Node() {\n        };\n\n        Node(int key, int val) {\n            this.value = val;\n            this.key = key;\n        }\n    }\n\n    final Node root = new Node();\n    Node tail;\n    int capacity;\n    int size;\n    Node[] record = new Node[1_0001];\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        Node c = findNode(key);\n        if (c != null) {\n            makeNodeHead(c);\n            return c.value;\n        }\n        return -1;\n    }\n\n    public void put(int key, int value) {\n        Node c = findNode(key);\n        if (c == null) {\n            c = new Node(key, value);\n            record[key] = c;\n            Node head = root.next;\n            root.next = c;\n            c.next = head;\n            if (head != null) {\n                head.pre = c;\n            }\n            if ((size) == capacity) {\n                record[tail.key] = null;\n                tail = tail.pre;\n                tail.next = null;\n            } else {\n                if (tail == null) {\n                    tail = c;\n                }\n                size++;\n            }\n        } else {\n            c.value = value;\n            makeNodeHead(c);\n        }\n    }\n\n    Node findNode(int key) {\n        if (record[key] != null) {\n            return record[key];\n        }\n        \n        return null;\n    }\n\n    void makeNodeHead(Node c) {\n        if (root.next == c) {\n            return;\n        }\n        Node cp = c.pre;\n        Node ca = c.next;\n        cp.next = ca;\n        if (ca != null) {\n            ca.pre = cp;\n        }\n        Node head = root.next;\n        root.next = c;\n        c.next = head;\n        if (head != null) {\n            head.pre = c;\n        }\n        if (tail == c) {\n            tail = tail.pre;\n        }\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n","source":"_posts/lk_146_lru.md","raw":"---\ntitle: leetcode-146-[LRU Cache]\ndate: 2025-06-09T17:37:40+08:00\ncategories: \n- 算法\ntags:\n- LRU\n---\n\nDesign a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions get and put must each run in O(1) average time complexity.\n\n<!--more-->\n[题目](https://leetcode.cn/problems/lru-cache/description/)\n\n## 思路\nLRU(``Least Recently Used``)是一种数据置换算法，核心思路就是将数据集合按照最近所使用的时间进行排序，越是近期使用过的，就会越在前面。在达到容器的上限(capacity)后，再次放入新的元素后会将最末尾（最久未被使用的元素）抛弃。\n在这种规定下，我们每当put 或是get一个元素后，该元素都会被放置到头(head)处，若是put后元素数量超过上限，则需要将尾部(``tail``)抛弃\n根据这种规则，我们可以发现，使用``链表``可以更好的实现将数据移动到头部，以及断开tail链接的操作。\n\n需要注意的一点是，get到元素后，移动元素时，需要首先考虑该元素是否已经为head节点。若已经是head，则无需操作。否则需要进行移动操作。\n在移动时，也需要注意，如果该节点是tail节点，那么需要将tail节点改变指向。\n\n{% note info %}\n需要注意，直接通过链表进行get，当调用次数过多，并且均未命中时，会导致每次都遍历一遍整个链表，导致超时。\n此时我们需要使用缓存。我这里因为考虑到输入key的范围为[0, 10000], 所以直接使用了数组来存储node节点。在get时，最直接查询对应key索引处的node是否存在即可。\n但是引入缓存后，需额外注意一点，就是在移除tail时需要将tail对应的缓存也一并移除，否则会查询到不存在的数据\n{% endnote %}\n\n\n## code\n```java\nclass LRUCache {\n    class Node {\n        Node next;\n        Node pre;\n        int key;\n        int value;\n\n        Node() {\n        };\n\n        Node(int key, int val) {\n            this.value = val;\n            this.key = key;\n        }\n    }\n\n    final Node root = new Node();\n    Node tail;\n    int capacity;\n    int size;\n    Node[] record = new Node[1_0001];\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        Node c = findNode(key);\n        if (c != null) {\n            makeNodeHead(c);\n            return c.value;\n        }\n        return -1;\n    }\n\n    public void put(int key, int value) {\n        Node c = findNode(key);\n        if (c == null) {\n            c = new Node(key, value);\n            record[key] = c;\n            Node head = root.next;\n            root.next = c;\n            c.next = head;\n            if (head != null) {\n                head.pre = c;\n            }\n            if ((size) == capacity) {\n                record[tail.key] = null;\n                tail = tail.pre;\n                tail.next = null;\n            } else {\n                if (tail == null) {\n                    tail = c;\n                }\n                size++;\n            }\n        } else {\n            c.value = value;\n            makeNodeHead(c);\n        }\n    }\n\n    Node findNode(int key) {\n        if (record[key] != null) {\n            return record[key];\n        }\n        \n        return null;\n    }\n\n    void makeNodeHead(Node c) {\n        if (root.next == c) {\n            return;\n        }\n        Node cp = c.pre;\n        Node ca = c.next;\n        cp.next = ca;\n        if (ca != null) {\n            ca.pre = cp;\n        }\n        Node head = root.next;\n        root.next = c;\n        c.next = head;\n        if (head != null) {\n            head.pre = c;\n        }\n        if (tail == c) {\n            tail = tail.pre;\n        }\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n","slug":"lk_146_lru","published":1,"updated":"2025-06-09T09:55:25.557Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7l00151wu13mqw0hof","content":"<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p>\n<p>Implement the LRUCache class:</p>\n<p>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>The functions get and put must each run in O(1) average time complexity.</p>\n<span id=\"more\"></span>\n<p><a href=\"https://leetcode.cn/problems/lru-cache/description/\">题目</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>LRU(<code>Least Recently Used</code>)是一种数据置换算法，核心思路就是将数据集合按照最近所使用的时间进行排序，越是近期使用过的，就会越在前面。在达到容器的上限(capacity)后，再次放入新的元素后会将最末尾（最久未被使用的元素）抛弃。<br>在这种规定下，我们每当put 或是get一个元素后，该元素都会被放置到头(head)处，若是put后元素数量超过上限，则需要将尾部(<code>tail</code>)抛弃<br>根据这种规则，我们可以发现，使用<code>链表</code>可以更好的实现将数据移动到头部，以及断开tail链接的操作。</p>\n<p>需要注意的一点是，get到元素后，移动元素时，需要首先考虑该元素是否已经为head节点。若已经是head，则无需操作。否则需要进行移动操作。<br>在移动时，也需要注意，如果该节点是tail节点，那么需要将tail节点改变指向。</p>\n<div class=\"note info\"><p>需要注意，直接通过链表进行get，当调用次数过多，并且均未命中时，会导致每次都遍历一遍整个链表，导致超时。<br>此时我们需要使用缓存。我这里因为考虑到输入key的范围为[0, 10000], 所以直接使用了数组来存储node节点。在get时，最直接查询对应key索引处的node是否存在即可。<br>但是引入缓存后，需额外注意一点，就是在移除tail时需要将tail对应的缓存也一并移除，否则会查询到不存在的数据</p>\n</div>\n\n\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        Node pre;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node() &#123;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"type\">int</span> key, <span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = val;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    Node tail;</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    Node[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[<span class=\"number\">1_0001</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LRUCache</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> findNode(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            makeNodeHead(c);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> findNode(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            c = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key, value);</span><br><span class=\"line\">            record[key] = c;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">            root.next = c;</span><br><span class=\"line\">            c.next = head;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                head.pre = c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((size) == capacity) &#123;</span><br><span class=\"line\">                record[tail.key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                tail = tail.pre;</span><br><span class=\"line\">                tail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tail == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    tail = c;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            c.value = value;</span><br><span class=\"line\">            makeNodeHead(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node <span class=\"title function_\">findNode</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (record[key] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> record[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">makeNodeHead</span><span class=\"params\">(Node c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.next == c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cp</span> <span class=\"operator\">=</span> c.pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">ca</span> <span class=\"operator\">=</span> c.next;</span><br><span class=\"line\">        cp.next = ca;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ca != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ca.pre = cp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        root.next = c;</span><br><span class=\"line\">        c.next = head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            head.pre = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == c) &#123;</span><br><span class=\"line\">            tail = tail.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj.get(key);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.put(key,value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","length":725,"excerpt":"<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p>\n<p>Implement the LRUCache class:</p>\n<p>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>The functions get and put must each run in O(1) average time complexity.</p>","more":"<p><a href=\"https://leetcode.cn/problems/lru-cache/description/\">题目</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>LRU(<code>Least Recently Used</code>)是一种数据置换算法，核心思路就是将数据集合按照最近所使用的时间进行排序，越是近期使用过的，就会越在前面。在达到容器的上限(capacity)后，再次放入新的元素后会将最末尾（最久未被使用的元素）抛弃。<br>在这种规定下，我们每当put 或是get一个元素后，该元素都会被放置到头(head)处，若是put后元素数量超过上限，则需要将尾部(<code>tail</code>)抛弃<br>根据这种规则，我们可以发现，使用<code>链表</code>可以更好的实现将数据移动到头部，以及断开tail链接的操作。</p>\n<p>需要注意的一点是，get到元素后，移动元素时，需要首先考虑该元素是否已经为head节点。若已经是head，则无需操作。否则需要进行移动操作。<br>在移动时，也需要注意，如果该节点是tail节点，那么需要将tail节点改变指向。</p>\n<div class=\"note info\"><p>需要注意，直接通过链表进行get，当调用次数过多，并且均未命中时，会导致每次都遍历一遍整个链表，导致超时。<br>此时我们需要使用缓存。我这里因为考虑到输入key的范围为[0, 10000], 所以直接使用了数组来存储node节点。在get时，最直接查询对应key索引处的node是否存在即可。<br>但是引入缓存后，需额外注意一点，就是在移除tail时需要将tail对应的缓存也一并移除，否则会查询到不存在的数据</p>\n</div>\n\n\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        Node pre;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node() &#123;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"type\">int</span> key, <span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = val;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    Node tail;</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    Node[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[<span class=\"number\">1_0001</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LRUCache</span><span class=\"params\">(<span class=\"type\">int</span> capacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> findNode(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            makeNodeHead(c);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> findNode(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            c = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key, value);</span><br><span class=\"line\">            record[key] = c;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">            root.next = c;</span><br><span class=\"line\">            c.next = head;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                head.pre = c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((size) == capacity) &#123;</span><br><span class=\"line\">                record[tail.key] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                tail = tail.pre;</span><br><span class=\"line\">                tail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tail == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    tail = c;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                size++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            c.value = value;</span><br><span class=\"line\">            makeNodeHead(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node <span class=\"title function_\">findNode</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (record[key] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> record[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">makeNodeHead</span><span class=\"params\">(Node c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.next == c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cp</span> <span class=\"operator\">=</span> c.pre;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">ca</span> <span class=\"operator\">=</span> c.next;</span><br><span class=\"line\">        cp.next = ca;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ca != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ca.pre = cp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> root.next;</span><br><span class=\"line\">        root.next = c;</span><br><span class=\"line\">        c.next = head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            head.pre = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tail == c) &#123;</span><br><span class=\"line\">            tail = tail.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj.get(key);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.put(key,value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"leetcode-3372-Maximize the Number of Target Nodes After Connecting Trees I","date":"2025-05-28T12:47:09.900Z","_content":"\n> There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.\n> You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.\n> Node u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.\n> Return an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.\n> Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.\n\n<!-- more -->\n[题目](https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-i/description/)\n\n\n![2025-05-28T205059](2025-05-28T205059.png)\n\n## 思路\n根据题意，``answer``数组中每一项都是edges1中对应下标的元素所邻接最近的k个元素个数 与 edges2 中邻接元素个数最多（k - 1）的和\n\n至于这个邻接元素的个数，可以通过dfs遍历每个点所邻接的边来实现。\n由于题目限定了是有效的树，那么我们可以认为edges1和edges2不存在环，所以在dfs的时候，只需要保证children != parent即可保证不会重复递归。\n由此有有以下代码\n\n\n## 代码\n```java\n    public int[] maxTargetNodes(int[][] edges1, int[][] edges2, int k) {\n        int n = edges1.length + 1;\n        List<List<Integer>> record = new ArrayList<>();\n        for (int x = 0; x < n; x++) {\n            record.add(new ArrayList<>());\n        }\n        int[] sums = new int[n];\n        for (int[] edge : edges1) {    \n            record.get(edge[0]).add(edge[1]);\n            record.get(edge[1]).add(edge[0]);\n        }\n\n        for (int x = 0; x < n; x++) {\n            int d = dfs(x, -1, record, k);\n            sums[x] = d;\n        }\n\n        // target\n        int m = edges2.length + 1;\n        List<List<Integer>> record2 = new ArrayList<>();\n        for (int x = 0; x < m; x++) {\n            record2.add(new ArrayList<>());\n        }\n        int[] sums2 = new int[m];\n        for (int[] edge : edges2) {    \n            record2.get(edge[0]).add(edge[1]);\n            record2.get(edge[1]).add(edge[0]);\n        }\n        int max = 0;\n        for (int x = 0; x < m; x++) {\n            int d = dfs(x, -1, record2, k - 1);\n            sums2[x] = d;\n            max = Math.max(max, sums2[x]);\n        }\n        System.out.println(max);\n        for (int x = 0; x < n; x++) {\n            sums[x] += max;\n        }\n        return sums;\n\n    }\n\n    int dfs (int n, int p, List<List<Integer>> record, int k) {\n        if (k < 0) {\n            return 0;\n        }\n        int ans = 1;\n        List<Integer> children = record.get(n);\n        for (int c : children) {\n            if (c == p) {\n                continue;\n            }\n            ans += dfs(c, n, record, k - 1);\n        }\n        return ans;\n    }\n\n\n```","source":"_posts/lk_3372_medium.md","raw":"---\ntitle: leetcode-3372-Maximize the Number of Target Nodes After Connecting Trees I\ndate: 2025-05-31:47:05+08:00\ncategories: \n- 算法\ntags: \n- dfs\n---\n\n> There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.\n> You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.\n> Node u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.\n> Return an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.\n> Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.\n\n<!-- more -->\n[题目](https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-i/description/)\n\n\n![2025-05-28T205059](2025-05-28T205059.png)\n\n## 思路\n根据题意，``answer``数组中每一项都是edges1中对应下标的元素所邻接最近的k个元素个数 与 edges2 中邻接元素个数最多（k - 1）的和\n\n至于这个邻接元素的个数，可以通过dfs遍历每个点所邻接的边来实现。\n由于题目限定了是有效的树，那么我们可以认为edges1和edges2不存在环，所以在dfs的时候，只需要保证children != parent即可保证不会重复递归。\n由此有有以下代码\n\n\n## 代码\n```java\n    public int[] maxTargetNodes(int[][] edges1, int[][] edges2, int k) {\n        int n = edges1.length + 1;\n        List<List<Integer>> record = new ArrayList<>();\n        for (int x = 0; x < n; x++) {\n            record.add(new ArrayList<>());\n        }\n        int[] sums = new int[n];\n        for (int[] edge : edges1) {    \n            record.get(edge[0]).add(edge[1]);\n            record.get(edge[1]).add(edge[0]);\n        }\n\n        for (int x = 0; x < n; x++) {\n            int d = dfs(x, -1, record, k);\n            sums[x] = d;\n        }\n\n        // target\n        int m = edges2.length + 1;\n        List<List<Integer>> record2 = new ArrayList<>();\n        for (int x = 0; x < m; x++) {\n            record2.add(new ArrayList<>());\n        }\n        int[] sums2 = new int[m];\n        for (int[] edge : edges2) {    \n            record2.get(edge[0]).add(edge[1]);\n            record2.get(edge[1]).add(edge[0]);\n        }\n        int max = 0;\n        for (int x = 0; x < m; x++) {\n            int d = dfs(x, -1, record2, k - 1);\n            sums2[x] = d;\n            max = Math.max(max, sums2[x]);\n        }\n        System.out.println(max);\n        for (int x = 0; x < n; x++) {\n            sums[x] += max;\n        }\n        return sums;\n\n    }\n\n    int dfs (int n, int p, List<List<Integer>> record, int k) {\n        if (k < 0) {\n            return 0;\n        }\n        int ans = 1;\n        List<Integer> children = record.get(n);\n        for (int c : children) {\n            if (c == p) {\n                continue;\n            }\n            ans += dfs(c, n, record, k - 1);\n        }\n        return ans;\n    }\n\n\n```","slug":"lk_3372_medium","published":1,"updated":"2025-06-02T12:41:36.516Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7l00171wu18bfpbk0w","content":"<blockquote>\n<p>There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.<br>You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] &#x3D; [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] &#x3D; [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.<br>Node u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.<br>Return an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.<br>Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><a href=\"https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-i/description/\">题目</a></p>\n<p><img src=\"/2025/05/28/lk_3372_medium/2025-05-28T205059.png\" alt=\"2025-05-28T205059\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题意，<code>answer</code>数组中每一项都是edges1中对应下标的元素所邻接最近的k个元素个数 与 edges2 中邻接元素个数最多（k - 1）的和</p>\n<p>至于这个邻接元素的个数，可以通过dfs遍历每个点所邻接的边来实现。<br>由于题目限定了是有效的树，那么我们可以认为edges1和edges2不存在环，所以在dfs的时候，只需要保证children !&#x3D; parent即可保证不会重复递归。<br>由此有有以下代码</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxTargetNodes(<span class=\"type\">int</span>[][] edges1, <span class=\"type\">int</span>[][] edges2, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges1.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; record = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        record.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] sums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges1) &#123;    </span><br><span class=\"line\">        record.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        record.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dfs(x, -<span class=\"number\">1</span>, record, k);</span><br><span class=\"line\">        sums[x] = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// target</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> edges2.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; record2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; m; x++) &#123;</span><br><span class=\"line\">        record2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] sums2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges2) &#123;    </span><br><span class=\"line\">        record2.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        record2.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; m; x++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dfs(x, -<span class=\"number\">1</span>, record2, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sums2[x] = d;</span><br><span class=\"line\">        max = Math.max(max, sums2[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(max);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        sums[x] += max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sums;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">dfs</span> <span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> p, List&lt;List&lt;Integer&gt;&gt; record, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;Integer&gt; children = record.get(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c : children) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += dfs(c, n, record, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":535,"excerpt":"<blockquote>\n<p>There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.<br>You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] &#x3D; [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] &#x3D; [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.<br>Node u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.<br>Return an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.<br>Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.</p>\n</blockquote>","more":"<p><a href=\"https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-i/description/\">题目</a></p>\n<p><img src=\"/2025/05/28/lk_3372_medium/2025-05-28T205059.png\" alt=\"2025-05-28T205059\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据题意，<code>answer</code>数组中每一项都是edges1中对应下标的元素所邻接最近的k个元素个数 与 edges2 中邻接元素个数最多（k - 1）的和</p>\n<p>至于这个邻接元素的个数，可以通过dfs遍历每个点所邻接的边来实现。<br>由于题目限定了是有效的树，那么我们可以认为edges1和edges2不存在环，所以在dfs的时候，只需要保证children !&#x3D; parent即可保证不会重复递归。<br>由此有有以下代码</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxTargetNodes(<span class=\"type\">int</span>[][] edges1, <span class=\"type\">int</span>[][] edges2, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges1.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; record = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        record.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] sums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges1) &#123;    </span><br><span class=\"line\">        record.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        record.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dfs(x, -<span class=\"number\">1</span>, record, k);</span><br><span class=\"line\">        sums[x] = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// target</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> edges2.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; record2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; m; x++) &#123;</span><br><span class=\"line\">        record2.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] sums2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges2) &#123;    </span><br><span class=\"line\">        record2.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        record2.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; m; x++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> dfs(x, -<span class=\"number\">1</span>, record2, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sums2[x] = d;</span><br><span class=\"line\">        max = Math.max(max, sums2[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(max);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">        sums[x] += max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sums;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">dfs</span> <span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> p, List&lt;List&lt;Integer&gt;&gt; record, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    List&lt;Integer&gt; children = record.get(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c : children) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += dfs(c, n, record, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"leecode-48-旋转图象","date":"2025-05-25T02:18:05.000Z","_content":"\n> You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n> You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n<!-- more -->\n\n[题目](https://leetcode.cn/problems/rotate-image/submissions/632331118/?envType=study-plan-v2&envId=top-100-liked)<br>\n\n![2025-05-25T181854](2025-05-25T181854.png)\n\n## 思路\n可以将整体旋转，解构为按层来旋转。并且，``n*n`` 矩阵最多有 ``n/2`` 层。\n我们可以从最外层开始，遍历所有层， 每一层都从上边(可以任意选择)开始旋转。\n上边从最左边的点开始，依次绕圈找到该坐标旋转后的位置，将其放入，重复四次即可。（因为有四条边）\n![2025-05-25T184226](2025-05-25T184226.png)\n\n图上就是一个3*3的矩阵旋转变化。在此矩阵中，层数为: ``n/3 = 1``.\n看这里1的位置，1为最外层``(i = 0)``的初始元素，设其初始位置为 ``(x,y)``,在这里，x y此时都为``0（i）``，变换后的位置为 ``(n - 1 - i, x)``， 这个就是上边旋转到右边后的坐标算法。可以这么来想：\n> 上边的纵坐标是恒定的（即y不会变，是一条横线），而右边的边横坐标是恒定的（x不会变，是一条竖线），所以我们判定该店对应右边的横坐标与该点原本的纵坐标有关系。具体关系的大小，可以观察，当前边所处的层即为右边横坐标与总层数的差值，即可得右边的横坐标公式： ``n - 1 - i``\n> 至于纵坐标，可以观察到随着当前选取的点不断右移，在右边所对应的纵坐标也不断下移，可推论出右边的纵坐标即为当前点的横坐标 ``x`` 最后得出坐标公式 **``(n - 1 - i, x)``**\n\n\n然后右边本来的3旋转到了下边，此时的左边变换是: `` (n - 1 - i, x) -> (n - 1 - x, x - 1 - i) ``\n最后下边变为左边的对应坐标变换: ``(n - 1 - x, x - 1 - i) ->  (i, n - 1 - x)``\n第四次就会绕回原点： ``(i, n - 1 - x) -> (x, i)``\n\n## 代码： \n```java\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n\n        for (int i = 0; i < n / 2; i++) {// 遍历所有层级。 EXAMPLE: 3 × 3 代表着两层，外面一层，里面一层。\n            for (int x = i, y = i; x < (n - i - 1); x++) { // 每一层开始， 从（i,i）处当作起点，依次遍历四个边所对应的坐标\n                int targetX = (n - i - 1);\n                int targetY = x;\n                int tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x]; // 起点赋值给右边的\n\n                targetX = (n - 1 - x);\n                targetY = (n - 1 - i);\n                matrix[y][x] = tmp;\n                tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x];// 右边的值赋值给底边的\n\n                targetX = i;\n                targetY = (n - 1 - x);\n                matrix[y][x] = tmp;\n                tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x];// 底边的值赋值给左边的\n\n                matrix[y][x] = tmp; // 最后将左边的值赋值给原点 x,y \n            }\n        }\n    }\n```\n","source":"_posts/lk_48_medium.md","raw":"---\ntitle: leecode-48-旋转图象\ndate: 2025-05-25T18:18:05+08:00\ncategories: \n- 算法\ntags: \n- 矩阵\n- matrix\n---\n\n> You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n> You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n<!-- more -->\n\n[题目](https://leetcode.cn/problems/rotate-image/submissions/632331118/?envType=study-plan-v2&envId=top-100-liked)<br>\n\n![2025-05-25T181854](2025-05-25T181854.png)\n\n## 思路\n可以将整体旋转，解构为按层来旋转。并且，``n*n`` 矩阵最多有 ``n/2`` 层。\n我们可以从最外层开始，遍历所有层， 每一层都从上边(可以任意选择)开始旋转。\n上边从最左边的点开始，依次绕圈找到该坐标旋转后的位置，将其放入，重复四次即可。（因为有四条边）\n![2025-05-25T184226](2025-05-25T184226.png)\n\n图上就是一个3*3的矩阵旋转变化。在此矩阵中，层数为: ``n/3 = 1``.\n看这里1的位置，1为最外层``(i = 0)``的初始元素，设其初始位置为 ``(x,y)``,在这里，x y此时都为``0（i）``，变换后的位置为 ``(n - 1 - i, x)``， 这个就是上边旋转到右边后的坐标算法。可以这么来想：\n> 上边的纵坐标是恒定的（即y不会变，是一条横线），而右边的边横坐标是恒定的（x不会变，是一条竖线），所以我们判定该店对应右边的横坐标与该点原本的纵坐标有关系。具体关系的大小，可以观察，当前边所处的层即为右边横坐标与总层数的差值，即可得右边的横坐标公式： ``n - 1 - i``\n> 至于纵坐标，可以观察到随着当前选取的点不断右移，在右边所对应的纵坐标也不断下移，可推论出右边的纵坐标即为当前点的横坐标 ``x`` 最后得出坐标公式 **``(n - 1 - i, x)``**\n\n\n然后右边本来的3旋转到了下边，此时的左边变换是: `` (n - 1 - i, x) -> (n - 1 - x, x - 1 - i) ``\n最后下边变为左边的对应坐标变换: ``(n - 1 - x, x - 1 - i) ->  (i, n - 1 - x)``\n第四次就会绕回原点： ``(i, n - 1 - x) -> (x, i)``\n\n## 代码： \n```java\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n\n        for (int i = 0; i < n / 2; i++) {// 遍历所有层级。 EXAMPLE: 3 × 3 代表着两层，外面一层，里面一层。\n            for (int x = i, y = i; x < (n - i - 1); x++) { // 每一层开始， 从（i,i）处当作起点，依次遍历四个边所对应的坐标\n                int targetX = (n - i - 1);\n                int targetY = x;\n                int tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x]; // 起点赋值给右边的\n\n                targetX = (n - 1 - x);\n                targetY = (n - 1 - i);\n                matrix[y][x] = tmp;\n                tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x];// 右边的值赋值给底边的\n\n                targetX = i;\n                targetY = (n - 1 - x);\n                matrix[y][x] = tmp;\n                tmp = matrix[targetY][targetX];\n                matrix[targetY][targetX] = matrix[y][x];// 底边的值赋值给左边的\n\n                matrix[y][x] = tmp; // 最后将左边的值赋值给原点 x,y \n            }\n        }\n    }\n```\n","slug":"lk_48_medium","published":1,"updated":"2025-05-25T11:55:04.767Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7m001c1wu1dz5t2xue","content":"<blockquote>\n<p>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).<br>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><a href=\"https://leetcode.cn/problems/rotate-image/submissions/632331118/?envType=study-plan-v2&envId=top-100-liked\">题目</a><br></p>\n<p><img src=\"/2025/05/25/lk_48_medium/2025-05-25T181854.png\" alt=\"2025-05-25T181854\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>可以将整体旋转，解构为按层来旋转。并且，<code>n*n</code> 矩阵最多有 <code>n/2</code> 层。<br>我们可以从最外层开始，遍历所有层， 每一层都从上边(可以任意选择)开始旋转。<br>上边从最左边的点开始，依次绕圈找到该坐标旋转后的位置，将其放入，重复四次即可。（因为有四条边）<br><img src=\"/2025/05/25/lk_48_medium/2025-05-25T184226.png\" alt=\"2025-05-25T184226\"></p>\n<p>图上就是一个3*3的矩阵旋转变化。在此矩阵中，层数为: <code>n/3 = 1</code>.<br>看这里1的位置，1为最外层<code>(i = 0)</code>的初始元素，设其初始位置为 <code>(x,y)</code>,在这里，x y此时都为<code>0（i）</code>，变换后的位置为 <code>(n - 1 - i, x)</code>， 这个就是上边旋转到右边后的坐标算法。可以这么来想：</p>\n<blockquote>\n<p>上边的纵坐标是恒定的（即y不会变，是一条横线），而右边的边横坐标是恒定的（x不会变，是一条竖线），所以我们判定该店对应右边的横坐标与该点原本的纵坐标有关系。具体关系的大小，可以观察，当前边所处的层即为右边横坐标与总层数的差值，即可得右边的横坐标公式： <code>n - 1 - i</code><br>至于纵坐标，可以观察到随着当前选取的点不断右移，在右边所对应的纵坐标也不断下移，可推论出右边的纵坐标即为当前点的横坐标 <code>x</code> 最后得出坐标公式 <strong><code>(n - 1 - i, x)</code></strong></p>\n</blockquote>\n<p>然后右边本来的3旋转到了下边，此时的左边变换是: <code>(n - 1 - i, x) -&gt; (n - 1 - x, x - 1 - i)</code><br>最后下边变为左边的对应坐标变换: <code>(n - 1 - x, x - 1 - i) -&gt;  (i, n - 1 - x)</code><br>第四次就会绕回原点： <code>(i, n - 1 - x) -&gt; (x, i)</code></p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; i++) &#123;<span class=\"comment\">// 遍历所有层级。 EXAMPLE: 3 × 3 代表着两层，外面一层，里面一层。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> i, y = i; x &lt; (n - i - <span class=\"number\">1</span>); x++) &#123; <span class=\"comment\">// 每一层开始， 从（i,i）处当作起点，依次遍历四个边所对应的坐标</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">targetX</span> <span class=\"operator\">=</span> (n - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> x;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x]; <span class=\"comment\">// 起点赋值给右边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            targetX = (n - <span class=\"number\">1</span> - x);</span><br><span class=\"line\">            targetY = (n - <span class=\"number\">1</span> - i);</span><br><span class=\"line\">            matrix[y][x] = tmp;</span><br><span class=\"line\">            tmp = matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x];<span class=\"comment\">// 右边的值赋值给底边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            targetX = i;</span><br><span class=\"line\">            targetY = (n - <span class=\"number\">1</span> - x);</span><br><span class=\"line\">            matrix[y][x] = tmp;</span><br><span class=\"line\">            tmp = matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x];<span class=\"comment\">// 底边的值赋值给左边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[y][x] = tmp; <span class=\"comment\">// 最后将左边的值赋值给原点 x,y </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","length":700,"excerpt":"<blockquote>\n<p>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).<br>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>\n</blockquote>","more":"<p><a href=\"https://leetcode.cn/problems/rotate-image/submissions/632331118/?envType=study-plan-v2&envId=top-100-liked\">题目</a><br></p>\n<p><img src=\"/2025/05/25/lk_48_medium/2025-05-25T181854.png\" alt=\"2025-05-25T181854\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>可以将整体旋转，解构为按层来旋转。并且，<code>n*n</code> 矩阵最多有 <code>n/2</code> 层。<br>我们可以从最外层开始，遍历所有层， 每一层都从上边(可以任意选择)开始旋转。<br>上边从最左边的点开始，依次绕圈找到该坐标旋转后的位置，将其放入，重复四次即可。（因为有四条边）<br><img src=\"/2025/05/25/lk_48_medium/2025-05-25T184226.png\" alt=\"2025-05-25T184226\"></p>\n<p>图上就是一个3*3的矩阵旋转变化。在此矩阵中，层数为: <code>n/3 = 1</code>.<br>看这里1的位置，1为最外层<code>(i = 0)</code>的初始元素，设其初始位置为 <code>(x,y)</code>,在这里，x y此时都为<code>0（i）</code>，变换后的位置为 <code>(n - 1 - i, x)</code>， 这个就是上边旋转到右边后的坐标算法。可以这么来想：</p>\n<blockquote>\n<p>上边的纵坐标是恒定的（即y不会变，是一条横线），而右边的边横坐标是恒定的（x不会变，是一条竖线），所以我们判定该店对应右边的横坐标与该点原本的纵坐标有关系。具体关系的大小，可以观察，当前边所处的层即为右边横坐标与总层数的差值，即可得右边的横坐标公式： <code>n - 1 - i</code><br>至于纵坐标，可以观察到随着当前选取的点不断右移，在右边所对应的纵坐标也不断下移，可推论出右边的纵坐标即为当前点的横坐标 <code>x</code> 最后得出坐标公式 <strong><code>(n - 1 - i, x)</code></strong></p>\n</blockquote>\n<p>然后右边本来的3旋转到了下边，此时的左边变换是: <code>(n - 1 - i, x) -&gt; (n - 1 - x, x - 1 - i)</code><br>最后下边变为左边的对应坐标变换: <code>(n - 1 - x, x - 1 - i) -&gt;  (i, n - 1 - x)</code><br>第四次就会绕回原点： <code>(i, n - 1 - x) -&gt; (x, i)</code></p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; i++) &#123;<span class=\"comment\">// 遍历所有层级。 EXAMPLE: 3 × 3 代表着两层，外面一层，里面一层。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> i, y = i; x &lt; (n - i - <span class=\"number\">1</span>); x++) &#123; <span class=\"comment\">// 每一层开始， 从（i,i）处当作起点，依次遍历四个边所对应的坐标</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">targetX</span> <span class=\"operator\">=</span> (n - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> x;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x]; <span class=\"comment\">// 起点赋值给右边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            targetX = (n - <span class=\"number\">1</span> - x);</span><br><span class=\"line\">            targetY = (n - <span class=\"number\">1</span> - i);</span><br><span class=\"line\">            matrix[y][x] = tmp;</span><br><span class=\"line\">            tmp = matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x];<span class=\"comment\">// 右边的值赋值给底边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            targetX = i;</span><br><span class=\"line\">            targetY = (n - <span class=\"number\">1</span> - x);</span><br><span class=\"line\">            matrix[y][x] = tmp;</span><br><span class=\"line\">            tmp = matrix[targetY][targetX];</span><br><span class=\"line\">            matrix[targetY][targetX] = matrix[y][x];<span class=\"comment\">// 底边的值赋值给左边的</span></span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[y][x] = tmp; <span class=\"comment\">// 最后将左边的值赋值给原点 x,y </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode_3373_Maximize the Number of Target Nodes After Connecting Trees II","date":"2025-05-29T05:54:27.000Z","_content":"\n![2025-05-29T220509](2025-05-29T220509.png)\n\n<!-- more -->\n\n[题目](https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-ii/description/)\n\n> 并没有想出完美的解答方案，看了官方题解之后才会做的。之前陷入了昨天那道题之中，采用了dfs + 计数的方法，导致超时。看了官方题解使用的分组（分色）法，大悟\n\n## 思路\n\n{%note info%}\n主要思路就是题目规定了给出的edges符合合法的树。那么就必然不会有环。并且其实无向的，所以任意节点开始向外遍历，均会遍历整个树，并且无论从哪个节点开始遍历，最后的结果都是等价的。\n并且题目中要求，每个节点的target要求，是要与当前节点相邻偶数位个节点。那么可以想象一下，有一系列几点与当前节点相邻偶数位算作当前节点的target，那么这些节点彼此之间也会互相作为target。反之，有一系列节点与当前节点相邻奇数位，那那么这些节点不会成为当前节点的target，并且**这些节点之间均会形成target**\n有了这几个前置条件，我们就已经捋顺了整个逻辑了。我们可以把所有节点遍历，分为两组，每组之间互相为target。\n至于edges2，几乎是同理，不过edges1与其相关联时，可以选取其两组中较大的那个作为target数量。\n\n{%endnote%}\n\n\n## 代码\n```java\nclass Solution {\n    public int[] maxTargetNodes(int[][] edges1, int[][] edges2) {\n        // 合法的树形结构决定了其不会有环，并且从任意节点出发，遍历其相邻节点，均可达到每一个节点\n        // 换句话说，任意节点开始遍历树，结果都是等价的\n        // 本题要求的是偶数个数节点记作target（包括本身0），那么对于任何一个节点来说，是否以其作为target就两种情况：\n        // 1. 与其相邻偶数位，可以算作该节点的target。并且这些节点互相均以彼此为target\n        // 2. 与其相邻奇数位，不算做该节点的target。。并且这些节点互相均已彼此为target\n        // 那么我们就可以把树中的所有节点划分为两类，用颜色（color）来标记\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n        boolean[] color1 = new boolean[n];\n        boolean[] color2 = new boolean[m];\n        // 我们需要将所有节点分别划分到不同color中\n        int[] nums = divide(edges1, color1);\n        int[] nums2 = divide(edges2, color2);\n\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = nums[((color1[i])? 0 :1)] + Math.max(nums2[0], nums2[1]);\n        }\n        return result;\n    }\n\n    /**\n        该方法返回值是一个数组，长度为2。分别代表两种颜色的节点的数量\n     */\n    int[] divide(int[][] edges, boolean[] color) {\n        List<List<Integer>> connections = new ArrayList<>();\n        int n = edges.length + 1;\n        for (int x = 0; x < n; x++) {\n            connections.add(new ArrayList<>());\n        }\n        // 初始化并且填充connections集合\n        for (int[] edge : edges) {\n            connections.get(edge[0]).add(edge[1]);\n            connections.get(edge[1]).add(edge[0]);\n        }\n        // 构造完毕\n        // 遍历所有connection，并记录\n        int ans = dfs(0, -1 , 0, connections, color);\n        return new int[] {ans, n - ans};\n    }\n\n    int dfs (int n, int p, int depth, List<List<Integer>> connections, boolean[] colors) {\n        List<Integer> list = connections.get(n);\n        int ans = (depth %2==0) ? 1 : 0;\n        colors[n] = (depth %2 == 0);\n        for (int c : list) {\n            if (c == p) {\n                continue;\n            }\n            ans += dfs(c, n, depth + 1, connections, colors);\n        }\n        return ans;\n    }\n}\n\n```","source":"_posts/lk_3373_hard.md","raw":"---\ntitle: leetcode_3373_Maximize the Number of Target Nodes After Connecting Trees II\ndate: 2025-05-29T21:54:27+08:00\ncategories: \n- 算法\ntags: \n- dfs\n---\n\n![2025-05-29T220509](2025-05-29T220509.png)\n\n<!-- more -->\n\n[题目](https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-ii/description/)\n\n> 并没有想出完美的解答方案，看了官方题解之后才会做的。之前陷入了昨天那道题之中，采用了dfs + 计数的方法，导致超时。看了官方题解使用的分组（分色）法，大悟\n\n## 思路\n\n{%note info%}\n主要思路就是题目规定了给出的edges符合合法的树。那么就必然不会有环。并且其实无向的，所以任意节点开始向外遍历，均会遍历整个树，并且无论从哪个节点开始遍历，最后的结果都是等价的。\n并且题目中要求，每个节点的target要求，是要与当前节点相邻偶数位个节点。那么可以想象一下，有一系列几点与当前节点相邻偶数位算作当前节点的target，那么这些节点彼此之间也会互相作为target。反之，有一系列节点与当前节点相邻奇数位，那那么这些节点不会成为当前节点的target，并且**这些节点之间均会形成target**\n有了这几个前置条件，我们就已经捋顺了整个逻辑了。我们可以把所有节点遍历，分为两组，每组之间互相为target。\n至于edges2，几乎是同理，不过edges1与其相关联时，可以选取其两组中较大的那个作为target数量。\n\n{%endnote%}\n\n\n## 代码\n```java\nclass Solution {\n    public int[] maxTargetNodes(int[][] edges1, int[][] edges2) {\n        // 合法的树形结构决定了其不会有环，并且从任意节点出发，遍历其相邻节点，均可达到每一个节点\n        // 换句话说，任意节点开始遍历树，结果都是等价的\n        // 本题要求的是偶数个数节点记作target（包括本身0），那么对于任何一个节点来说，是否以其作为target就两种情况：\n        // 1. 与其相邻偶数位，可以算作该节点的target。并且这些节点互相均以彼此为target\n        // 2. 与其相邻奇数位，不算做该节点的target。。并且这些节点互相均已彼此为target\n        // 那么我们就可以把树中的所有节点划分为两类，用颜色（color）来标记\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n        boolean[] color1 = new boolean[n];\n        boolean[] color2 = new boolean[m];\n        // 我们需要将所有节点分别划分到不同color中\n        int[] nums = divide(edges1, color1);\n        int[] nums2 = divide(edges2, color2);\n\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = nums[((color1[i])? 0 :1)] + Math.max(nums2[0], nums2[1]);\n        }\n        return result;\n    }\n\n    /**\n        该方法返回值是一个数组，长度为2。分别代表两种颜色的节点的数量\n     */\n    int[] divide(int[][] edges, boolean[] color) {\n        List<List<Integer>> connections = new ArrayList<>();\n        int n = edges.length + 1;\n        for (int x = 0; x < n; x++) {\n            connections.add(new ArrayList<>());\n        }\n        // 初始化并且填充connections集合\n        for (int[] edge : edges) {\n            connections.get(edge[0]).add(edge[1]);\n            connections.get(edge[1]).add(edge[0]);\n        }\n        // 构造完毕\n        // 遍历所有connection，并记录\n        int ans = dfs(0, -1 , 0, connections, color);\n        return new int[] {ans, n - ans};\n    }\n\n    int dfs (int n, int p, int depth, List<List<Integer>> connections, boolean[] colors) {\n        List<Integer> list = connections.get(n);\n        int ans = (depth %2==0) ? 1 : 0;\n        colors[n] = (depth %2 == 0);\n        for (int c : list) {\n            if (c == p) {\n                continue;\n            }\n            ans += dfs(c, n, depth + 1, connections, colors);\n        }\n        return ans;\n    }\n}\n\n```","slug":"lk_3373_hard","published":1,"updated":"2025-05-29T14:31:18.611Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7m001e1wu18r9ifuru","content":"<p><img src=\"/2025/05/29/lk_3373_hard/2025-05-29T220509.png\" alt=\"2025-05-29T220509\"></p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-ii/description/\">题目</a></p>\n<blockquote>\n<p>并没有想出完美的解答方案，看了官方题解之后才会做的。之前陷入了昨天那道题之中，采用了dfs + 计数的方法，导致超时。看了官方题解使用的分组（分色）法，大悟</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><div class=\"note info\"><p>主要思路就是题目规定了给出的edges符合合法的树。那么就必然不会有环。并且其实无向的，所以任意节点开始向外遍历，均会遍历整个树，并且无论从哪个节点开始遍历，最后的结果都是等价的。<br>并且题目中要求，每个节点的target要求，是要与当前节点相邻偶数位个节点。那么可以想象一下，有一系列几点与当前节点相邻偶数位算作当前节点的target，那么这些节点彼此之间也会互相作为target。反之，有一系列节点与当前节点相邻奇数位，那那么这些节点不会成为当前节点的target，并且<strong>这些节点之间均会形成target</strong><br>有了这几个前置条件，我们就已经捋顺了整个逻辑了。我们可以把所有节点遍历，分为两组，每组之间互相为target。<br>至于edges2，几乎是同理，不过edges1与其相关联时，可以选取其两组中较大的那个作为target数量。</p>\n</div>\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxTargetNodes(<span class=\"type\">int</span>[][] edges1, <span class=\"type\">int</span>[][] edges2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合法的树形结构决定了其不会有环，并且从任意节点出发，遍历其相邻节点，均可达到每一个节点</span></span><br><span class=\"line\">        <span class=\"comment\">// 换句话说，任意节点开始遍历树，结果都是等价的</span></span><br><span class=\"line\">        <span class=\"comment\">// 本题要求的是偶数个数节点记作target（包括本身0），那么对于任何一个节点来说，是否以其作为target就两种情况：</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 与其相邻偶数位，可以算作该节点的target。并且这些节点互相均以彼此为target</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 与其相邻奇数位，不算做该节点的target。。并且这些节点互相均已彼此为target</span></span><br><span class=\"line\">        <span class=\"comment\">// 那么我们就可以把树中的所有节点划分为两类，用颜色（color）来标记</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges1.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> edges2.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] color1 = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] color2 = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[m];</span><br><span class=\"line\">        <span class=\"comment\">// 我们需要将所有节点分别划分到不同color中</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = divide(edges1, color1);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums2 = divide(edges2, color2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            result[i] = nums[((color1[i])? <span class=\"number\">0</span> :<span class=\"number\">1</span>)] + Math.max(nums2[<span class=\"number\">0</span>], nums2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        该方法返回值是一个数组，长度为2。分别代表两种颜色的节点的数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] divide(<span class=\"type\">int</span>[][] edges, <span class=\"type\">boolean</span>[] color) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; connections = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">            connections.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化并且填充connections集合</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges) &#123;</span><br><span class=\"line\">            connections.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            connections.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 构造完毕</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有connection，并记录</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> dfs(<span class=\"number\">0</span>, -<span class=\"number\">1</span> , <span class=\"number\">0</span>, connections, color);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;ans, n - ans&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">dfs</span> <span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> p, <span class=\"type\">int</span> depth, List&lt;List&lt;Integer&gt;&gt; connections, <span class=\"type\">boolean</span>[] colors)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = connections.get(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> (depth %<span class=\"number\">2</span>==<span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        colors[n] = (depth %<span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += dfs(c, n, depth + <span class=\"number\">1</span>, connections, colors);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":796,"excerpt":"<p><img src=\"/2025/05/29/lk_3373_hard/2025-05-29T220509.png\" alt=\"2025-05-29T220509\"></p>","more":"<p><a href=\"https://leetcode.cn/problems/maximize-the-number-of-target-nodes-after-connecting-trees-ii/description/\">题目</a></p>\n<blockquote>\n<p>并没有想出完美的解答方案，看了官方题解之后才会做的。之前陷入了昨天那道题之中，采用了dfs + 计数的方法，导致超时。看了官方题解使用的分组（分色）法，大悟</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><div class=\"note info\"><p>主要思路就是题目规定了给出的edges符合合法的树。那么就必然不会有环。并且其实无向的，所以任意节点开始向外遍历，均会遍历整个树，并且无论从哪个节点开始遍历，最后的结果都是等价的。<br>并且题目中要求，每个节点的target要求，是要与当前节点相邻偶数位个节点。那么可以想象一下，有一系列几点与当前节点相邻偶数位算作当前节点的target，那么这些节点彼此之间也会互相作为target。反之，有一系列节点与当前节点相邻奇数位，那那么这些节点不会成为当前节点的target，并且<strong>这些节点之间均会形成target</strong><br>有了这几个前置条件，我们就已经捋顺了整个逻辑了。我们可以把所有节点遍历，分为两组，每组之间互相为target。<br>至于edges2，几乎是同理，不过edges1与其相关联时，可以选取其两组中较大的那个作为target数量。</p>\n</div>\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] maxTargetNodes(<span class=\"type\">int</span>[][] edges1, <span class=\"type\">int</span>[][] edges2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合法的树形结构决定了其不会有环，并且从任意节点出发，遍历其相邻节点，均可达到每一个节点</span></span><br><span class=\"line\">        <span class=\"comment\">// 换句话说，任意节点开始遍历树，结果都是等价的</span></span><br><span class=\"line\">        <span class=\"comment\">// 本题要求的是偶数个数节点记作target（包括本身0），那么对于任何一个节点来说，是否以其作为target就两种情况：</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 与其相邻偶数位，可以算作该节点的target。并且这些节点互相均以彼此为target</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 与其相邻奇数位，不算做该节点的target。。并且这些节点互相均已彼此为target</span></span><br><span class=\"line\">        <span class=\"comment\">// 那么我们就可以把树中的所有节点划分为两类，用颜色（color）来标记</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges1.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> edges2.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] color1 = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] color2 = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[m];</span><br><span class=\"line\">        <span class=\"comment\">// 我们需要将所有节点分别划分到不同color中</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = divide(edges1, color1);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums2 = divide(edges2, color2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            result[i] = nums[((color1[i])? <span class=\"number\">0</span> :<span class=\"number\">1</span>)] + Math.max(nums2[<span class=\"number\">0</span>], nums2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        该方法返回值是一个数组，长度为2。分别代表两种颜色的节点的数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] divide(<span class=\"type\">int</span>[][] edges, <span class=\"type\">boolean</span>[] color) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; connections = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> edges.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; n; x++) &#123;</span><br><span class=\"line\">            connections.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化并且填充connections集合</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges) &#123;</span><br><span class=\"line\">            connections.get(edge[<span class=\"number\">0</span>]).add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            connections.get(edge[<span class=\"number\">1</span>]).add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 构造完毕</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有connection，并记录</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> dfs(<span class=\"number\">0</span>, -<span class=\"number\">1</span> , <span class=\"number\">0</span>, connections, color);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;ans, n - ans&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">dfs</span> <span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> p, <span class=\"type\">int</span> depth, List&lt;List&lt;Integer&gt;&gt; connections, <span class=\"type\">boolean</span>[] colors)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = connections.get(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> (depth %<span class=\"number\">2</span>==<span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        colors[n] = (depth %<span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == p) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += dfs(c, n, depth + <span class=\"number\">1</span>, connections, colors);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"手撸算法 - 力扣 76. Minimum Window Substring","date":"2025-05-21T07:35:56.000Z","_content":"\n![2025-05-21T233755](2025-05-21T233755.png)\n没有看题解手撸出来的hard，开心\n<!-- more -->\n\n## 思路\n思路就是考虑到字符串中的字符集是有限个数的，那么就用一个数组(bits)来存储t所有字符集的个数，同时也可以根据这个来得到t中初始包括哪些字符集。\n同时，需要再生成一个相同的数字(modi)，用来在对s遍历时，对已经出现过存在于t中的字符集进行统计。\n遍历的思路，就是使用双端队列，用来记录当前出现t中字符集的字符在s中的下标，从头到尾表示从小到大。first代表最开始，last代表最后。\n每次遍历到一个字符，判断其是否存在与t中(使用bits数组对应下标数据是否为正数来判断), 若其存在于t中，则将其推入队列尾部，并且在(modi)中对于该字符的计数进行减减。此时我们可以明显看到，若modi中的数值减少到0以下，那么证明该字符已经**溢出**了，我们可以尝试着减掉之前出现过的这些字符.\n此时需要进行一个while循环判断，若双端队列不为空，并且头部元素所对应的字符在modi中的数值为负数，那么证明该字符是**溢出**的，是可以被移除的，此时的操作就是从队列中移除该元素，然后使其在modi中对应的数量加加.\n\n最后，我们peek出来队列首位的元素，与当前记录的首位元素下标进行判断，若当前peek的下标插值小于记录的下标插值，那么就将记录的下标替换为我们当前peek的数据。\n\n最后，判断是否取出过符合记录的下标，若没有，按照题目规定返回\"\"， 否则从s中取相对应的字串即可\n\n## 代码： \n```java\nclass Solution {\n    public String minWindow(String s, String t) {\n        int[] bits = new int[52];\n        int[] modi = new int[52];\n        for (int x = 0; x < t.length(); x++) {\n            addArr(bits, t.charAt(x));\n            addArr(modi, t.charAt(x));\n        }\n        Deque<Integer> deque = new LinkedList<>();\n        int si = -1;\n        int ei = -1;\n        for (int x=0; x<s.length(); x++) {\n            char cc = s.charAt(x);\n            if (getBit(bits, cc) > 0) {\n                deque.offerLast(x);\n                subArr(modi, cc);\n                while (!deque.isEmpty()  && getBit(modi, s.charAt(deque.peekFirst())) < 0) {\n                    addArr(modi, s.charAt(deque.peekFirst()));\n                    deque.pollFirst();\n                }\n                // if (getBit(modi, cc) < 0 && !deque.isEmpty() && s.charAt(deque.peekFirst()) == cc) {\n                //     addArr(modi, cc);\n                //     deque.pollFirst();\n                // }\n                if (allZero(modi)) {\n                    if (si == -1) {\n                        si = deque.peekFirst();\n                    }\n                    if (ei == -1) {\n                        ei = deque.peekLast();\n                    }\n                    if ((ei - si) > (deque.peekLast() - deque.peekFirst())) {\n                        si = deque.peekFirst();\n                        ei = deque.peekLast();\n                    }\n                }\n\n            }\n\n        }\n        if (si == -1) {\n            return \"\";\n        } else {\n            return s.substring(si, ei+1);\n        }\n\n    }\n\n    boolean allZero (int[] arr) {\n        for (int i : arr) {\n            if (i > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    int getBit (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            return arr[ (c - 'A' + 26)];\n        } else {\n            return arr[c - 'a'];\n        }\n    }\n\n    void subArr (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            arr[ (c - 'A' + 26)]--;\n        } else {\n            arr[c - 'a']--;\n        }\n    }\n\n    void addArr (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            arr[ (c - 'A' + 26)]++;\n        } else {\n            arr[c - 'a']++;\n        }\n    }\n}\n\n```\n\n","source":"_posts/lk_76_hard.md","raw":"---\ntitle: 手撸算法 - 力扣 76. Minimum Window Substring\ndate: 2025-05-21T23:35:56+08:00\ncategories: \n- 算法\ntags: \n- 滑动窗口\n---\n\n![2025-05-21T233755](2025-05-21T233755.png)\n没有看题解手撸出来的hard，开心\n<!-- more -->\n\n## 思路\n思路就是考虑到字符串中的字符集是有限个数的，那么就用一个数组(bits)来存储t所有字符集的个数，同时也可以根据这个来得到t中初始包括哪些字符集。\n同时，需要再生成一个相同的数字(modi)，用来在对s遍历时，对已经出现过存在于t中的字符集进行统计。\n遍历的思路，就是使用双端队列，用来记录当前出现t中字符集的字符在s中的下标，从头到尾表示从小到大。first代表最开始，last代表最后。\n每次遍历到一个字符，判断其是否存在与t中(使用bits数组对应下标数据是否为正数来判断), 若其存在于t中，则将其推入队列尾部，并且在(modi)中对于该字符的计数进行减减。此时我们可以明显看到，若modi中的数值减少到0以下，那么证明该字符已经**溢出**了，我们可以尝试着减掉之前出现过的这些字符.\n此时需要进行一个while循环判断，若双端队列不为空，并且头部元素所对应的字符在modi中的数值为负数，那么证明该字符是**溢出**的，是可以被移除的，此时的操作就是从队列中移除该元素，然后使其在modi中对应的数量加加.\n\n最后，我们peek出来队列首位的元素，与当前记录的首位元素下标进行判断，若当前peek的下标插值小于记录的下标插值，那么就将记录的下标替换为我们当前peek的数据。\n\n最后，判断是否取出过符合记录的下标，若没有，按照题目规定返回\"\"， 否则从s中取相对应的字串即可\n\n## 代码： \n```java\nclass Solution {\n    public String minWindow(String s, String t) {\n        int[] bits = new int[52];\n        int[] modi = new int[52];\n        for (int x = 0; x < t.length(); x++) {\n            addArr(bits, t.charAt(x));\n            addArr(modi, t.charAt(x));\n        }\n        Deque<Integer> deque = new LinkedList<>();\n        int si = -1;\n        int ei = -1;\n        for (int x=0; x<s.length(); x++) {\n            char cc = s.charAt(x);\n            if (getBit(bits, cc) > 0) {\n                deque.offerLast(x);\n                subArr(modi, cc);\n                while (!deque.isEmpty()  && getBit(modi, s.charAt(deque.peekFirst())) < 0) {\n                    addArr(modi, s.charAt(deque.peekFirst()));\n                    deque.pollFirst();\n                }\n                // if (getBit(modi, cc) < 0 && !deque.isEmpty() && s.charAt(deque.peekFirst()) == cc) {\n                //     addArr(modi, cc);\n                //     deque.pollFirst();\n                // }\n                if (allZero(modi)) {\n                    if (si == -1) {\n                        si = deque.peekFirst();\n                    }\n                    if (ei == -1) {\n                        ei = deque.peekLast();\n                    }\n                    if ((ei - si) > (deque.peekLast() - deque.peekFirst())) {\n                        si = deque.peekFirst();\n                        ei = deque.peekLast();\n                    }\n                }\n\n            }\n\n        }\n        if (si == -1) {\n            return \"\";\n        } else {\n            return s.substring(si, ei+1);\n        }\n\n    }\n\n    boolean allZero (int[] arr) {\n        for (int i : arr) {\n            if (i > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    int getBit (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            return arr[ (c - 'A' + 26)];\n        } else {\n            return arr[c - 'a'];\n        }\n    }\n\n    void subArr (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            arr[ (c - 'A' + 26)]--;\n        } else {\n            arr[c - 'a']--;\n        }\n    }\n\n    void addArr (int[] arr, char c) {\n        if (c < 'a' || c > 'z') {\n            arr[ (c - 'A' + 26)]++;\n        } else {\n            arr[c - 'a']++;\n        }\n    }\n}\n\n```\n\n","slug":"lk_76_hard","published":1,"updated":"2025-05-25T11:55:04.770Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7m001j1wu1hm3kb7w4","content":"<p><img src=\"/2025/05/21/lk_76_hard/2025-05-21T233755.png\" alt=\"2025-05-21T233755\"><br>没有看题解手撸出来的hard，开心</p>\n<span id=\"more\"></span>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>思路就是考虑到字符串中的字符集是有限个数的，那么就用一个数组(bits)来存储t所有字符集的个数，同时也可以根据这个来得到t中初始包括哪些字符集。<br>同时，需要再生成一个相同的数字(modi)，用来在对s遍历时，对已经出现过存在于t中的字符集进行统计。<br>遍历的思路，就是使用双端队列，用来记录当前出现t中字符集的字符在s中的下标，从头到尾表示从小到大。first代表最开始，last代表最后。<br>每次遍历到一个字符，判断其是否存在与t中(使用bits数组对应下标数据是否为正数来判断), 若其存在于t中，则将其推入队列尾部，并且在(modi)中对于该字符的计数进行减减。此时我们可以明显看到，若modi中的数值减少到0以下，那么证明该字符已经<strong>溢出</strong>了，我们可以尝试着减掉之前出现过的这些字符.<br>此时需要进行一个while循环判断，若双端队列不为空，并且头部元素所对应的字符在modi中的数值为负数，那么证明该字符是<strong>溢出</strong>的，是可以被移除的，此时的操作就是从队列中移除该元素，然后使其在modi中对应的数量加加.</p>\n<p>最后，我们peek出来队列首位的元素，与当前记录的首位元素下标进行判断，若当前peek的下标插值小于记录的下标插值，那么就将记录的下标替换为我们当前peek的数据。</p>\n<p>最后，判断是否取出过符合记录的下标，若没有，按照题目规定返回””， 否则从s中取相对应的字串即可</p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">minWindow</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] bits = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">52</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] modi = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">52</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; t.length(); x++) &#123;</span><br><span class=\"line\">            addArr(bits, t.charAt(x));</span><br><span class=\"line\">            addArr(modi, t.charAt(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">si</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ei</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x=<span class=\"number\">0</span>; x&lt;s.length(); x++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">cc</span> <span class=\"operator\">=</span> s.charAt(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getBit(bits, cc) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                deque.offerLast(x);</span><br><span class=\"line\">                subArr(modi, cc);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!deque.isEmpty()  &amp;&amp; getBit(modi, s.charAt(deque.peekFirst())) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    addArr(modi, s.charAt(deque.peekFirst()));</span><br><span class=\"line\">                    deque.pollFirst();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// if (getBit(modi, cc) &lt; 0 &amp;&amp; !deque.isEmpty() &amp;&amp; s.charAt(deque.peekFirst()) == cc) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     addArr(modi, cc);</span></span><br><span class=\"line\">                <span class=\"comment\">//     deque.pollFirst();</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allZero(modi)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (si == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        si = deque.peekFirst();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ei == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        ei = deque.peekLast();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((ei - si) &gt; (deque.peekLast() - deque.peekFirst())) &#123;</span><br><span class=\"line\">                        si = deque.peekFirst();</span><br><span class=\"line\">                        ei = deque.peekLast();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (si == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.substring(si, ei+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">allZero</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getBit</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">subArr</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)]--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[c - <span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addArr</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[c - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","length":705,"excerpt":"<p><img src=\"/2025/05/21/lk_76_hard/2025-05-21T233755.png\" alt=\"2025-05-21T233755\"><br>没有看题解手撸出来的hard，开心</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>思路就是考虑到字符串中的字符集是有限个数的，那么就用一个数组(bits)来存储t所有字符集的个数，同时也可以根据这个来得到t中初始包括哪些字符集。<br>同时，需要再生成一个相同的数字(modi)，用来在对s遍历时，对已经出现过存在于t中的字符集进行统计。<br>遍历的思路，就是使用双端队列，用来记录当前出现t中字符集的字符在s中的下标，从头到尾表示从小到大。first代表最开始，last代表最后。<br>每次遍历到一个字符，判断其是否存在与t中(使用bits数组对应下标数据是否为正数来判断), 若其存在于t中，则将其推入队列尾部，并且在(modi)中对于该字符的计数进行减减。此时我们可以明显看到，若modi中的数值减少到0以下，那么证明该字符已经<strong>溢出</strong>了，我们可以尝试着减掉之前出现过的这些字符.<br>此时需要进行一个while循环判断，若双端队列不为空，并且头部元素所对应的字符在modi中的数值为负数，那么证明该字符是<strong>溢出</strong>的，是可以被移除的，此时的操作就是从队列中移除该元素，然后使其在modi中对应的数量加加.</p>\n<p>最后，我们peek出来队列首位的元素，与当前记录的首位元素下标进行判断，若当前peek的下标插值小于记录的下标插值，那么就将记录的下标替换为我们当前peek的数据。</p>\n<p>最后，判断是否取出过符合记录的下标，若没有，按照题目规定返回””， 否则从s中取相对应的字串即可</p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">minWindow</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] bits = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">52</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] modi = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">52</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; t.length(); x++) &#123;</span><br><span class=\"line\">            addArr(bits, t.charAt(x));</span><br><span class=\"line\">            addArr(modi, t.charAt(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">si</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ei</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x=<span class=\"number\">0</span>; x&lt;s.length(); x++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">cc</span> <span class=\"operator\">=</span> s.charAt(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getBit(bits, cc) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                deque.offerLast(x);</span><br><span class=\"line\">                subArr(modi, cc);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!deque.isEmpty()  &amp;&amp; getBit(modi, s.charAt(deque.peekFirst())) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    addArr(modi, s.charAt(deque.peekFirst()));</span><br><span class=\"line\">                    deque.pollFirst();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// if (getBit(modi, cc) &lt; 0 &amp;&amp; !deque.isEmpty() &amp;&amp; s.charAt(deque.peekFirst()) == cc) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     addArr(modi, cc);</span></span><br><span class=\"line\">                <span class=\"comment\">//     deque.pollFirst();</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allZero(modi)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (si == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        si = deque.peekFirst();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ei == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        ei = deque.peekLast();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((ei - si) &gt; (deque.peekLast() - deque.peekFirst())) &#123;</span><br><span class=\"line\">                        si = deque.peekFirst();</span><br><span class=\"line\">                        ei = deque.peekLast();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (si == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.substring(si, ei+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">allZero</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getBit</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">subArr</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)]--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[c - <span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addArr</span> <span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c &lt; <span class=\"string\">&#x27;a&#x27;</span> || c &gt; <span class=\"string\">&#x27;z&#x27;</span>) &#123;</span><br><span class=\"line\">            arr[ (c - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>)]++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[c - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"leetcode_909 Snakes and Ladders","date":"2025-05-30T21:36:38.000Z","_content":"You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\nThe game ends when you reach the square n2.\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\n\nNote that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\n\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\nReturn the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.\n\n<!--more-->\n\n[题目](https://leetcode.cn/problems/snakes-and-ladders/description)\n\n![2025-05-31T134744](2025-05-31T134744.png)\n\n## 思路\n题目中给定的棋盘(board)，是按照左右交互(``Boustrophedon``)的方式来排列的.并且需要注意，棋盘位置中的值是从1开始的，但是我们代码中的数组下标是从0开始的，那么我们就需要注意，遇到梯子（ladder）或者蛇（snake）的时候，跳跃到指定格子时，根据格子的值来寻找坐标时，需要将当前的值进行减一的操作后，再去寻找坐标。\n然后因为是需要找到到达(n * n)的最短方式，又由于在此题中，每次移动均会产生相同的一个步骤(step)的消耗，所以可以使用bfs(Breadth First Search)来遍历。此方法的优点是只要找到了(n * n)的点，那么即可停止遍历。如果使用dfs，那么需要收集所有点的信息，会比较麻烦一些\n\n## 代码\n```java\nclass Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n = board.length;\n        // System.out.println(computeCol(6,6));\n        int[][] records = new int[n][n];\n\n        for (int[] record : records) {\n            Arrays.fill(record, -1);\n        }\n        Deque<Integer> lastPath = new LinkedList<>();\n        lastPath.offerLast(0);\n        \n        int destination = n * n - 1;\n        int ans = 0;\n        while (!lastPath.isEmpty()) {\n            int size = lastPath.size();\n            for (int i = 0; i < size; i++) {\n                int target = lastPath.pollFirst();\n                if (target == destination) {\n                    return ans;\n                }\n                int row = computeRow(n,target);\n\n                int c = computeCol(n,target);\n                if (records[row][c] == -1) { // 尚未遍历过当前节点\n                    records[row][c] = ans;\n                    // 把当前节点接下来可能到达的节点遍历放入lastPath\n                    for (int j = 1; j <= 6; j++) {\n                        if (target + j > destination) {\n                            break;\n                        }\n                        int drow = computeRow(n,target + j);\n                        int dc = computeCol(n,target + j);\n                        // System.out.println(drow +\" _  \" + dc);\n                        // System.out.println(target + j);\n                        if (board[drow][dc] == -1) {// 该节点是normal节点\n                            lastPath.offerLast(target + j);\n                        } else {\n                            int newTarget = board[drow][dc]; // 该节点是梯子或者蛇，我们需要转移到对应的节点\n                            lastPath.offerLast(newTarget-1);\n                        }\n                    }\n                }\n                \n            }\n\n            ans++;\n        }\n        return -1;\n    }\n\n    int computeRow(int n, int target) {\n        return ((n - 1 - ((target) / n)));\n    }\n\n    int computeCol(int n, int target) {\n        int num = target%n;\n        int tmpRow = target/n;\n        return (tmpRow%2 == 0)? (num):(n-1-num);\n    }\n}\n```","source":"_posts/lk_909_medium.md","raw":"---\ntitle: leetcode_909 Snakes and Ladders\ndate: 2025-05-31T13:36:38+08:00\ncategories: \n- 算法\ntags: \n- bfs\n---\nYou are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\nThe game ends when you reach the square n2.\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\n\nNote that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\n\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\nReturn the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.\n\n<!--more-->\n\n[题目](https://leetcode.cn/problems/snakes-and-ladders/description)\n\n![2025-05-31T134744](2025-05-31T134744.png)\n\n## 思路\n题目中给定的棋盘(board)，是按照左右交互(``Boustrophedon``)的方式来排列的.并且需要注意，棋盘位置中的值是从1开始的，但是我们代码中的数组下标是从0开始的，那么我们就需要注意，遇到梯子（ladder）或者蛇（snake）的时候，跳跃到指定格子时，根据格子的值来寻找坐标时，需要将当前的值进行减一的操作后，再去寻找坐标。\n然后因为是需要找到到达(n * n)的最短方式，又由于在此题中，每次移动均会产生相同的一个步骤(step)的消耗，所以可以使用bfs(Breadth First Search)来遍历。此方法的优点是只要找到了(n * n)的点，那么即可停止遍历。如果使用dfs，那么需要收集所有点的信息，会比较麻烦一些\n\n## 代码\n```java\nclass Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n = board.length;\n        // System.out.println(computeCol(6,6));\n        int[][] records = new int[n][n];\n\n        for (int[] record : records) {\n            Arrays.fill(record, -1);\n        }\n        Deque<Integer> lastPath = new LinkedList<>();\n        lastPath.offerLast(0);\n        \n        int destination = n * n - 1;\n        int ans = 0;\n        while (!lastPath.isEmpty()) {\n            int size = lastPath.size();\n            for (int i = 0; i < size; i++) {\n                int target = lastPath.pollFirst();\n                if (target == destination) {\n                    return ans;\n                }\n                int row = computeRow(n,target);\n\n                int c = computeCol(n,target);\n                if (records[row][c] == -1) { // 尚未遍历过当前节点\n                    records[row][c] = ans;\n                    // 把当前节点接下来可能到达的节点遍历放入lastPath\n                    for (int j = 1; j <= 6; j++) {\n                        if (target + j > destination) {\n                            break;\n                        }\n                        int drow = computeRow(n,target + j);\n                        int dc = computeCol(n,target + j);\n                        // System.out.println(drow +\" _  \" + dc);\n                        // System.out.println(target + j);\n                        if (board[drow][dc] == -1) {// 该节点是normal节点\n                            lastPath.offerLast(target + j);\n                        } else {\n                            int newTarget = board[drow][dc]; // 该节点是梯子或者蛇，我们需要转移到对应的节点\n                            lastPath.offerLast(newTarget-1);\n                        }\n                    }\n                }\n                \n            }\n\n            ans++;\n        }\n        return -1;\n    }\n\n    int computeRow(int n, int target) {\n        return ((n - 1 - ((target) / n)));\n    }\n\n    int computeCol(int n, int target) {\n        int num = target%n;\n        int tmpRow = target/n;\n        return (tmpRow%2 == 0)? (num):(n-1-num);\n    }\n}\n```","slug":"lk_909_medium","published":1,"updated":"2025-05-31T05:55:50.044Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7n001l1wu1edxhfm0z","content":"<p>You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.</p>\n<p>You start on square 1 of the board. In each move, starting from square curr, do the following:</p>\n<p>Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].<br>This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.<br>If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.<br>The game ends when you reach the square n2.<br>A board square on row r and column c has a snake or ladder if board[r][c] !&#x3D; -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.</p>\n<p>Note that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.</p>\n<p>For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.<br>Return the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://leetcode.cn/problems/snakes-and-ladders/description\">题目</a></p>\n<p><img src=\"/2025/05/31/lk_909_medium/2025-05-31T134744.png\" alt=\"2025-05-31T134744\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>题目中给定的棋盘(board)，是按照左右交互(<code>Boustrophedon</code>)的方式来排列的.并且需要注意，棋盘位置中的值是从1开始的，但是我们代码中的数组下标是从0开始的，那么我们就需要注意，遇到梯子（ladder）或者蛇（snake）的时候，跳跃到指定格子时，根据格子的值来寻找坐标时，需要将当前的值进行减一的操作后，再去寻找坐标。<br>然后因为是需要找到到达(n * n)的最短方式，又由于在此题中，每次移动均会产生相同的一个步骤(step)的消耗，所以可以使用bfs(Breadth First Search)来遍历。此方法的优点是只要找到了(n * n)的点，那么即可停止遍历。如果使用dfs，那么需要收集所有点的信息，会比较麻烦一些</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">snakesAndLadders</span><span class=\"params\">(<span class=\"type\">int</span>[][] board)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> board.length;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(computeCol(6,6));</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] records = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] record : records) &#123;</span><br><span class=\"line\">            Arrays.fill(record, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Integer&gt; lastPath = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        lastPath.offerLast(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">destination</span> <span class=\"operator\">=</span> n * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!lastPath.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> lastPath.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> lastPath.pollFirst();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == destination) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> computeRow(n,target);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> computeCol(n,target);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (records[row][c] == -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// 尚未遍历过当前节点</span></span><br><span class=\"line\">                    records[row][c] = ans;</span><br><span class=\"line\">                    <span class=\"comment\">// 把当前节点接下来可能到达的节点遍历放入lastPath</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (target + j &gt; destination) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">drow</span> <span class=\"operator\">=</span> computeRow(n,target + j);</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">dc</span> <span class=\"operator\">=</span> computeCol(n,target + j);</span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(drow +&quot; _  &quot; + dc);</span></span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(target + j);</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (board[drow][dc] == -<span class=\"number\">1</span>) &#123;<span class=\"comment\">// 该节点是normal节点</span></span><br><span class=\"line\">                            lastPath.offerLast(target + j);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">newTarget</span> <span class=\"operator\">=</span> board[drow][dc]; <span class=\"comment\">// 该节点是梯子或者蛇，我们需要转移到对应的节点</span></span><br><span class=\"line\">                            lastPath.offerLast(newTarget-<span class=\"number\">1</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">computeRow</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((n - <span class=\"number\">1</span> - ((target) / n)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">computeCol</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> target%n;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tmpRow</span> <span class=\"operator\">=</span> target/n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (tmpRow%<span class=\"number\">2</span> == <span class=\"number\">0</span>)? (num):(n-<span class=\"number\">1</span>-num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":736,"excerpt":"<p>You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.</p>\n<p>You start on square 1 of the board. In each move, starting from square curr, do the following:</p>\n<p>Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].<br>This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.<br>If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.<br>The game ends when you reach the square n2.<br>A board square on row r and column c has a snake or ladder if board[r][c] !&#x3D; -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.</p>\n<p>Note that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.</p>\n<p>For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.<br>Return the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.</p>","more":"<p><a href=\"https://leetcode.cn/problems/snakes-and-ladders/description\">题目</a></p>\n<p><img src=\"/2025/05/31/lk_909_medium/2025-05-31T134744.png\" alt=\"2025-05-31T134744\"></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>题目中给定的棋盘(board)，是按照左右交互(<code>Boustrophedon</code>)的方式来排列的.并且需要注意，棋盘位置中的值是从1开始的，但是我们代码中的数组下标是从0开始的，那么我们就需要注意，遇到梯子（ladder）或者蛇（snake）的时候，跳跃到指定格子时，根据格子的值来寻找坐标时，需要将当前的值进行减一的操作后，再去寻找坐标。<br>然后因为是需要找到到达(n * n)的最短方式，又由于在此题中，每次移动均会产生相同的一个步骤(step)的消耗，所以可以使用bfs(Breadth First Search)来遍历。此方法的优点是只要找到了(n * n)的点，那么即可停止遍历。如果使用dfs，那么需要收集所有点的信息，会比较麻烦一些</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">snakesAndLadders</span><span class=\"params\">(<span class=\"type\">int</span>[][] board)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> board.length;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(computeCol(6,6));</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] records = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] record : records) &#123;</span><br><span class=\"line\">            Arrays.fill(record, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Integer&gt; lastPath = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        lastPath.offerLast(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">destination</span> <span class=\"operator\">=</span> n * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!lastPath.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> lastPath.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> lastPath.pollFirst();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target == destination) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> computeRow(n,target);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> computeCol(n,target);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (records[row][c] == -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// 尚未遍历过当前节点</span></span><br><span class=\"line\">                    records[row][c] = ans;</span><br><span class=\"line\">                    <span class=\"comment\">// 把当前节点接下来可能到达的节点遍历放入lastPath</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (target + j &gt; destination) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">drow</span> <span class=\"operator\">=</span> computeRow(n,target + j);</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">dc</span> <span class=\"operator\">=</span> computeCol(n,target + j);</span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(drow +&quot; _  &quot; + dc);</span></span><br><span class=\"line\">                        <span class=\"comment\">// System.out.println(target + j);</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (board[drow][dc] == -<span class=\"number\">1</span>) &#123;<span class=\"comment\">// 该节点是normal节点</span></span><br><span class=\"line\">                            lastPath.offerLast(target + j);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">newTarget</span> <span class=\"operator\">=</span> board[drow][dc]; <span class=\"comment\">// 该节点是梯子或者蛇，我们需要转移到对应的节点</span></span><br><span class=\"line\">                            lastPath.offerLast(newTarget-<span class=\"number\">1</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">computeRow</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((n - <span class=\"number\">1</span> - ((target) / n)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">computeCol</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> target%n;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tmpRow</span> <span class=\"operator\">=</span> target/n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (tmpRow%<span class=\"number\">2</span> == <span class=\"number\">0</span>)? (num):(n-<span class=\"number\">1</span>-num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"mybatis加载流程梳理","date":"2023-12-18T11:27:22.000Z","_content":"### 关于mybatis\n\nmybatis是一个数据库持久层框架。通过给其配置数据源，让其管理我们与数据库的链接，并且它让我们的代码和sql语句实现了分离。基本使用方法如下，\n\n<!-- more -->\n\n```java\npublic static void main(String[] args) throws IOException {\n\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources\n                                    .getResourceAsReader(\"mybatisConfig.xml\"));\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        WordfsMapper mapper = sqlSession.getMapper(WordfsMapper.class);\n        List<Map<String, Object>> maps = mapper.selectAll();\n        deal(maps);\n    }\n```\n\n详细的就先不说了，主要说说大概的步骤。首先配置sqlSessionFactory，然后再通过sqlsessionfactory来获取一个跟数据库的链接session。最后所有的crud都是通过这个session获取到的mapper来完成的。这个mapper是我们定义的<font color='red'>接口</font>，里面全是未实现的抽象方法。例如本例中的selectAll。\n\n### 关于spring\n\n在springboot启动过程中，会默认将主启动类所在及其子包下的所有@Component 作为bean注入到上下文环境中，在项目启动后我们就可以直接使用这些bean了，spring也是一样，只不过需要手动配置xml配置文件。\n\nspring注入bean，我们也都知道是有好几种方法的。例如直接在目标类上加@Component注解，或者在配置类中用@Bean注解注入。但是以上种种情况，我们注入进spring容器上下文中的bean都必须是被实例化的，换句话说，注入的bean起码得是一个对象，不能是一个接口。但是我们的mapper偏偏就是一个接口。那么spring是怎么帮我们注入这个mapper的呢？\n\n\n\n### spring集成mybatis\n\nspring集成mapper非常简单。直接在mapper接口上添加@Mapper注解，完事！想用的话直接@Autowire注入即可。\n\n非常简单！！但是其中spring在后端其实为我们做了很多。我们都不知道（致敬默默奉献的spring），那么我们就来看一下spring是怎么帮我们把这个接口注入容器中让我们使用的吧\n\n首先看一下依赖。由于我这里是引入的mybatisplus，所以这里就是mybatisplus的依赖。其实mapper注入跟mybatis的依赖几乎一样\n\n```pom\n        <!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter -->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.2.0</version>\n        </dependency>\n```\n\n* 首先先说说第一种注入方式，就是在主启动类上添加@MapperScan注解。我们可以先叫它包扫描注解。先看看这个注解。\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(MapperScannerRegistrar.class) //导入了MapperScannerRegistrar这个类\n@Repeatable(MapperScans.class)\npublic @interface MapperScan {\n\n  /**\n   * Alias for the {@link #basePackages()} attribute. Allows for more concise annotation declarations e.g.:\n   * {@code @MapperScan(\"org.my.pkg\")} instead of {@code @MapperScan(basePackages = \"org.my.pkg\"})}.\n   *\n   * @return base package names\n   */\n  String[] value() default {};\n\n  /**\n   * Base packages to scan for MyBatis interfaces. Note that only interfaces with at least one method will be\n   * registered; concrete classes will be ignored.\n   *\n   * @return base package names for scanning mapper interface\n   */\n  String[] basePackages() default {}; //包路径\n```\n\n可以看到这个注解是导入了<font color='blue'>MapperScannerRegistrar</font>这个类的。这个类是做什么的呢？我们就来这个类内部看一看。下面是我截取的该类内部的一段代码。\n\n```java\npublic class MapperScannerRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware {\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n      //获取MapperScan（包扫描）注解\n    AnnotationAttributes mapperScanAttrs = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));\n    if (mapperScanAttrs != null) {\n      registerBeanDefinitions(mapperScanAttrs, registry, generateBaseBeanName(importingClassMetadata, 0));\n    }\n  }\n\n  void registerBeanDefinitions(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName) {\n\n    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);\n    builder.addPropertyValue(\"processPropertyPlaceHolders\", true);\n\n    //注入各种属性，代码省略\n\n    List<String> basePackages = new ArrayList<>();\n    basePackages.addAll(\n        Arrays.stream(annoAttrs.getStringArray(\"value\")).filter(StringUtils::hasText).collect(Collectors.toList()));\n//添加扫描的包路径\n    basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(\"basePackages\")).filter(StringUtils::hasText)\n        .collect(Collectors.toList()));\n\n    basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(\"basePackageClasses\")).map(ClassUtils::getPackageName)\n        .collect(Collectors.toList()));\n\n    //懒加载相关，代码省略\n\n    builder.addPropertyValue(\"basePackage\", StringUtils.collectionToCommaDelimitedString(basePackages));\n\n    registry.registerBeanDefinition(beanName, builder.getBeanDefinition());\n\n  }\n\n```\n\n可以看到这个类实现了spring提供的<font color='red'>ImportBeanDefinitionRegistrar</font>接口。这个接口的作用就是在被别的类@Import导入后，会调用registerBeanDefinitions这个方法。\n\n可以看到，MapperScannerRegistrar 这个类中，重写的registerBeanDefinitions这个方法获取了MapperScan这个包扫描注解，并且判断不为空后，进入之后的方法。下面的方法其实就是把一个叫做MapperScannerConfigurer的类<font color='red'>注册</font>进了spring容器中。\n\n所以我们可以把MapperScannerRegistrar 这个暂且叫做mapper的配置类注册器。\n\n* > MapperScannerConfigurer看名字应该像是mapper扫描的配置类。我们也进去看看。\n\n```java\npublic class MapperScannerConfigurer\n    implements BeanDefinitionRegistryPostProcessor, InitializingBean, ApplicationContextAware, BeanNameAware {\n\t//各种属性，getter，setter\n\n  /**\n   * {@inheritDoc}\n   * \n   * @since 1.0.2\n   */\n  @Override\n  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n    if (this.processPropertyPlaceHolders) {\n      processPropertyPlaceHolders();\n    }\n\n    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n    scanner.setAddToConfig(this.addToConfig);\n    scanner.setAnnotationClass(this.annotationClass);\n    scanner.setMarkerInterface(this.markerInterface);\n    scanner.setSqlSessionFactory(this.sqlSessionFactory);\n    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);\n    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);\n    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);\n    scanner.setResourceLoader(this.applicationContext);\n    scanner.setBeanNameGenerator(this.nameGenerator);\n    scanner.setMapperFactoryBeanClass(this.mapperFactoryBeanClass);\n    if (StringUtils.hasText(lazyInitialization)) {\n      scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));\n    }\n    scanner.registerFilters();\n    scanner.scan(\n        StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));\n  }\n\n //省略别的方法\n\n}\n```\n\n可以看到，这个类是实现了BeanDefinitionRegistryPostProcessor这个接口的。这个接口是函数式接口。作用是在类注册进spring后，进行一些操作。这个操作就在postProcessBeanDefinitionRegistry方法中。而我们前面知道了，MapperScannerConfigurer这个mapper扫描配置类刚刚才被注册进spring，所以此时必然会执行该方法。\n\n该方法本质其实就是new了一个ClassPathMapperScanner（路径mapper扫描器），然后执行了scan方法。我们看看这个方法。\n\n```java\npublic int scan(String... basePackages) {\n        int beanCountAtScanStart = this.registry.getBeanDefinitionCount();\n        this.doScan(basePackages);\n        if (this.includeAnnotationConfig) {\n            AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);\n        }\n\n        return this.registry.getBeanDefinitionCount() - beanCountAtScanStart;\n    }\n```\n\n可以看到，ClassPathMapperScanner是继承了ClassPathBeanDefinitionScanner类的。我们要看的scan方法，ClassPathMapperScanner并没有重写，用的就是父类的scan方法。可是这里重写了doscan这个方法。所以其实真正的逻辑是下面：\n\n```java\n@Override\n  public Set<BeanDefinitionHolder> doScan(String... basePackages) {\n    Set<BeanDefinitionHolder> beanDefinitions = super.doScan(basePackages);\n\n    if (beanDefinitions.isEmpty()) {\n      LOGGER.warn(() -> \"No MyBatis mapper was found in '\" + Arrays.toString(basePackages)\n          + \"' package. Please check your configuration.\");\n    } else {\n      processBeanDefinitions(beanDefinitions);\n    }\n\n    return beanDefinitions;\n  }\n```\n\n调用父类doscan后，获取扫描到的的所有BeanDefinitionHolder。进行了处理。\n\n```java\nprivate void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions) {\n    GenericBeanDefinition definition;\n    for (BeanDefinitionHolder holder : beanDefinitions) {\n      definition = (GenericBeanDefinition) holder.getBeanDefinition();\n      String beanClassName = definition.getBeanClassName();\n      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); \n        //这一步很重要，偷梁换柱，把所有bean内部的实例class全部换为了MapperFactoryBean.class\n      definition.setBeanClass(this.mapperFactoryBeanClass);\n\n      definition.getPropertyValues().add(\"addToConfig\", this.addToConfig);\n\t//注入sqlSessionFactory\n      boolean explicitFactoryUsed = false;\n      if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\",\n            new RuntimeBeanReference(this.sqlSessionFactoryBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionFactory != null) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\", this.sqlSessionFactory);\n        explicitFactoryUsed = true;\n      }\n//注入sqlSessionTemplate（会顶替sqlSessionFactory）\n      if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {\n        definition.getPropertyValues().add(\"sqlSessionTemplate\",\n            new RuntimeBeanReference(this.sqlSessionTemplateBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionTemplate != null) {\n        \n        definition.getPropertyValues().add(\"sqlSessionTemplate\", this.sqlSessionTemplate);\n        explicitFactoryUsed = true;\n      }\n      definition.setLazyInit(lazyInitialization);\n    }\n```\n\n可以看到，大概就做了两件事，1.偷梁换柱，把bean对应的mapper的class类统一换为了MapperFactoryBean.class。2. 注入sqlSessionTemplate\n\n至此，mapper在spring容器中注入过程就全部完毕了。可能有人会有疑问了，我要的是mapper，你给我MapperFactoryBean，这能行吗？系统运行起来不得崩溃吗？\n\n下面就该看一下如何从spring中获取对应的mapper了\n\n### spring获取mapper\n\n首先，我们进入MapperFactoryBean这个类看一下。\n\n```java\npublic class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> {\n\n  private Class<T> mapperInterface;\n\n  private boolean addToConfig = true;\n\n  public MapperFactoryBean() {\n    // intentionally empty\n  }\n\n  public MapperFactoryBean(Class<T> mapperInterface) {\n    this.mapperInterface = mapperInterface;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  protected void checkDaoConfig() {\n    super.checkDaoConfig();\n\n    notNull(this.mapperInterface, \"Property 'mapperInterface' is required\");\n\n    Configuration configuration = getSqlSession().getConfiguration();\n    if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {\n      try {\n        configuration.addMapper(this.mapperInterface);\n      } catch (Exception e) {\n        logger.error(\"Error while adding the mapper '\" + this.mapperInterface + \"' to configuration.\", e);\n        throw new IllegalArgumentException(e);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public T getObject() throws Exception {\n    return getSqlSession().getMapper(this.mapperInterface);\n  }\n\n//省略一部分代码\n}\n```\n\n可以看到它是集成了FactoryBean的。这其实就是一个bean的工厂类。只不过目前这个工厂只管mapper。\n\n当我们向spring要mapper时，因为mapper在spring中的实例均为MapperFactoryBean这个工厂，此时就会调用getObject（）这个方法。\n\n看看这个方法内部：\n\n```java\n  public SqlSession getSqlSession() {\n    return this.sqlSessionTemplate;\n  }\n\n@Override\n  public T getObject() throws Exception {\n    return getSqlSession().getMapper(this.mapperInterface);\n  }\n```\n\n是不是发现什么了，跟我们原生使用mybatis的逻辑几乎是一样的，获取sqlsession（这里是sqlSessionTemplate），再用这个来getMapper。就获取到我们要的mapper了。而这里的mapperInterface，就是我们注入mapperfactory的时候那一句\n\n```java\ndefinition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName);\n```\n\n把每一个bean对应的构造方法传入当前bean的全类名。就是当前的mapper。就是这里的mapperInterface。\n\n而这个sqlSessionTemplate也是我们刚才注入mapperfactory的时候，注入的sqlSessionTemplate。\n\n这样，其实就是我们获取mapper的底实现。发现到了底层，其实跟我们原生使用差不了太多。\n\n\n\n<font size='5'>最后，我看网上很多对mybatis自动注入进spring讲解的不够详细，只说了每一个mapper底层其实是mapperfatory工厂，并没有讲明为什么。我这次算是带着大家从源码级别过了一遍mapper的注入流程啦。应该比较详细了。</font>\n\n<font size='5' color = 'gree'>其实mapper注入除了启动类的MapperScan注解，还有Mapper注解是比较常用的。其实这个跟这个原理差不多。这边就先讲到这里。有兴趣的大家可以自己去看一下相关的逻辑。</font>\n\n\n","source":"_posts/mybatis-process.md","raw":"---\ntitle: mybatis加载流程梳理\ndate: 2023-12-18 19:27:22\ncategories: \n- java\n- web\ntags:\n- java\n- mybatis\n- web\n---\n### 关于mybatis\n\nmybatis是一个数据库持久层框架。通过给其配置数据源，让其管理我们与数据库的链接，并且它让我们的代码和sql语句实现了分离。基本使用方法如下，\n\n<!-- more -->\n\n```java\npublic static void main(String[] args) throws IOException {\n\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources\n                                    .getResourceAsReader(\"mybatisConfig.xml\"));\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        WordfsMapper mapper = sqlSession.getMapper(WordfsMapper.class);\n        List<Map<String, Object>> maps = mapper.selectAll();\n        deal(maps);\n    }\n```\n\n详细的就先不说了，主要说说大概的步骤。首先配置sqlSessionFactory，然后再通过sqlsessionfactory来获取一个跟数据库的链接session。最后所有的crud都是通过这个session获取到的mapper来完成的。这个mapper是我们定义的<font color='red'>接口</font>，里面全是未实现的抽象方法。例如本例中的selectAll。\n\n### 关于spring\n\n在springboot启动过程中，会默认将主启动类所在及其子包下的所有@Component 作为bean注入到上下文环境中，在项目启动后我们就可以直接使用这些bean了，spring也是一样，只不过需要手动配置xml配置文件。\n\nspring注入bean，我们也都知道是有好几种方法的。例如直接在目标类上加@Component注解，或者在配置类中用@Bean注解注入。但是以上种种情况，我们注入进spring容器上下文中的bean都必须是被实例化的，换句话说，注入的bean起码得是一个对象，不能是一个接口。但是我们的mapper偏偏就是一个接口。那么spring是怎么帮我们注入这个mapper的呢？\n\n\n\n### spring集成mybatis\n\nspring集成mapper非常简单。直接在mapper接口上添加@Mapper注解，完事！想用的话直接@Autowire注入即可。\n\n非常简单！！但是其中spring在后端其实为我们做了很多。我们都不知道（致敬默默奉献的spring），那么我们就来看一下spring是怎么帮我们把这个接口注入容器中让我们使用的吧\n\n首先看一下依赖。由于我这里是引入的mybatisplus，所以这里就是mybatisplus的依赖。其实mapper注入跟mybatis的依赖几乎一样\n\n```pom\n        <!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter -->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.2.0</version>\n        </dependency>\n```\n\n* 首先先说说第一种注入方式，就是在主启动类上添加@MapperScan注解。我们可以先叫它包扫描注解。先看看这个注解。\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(MapperScannerRegistrar.class) //导入了MapperScannerRegistrar这个类\n@Repeatable(MapperScans.class)\npublic @interface MapperScan {\n\n  /**\n   * Alias for the {@link #basePackages()} attribute. Allows for more concise annotation declarations e.g.:\n   * {@code @MapperScan(\"org.my.pkg\")} instead of {@code @MapperScan(basePackages = \"org.my.pkg\"})}.\n   *\n   * @return base package names\n   */\n  String[] value() default {};\n\n  /**\n   * Base packages to scan for MyBatis interfaces. Note that only interfaces with at least one method will be\n   * registered; concrete classes will be ignored.\n   *\n   * @return base package names for scanning mapper interface\n   */\n  String[] basePackages() default {}; //包路径\n```\n\n可以看到这个注解是导入了<font color='blue'>MapperScannerRegistrar</font>这个类的。这个类是做什么的呢？我们就来这个类内部看一看。下面是我截取的该类内部的一段代码。\n\n```java\npublic class MapperScannerRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware {\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n      //获取MapperScan（包扫描）注解\n    AnnotationAttributes mapperScanAttrs = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));\n    if (mapperScanAttrs != null) {\n      registerBeanDefinitions(mapperScanAttrs, registry, generateBaseBeanName(importingClassMetadata, 0));\n    }\n  }\n\n  void registerBeanDefinitions(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName) {\n\n    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);\n    builder.addPropertyValue(\"processPropertyPlaceHolders\", true);\n\n    //注入各种属性，代码省略\n\n    List<String> basePackages = new ArrayList<>();\n    basePackages.addAll(\n        Arrays.stream(annoAttrs.getStringArray(\"value\")).filter(StringUtils::hasText).collect(Collectors.toList()));\n//添加扫描的包路径\n    basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(\"basePackages\")).filter(StringUtils::hasText)\n        .collect(Collectors.toList()));\n\n    basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(\"basePackageClasses\")).map(ClassUtils::getPackageName)\n        .collect(Collectors.toList()));\n\n    //懒加载相关，代码省略\n\n    builder.addPropertyValue(\"basePackage\", StringUtils.collectionToCommaDelimitedString(basePackages));\n\n    registry.registerBeanDefinition(beanName, builder.getBeanDefinition());\n\n  }\n\n```\n\n可以看到这个类实现了spring提供的<font color='red'>ImportBeanDefinitionRegistrar</font>接口。这个接口的作用就是在被别的类@Import导入后，会调用registerBeanDefinitions这个方法。\n\n可以看到，MapperScannerRegistrar 这个类中，重写的registerBeanDefinitions这个方法获取了MapperScan这个包扫描注解，并且判断不为空后，进入之后的方法。下面的方法其实就是把一个叫做MapperScannerConfigurer的类<font color='red'>注册</font>进了spring容器中。\n\n所以我们可以把MapperScannerRegistrar 这个暂且叫做mapper的配置类注册器。\n\n* > MapperScannerConfigurer看名字应该像是mapper扫描的配置类。我们也进去看看。\n\n```java\npublic class MapperScannerConfigurer\n    implements BeanDefinitionRegistryPostProcessor, InitializingBean, ApplicationContextAware, BeanNameAware {\n\t//各种属性，getter，setter\n\n  /**\n   * {@inheritDoc}\n   * \n   * @since 1.0.2\n   */\n  @Override\n  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n    if (this.processPropertyPlaceHolders) {\n      processPropertyPlaceHolders();\n    }\n\n    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n    scanner.setAddToConfig(this.addToConfig);\n    scanner.setAnnotationClass(this.annotationClass);\n    scanner.setMarkerInterface(this.markerInterface);\n    scanner.setSqlSessionFactory(this.sqlSessionFactory);\n    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);\n    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);\n    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);\n    scanner.setResourceLoader(this.applicationContext);\n    scanner.setBeanNameGenerator(this.nameGenerator);\n    scanner.setMapperFactoryBeanClass(this.mapperFactoryBeanClass);\n    if (StringUtils.hasText(lazyInitialization)) {\n      scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));\n    }\n    scanner.registerFilters();\n    scanner.scan(\n        StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));\n  }\n\n //省略别的方法\n\n}\n```\n\n可以看到，这个类是实现了BeanDefinitionRegistryPostProcessor这个接口的。这个接口是函数式接口。作用是在类注册进spring后，进行一些操作。这个操作就在postProcessBeanDefinitionRegistry方法中。而我们前面知道了，MapperScannerConfigurer这个mapper扫描配置类刚刚才被注册进spring，所以此时必然会执行该方法。\n\n该方法本质其实就是new了一个ClassPathMapperScanner（路径mapper扫描器），然后执行了scan方法。我们看看这个方法。\n\n```java\npublic int scan(String... basePackages) {\n        int beanCountAtScanStart = this.registry.getBeanDefinitionCount();\n        this.doScan(basePackages);\n        if (this.includeAnnotationConfig) {\n            AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);\n        }\n\n        return this.registry.getBeanDefinitionCount() - beanCountAtScanStart;\n    }\n```\n\n可以看到，ClassPathMapperScanner是继承了ClassPathBeanDefinitionScanner类的。我们要看的scan方法，ClassPathMapperScanner并没有重写，用的就是父类的scan方法。可是这里重写了doscan这个方法。所以其实真正的逻辑是下面：\n\n```java\n@Override\n  public Set<BeanDefinitionHolder> doScan(String... basePackages) {\n    Set<BeanDefinitionHolder> beanDefinitions = super.doScan(basePackages);\n\n    if (beanDefinitions.isEmpty()) {\n      LOGGER.warn(() -> \"No MyBatis mapper was found in '\" + Arrays.toString(basePackages)\n          + \"' package. Please check your configuration.\");\n    } else {\n      processBeanDefinitions(beanDefinitions);\n    }\n\n    return beanDefinitions;\n  }\n```\n\n调用父类doscan后，获取扫描到的的所有BeanDefinitionHolder。进行了处理。\n\n```java\nprivate void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions) {\n    GenericBeanDefinition definition;\n    for (BeanDefinitionHolder holder : beanDefinitions) {\n      definition = (GenericBeanDefinition) holder.getBeanDefinition();\n      String beanClassName = definition.getBeanClassName();\n      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); \n        //这一步很重要，偷梁换柱，把所有bean内部的实例class全部换为了MapperFactoryBean.class\n      definition.setBeanClass(this.mapperFactoryBeanClass);\n\n      definition.getPropertyValues().add(\"addToConfig\", this.addToConfig);\n\t//注入sqlSessionFactory\n      boolean explicitFactoryUsed = false;\n      if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\",\n            new RuntimeBeanReference(this.sqlSessionFactoryBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionFactory != null) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\", this.sqlSessionFactory);\n        explicitFactoryUsed = true;\n      }\n//注入sqlSessionTemplate（会顶替sqlSessionFactory）\n      if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {\n        definition.getPropertyValues().add(\"sqlSessionTemplate\",\n            new RuntimeBeanReference(this.sqlSessionTemplateBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionTemplate != null) {\n        \n        definition.getPropertyValues().add(\"sqlSessionTemplate\", this.sqlSessionTemplate);\n        explicitFactoryUsed = true;\n      }\n      definition.setLazyInit(lazyInitialization);\n    }\n```\n\n可以看到，大概就做了两件事，1.偷梁换柱，把bean对应的mapper的class类统一换为了MapperFactoryBean.class。2. 注入sqlSessionTemplate\n\n至此，mapper在spring容器中注入过程就全部完毕了。可能有人会有疑问了，我要的是mapper，你给我MapperFactoryBean，这能行吗？系统运行起来不得崩溃吗？\n\n下面就该看一下如何从spring中获取对应的mapper了\n\n### spring获取mapper\n\n首先，我们进入MapperFactoryBean这个类看一下。\n\n```java\npublic class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> {\n\n  private Class<T> mapperInterface;\n\n  private boolean addToConfig = true;\n\n  public MapperFactoryBean() {\n    // intentionally empty\n  }\n\n  public MapperFactoryBean(Class<T> mapperInterface) {\n    this.mapperInterface = mapperInterface;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  protected void checkDaoConfig() {\n    super.checkDaoConfig();\n\n    notNull(this.mapperInterface, \"Property 'mapperInterface' is required\");\n\n    Configuration configuration = getSqlSession().getConfiguration();\n    if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {\n      try {\n        configuration.addMapper(this.mapperInterface);\n      } catch (Exception e) {\n        logger.error(\"Error while adding the mapper '\" + this.mapperInterface + \"' to configuration.\", e);\n        throw new IllegalArgumentException(e);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public T getObject() throws Exception {\n    return getSqlSession().getMapper(this.mapperInterface);\n  }\n\n//省略一部分代码\n}\n```\n\n可以看到它是集成了FactoryBean的。这其实就是一个bean的工厂类。只不过目前这个工厂只管mapper。\n\n当我们向spring要mapper时，因为mapper在spring中的实例均为MapperFactoryBean这个工厂，此时就会调用getObject（）这个方法。\n\n看看这个方法内部：\n\n```java\n  public SqlSession getSqlSession() {\n    return this.sqlSessionTemplate;\n  }\n\n@Override\n  public T getObject() throws Exception {\n    return getSqlSession().getMapper(this.mapperInterface);\n  }\n```\n\n是不是发现什么了，跟我们原生使用mybatis的逻辑几乎是一样的，获取sqlsession（这里是sqlSessionTemplate），再用这个来getMapper。就获取到我们要的mapper了。而这里的mapperInterface，就是我们注入mapperfactory的时候那一句\n\n```java\ndefinition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName);\n```\n\n把每一个bean对应的构造方法传入当前bean的全类名。就是当前的mapper。就是这里的mapperInterface。\n\n而这个sqlSessionTemplate也是我们刚才注入mapperfactory的时候，注入的sqlSessionTemplate。\n\n这样，其实就是我们获取mapper的底实现。发现到了底层，其实跟我们原生使用差不了太多。\n\n\n\n<font size='5'>最后，我看网上很多对mybatis自动注入进spring讲解的不够详细，只说了每一个mapper底层其实是mapperfatory工厂，并没有讲明为什么。我这次算是带着大家从源码级别过了一遍mapper的注入流程啦。应该比较详细了。</font>\n\n<font size='5' color = 'gree'>其实mapper注入除了启动类的MapperScan注解，还有Mapper注解是比较常用的。其实这个跟这个原理差不多。这边就先讲到这里。有兴趣的大家可以自己去看一下相关的逻辑。</font>\n\n\n","slug":"mybatis-process","published":1,"updated":"2024-03-02T14:34:03.604Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7n001p1wu1dcvy8gk9","content":"<h3 id=\"关于mybatis\"><a href=\"#关于mybatis\" class=\"headerlink\" title=\"关于mybatis\"></a>关于mybatis</h3><p>mybatis是一个数据库持久层框架。通过给其配置数据源，让其管理我们与数据库的链接，并且它让我们的代码和sql语句实现了分离。基本使用方法如下，</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(Resources</span><br><span class=\"line\">                                    .getResourceAsReader(<span class=\"string\">&quot;mybatisConfig.xml&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">WordfsMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(WordfsMapper.class);</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; maps = mapper.selectAll();</span><br><span class=\"line\">        deal(maps);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细的就先不说了，主要说说大概的步骤。首先配置sqlSessionFactory，然后再通过sqlsessionfactory来获取一个跟数据库的链接session。最后所有的crud都是通过这个session获取到的mapper来完成的。这个mapper是我们定义的<font color='red'>接口</font>，里面全是未实现的抽象方法。例如本例中的selectAll。</p>\n<h3 id=\"关于spring\"><a href=\"#关于spring\" class=\"headerlink\" title=\"关于spring\"></a>关于spring</h3><p>在springboot启动过程中，会默认将主启动类所在及其子包下的所有@Component 作为bean注入到上下文环境中，在项目启动后我们就可以直接使用这些bean了，spring也是一样，只不过需要手动配置xml配置文件。</p>\n<p>spring注入bean，我们也都知道是有好几种方法的。例如直接在目标类上加@Component注解，或者在配置类中用@Bean注解注入。但是以上种种情况，我们注入进spring容器上下文中的bean都必须是被实例化的，换句话说，注入的bean起码得是一个对象，不能是一个接口。但是我们的mapper偏偏就是一个接口。那么spring是怎么帮我们注入这个mapper的呢？</p>\n<h3 id=\"spring集成mybatis\"><a href=\"#spring集成mybatis\" class=\"headerlink\" title=\"spring集成mybatis\"></a>spring集成mybatis</h3><p>spring集成mapper非常简单。直接在mapper接口上添加@Mapper注解，完事！想用的话直接@Autowire注入即可。</p>\n<p>非常简单！！但是其中spring在后端其实为我们做了很多。我们都不知道（致敬默默奉献的spring），那么我们就来看一下spring是怎么帮我们把这个接口注入容器中让我们使用的吧</p>\n<p>首先看一下依赖。由于我这里是引入的mybatisplus，所以这里就是mybatisplus的依赖。其实mapper注入跟mybatis的依赖几乎一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先先说说第一种注入方式，就是在主启动类上添加@MapperScan注解。我们可以先叫它包扫描注解。先看看这个注解。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(MapperScannerRegistrar.class)</span> <span class=\"comment\">//导入了MapperScannerRegistrar这个类</span></span><br><span class=\"line\"><span class=\"meta\">@Repeatable(MapperScans.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MapperScan &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Alias for the &#123;<span class=\"doctag\">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation declarations e.g.:</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@MapperScan</span>(&quot;org.my.pkg&quot;)&#125; instead of &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@MapperScan</span>(basePackages = &quot;org.my.pkg&quot;&#125;)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> base package names</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Base packages to scan for MyBatis interfaces. Note that only interfaces with at least one method will be</span></span><br><span class=\"line\"><span class=\"comment\">   * registered; concrete classes will be ignored.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> base package names for scanning mapper interface</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  String[] basePackages() <span class=\"keyword\">default</span> &#123;&#125;; <span class=\"comment\">//包路径</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个注解是导入了<font color='blue'>MapperScannerRegistrar</font>这个类的。这个类是做什么的呢？我们就来这个类内部看一看。下面是我截取的该类内部的一段代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperScannerRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//获取MapperScan（包扫描）注解</span></span><br><span class=\"line\">    <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">mapperScanAttrs</span> <span class=\"operator\">=</span> AnnotationAttributes</span><br><span class=\"line\">        .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mapperScanAttrs != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      registerBeanDefinitions(mapperScanAttrs, registry, generateBaseBeanName(importingClassMetadata, <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">BeanDefinitionBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class=\"line\">    builder.addPropertyValue(<span class=\"string\">&quot;processPropertyPlaceHolders&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注入各种属性，代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; basePackages = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    basePackages.addAll(</span><br><span class=\"line\">        Arrays.stream(annoAttrs.getStringArray(<span class=\"string\">&quot;value&quot;</span>)).filter(StringUtils::hasText).collect(Collectors.toList()));</span><br><span class=\"line\"><span class=\"comment\">//添加扫描的包路径</span></span><br><span class=\"line\">    basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(<span class=\"string\">&quot;basePackages&quot;</span>)).filter(StringUtils::hasText)</span><br><span class=\"line\">        .collect(Collectors.toList()));</span><br><span class=\"line\"></span><br><span class=\"line\">    basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(<span class=\"string\">&quot;basePackageClasses&quot;</span>)).map(ClassUtils::getPackageName)</span><br><span class=\"line\">        .collect(Collectors.toList()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//懒加载相关，代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    builder.addPropertyValue(<span class=\"string\">&quot;basePackage&quot;</span>, StringUtils.collectionToCommaDelimitedString(basePackages));</span><br><span class=\"line\"></span><br><span class=\"line\">    registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个类实现了spring提供的<font color='red'>ImportBeanDefinitionRegistrar</font>接口。这个接口的作用就是在被别的类@Import导入后，会调用registerBeanDefinitions这个方法。</p>\n<p>可以看到，MapperScannerRegistrar 这个类中，重写的registerBeanDefinitions这个方法获取了MapperScan这个包扫描注解，并且判断不为空后，进入之后的方法。下面的方法其实就是把一个叫做MapperScannerConfigurer的类<font color='red'>注册</font>进了spring容器中。</p>\n<p>所以我们可以把MapperScannerRegistrar 这个暂且叫做mapper的配置类注册器。</p>\n<ul>\n<li><blockquote>\n<p>MapperScannerConfigurer看名字应该像是mapper扫描的配置类。我们也进去看看。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperScannerConfigurer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistryPostProcessor</span>, InitializingBean, ApplicationContextAware, BeanNameAware &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//各种属性，getter，setter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@since</span> 1.0.2</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class=\"line\">      processPropertyPlaceHolders();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ClassPathMapperScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathMapperScanner</span>(registry);</span><br><span class=\"line\">    scanner.setAddToConfig(<span class=\"built_in\">this</span>.addToConfig);</span><br><span class=\"line\">    scanner.setAnnotationClass(<span class=\"built_in\">this</span>.annotationClass);</span><br><span class=\"line\">    scanner.setMarkerInterface(<span class=\"built_in\">this</span>.markerInterface);</span><br><span class=\"line\">    scanner.setSqlSessionFactory(<span class=\"built_in\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">    scanner.setSqlSessionTemplate(<span class=\"built_in\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">    scanner.setSqlSessionFactoryBeanName(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName);</span><br><span class=\"line\">    scanner.setSqlSessionTemplateBeanName(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName);</span><br><span class=\"line\">    scanner.setResourceLoader(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    scanner.setBeanNameGenerator(<span class=\"built_in\">this</span>.nameGenerator);</span><br><span class=\"line\">    scanner.setMapperFactoryBeanClass(<span class=\"built_in\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasText(lazyInitialization)) &#123;</span><br><span class=\"line\">      scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scanner.registerFilters();</span><br><span class=\"line\">    scanner.scan(</span><br><span class=\"line\">        StringUtils.tokenizeToStringArray(<span class=\"built_in\">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//省略别的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个类是实现了BeanDefinitionRegistryPostProcessor这个接口的。这个接口是函数式接口。作用是在类注册进spring后，进行一些操作。这个操作就在postProcessBeanDefinitionRegistry方法中。而我们前面知道了，MapperScannerConfigurer这个mapper扫描配置类刚刚才被注册进spring，所以此时必然会执行该方法。</p>\n<p>该方法本质其实就是new了一个ClassPathMapperScanner（路径mapper扫描器），然后执行了scan方法。我们看看这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">scan</span><span class=\"params\">(String... basePackages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">beanCountAtScanStart</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.registry.getBeanDefinitionCount();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doScan(basePackages);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.includeAnnotationConfig) &#123;</span><br><span class=\"line\">            AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class=\"built_in\">this</span>.registry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，ClassPathMapperScanner是继承了ClassPathBeanDefinitionScanner类的。我们要看的scan方法，ClassPathMapperScanner并没有重写，用的就是父类的scan方法。可是这里重写了doscan这个方法。所以其实真正的逻辑是下面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;BeanDefinitionHolder&gt; <span class=\"title function_\">doScan</span><span class=\"params\">(String... basePackages)</span> &#123;</span><br><span class=\"line\">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class=\"built_in\">super</span>.doScan(basePackages);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class=\"line\">      LOGGER.warn(() -&gt; <span class=\"string\">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)</span><br><span class=\"line\">          + <span class=\"string\">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      processBeanDefinitions(beanDefinitions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beanDefinitions;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用父类doscan后，获取扫描到的的所有BeanDefinitionHolder。进行了处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processBeanDefinitions</span><span class=\"params\">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;</span><br><span class=\"line\">    GenericBeanDefinition definition;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class=\"line\">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">beanClassName</span> <span class=\"operator\">=</span> definition.getBeanClassName();</span><br><span class=\"line\">      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); </span><br><span class=\"line\">        <span class=\"comment\">//这一步很重要，偷梁换柱，把所有bean内部的实例class全部换为了MapperFactoryBean.class</span></span><br><span class=\"line\">      definition.setBeanClass(<span class=\"built_in\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\"></span><br><span class=\"line\">      definition.getPropertyValues().add(<span class=\"string\">&quot;addToConfig&quot;</span>, <span class=\"built_in\">this</span>.addToConfig);</span><br><span class=\"line\">\t<span class=\"comment\">//注入sqlSessionFactory</span></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">explicitFactoryUsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionFactory&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeBeanReference</span>(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName));</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sqlSessionFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionFactory&quot;</span>, <span class=\"built_in\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//注入sqlSessionTemplate（会顶替sqlSessionFactory）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionTemplate&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeBeanReference</span>(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName));</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sqlSessionTemplate != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionTemplate&quot;</span>, <span class=\"built_in\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      definition.setLazyInit(lazyInitialization);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，大概就做了两件事，1.偷梁换柱，把bean对应的mapper的class类统一换为了MapperFactoryBean.class。2. 注入sqlSessionTemplate</p>\n<p>至此，mapper在spring容器中注入过程就全部完毕了。可能有人会有疑问了，我要的是mapper，你给我MapperFactoryBean，这能行吗？系统运行起来不得崩溃吗？</p>\n<p>下面就该看一下如何从spring中获取对应的mapper了</p>\n<h3 id=\"spring获取mapper\"><a href=\"#spring获取mapper\" class=\"headerlink\" title=\"spring获取mapper\"></a>spring获取mapper</h3><p>首先，我们进入MapperFactoryBean这个类看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperFactoryBean</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SqlSessionDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">addToConfig</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MapperFactoryBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// intentionally empty</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MapperFactoryBean</span><span class=\"params\">(Class&lt;T&gt; mapperInterface)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkDaoConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.checkDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    notNull(<span class=\"built_in\">this</span>.mapperInterface, <span class=\"string\">&quot;Property &#x27;mapperInterface&#x27; is required&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Configuration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> getSqlSession().getConfiguration();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.addToConfig &amp;&amp; !configuration.hasMapper(<span class=\"built_in\">this</span>.mapperInterface)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        configuration.addMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;Error while adding the mapper &#x27;&quot;</span> + <span class=\"built_in\">this</span>.mapperInterface + <span class=\"string\">&quot;&#x27; to configuration.&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(e);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSqlSession().getMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//省略一部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到它是集成了FactoryBean的。这其实就是一个bean的工厂类。只不过目前这个工厂只管mapper。</p>\n<p>当我们向spring要mapper时，因为mapper在spring中的实例均为MapperFactoryBean这个工厂，此时就会调用getObject（）这个方法。</p>\n<p>看看这个方法内部：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> SqlSession <span class=\"title function_\">getSqlSession</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.sqlSessionTemplate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSqlSession().getMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>是不是发现什么了，跟我们原生使用mybatis的逻辑几乎是一样的，获取sqlsession（这里是sqlSessionTemplate），再用这个来getMapper。就获取到我们要的mapper了。而这里的mapperInterface，就是我们注入mapperfactory的时候那一句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName);</span><br></pre></td></tr></table></figure>\n\n<p>把每一个bean对应的构造方法传入当前bean的全类名。就是当前的mapper。就是这里的mapperInterface。</p>\n<p>而这个sqlSessionTemplate也是我们刚才注入mapperfactory的时候，注入的sqlSessionTemplate。</p>\n<p>这样，其实就是我们获取mapper的底实现。发现到了底层，其实跟我们原生使用差不了太多。</p>\n<p><font size='5'>最后，我看网上很多对mybatis自动注入进spring讲解的不够详细，只说了每一个mapper底层其实是mapperfatory工厂，并没有讲明为什么。我这次算是带着大家从源码级别过了一遍mapper的注入流程啦。应该比较详细了。</font></p>\n<p><font size='5' color = 'gree'>其实mapper注入除了启动类的MapperScan注解，还有Mapper注解是比较常用的。其实这个跟这个原理差不多。这边就先讲到这里。有兴趣的大家可以自己去看一下相关的逻辑。</font></p>\n","length":2097,"excerpt":"<h3 id=\"关于mybatis\"><a href=\"#关于mybatis\" class=\"headerlink\" title=\"关于mybatis\"></a>关于mybatis</h3><p>mybatis是一个数据库持久层框架。通过给其配置数据源，让其管理我们与数据库的链接，并且它让我们的代码和sql语句实现了分离。基本使用方法如下，</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(Resources</span><br><span class=\"line\">                                    .getResourceAsReader(<span class=\"string\">&quot;mybatisConfig.xml&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">WordfsMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(WordfsMapper.class);</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; maps = mapper.selectAll();</span><br><span class=\"line\">        deal(maps);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细的就先不说了，主要说说大概的步骤。首先配置sqlSessionFactory，然后再通过sqlsessionfactory来获取一个跟数据库的链接session。最后所有的crud都是通过这个session获取到的mapper来完成的。这个mapper是我们定义的<font color='red'>接口</font>，里面全是未实现的抽象方法。例如本例中的selectAll。</p>\n<h3 id=\"关于spring\"><a href=\"#关于spring\" class=\"headerlink\" title=\"关于spring\"></a>关于spring</h3><p>在springboot启动过程中，会默认将主启动类所在及其子包下的所有@Component 作为bean注入到上下文环境中，在项目启动后我们就可以直接使用这些bean了，spring也是一样，只不过需要手动配置xml配置文件。</p>\n<p>spring注入bean，我们也都知道是有好几种方法的。例如直接在目标类上加@Component注解，或者在配置类中用@Bean注解注入。但是以上种种情况，我们注入进spring容器上下文中的bean都必须是被实例化的，换句话说，注入的bean起码得是一个对象，不能是一个接口。但是我们的mapper偏偏就是一个接口。那么spring是怎么帮我们注入这个mapper的呢？</p>\n<h3 id=\"spring集成mybatis\"><a href=\"#spring集成mybatis\" class=\"headerlink\" title=\"spring集成mybatis\"></a>spring集成mybatis</h3><p>spring集成mapper非常简单。直接在mapper接口上添加@Mapper注解，完事！想用的话直接@Autowire注入即可。</p>\n<p>非常简单！！但是其中spring在后端其实为我们做了很多。我们都不知道（致敬默默奉献的spring），那么我们就来看一下spring是怎么帮我们把这个接口注入容器中让我们使用的吧</p>\n<p>首先看一下依赖。由于我这里是引入的mybatisplus，所以这里就是mybatisplus的依赖。其实mapper注入跟mybatis的依赖几乎一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先先说说第一种注入方式，就是在主启动类上添加@MapperScan注解。我们可以先叫它包扫描注解。先看看这个注解。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(MapperScannerRegistrar.class)</span> <span class=\"comment\">//导入了MapperScannerRegistrar这个类</span></span><br><span class=\"line\"><span class=\"meta\">@Repeatable(MapperScans.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MapperScan &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Alias for the &#123;<span class=\"doctag\">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation declarations e.g.:</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@MapperScan</span>(&quot;org.my.pkg&quot;)&#125; instead of &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@MapperScan</span>(basePackages = &quot;org.my.pkg&quot;&#125;)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> base package names</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Base packages to scan for MyBatis interfaces. Note that only interfaces with at least one method will be</span></span><br><span class=\"line\"><span class=\"comment\">   * registered; concrete classes will be ignored.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span> base package names for scanning mapper interface</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  String[] basePackages() <span class=\"keyword\">default</span> &#123;&#125;; <span class=\"comment\">//包路径</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个注解是导入了<font color='blue'>MapperScannerRegistrar</font>这个类的。这个类是做什么的呢？我们就来这个类内部看一看。下面是我截取的该类内部的一段代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperScannerRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//获取MapperScan（包扫描）注解</span></span><br><span class=\"line\">    <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">mapperScanAttrs</span> <span class=\"operator\">=</span> AnnotationAttributes</span><br><span class=\"line\">        .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mapperScanAttrs != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      registerBeanDefinitions(mapperScanAttrs, registry, generateBaseBeanName(importingClassMetadata, <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">BeanDefinitionBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class=\"line\">    builder.addPropertyValue(<span class=\"string\">&quot;processPropertyPlaceHolders&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注入各种属性，代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; basePackages = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    basePackages.addAll(</span><br><span class=\"line\">        Arrays.stream(annoAttrs.getStringArray(<span class=\"string\">&quot;value&quot;</span>)).filter(StringUtils::hasText).collect(Collectors.toList()));</span><br><span class=\"line\"><span class=\"comment\">//添加扫描的包路径</span></span><br><span class=\"line\">    basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(<span class=\"string\">&quot;basePackages&quot;</span>)).filter(StringUtils::hasText)</span><br><span class=\"line\">        .collect(Collectors.toList()));</span><br><span class=\"line\"></span><br><span class=\"line\">    basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(<span class=\"string\">&quot;basePackageClasses&quot;</span>)).map(ClassUtils::getPackageName)</span><br><span class=\"line\">        .collect(Collectors.toList()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//懒加载相关，代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    builder.addPropertyValue(<span class=\"string\">&quot;basePackage&quot;</span>, StringUtils.collectionToCommaDelimitedString(basePackages));</span><br><span class=\"line\"></span><br><span class=\"line\">    registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个类实现了spring提供的<font color='red'>ImportBeanDefinitionRegistrar</font>接口。这个接口的作用就是在被别的类@Import导入后，会调用registerBeanDefinitions这个方法。</p>\n<p>可以看到，MapperScannerRegistrar 这个类中，重写的registerBeanDefinitions这个方法获取了MapperScan这个包扫描注解，并且判断不为空后，进入之后的方法。下面的方法其实就是把一个叫做MapperScannerConfigurer的类<font color='red'>注册</font>进了spring容器中。</p>\n<p>所以我们可以把MapperScannerRegistrar 这个暂且叫做mapper的配置类注册器。</p>\n<ul>\n<li><blockquote>\n<p>MapperScannerConfigurer看名字应该像是mapper扫描的配置类。我们也进去看看。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperScannerConfigurer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistryPostProcessor</span>, InitializingBean, ApplicationContextAware, BeanNameAware &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//各种属性，getter，setter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * </span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@since</span> 1.0.2</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class=\"line\">      processPropertyPlaceHolders();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ClassPathMapperScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathMapperScanner</span>(registry);</span><br><span class=\"line\">    scanner.setAddToConfig(<span class=\"built_in\">this</span>.addToConfig);</span><br><span class=\"line\">    scanner.setAnnotationClass(<span class=\"built_in\">this</span>.annotationClass);</span><br><span class=\"line\">    scanner.setMarkerInterface(<span class=\"built_in\">this</span>.markerInterface);</span><br><span class=\"line\">    scanner.setSqlSessionFactory(<span class=\"built_in\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">    scanner.setSqlSessionTemplate(<span class=\"built_in\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">    scanner.setSqlSessionFactoryBeanName(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName);</span><br><span class=\"line\">    scanner.setSqlSessionTemplateBeanName(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName);</span><br><span class=\"line\">    scanner.setResourceLoader(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">    scanner.setBeanNameGenerator(<span class=\"built_in\">this</span>.nameGenerator);</span><br><span class=\"line\">    scanner.setMapperFactoryBeanClass(<span class=\"built_in\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasText(lazyInitialization)) &#123;</span><br><span class=\"line\">      scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scanner.registerFilters();</span><br><span class=\"line\">    scanner.scan(</span><br><span class=\"line\">        StringUtils.tokenizeToStringArray(<span class=\"built_in\">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//省略别的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个类是实现了BeanDefinitionRegistryPostProcessor这个接口的。这个接口是函数式接口。作用是在类注册进spring后，进行一些操作。这个操作就在postProcessBeanDefinitionRegistry方法中。而我们前面知道了，MapperScannerConfigurer这个mapper扫描配置类刚刚才被注册进spring，所以此时必然会执行该方法。</p>\n<p>该方法本质其实就是new了一个ClassPathMapperScanner（路径mapper扫描器），然后执行了scan方法。我们看看这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">scan</span><span class=\"params\">(String... basePackages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">beanCountAtScanStart</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.registry.getBeanDefinitionCount();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doScan(basePackages);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.includeAnnotationConfig) &#123;</span><br><span class=\"line\">            AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class=\"built_in\">this</span>.registry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，ClassPathMapperScanner是继承了ClassPathBeanDefinitionScanner类的。我们要看的scan方法，ClassPathMapperScanner并没有重写，用的就是父类的scan方法。可是这里重写了doscan这个方法。所以其实真正的逻辑是下面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Set&lt;BeanDefinitionHolder&gt; <span class=\"title function_\">doScan</span><span class=\"params\">(String... basePackages)</span> &#123;</span><br><span class=\"line\">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class=\"built_in\">super</span>.doScan(basePackages);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class=\"line\">      LOGGER.warn(() -&gt; <span class=\"string\">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)</span><br><span class=\"line\">          + <span class=\"string\">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      processBeanDefinitions(beanDefinitions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beanDefinitions;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用父类doscan后，获取扫描到的的所有BeanDefinitionHolder。进行了处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processBeanDefinitions</span><span class=\"params\">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;</span><br><span class=\"line\">    GenericBeanDefinition definition;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class=\"line\">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">beanClassName</span> <span class=\"operator\">=</span> definition.getBeanClassName();</span><br><span class=\"line\">      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); </span><br><span class=\"line\">        <span class=\"comment\">//这一步很重要，偷梁换柱，把所有bean内部的实例class全部换为了MapperFactoryBean.class</span></span><br><span class=\"line\">      definition.setBeanClass(<span class=\"built_in\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\"></span><br><span class=\"line\">      definition.getPropertyValues().add(<span class=\"string\">&quot;addToConfig&quot;</span>, <span class=\"built_in\">this</span>.addToConfig);</span><br><span class=\"line\">\t<span class=\"comment\">//注入sqlSessionFactory</span></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">explicitFactoryUsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionFactory&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeBeanReference</span>(<span class=\"built_in\">this</span>.sqlSessionFactoryBeanName));</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sqlSessionFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionFactory&quot;</span>, <span class=\"built_in\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//注入sqlSessionTemplate（会顶替sqlSessionFactory）</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionTemplate&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeBeanReference</span>(<span class=\"built_in\">this</span>.sqlSessionTemplateBeanName));</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.sqlSessionTemplate != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">&quot;sqlSessionTemplate&quot;</span>, <span class=\"built_in\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">        explicitFactoryUsed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      definition.setLazyInit(lazyInitialization);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，大概就做了两件事，1.偷梁换柱，把bean对应的mapper的class类统一换为了MapperFactoryBean.class。2. 注入sqlSessionTemplate</p>\n<p>至此，mapper在spring容器中注入过程就全部完毕了。可能有人会有疑问了，我要的是mapper，你给我MapperFactoryBean，这能行吗？系统运行起来不得崩溃吗？</p>\n<p>下面就该看一下如何从spring中获取对应的mapper了</p>\n<h3 id=\"spring获取mapper\"><a href=\"#spring获取mapper\" class=\"headerlink\" title=\"spring获取mapper\"></a>spring获取mapper</h3><p>首先，我们进入MapperFactoryBean这个类看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperFactoryBean</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SqlSessionDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Class&lt;T&gt; mapperInterface;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">addToConfig</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MapperFactoryBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// intentionally empty</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MapperFactoryBean</span><span class=\"params\">(Class&lt;T&gt; mapperInterface)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapperInterface = mapperInterface;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkDaoConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.checkDaoConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    notNull(<span class=\"built_in\">this</span>.mapperInterface, <span class=\"string\">&quot;Property &#x27;mapperInterface&#x27; is required&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Configuration</span> <span class=\"variable\">configuration</span> <span class=\"operator\">=</span> getSqlSession().getConfiguration();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.addToConfig &amp;&amp; !configuration.hasMapper(<span class=\"built_in\">this</span>.mapperInterface)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        configuration.addMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;Error while adding the mapper &#x27;&quot;</span> + <span class=\"built_in\">this</span>.mapperInterface + <span class=\"string\">&quot;&#x27; to configuration.&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(e);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ErrorContext.instance().reset();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSqlSession().getMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//省略一部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到它是集成了FactoryBean的。这其实就是一个bean的工厂类。只不过目前这个工厂只管mapper。</p>\n<p>当我们向spring要mapper时，因为mapper在spring中的实例均为MapperFactoryBean这个工厂，此时就会调用getObject（）这个方法。</p>\n<p>看看这个方法内部：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> SqlSession <span class=\"title function_\">getSqlSession</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.sqlSessionTemplate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSqlSession().getMapper(<span class=\"built_in\">this</span>.mapperInterface);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>是不是发现什么了，跟我们原生使用mybatis的逻辑几乎是一样的，获取sqlsession（这里是sqlSessionTemplate），再用这个来getMapper。就获取到我们要的mapper了。而这里的mapperInterface，就是我们注入mapperfactory的时候那一句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName);</span><br></pre></td></tr></table></figure>\n\n<p>把每一个bean对应的构造方法传入当前bean的全类名。就是当前的mapper。就是这里的mapperInterface。</p>\n<p>而这个sqlSessionTemplate也是我们刚才注入mapperfactory的时候，注入的sqlSessionTemplate。</p>\n<p>这样，其实就是我们获取mapper的底实现。发现到了底层，其实跟我们原生使用差不了太多。</p>\n<p><font size='5'>最后，我看网上很多对mybatis自动注入进spring讲解的不够详细，只说了每一个mapper底层其实是mapperfatory工厂，并没有讲明为什么。我这次算是带着大家从源码级别过了一遍mapper的注入流程啦。应该比较详细了。</font></p>\n<p><font size='5' color = 'gree'>其实mapper注入除了启动类的MapperScan注解，还有Mapper注解是比较常用的。其实这个跟这个原理差不多。这边就先讲到这里。有兴趣的大家可以自己去看一下相关的逻辑。</font></p>"},{"title":"向Maven仓库发布自己的项目所遇到的一些坑","date":"2025-05-17T12:50:45.000Z","_content":"\n> 在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记\n\n需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。\n\n<!-- more -->\n\n## 问题：\nmaven publish 官网：[maven](https://central.sonatype.org/)\n\n## 前提\n首先，需要登陆这个官网。可以直接用 **github** 账号，这样后面会省一些事情（namespace）\n\n\n\n### 必要准备：\n   1. 你的项目build后的jar\n   2. 你的项目build后的源码（source）jar\n   3. 你的项目的java doc\n   4. 你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述\n   5. 以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件\n   6. 将以上所有文件打包在一个zip中。文件结构需要与 groupId -> artifactId -> version 的结构相吻合\n\n### 步骤\n1. 登陆[maven官网](https://central.sonatype.org/) （建议使用github账号直登）\n2. 打开右上角个人信息里面的 **View Deploy** ![View Deploy](unify\\maven_upload\\image.png)\n3. 此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证\n   ![alt text](unify\\maven_upload\\image-1.png)\n4. 在Deployments页面，就可以看到你当前所有的deploy了\n5. 点击右上角的Publish Deployment\n   ![alt text](unify\\maven_upload\\image-2.png)\n   会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。\n6. deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了\n\n## 一些坑点\n主要坑点其实都集中在打zip包中。\n1. zip包中文件需要按照groupId -> artifactId -> version 的结构来放置。\n    比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个``com.zip``,\n\n2. 关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：\n   ```java\n    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {\n        encryptFile(\"path\");\n    }\n\n    public static void encryptFile(String fileName) throws NoSuchAlgorithmException, IOException {\n        // Encrypt file\n        MessageDigest MD5 = MessageDigest.getInstance(\"MD5\");\n        MessageDigest SHA_1 = MessageDigest.getInstance(\"SHA-1\");\n\n\n        File file = new File(fileName);\n        if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            for (File f : files) {\n                if (f.isFile()) {\n                    String name = f.getName();\n                    byte[] bytes = Files.readAllBytes(f.toPath());\n                    MD5.update(bytes);\n\n                    byte[] digest = MD5.digest();\n                    String newFileName = fileName + File.separator + \"md5\" + File.separator + name + \".md5\";\n                    String md5Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n\n                    SHA_1.update(bytes);\n                    digest = SHA_1.digest();\n                    newFileName = fileName + File.separator + \"sha1\" + File.separator + name + \".sha1\";\n                    String sha1Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n                }\n            }\n        }\n\n    }\n\n    private static String byteArrToHexStr(byte[] digest) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n\n   ```\n\n3. **最大坑点，gpg加密**\n   首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的\n   关于GPG，可以在[这里](https://gnupg.org/download/index.html#sec-1-2)下载。\n   下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令\n\n```shell\ngpg --version # 查看版本\n\ngpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）\n\ngpg --list-keys # 查看当前所有的key\n\n#加密文件\ngpg -ab myfile.java\n\n# 这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息\n\n```\n\n然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。\n至此，我们的打包工作完成，zip包中所有的东西均已准备完成。\n但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。\n因此，我们还需要进行一步操作，那就是上传我们自己的``公钥(publicKey)``\n```shell\n# 首先，查询我们密钥的公钥\ngpg --list-keys\n\n我们会得到类似下面的输出：\npub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]\n      AAA80322283FDD52B363D36E4F9B3F67BEDB9576\nuid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nsub   xxxx 2025-03-30 [E] [expires: 2027-03-30]\n\n其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。\ngpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。\n\n# 上传公钥操作：\n gpg --keyserver keyserver.ubuntu.com --send-keys ${你自己的公钥}\n\n```\n上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。\n最后，看到这个状态即表示上传成功，okkk\n![alt text](unify\\maven_upload\\image-3.png)\n","source":"_posts/maven-upload.md","raw":"---\ntitle: 向Maven仓库发布自己的项目所遇到的一些坑\ndate: 2025-05-17 20:50:45\n---\n\n> 在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记\n\n需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。\n\n<!-- more -->\n\n## 问题：\nmaven publish 官网：[maven](https://central.sonatype.org/)\n\n## 前提\n首先，需要登陆这个官网。可以直接用 **github** 账号，这样后面会省一些事情（namespace）\n\n\n\n### 必要准备：\n   1. 你的项目build后的jar\n   2. 你的项目build后的源码（source）jar\n   3. 你的项目的java doc\n   4. 你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述\n   5. 以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件\n   6. 将以上所有文件打包在一个zip中。文件结构需要与 groupId -> artifactId -> version 的结构相吻合\n\n### 步骤\n1. 登陆[maven官网](https://central.sonatype.org/) （建议使用github账号直登）\n2. 打开右上角个人信息里面的 **View Deploy** ![View Deploy](unify\\maven_upload\\image.png)\n3. 此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证\n   ![alt text](unify\\maven_upload\\image-1.png)\n4. 在Deployments页面，就可以看到你当前所有的deploy了\n5. 点击右上角的Publish Deployment\n   ![alt text](unify\\maven_upload\\image-2.png)\n   会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。\n6. deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了\n\n## 一些坑点\n主要坑点其实都集中在打zip包中。\n1. zip包中文件需要按照groupId -> artifactId -> version 的结构来放置。\n    比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个``com.zip``,\n\n2. 关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：\n   ```java\n    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {\n        encryptFile(\"path\");\n    }\n\n    public static void encryptFile(String fileName) throws NoSuchAlgorithmException, IOException {\n        // Encrypt file\n        MessageDigest MD5 = MessageDigest.getInstance(\"MD5\");\n        MessageDigest SHA_1 = MessageDigest.getInstance(\"SHA-1\");\n\n\n        File file = new File(fileName);\n        if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            for (File f : files) {\n                if (f.isFile()) {\n                    String name = f.getName();\n                    byte[] bytes = Files.readAllBytes(f.toPath());\n                    MD5.update(bytes);\n\n                    byte[] digest = MD5.digest();\n                    String newFileName = fileName + File.separator + \"md5\" + File.separator + name + \".md5\";\n                    String md5Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n\n                    SHA_1.update(bytes);\n                    digest = SHA_1.digest();\n                    newFileName = fileName + File.separator + \"sha1\" + File.separator + name + \".sha1\";\n                    String sha1Content = byteArrToHexStr(digest);\n                    Files.write(new File(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n                }\n            }\n        }\n\n    }\n\n    private static String byteArrToHexStr(byte[] digest) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n\n   ```\n\n3. **最大坑点，gpg加密**\n   首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的\n   关于GPG，可以在[这里](https://gnupg.org/download/index.html#sec-1-2)下载。\n   下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令\n\n```shell\ngpg --version # 查看版本\n\ngpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）\n\ngpg --list-keys # 查看当前所有的key\n\n#加密文件\ngpg -ab myfile.java\n\n# 这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息\n\n```\n\n然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。\n至此，我们的打包工作完成，zip包中所有的东西均已准备完成。\n但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。\n因此，我们还需要进行一步操作，那就是上传我们自己的``公钥(publicKey)``\n```shell\n# 首先，查询我们密钥的公钥\ngpg --list-keys\n\n我们会得到类似下面的输出：\npub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]\n      AAA80322283FDD52B363D36E4F9B3F67BEDB9576\nuid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nsub   xxxx 2025-03-30 [E] [expires: 2027-03-30]\n\n其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。\ngpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。\n\n# 上传公钥操作：\n gpg --keyserver keyserver.ubuntu.com --send-keys ${你自己的公钥}\n\n```\n上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。\n最后，看到这个状态即表示上传成功，okkk\n![alt text](unify\\maven_upload\\image-3.png)\n","slug":"maven-upload","published":1,"updated":"2025-05-25T11:55:04.771Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7n001r1wu1g5nc31kh","content":"<blockquote>\n<p>在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记</p>\n</blockquote>\n<p>需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>maven publish 官网：<a href=\"https://central.sonatype.org/\">maven</a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>首先，需要登陆这个官网。可以直接用 <strong>github</strong> 账号，这样后面会省一些事情（namespace）</p>\n<h3 id=\"必要准备：\"><a href=\"#必要准备：\" class=\"headerlink\" title=\"必要准备：\"></a>必要准备：</h3><ol>\n<li>你的项目build后的jar</li>\n<li>你的项目build后的源码（source）jar</li>\n<li>你的项目的java doc</li>\n<li>你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述</li>\n<li>以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件</li>\n<li>将以上所有文件打包在一个zip中。文件结构需要与 groupId -&gt; artifactId -&gt; version 的结构相吻合</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>登陆<a href=\"https://central.sonatype.org/\">maven官网</a> （建议使用github账号直登）</li>\n<li>打开右上角个人信息里面的 <strong>View Deploy</strong> <img src=\"/unify%5Cmaven_upload%5Cimage.png\" alt=\"View Deploy\"></li>\n<li>此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证<br><img src=\"/unify%5Cmaven_upload%5Cimage-1.png\" alt=\"alt text\"></li>\n<li>在Deployments页面，就可以看到你当前所有的deploy了</li>\n<li>点击右上角的Publish Deployment<br><img src=\"/unify%5Cmaven_upload%5Cimage-2.png\" alt=\"alt text\"><br>会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。</li>\n<li>deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了</li>\n</ol>\n<h2 id=\"一些坑点\"><a href=\"#一些坑点\" class=\"headerlink\" title=\"一些坑点\"></a>一些坑点</h2><p>主要坑点其实都集中在打zip包中。</p>\n<ol>\n<li><p>zip包中文件需要按照groupId -&gt; artifactId -&gt; version 的结构来放置。<br> 比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个<code>com.zip</code>,</p>\n</li>\n<li><p>关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    encryptFile(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encryptFile</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt file</span></span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">MD5</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">SHA_1</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;SHA-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">        File[] files = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> f.getName();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = Files.readAllBytes(f.toPath());</span><br><span class=\"line\">                MD5.update(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] digest = MD5.digest();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">newFileName</span> <span class=\"operator\">=</span> fileName + File.separator + <span class=\"string\">&quot;md5&quot;</span> + File.separator + name + <span class=\"string\">&quot;.md5&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">md5Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\"></span><br><span class=\"line\">                SHA_1.update(bytes);</span><br><span class=\"line\">                digest = SHA_1.digest();</span><br><span class=\"line\">                newFileName = fileName + File.separator + <span class=\"string\">&quot;sha1&quot;</span> + File.separator + name + <span class=\"string\">&quot;.sha1&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">sha1Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">byteArrToHexStr</span><span class=\"params\">(<span class=\"type\">byte</span>[] digest)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">byte</span> b : digest) &#123;</span><br><span class=\"line\">        sb.append(String.format(<span class=\"string\">&quot;%02x&quot;</span>, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最大坑点，gpg加密</strong><br>首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的<br>关于GPG，可以在<a href=\"https://gnupg.org/download/index.html#sec-1-2\">这里</a>下载。<br>下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --version # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --list-keys # 查看当前所有的key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">加密文件</span></span><br><span class=\"line\">gpg -ab myfile.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。<br>至此，我们的打包工作完成，zip包中所有的东西均已准备完成。<br>但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。<br>因此，我们还需要进行一步操作，那就是上传我们自己的<code>公钥(publicKey)</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首先，查询我们密钥的公钥</span></span><br><span class=\"line\">gpg --list-keys</span><br><span class=\"line\"></span><br><span class=\"line\">我们会得到类似下面的输出：</span><br><span class=\"line\">pub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]</span><br><span class=\"line\">      AAA80322283FDD52B363D36E4F9B3F67BEDB9576</span><br><span class=\"line\">uid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">sub   xxxx 2025-03-30 [E] [expires: 2027-03-30]</span><br><span class=\"line\"></span><br><span class=\"line\">其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。</span><br><span class=\"line\">gpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传公钥操作：</span></span><br><span class=\"line\"> gpg --keyserver keyserver.ubuntu.com --send-keys $&#123;你自己的公钥&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。<br>最后，看到这个状态即表示上传成功，okkk<br><img src=\"/unify%5Cmaven_upload%5Cimage-3.png\" alt=\"alt text\"></p>\n","length":1370,"excerpt":"<blockquote>\n<p>在尝试将自己的项目推送到maven仓库时，遇到并解决了很多坑点，特此来记一下笔记</p>\n</blockquote>\n<p>需要提前声明一下，推送maven仓库，官方有很多中方法，比如使用build插件（maven plugin， gradle plugin），API等等，我这次是直接手手动在页面上上传的。</p>","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>maven publish 官网：<a href=\"https://central.sonatype.org/\">maven</a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>首先，需要登陆这个官网。可以直接用 <strong>github</strong> 账号，这样后面会省一些事情（namespace）</p>\n<h3 id=\"必要准备：\"><a href=\"#必要准备：\" class=\"headerlink\" title=\"必要准备：\"></a>必要准备：</h3><ol>\n<li>你的项目build后的jar</li>\n<li>你的项目build后的源码（source）jar</li>\n<li>你的项目的java doc</li>\n<li>你的项目maven build后的pom，并且pom中需要尽可能详细的填写一些个人信息以及描述</li>\n<li>以上每一份文件，都需要附带对应的一份md5，sha1，gpg加密文件</li>\n<li>将以上所有文件打包在一个zip中。文件结构需要与 groupId -&gt; artifactId -&gt; version 的结构相吻合</li>\n</ol>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>登陆<a href=\"https://central.sonatype.org/\">maven官网</a> （建议使用github账号直登）</li>\n<li>打开右上角个人信息里面的 <strong>View Deploy</strong> <img src=\"/unify%5Cmaven_upload%5Cimage.png\" alt=\"View Deploy\"></li>\n<li>此时会看到页面上有两个框，一个NameSpace，一个Deployment。其中，Namespace是类似域名的东西，相当于你需要有一个自己的专属域名。如果你是使用github账号登陆的话，那么这里会自动给你一个validate的github的io域名，可以直接使用。如果没有，那需要自己申请域名然后来这里验证<br><img src=\"/unify%5Cmaven_upload%5Cimage-1.png\" alt=\"alt text\"></li>\n<li>在Deployments页面，就可以看到你当前所有的deploy了</li>\n<li>点击右上角的Publish Deployment<br><img src=\"/unify%5Cmaven_upload%5Cimage-2.png\" alt=\"alt text\"><br>会出现一个form表单。填写完标题，description，再加上刚才打包的zip提交上去即可完成。</li>\n<li>deployment会经过validating的阶段。等validate完成后，就可以对当前的deployment进行发布（publish）了</li>\n</ol>\n<h2 id=\"一些坑点\"><a href=\"#一些坑点\" class=\"headerlink\" title=\"一些坑点\"></a>一些坑点</h2><p>主要坑点其实都集中在打zip包中。</p>\n<ol>\n<li><p>zip包中文件需要按照groupId -&gt; artifactId -&gt; version 的结构来放置。<br> 比如我的项目groupId是 com.baidu, artifactId 是 search_demo, version 是 0.1.0，那么，首先需要建立一个com文件夹，下面再来一个baidu文件夹，然后再来一个search_demo文件夹，最后再来个0.1.0文件夹，最后把之前提到的所有东西放在这个version文件夹中。然后，对最外面的com文件夹进行打zip包，最后可能得到一个<code>com.zip</code>,</p>\n</li>\n<li><p>关于md5  sha1加密文件，没什么好说的，我是自己写了段代码来执行的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    encryptFile(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encryptFile</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt file</span></span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">MD5</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">MessageDigest</span> <span class=\"variable\">SHA_1</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;SHA-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(fileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">        File[] files = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.isFile()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> f.getName();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = Files.readAllBytes(f.toPath());</span><br><span class=\"line\">                MD5.update(bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] digest = MD5.digest();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">newFileName</span> <span class=\"operator\">=</span> fileName + File.separator + <span class=\"string\">&quot;md5&quot;</span> + File.separator + name + <span class=\"string\">&quot;.md5&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">md5Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), md5Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\"></span><br><span class=\"line\">                SHA_1.update(bytes);</span><br><span class=\"line\">                digest = SHA_1.digest();</span><br><span class=\"line\">                newFileName = fileName + File.separator + <span class=\"string\">&quot;sha1&quot;</span> + File.separator + name + <span class=\"string\">&quot;.sha1&quot;</span>;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">sha1Content</span> <span class=\"operator\">=</span> byteArrToHexStr(digest);</span><br><span class=\"line\">                Files.write(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(newFileName).toPath(), sha1Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">byteArrToHexStr</span><span class=\"params\">(<span class=\"type\">byte</span>[] digest)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">byte</span> b : digest) &#123;</span><br><span class=\"line\">        sb.append(String.format(<span class=\"string\">&quot;%02x&quot;</span>, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>最大坑点，gpg加密</strong><br>首先说一句，如果是在windows系统操作，不要用下载的gpg图形化操作界面。这个界面虽然很直观，但是加密出来的文件后缀是GPG格式的，然而maven那边要求的是ASC格式的。因为我对于这个加密不太了解，所以不太清楚区别以及如何互相转化，反证用图形化界面弄出来的maven不会识别的<br>关于GPG，可以在<a href=\"https://gnupg.org/download/index.html#sec-1-2\">这里</a>下载。<br>下载后，进入我们存放上传文件的文件夹，然后打开命令行，执行下列命令</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --version # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --gen-key # 生成一个key，这一步需要填写自己的名字，email，并且需要设置一个密码（passphrase）</span><br><span class=\"line\"></span><br><span class=\"line\">gpg --list-keys # 查看当前所有的key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">加密文件</span></span><br><span class=\"line\">gpg -ab myfile.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里，参数 -a 表示生成ASCII的输出，即asc文件。 -b表示生成一个文件存放签名信息</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们就会得到一个gpg签名过的文件： myfile.java.asc。把这个文件放在zip包与源码同级目录下即可。<br>至此，我们的打包工作完成，zip包中所有的东西均已准备完成。<br>但还有一件事，就是我们刚才生成的密钥对，目前是只有我们知道pub公钥的，别人没有的，因此，别人拿到你的签名文件也无法识别，无法解密，这会导致你上传的project在maven验证失败。<br>因此，我们还需要进行一步操作，那就是上传我们自己的<code>公钥(publicKey)</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">首先，查询我们密钥的公钥</span></span><br><span class=\"line\">gpg --list-keys</span><br><span class=\"line\"></span><br><span class=\"line\">我们会得到类似下面的输出：</span><br><span class=\"line\">pub   xxxxx 2025-03-30 [SC] [expires: 2027-03-30]</span><br><span class=\"line\">      AAA80322283FDD52B363D36E4F9B3F67BEDB9576</span><br><span class=\"line\">uid           xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\">sub   xxxx 2025-03-30 [E] [expires: 2027-03-30]</span><br><span class=\"line\"></span><br><span class=\"line\">其中我没有屏蔽的AAA80322283FDD52B363D36E4F9B3F67BEDB9576就是公钥，我们是可以把这个分享给别人的。</span><br><span class=\"line\">gpg还有一些公共服务器来分享这些公钥，并且maven就是在这里获取公钥进而来识别你签名文件的。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传公钥操作：</span></span><br><span class=\"line\"> gpg --keyserver keyserver.ubuntu.com --send-keys $&#123;你自己的公钥&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上传完毕公钥完毕后，我们就可以去maven那边来上传我们的zip并且publish我们的项目了。<br>最后，看到这个状态即表示上传成功，okkk<br><img src=\"/unify%5Cmaven_upload%5Cimage-3.png\" alt=\"alt text\"></p>"},{"title":"springboot 3.4.4 引入mybatisplus时产生的版本冲突问题","date":"2025-06-03T06:25:48.000Z","_content":"\n\n**Invalid value type for attribute 'factoryBeanObjectType': java.lang.String**\n[项目地址](https://github.com/voidvvv/kz_utils)\n<!--more-->\n\n这个错误是使用版本不正确导致的。\n我的项目使用的springboot版本是3.4.4比较新的3.x：\n```xml\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.4.4</version>\n\n```\nmybatis使用的版本是\n```xml\n\t\t\t<groupId>com.baomidou</groupId>\n\t\t\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t\t\t<version>3.5.5</version>\n```\n此时会出现版本依赖错误，该版本中的mybatis-spring依赖版本是2.1.2，这个是无法兼容我们的springboot版本的。需要我们手动排除后手动指定：\n```xml\n\t\t<dependency>\n\t\t\t<groupId>com.baomidou</groupId>\n\t\t\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t\t\t<version>3.5.5</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t<version>3.0.3</version>\n\t\t</dependency>\n\n```\n\n","source":"_posts/mybatisplus_springboot_3_x.md","raw":"---\ntitle: springboot 3.4.4 引入mybatisplus时产生的版本冲突问题\ndate: 2025-06-03T22:25:48+08:00\ncategories:\n- springboot3\n- mybatis\n---\n\n\n**Invalid value type for attribute 'factoryBeanObjectType': java.lang.String**\n[项目地址](https://github.com/voidvvv/kz_utils)\n<!--more-->\n\n这个错误是使用版本不正确导致的。\n我的项目使用的springboot版本是3.4.4比较新的3.x：\n```xml\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.4.4</version>\n\n```\nmybatis使用的版本是\n```xml\n\t\t\t<groupId>com.baomidou</groupId>\n\t\t\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t\t\t<version>3.5.5</version>\n```\n此时会出现版本依赖错误，该版本中的mybatis-spring依赖版本是2.1.2，这个是无法兼容我们的springboot版本的。需要我们手动排除后手动指定：\n```xml\n\t\t<dependency>\n\t\t\t<groupId>com.baomidou</groupId>\n\t\t\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t\t\t<version>3.5.5</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t<version>3.0.3</version>\n\t\t</dependency>\n\n```\n\n","slug":"mybatisplus_springboot_3_x","published":1,"updated":"2025-06-03T14:31:09.642Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7o001w1wu1fx9p2yl4","content":"<p><strong>Invalid value type for attribute ‘factoryBeanObjectType’: java.lang.String</strong><br><a href=\"https://github.com/voidvvv/kz_utils\">项目地址</a></p>\n<span id=\"more\"></span>\n\n<p>这个错误是使用版本不正确导致的。<br>我的项目使用的springboot版本是3.4.4比较新的3.x：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mybatis使用的版本是</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时会出现版本依赖错误，该版本中的mybatis-spring依赖版本是2.1.2，这个是无法兼容我们的springboot版本的。需要我们手动排除后手动指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","length":167,"excerpt":"<p><strong>Invalid value type for attribute ‘factoryBeanObjectType’: java.lang.String</strong><br><a href=\"https://github.com/voidvvv/kz_utils\">项目地址</a></p>","more":"<p>这个错误是使用版本不正确导致的。<br>我的项目使用的springboot版本是3.4.4比较新的3.x：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mybatis使用的版本是</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时会出现版本依赖错误，该版本中的mybatis-spring依赖版本是2.1.2，这个是无法兼容我们的springboot版本的。需要我们手动排除后手动指定：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"OpenGL 学习 (1)","date":"2024-03-02T13:25:55.000Z","_content":"![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [准备工作](#准备工作)\n  - [GLFW](#glfw)\n    - [CMake](#cmake)\n    - [编译](#编译)\n  - [我们的第一个工程](#我们的第一个工程)\n    - [链接](#链接)\n  - [GLAD](#glad)\n    - [配置GLAD库](#配置glad库)\n- [Hello World](#hello-world)\n  - [初始化](#初始化)\n  - [窗口](#窗口)\n  - [GLAD](#glad-1)\n  - [视口](#视口)\n  - [窗口](#窗口-1)\n  - [释放资源](#释放资源)\n  - [输入](#输入)\n  - [渲染](#渲染)\n\n\n> 参考资料： https://learnopengl-cn.github.io/\n\n# 准备工作\n使用 **Windows10** ， 编程语言: **C++**，IDE: **Visual studio 2022**\n\n在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。\n\n幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。你可以随意选用其他类似的库，大多数库的配置方法和GLFW差不多。\n\n## GLFW\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，对我们来说这就够了。\n\n本节和下一节的目标是把GLFW环境配好能且能够跑起来，并保证它正确创建了OpenGL上下文并显示出一个简单的窗口来让我们随意使用。这篇教程会一步步教你如何获取、编译、链接GLFW库。我们使用的是Microsoft Visual Studio 2019 IDE（操作过程在更新的Visual Studio都是相同的）。如果你用的不是Visual Studio（或者用的是它的旧版本）请不要担心，大多数IDE上的操作都是类似的。\n[GLFW下载地址](https://www.glfw.org/download.html)\n\n下载源码包之后，将其解压并打开。我们只需要里面的这些内容：\n\n- 编译生成的库\n- include文件夹\n\n从源代码编译库可以保证生成的库完全适合你的操作系统和CPU的，而预编译的二进制文件则并非总是提供（有时候，即便提供了预编译的二进制文件，也可能不适用于您的系统）。开放源代码所产生问题在于：并不是每个人都用相同的IDE或者构建系统来搞开发，因而提供的项目/解决方案文件可能和一些人的IDE不兼容。所以人们必须使用给定的.c/.cpp和.h/.hpp文件来自己建立项目/解决方案，这是一项很枯燥的工作。但因此也诞生了一个叫做CMake的工具。\n\n### CMake\nCMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, Code::Blocks, Eclipse）生成不同IDE的工程文件。这允许我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。首先，我们需要从这里下载安装CMake。\n\n当CMake安装成功后，你可以选择从命令行或者GUI启动CMake，由于我们不想让事情变得太过复杂，我们选择用GUI。CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择GLFW的源代码的根目录，然后我们新建一个 build 文件夹，选中作为目标目录。\n\n![CMAKE](2024-03-02T215348.png)\n\n在设置完源代码目录和目标目录之后，点击Configure(设置)按钮，让CMake读取设置和源代码。我们接下来需要选择工程的生成器，由于我们使用的是Visual Studio 2019，我们选择 Visual Studio 16 选项（因为Visual Studio 2019的内部版本号是16）。CMake会显示可选的编译选项用来配置最终生成的库。这里我们使用默认设置，并再次点击Configure(设置)按钮保存设置。保存之后，点击Generate(生成)按钮，生成的工程文件会在你的build文件夹中。\n\n### 编译\n在build文件夹里可以找到GLFW.sln文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击Build Solution(生成解决方案)按钮，然后在build/src/Debug文件夹内就会出现我们编译出的库文件glfw3.lib。\n\n库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：\n\n- 找到IDE或者编译器的/lib和/include文件夹，添加GLFW的include文件夹里的文件到IDE的/include文件夹里去。用类似的方法，将glfw3.lib添加到/lib文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。\n- 推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含Libs和Include文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。\n完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！\n\n\n## 我们的第一个工程\n首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择Empty Project(空项目)（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：\n![first project](2024-03-02T215643.png)\n\n现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！\n\n### 链接\n为了使我们的程序使用GLFW，我们需要把GLFW库链接(Link)进工程。这可以通过在链接器的设置里指定我们要使用glfw3.lib来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。\n\n要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择VC++ Directories(VC++ 目录)选项卡（如下图）。在下面的两栏添加目录：\n![2024-03-02T215724](2024-03-02T215724.png)\n这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择选项，之后会出现类似下面这幅图的界面，图是选择Include Directories(包含目录)时的界面：\n![2024-03-02T215738](2024-03-02T215738.png)\n这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的Include文件夹加进路径中，你就可以使用<GLFW/..>来引用头文件。库文件夹也是一样的。\n\n现在VS可以找到所需的所有文件了。最后需要在Linker(链接器)选项卡里的Input(输入)选项卡里添加glfw3.lib这个文件：\n![2024-03-02T215801](2024-03-02T215801.png)\n\n要链接一个库我们必须告诉链接器它的文件名。库名字是glfw3.lib，我们把它加到Additional Dependencies(附加依赖项)字段中(手动或者使用选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。\n\n- Windows上的OpenGL库<br>\n    如果你是Windows平台，opengl32.lib已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将opengl32.lib添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是opengl32.lib（和32位版本一样），虽然很奇怪但确实如此。\n- Linux上的OpenGL库<br>\n    在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，这部分因平台而异（而且我也不熟悉Linux）就不仔细讲解了\n\n接下来，如果你已经添加GLFW和OpenGL库到连接器设置中，你可以用如下方式添加GLFW头文件：\n``` c++\n#include <GLFW\\glfw3.h>\n```\nGLFW的安装与配置就到此为止。\n\n## GLAD\n到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：\n```c++\n// 定义函数原型\ntypedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);\n// 找到正确的函数并赋值给函数指针\nGL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress(\"glGenBuffers\");\n// 现在函数可以被正常调用了\nGLuint buffer;\nglGenBuffers(1, &buffer);\n```\n你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。\n\n### 配置GLAD库\nGLAD是一个[开源](https://github.com/Dav1dde/glad)的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。\n\n打开GLAD的[在线服务](https://glad.dav1d.de/)，将语言(Language)设置为C/C++，在API选项中，选择3.3以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为Core，并且保证选中了生成加载器(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。\n\nGLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。将两个头文件目录（glad和KHR）复制到你的Include文件夹中（或者增加一个额外的项目指向这些目录），<span style='color:red'>**并添加glad.c文件到你的工程中**, 记住这一步，非常重要，否则会导致无法成功启动</span> 。\n\n经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：\n`#include <glad/glad.h> `\n\n点击编译按钮应该不会给你提示任何的错误，到这里我们就已经准备好继续学习下一节去真正使用GLFW和GLAD来设置OpenGL上下文并创建一个窗口了。\n\n# Hello World\n让我们试试能不能让GLFW正常工作。首先，新建一个.cpp文件，然后把下面的代码粘贴到该文件的最前面。\n```c++\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n```\n<div class=\"note warning\">请确认是在包含GLFW的头文件之前包含了GLAD的头文件。GLAD的头文件包含了正确的OpenGL头文件（例如GL/gl.h），所以需要在其它依赖于OpenGL的头文件之前包含GLAD。</div>\n\n## 初始化\n首先我们需要初始化OpenGL\n```c++\nint main()\n{\n    // 初始化GLFW\n    glfwInit();\n    // glfwWindowHint函数来配置GLFW, \n    // 由于本站的教程都是基于OpenGL 3.3版本展开讨论的，所以我们需要告诉GLFW我们要使用的OpenGL版本是3.3，这样GLFW会在创建OpenGL上下文时做出适当的调整。\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    // 上面注释掉的代码是在Mac OS 上使用时，需要的代码。\n\n    return 0;\n}\n```\n\n## 窗口\n接下来，我们需要创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。类型为`GLFWwindow`\n```c++\nGLFWwindow* window = glfwCreateWindow(800, 600, \"LearnOpenGL\", NULL, NULL);\nif (window == NULL)\n{\n    std::cout << \"Failed to create GLFW window\" << std::endl;\n    glfwTerminate();\n    return -1;\n}\nglfwMakeContextCurrent(window);\n```\n<div class=\"note info\">glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里我们使用\"LearnOpenGL\"，当然你也可以使用你喜欢的名称。最后两个参数我们暂时忽略。这个函数将会返回一个GLFWwindow对象，我们会在其它的GLFW操作中使用到。创建完窗口我们就可以通知GLFW将我们窗口的上下文设置为当前线程的主上下文了。</div>\n\n## GLAD\n在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。\n```c++\nif (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n{\n    std::cout << \"Failed to initialize GLAD\" << std::endl;\n    return -1;\n}\n```\n\n## 视口\n在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用glViewport函数来设置窗口的维度(Dimension)：\n```C++\nglViewport(0, 0, 800, 600);\n```\nglViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。\n\n我们实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。\n\n{% note info no-icon %}\nOpenGL幕后使用glViewport中定义的位置和宽高进行2D坐标的转换，将OpenGL中的位置坐标转换为你的屏幕坐标。例如，OpenGL中的坐标(-0.5, 0.5)有可能（最终）被映射为屏幕中的坐标(200,450)。注意，处理过的OpenGL坐标范围只为-1到1，因此我们事实上将(-1到1)范围内的坐标映射到(0, 800)和(0, 600)。\n{% endnote %}\n\n然而，当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用。这个回调函数的原型如下：\n\n```c++\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\n```\n<div class=\"note default\">这个函数类似于 `LIBGdx`中，`Screen`组件中的reSize方法，需要重新计算视窗大小</div>\n\n这个帧缓冲大小函数需要一个GLFWwindow作为它的第一个参数，以及两个整数表示窗口的新维度。每当窗口改变大小，GLFW会调用这个函数并填充相应的参数供你处理。这里我们实现这个函数：\n\n```c++\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0, 0, width, height);\n}\n```\n\n我们还需要注册这个函数，告诉GLFW我们希望每当窗口调整大小的时候调用这个函数：\n```c++\nglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n```\n这里需要手动使用上面的代码将窗口回调方法注册到openGL里面。\n当窗口被第一次显示的时候`framebuffer_size_callback`也会被调用(初始化)。对于视网膜(Retina)显示屏，width和height都会明显比原输入值更高一点。\n\n我们还可以将我们的函数注册到其它很多的回调函数中。比如说，我们可以创建一个回调函数来处理手柄输入变化，处理错误消息等。我们会在创建窗口之后，渲染循环初始化之前注册这些回调函数。\n\n## 窗口\n我们可不希望只绘制一个图像之后我们的应用程序就立即退出并关闭窗口。我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：\n```c++\nwhile(!glfwWindowShouldClose(window))\n{\n    glfwSwapBuffers(window);\n    glfwPollEvents();    \n}\n```\n\n- `glfwWindowShouldClose`函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回true，渲染循环将停止运行，之后我们就可以关闭应用程序。\n- `glfwPollEvents`函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。\n- `glfwSwapBuffers`函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。\n\n{% note info no-icon %}\n双缓冲(Double Buffer)\n\n应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n{% endnote %}\n\n## 释放资源\n当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来完成。\n```c++\nglfwTerminate();\nreturn 0;\n```\n这样便能清理所有的资源并正确地退出应用程序。现在你可以尝试编译并运行你的应用程序了，如果没做错的话，你将会看到如下的输出：\n![2024-03-03T001348](2024-03-03T001348.png)\n\n如果你看见了一个非常无聊的黑色窗口，那么就对了！我们的Hello World至此成功。\n\n如果程序编译有问题，请先检查连接器选项是否正确，IDE中是否导入了正确的目录（前面教程解释过）。并且请确认你的代码是否正确.\n\n## 输入\n我们同样也希望能够在GLFW中实现一些输入控制，这可以通过使用GLFW的几个输入函数来完成。我们将会使用GLFW的`glfwGetKey`函数，它需要一个窗口以及一个按键作为输入。这个函数将会返回这个按键是否正在被按下。我们将创建一个`processInput`函数来让所有的输入代码保持整洁。\n```c++\nvoid processInput(GLFWwindow *window)\n{\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n```\n这里我们检查用户是否按下了返回键(Esc)（如果没有按下，glfwGetKey将会返回GLFW_RELEASE。如果用户的确按下了返回键，我们将通过使用glfwSetwindowShouldClose把WindowShouldClose属性设置为 true来关闭GLFW。下一次while循环的条件检测将会失败，程序将关闭。\n\n这里需要记住 `glfwGetKey` 函数\n\n我们接下来在渲染循环的每一个迭代中调用`processInput`：\n```c++\nwhile (!glfwWindowShouldClose(window))\n{\n    processInput(window);\n\n    glfwSwapBuffers(window);\n    glfwPollEvents();\n}\n```\n\n这就给我们一个非常简单的方式来检测特定的键是否被按下，并在每一帧做出处理。\n\n## 渲染\n我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：\n```c++\n// 渲染循环\nwhile(!glfwWindowShouldClose(window))\n{\n    // 输入\n    processInput(window);\n\n    // 渲染指令\n    ...\n\n    // 检查并调用事件，交换缓冲\n    glfwPollEvents();\n    glfwSwapBuffers(window);\n}\n```\n\n为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用`glClear`函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有`GL_COLOR_BUFFER_BIT`，`GL_DEPTH_BUFFER_BIT`和`GL_STENCIL_BUFFER_BIT`。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。\n\n```c++\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。\n\n![2024-03-03T004349](2024-03-03T004349.png)\n\n{% note default no-icon %}\n你应该能够回忆起来我们在 OpenGL 这节教程的内容，glClearColor函数是一个状态设置函数，而glClear函数则是一个状态使用的函数，它使用了当前的状态来获取应该清除为的颜色。\n{% endnote %}","source":"_posts/open-gl.md","raw":"---\ntitle: OpenGL 学习 (1)\ndate: 2024-03-02 21:25:55\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [准备工作](#准备工作)\n  - [GLFW](#glfw)\n    - [CMake](#cmake)\n    - [编译](#编译)\n  - [我们的第一个工程](#我们的第一个工程)\n    - [链接](#链接)\n  - [GLAD](#glad)\n    - [配置GLAD库](#配置glad库)\n- [Hello World](#hello-world)\n  - [初始化](#初始化)\n  - [窗口](#窗口)\n  - [GLAD](#glad-1)\n  - [视口](#视口)\n  - [窗口](#窗口-1)\n  - [释放资源](#释放资源)\n  - [输入](#输入)\n  - [渲染](#渲染)\n\n\n> 参考资料： https://learnopengl-cn.github.io/\n\n# 准备工作\n使用 **Windows10** ， 编程语言: **C++**，IDE: **Visual studio 2022**\n\n在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。\n\n幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。你可以随意选用其他类似的库，大多数库的配置方法和GLFW差不多。\n\n## GLFW\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，对我们来说这就够了。\n\n本节和下一节的目标是把GLFW环境配好能且能够跑起来，并保证它正确创建了OpenGL上下文并显示出一个简单的窗口来让我们随意使用。这篇教程会一步步教你如何获取、编译、链接GLFW库。我们使用的是Microsoft Visual Studio 2019 IDE（操作过程在更新的Visual Studio都是相同的）。如果你用的不是Visual Studio（或者用的是它的旧版本）请不要担心，大多数IDE上的操作都是类似的。\n[GLFW下载地址](https://www.glfw.org/download.html)\n\n下载源码包之后，将其解压并打开。我们只需要里面的这些内容：\n\n- 编译生成的库\n- include文件夹\n\n从源代码编译库可以保证生成的库完全适合你的操作系统和CPU的，而预编译的二进制文件则并非总是提供（有时候，即便提供了预编译的二进制文件，也可能不适用于您的系统）。开放源代码所产生问题在于：并不是每个人都用相同的IDE或者构建系统来搞开发，因而提供的项目/解决方案文件可能和一些人的IDE不兼容。所以人们必须使用给定的.c/.cpp和.h/.hpp文件来自己建立项目/解决方案，这是一项很枯燥的工作。但因此也诞生了一个叫做CMake的工具。\n\n### CMake\nCMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, Code::Blocks, Eclipse）生成不同IDE的工程文件。这允许我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。首先，我们需要从这里下载安装CMake。\n\n当CMake安装成功后，你可以选择从命令行或者GUI启动CMake，由于我们不想让事情变得太过复杂，我们选择用GUI。CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择GLFW的源代码的根目录，然后我们新建一个 build 文件夹，选中作为目标目录。\n\n![CMAKE](2024-03-02T215348.png)\n\n在设置完源代码目录和目标目录之后，点击Configure(设置)按钮，让CMake读取设置和源代码。我们接下来需要选择工程的生成器，由于我们使用的是Visual Studio 2019，我们选择 Visual Studio 16 选项（因为Visual Studio 2019的内部版本号是16）。CMake会显示可选的编译选项用来配置最终生成的库。这里我们使用默认设置，并再次点击Configure(设置)按钮保存设置。保存之后，点击Generate(生成)按钮，生成的工程文件会在你的build文件夹中。\n\n### 编译\n在build文件夹里可以找到GLFW.sln文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击Build Solution(生成解决方案)按钮，然后在build/src/Debug文件夹内就会出现我们编译出的库文件glfw3.lib。\n\n库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：\n\n- 找到IDE或者编译器的/lib和/include文件夹，添加GLFW的include文件夹里的文件到IDE的/include文件夹里去。用类似的方法，将glfw3.lib添加到/lib文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。\n- 推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含Libs和Include文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。\n完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！\n\n\n## 我们的第一个工程\n首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择Empty Project(空项目)（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：\n![first project](2024-03-02T215643.png)\n\n现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！\n\n### 链接\n为了使我们的程序使用GLFW，我们需要把GLFW库链接(Link)进工程。这可以通过在链接器的设置里指定我们要使用glfw3.lib来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。\n\n要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择VC++ Directories(VC++ 目录)选项卡（如下图）。在下面的两栏添加目录：\n![2024-03-02T215724](2024-03-02T215724.png)\n这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择选项，之后会出现类似下面这幅图的界面，图是选择Include Directories(包含目录)时的界面：\n![2024-03-02T215738](2024-03-02T215738.png)\n这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的Include文件夹加进路径中，你就可以使用<GLFW/..>来引用头文件。库文件夹也是一样的。\n\n现在VS可以找到所需的所有文件了。最后需要在Linker(链接器)选项卡里的Input(输入)选项卡里添加glfw3.lib这个文件：\n![2024-03-02T215801](2024-03-02T215801.png)\n\n要链接一个库我们必须告诉链接器它的文件名。库名字是glfw3.lib，我们把它加到Additional Dependencies(附加依赖项)字段中(手动或者使用选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。\n\n- Windows上的OpenGL库<br>\n    如果你是Windows平台，opengl32.lib已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将opengl32.lib添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是opengl32.lib（和32位版本一样），虽然很奇怪但确实如此。\n- Linux上的OpenGL库<br>\n    在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，这部分因平台而异（而且我也不熟悉Linux）就不仔细讲解了\n\n接下来，如果你已经添加GLFW和OpenGL库到连接器设置中，你可以用如下方式添加GLFW头文件：\n``` c++\n#include <GLFW\\glfw3.h>\n```\nGLFW的安装与配置就到此为止。\n\n## GLAD\n到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：\n```c++\n// 定义函数原型\ntypedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);\n// 找到正确的函数并赋值给函数指针\nGL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress(\"glGenBuffers\");\n// 现在函数可以被正常调用了\nGLuint buffer;\nglGenBuffers(1, &buffer);\n```\n你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。\n\n### 配置GLAD库\nGLAD是一个[开源](https://github.com/Dav1dde/glad)的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。\n\n打开GLAD的[在线服务](https://glad.dav1d.de/)，将语言(Language)设置为C/C++，在API选项中，选择3.3以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为Core，并且保证选中了生成加载器(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。\n\nGLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。将两个头文件目录（glad和KHR）复制到你的Include文件夹中（或者增加一个额外的项目指向这些目录），<span style='color:red'>**并添加glad.c文件到你的工程中**, 记住这一步，非常重要，否则会导致无法成功启动</span> 。\n\n经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：\n`#include <glad/glad.h> `\n\n点击编译按钮应该不会给你提示任何的错误，到这里我们就已经准备好继续学习下一节去真正使用GLFW和GLAD来设置OpenGL上下文并创建一个窗口了。\n\n# Hello World\n让我们试试能不能让GLFW正常工作。首先，新建一个.cpp文件，然后把下面的代码粘贴到该文件的最前面。\n```c++\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n```\n<div class=\"note warning\">请确认是在包含GLFW的头文件之前包含了GLAD的头文件。GLAD的头文件包含了正确的OpenGL头文件（例如GL/gl.h），所以需要在其它依赖于OpenGL的头文件之前包含GLAD。</div>\n\n## 初始化\n首先我们需要初始化OpenGL\n```c++\nint main()\n{\n    // 初始化GLFW\n    glfwInit();\n    // glfwWindowHint函数来配置GLFW, \n    // 由于本站的教程都是基于OpenGL 3.3版本展开讨论的，所以我们需要告诉GLFW我们要使用的OpenGL版本是3.3，这样GLFW会在创建OpenGL上下文时做出适当的调整。\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    // 上面注释掉的代码是在Mac OS 上使用时，需要的代码。\n\n    return 0;\n}\n```\n\n## 窗口\n接下来，我们需要创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。类型为`GLFWwindow`\n```c++\nGLFWwindow* window = glfwCreateWindow(800, 600, \"LearnOpenGL\", NULL, NULL);\nif (window == NULL)\n{\n    std::cout << \"Failed to create GLFW window\" << std::endl;\n    glfwTerminate();\n    return -1;\n}\nglfwMakeContextCurrent(window);\n```\n<div class=\"note info\">glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里我们使用\"LearnOpenGL\"，当然你也可以使用你喜欢的名称。最后两个参数我们暂时忽略。这个函数将会返回一个GLFWwindow对象，我们会在其它的GLFW操作中使用到。创建完窗口我们就可以通知GLFW将我们窗口的上下文设置为当前线程的主上下文了。</div>\n\n## GLAD\n在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。\n```c++\nif (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n{\n    std::cout << \"Failed to initialize GLAD\" << std::endl;\n    return -1;\n}\n```\n\n## 视口\n在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用glViewport函数来设置窗口的维度(Dimension)：\n```C++\nglViewport(0, 0, 800, 600);\n```\nglViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。\n\n我们实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。\n\n{% note info no-icon %}\nOpenGL幕后使用glViewport中定义的位置和宽高进行2D坐标的转换，将OpenGL中的位置坐标转换为你的屏幕坐标。例如，OpenGL中的坐标(-0.5, 0.5)有可能（最终）被映射为屏幕中的坐标(200,450)。注意，处理过的OpenGL坐标范围只为-1到1，因此我们事实上将(-1到1)范围内的坐标映射到(0, 800)和(0, 600)。\n{% endnote %}\n\n然而，当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用。这个回调函数的原型如下：\n\n```c++\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\n```\n<div class=\"note default\">这个函数类似于 `LIBGdx`中，`Screen`组件中的reSize方法，需要重新计算视窗大小</div>\n\n这个帧缓冲大小函数需要一个GLFWwindow作为它的第一个参数，以及两个整数表示窗口的新维度。每当窗口改变大小，GLFW会调用这个函数并填充相应的参数供你处理。这里我们实现这个函数：\n\n```c++\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0, 0, width, height);\n}\n```\n\n我们还需要注册这个函数，告诉GLFW我们希望每当窗口调整大小的时候调用这个函数：\n```c++\nglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n```\n这里需要手动使用上面的代码将窗口回调方法注册到openGL里面。\n当窗口被第一次显示的时候`framebuffer_size_callback`也会被调用(初始化)。对于视网膜(Retina)显示屏，width和height都会明显比原输入值更高一点。\n\n我们还可以将我们的函数注册到其它很多的回调函数中。比如说，我们可以创建一个回调函数来处理手柄输入变化，处理错误消息等。我们会在创建窗口之后，渲染循环初始化之前注册这些回调函数。\n\n## 窗口\n我们可不希望只绘制一个图像之后我们的应用程序就立即退出并关闭窗口。我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：\n```c++\nwhile(!glfwWindowShouldClose(window))\n{\n    glfwSwapBuffers(window);\n    glfwPollEvents();    \n}\n```\n\n- `glfwWindowShouldClose`函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回true，渲染循环将停止运行，之后我们就可以关闭应用程序。\n- `glfwPollEvents`函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。\n- `glfwSwapBuffers`函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。\n\n{% note info no-icon %}\n双缓冲(Double Buffer)\n\n应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。\n{% endnote %}\n\n## 释放资源\n当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来完成。\n```c++\nglfwTerminate();\nreturn 0;\n```\n这样便能清理所有的资源并正确地退出应用程序。现在你可以尝试编译并运行你的应用程序了，如果没做错的话，你将会看到如下的输出：\n![2024-03-03T001348](2024-03-03T001348.png)\n\n如果你看见了一个非常无聊的黑色窗口，那么就对了！我们的Hello World至此成功。\n\n如果程序编译有问题，请先检查连接器选项是否正确，IDE中是否导入了正确的目录（前面教程解释过）。并且请确认你的代码是否正确.\n\n## 输入\n我们同样也希望能够在GLFW中实现一些输入控制，这可以通过使用GLFW的几个输入函数来完成。我们将会使用GLFW的`glfwGetKey`函数，它需要一个窗口以及一个按键作为输入。这个函数将会返回这个按键是否正在被按下。我们将创建一个`processInput`函数来让所有的输入代码保持整洁。\n```c++\nvoid processInput(GLFWwindow *window)\n{\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n```\n这里我们检查用户是否按下了返回键(Esc)（如果没有按下，glfwGetKey将会返回GLFW_RELEASE。如果用户的确按下了返回键，我们将通过使用glfwSetwindowShouldClose把WindowShouldClose属性设置为 true来关闭GLFW。下一次while循环的条件检测将会失败，程序将关闭。\n\n这里需要记住 `glfwGetKey` 函数\n\n我们接下来在渲染循环的每一个迭代中调用`processInput`：\n```c++\nwhile (!glfwWindowShouldClose(window))\n{\n    processInput(window);\n\n    glfwSwapBuffers(window);\n    glfwPollEvents();\n}\n```\n\n这就给我们一个非常简单的方式来检测特定的键是否被按下，并在每一帧做出处理。\n\n## 渲染\n我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：\n```c++\n// 渲染循环\nwhile(!glfwWindowShouldClose(window))\n{\n    // 输入\n    processInput(window);\n\n    // 渲染指令\n    ...\n\n    // 检查并调用事件，交换缓冲\n    glfwPollEvents();\n    glfwSwapBuffers(window);\n}\n```\n\n为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用`glClear`函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有`GL_COLOR_BUFFER_BIT`，`GL_DEPTH_BUFFER_BIT`和`GL_STENCIL_BUFFER_BIT`。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。\n\n```c++\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\n```\n\n注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。\n\n![2024-03-03T004349](2024-03-03T004349.png)\n\n{% note default no-icon %}\n你应该能够回忆起来我们在 OpenGL 这节教程的内容，glClearColor函数是一个状态设置函数，而glClear函数则是一个状态使用的函数，它使用了当前的状态来获取应该清除为的颜色。\n{% endnote %}","slug":"open-gl","published":1,"updated":"2025-03-28T02:05:16.199Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7p001y1wu1dn0734h5","content":"<p><img src=\"/2024/03/02/open-gl/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a><ul>\n<li><a href=\"#glfw\">GLFW</a><ul>\n<li><a href=\"#cmake\">CMake</a></li>\n<li><a href=\"#%E7%BC%96%E8%AF%91\">编译</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B\">我们的第一个工程</a><ul>\n<li><a href=\"#%E9%93%BE%E6%8E%A5\">链接</a></li>\n</ul>\n</li>\n<li><a href=\"#glad\">GLAD</a><ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AEglad%E5%BA%93\">配置GLAD库</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#hello-world\">Hello World</a><ul>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n<li><a href=\"#%E7%AA%97%E5%8F%A3\">窗口</a></li>\n<li><a href=\"#glad-1\">GLAD</a></li>\n<li><a href=\"#%E8%A7%86%E5%8F%A3\">视口</a></li>\n<li><a href=\"#%E7%AA%97%E5%8F%A3-1\">窗口</a></li>\n<li><a href=\"#%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90\">释放资源</a></li>\n<li><a href=\"#%E8%BE%93%E5%85%A5\">输入</a></li>\n<li><a href=\"#%E6%B8%B2%E6%9F%93\">渲染</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考资料： <a href=\"https://learnopengl-cn.github.io/\">https://learnopengl-cn.github.io/</a></p>\n</blockquote>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>使用 <strong>Windows10</strong> ， 编程语言: <strong>C++</strong>，IDE: <strong>Visual studio 2022</strong></p>\n<p>在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。</p>\n<p>幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。你可以随意选用其他类似的库，大多数库的配置方法和GLFW差不多。</p>\n<h2 id=\"GLFW\"><a href=\"#GLFW\" class=\"headerlink\" title=\"GLFW\"></a>GLFW</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，对我们来说这就够了。</p>\n<p>本节和下一节的目标是把GLFW环境配好能且能够跑起来，并保证它正确创建了OpenGL上下文并显示出一个简单的窗口来让我们随意使用。这篇教程会一步步教你如何获取、编译、链接GLFW库。我们使用的是Microsoft Visual Studio 2019 IDE（操作过程在更新的Visual Studio都是相同的）。如果你用的不是Visual Studio（或者用的是它的旧版本）请不要担心，大多数IDE上的操作都是类似的。<br><a href=\"https://www.glfw.org/download.html\">GLFW下载地址</a></p>\n<p>下载源码包之后，将其解压并打开。我们只需要里面的这些内容：</p>\n<ul>\n<li>编译生成的库</li>\n<li>include文件夹</li>\n</ul>\n<p>从源代码编译库可以保证生成的库完全适合你的操作系统和CPU的，而预编译的二进制文件则并非总是提供（有时候，即便提供了预编译的二进制文件，也可能不适用于您的系统）。开放源代码所产生问题在于：并不是每个人都用相同的IDE或者构建系统来搞开发，因而提供的项目&#x2F;解决方案文件可能和一些人的IDE不兼容。所以人们必须使用给定的.c&#x2F;.cpp和.h&#x2F;.hpp文件来自己建立项目&#x2F;解决方案，这是一项很枯燥的工作。但因此也诞生了一个叫做CMake的工具。</p>\n<h3 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h3><p>CMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, Code::Blocks, Eclipse）生成不同IDE的工程文件。这允许我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。首先，我们需要从这里下载安装CMake。</p>\n<p>当CMake安装成功后，你可以选择从命令行或者GUI启动CMake，由于我们不想让事情变得太过复杂，我们选择用GUI。CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择GLFW的源代码的根目录，然后我们新建一个 build 文件夹，选中作为目标目录。</p>\n<p><img src=\"/2024/03/02/open-gl/2024-03-02T215348.png\" alt=\"CMAKE\"></p>\n<p>在设置完源代码目录和目标目录之后，点击Configure(设置)按钮，让CMake读取设置和源代码。我们接下来需要选择工程的生成器，由于我们使用的是Visual Studio 2019，我们选择 Visual Studio 16 选项（因为Visual Studio 2019的内部版本号是16）。CMake会显示可选的编译选项用来配置最终生成的库。这里我们使用默认设置，并再次点击Configure(设置)按钮保存设置。保存之后，点击Generate(生成)按钮，生成的工程文件会在你的build文件夹中。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在build文件夹里可以找到GLFW.sln文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击Build Solution(生成解决方案)按钮，然后在build&#x2F;src&#x2F;Debug文件夹内就会出现我们编译出的库文件glfw3.lib。</p>\n<p>库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：</p>\n<ul>\n<li>找到IDE或者编译器的&#x2F;lib和&#x2F;include文件夹，添加GLFW的include文件夹里的文件到IDE的&#x2F;include文件夹里去。用类似的方法，将glfw3.lib添加到&#x2F;lib文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。</li>\n<li>推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含Libs和Include文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE&#x2F;编译器在哪能找到这些目录。<br>完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！</li>\n</ul>\n<h2 id=\"我们的第一个工程\"><a href=\"#我们的第一个工程\" class=\"headerlink\" title=\"我们的第一个工程\"></a>我们的第一个工程</h2><p>首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择Empty Project(空项目)（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215643.png\" alt=\"first project\"></p>\n<p>现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>为了使我们的程序使用GLFW，我们需要把GLFW库链接(Link)进工程。这可以通过在链接器的设置里指定我们要使用glfw3.lib来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。</p>\n<p>要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择VC++ Directories(VC++ 目录)选项卡（如下图）。在下面的两栏添加目录：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215724.png\" alt=\"2024-03-02T215724\"><br>这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择选项，之后会出现类似下面这幅图的界面，图是选择Include Directories(包含目录)时的界面：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215738.png\" alt=\"2024-03-02T215738\"><br>这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的Include文件夹加进路径中，你就可以使用&lt;GLFW&#x2F;..&gt;来引用头文件。库文件夹也是一样的。</p>\n<p>现在VS可以找到所需的所有文件了。最后需要在Linker(链接器)选项卡里的Input(输入)选项卡里添加glfw3.lib这个文件：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215801.png\" alt=\"2024-03-02T215801\"></p>\n<p>要链接一个库我们必须告诉链接器它的文件名。库名字是glfw3.lib，我们把它加到Additional Dependencies(附加依赖项)字段中(手动或者使用选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。</p>\n<ul>\n<li>Windows上的OpenGL库<br><br>  如果你是Windows平台，opengl32.lib已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将opengl32.lib添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是opengl32.lib（和32位版本一样），虽然很奇怪但确实如此。</li>\n<li>Linux上的OpenGL库<br><br>  在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，这部分因平台而异（而且我也不熟悉Linux）就不仔细讲解了</li>\n</ul>\n<p>接下来，如果你已经添加GLFW和OpenGL库到连接器设置中，你可以用如下方式添加GLFW头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW\\glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>GLFW的安装与配置就到此为止。</p>\n<h2 id=\"GLAD\"><a href=\"#GLAD\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准&#x2F;规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*GL_GENBUFFERS)</span> <span class=\"params\">(GLsizei, GLuint*)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 找到正确的函数并赋值给函数指针</span></span><br><span class=\"line\">GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)<span class=\"built_in\">wglGetProcAddress</span>(<span class=\"string\">&quot;glGenBuffers&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 现在函数可以被正常调用了</span></span><br><span class=\"line\">GLuint buffer;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br></pre></td></tr></table></figure>\n<p>你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。</p>\n<h3 id=\"配置GLAD库\"><a href=\"#配置GLAD库\" class=\"headerlink\" title=\"配置GLAD库\"></a>配置GLAD库</h3><p>GLAD是一个<a href=\"https://github.com/Dav1dde/glad\">开源</a>的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。</p>\n<p>打开GLAD的<a href=\"https://glad.dav1d.de/\">在线服务</a>，将语言(Language)设置为C&#x2F;C++，在API选项中，选择3.3以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为Core，并且保证选中了生成加载器(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。</p>\n<p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。将两个头文件目录（glad和KHR）复制到你的Include文件夹中（或者增加一个额外的项目指向这些目录），<span style='color:red'><strong>并添加glad.c文件到你的工程中</strong>, 记住这一步，非常重要，否则会导致无法成功启动</span> 。</p>\n<p>经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：<br><code>#include &lt;glad/glad.h&gt; </code></p>\n<p>点击编译按钮应该不会给你提示任何的错误，到这里我们就已经准备好继续学习下一节去真正使用GLFW和GLAD来设置OpenGL上下文并创建一个窗口了。</p>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>让我们试试能不能让GLFW正常工作。首先，新建一个.cpp文件，然后把下面的代码粘贴到该文件的最前面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<div class=\"note warning\">请确认是在包含GLFW的头文件之前包含了GLAD的头文件。GLAD的头文件包含了正确的OpenGL头文件（例如GL/gl.h），所以需要在其它依赖于OpenGL的头文件之前包含GLAD。</div>\n\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>首先我们需要初始化OpenGL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化GLFW</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"comment\">// glfwWindowHint函数来配置GLFW, </span></span><br><span class=\"line\">    <span class=\"comment\">// 由于本站的教程都是基于OpenGL 3.3版本展开讨论的，所以我们需要告诉GLFW我们要使用的OpenGL版本是3.3，这样GLFW会在创建OpenGL上下文时做出适当的调整。</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span></span><br><span class=\"line\">    <span class=\"comment\">// 上面注释掉的代码是在Mac OS 上使用时，需要的代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><p>接下来，我们需要创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。类型为<code>GLFWwindow</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br></pre></td></tr></table></figure>\n<div class=\"note info\">glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里我们使用\"LearnOpenGL\"，当然你也可以使用你喜欢的名称。最后两个参数我们暂时忽略。这个函数将会返回一个GLFWwindow对象，我们会在其它的GLFW操作中使用到。创建完窗口我们就可以通知GLFW将我们窗口的上下文设置为当前线程的主上下文了。</div>\n\n<h2 id=\"GLAD-1\"><a href=\"#GLAD-1\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><p>在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用glViewport函数来设置窗口的维度(Dimension)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br></pre></td></tr></table></figure>\n<p>glViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。</p>\n<p>我们实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。</p>\n<div class=\"note info no-icon\"><p>OpenGL幕后使用glViewport中定义的位置和宽高进行2D坐标的转换，将OpenGL中的位置坐标转换为你的屏幕坐标。例如，OpenGL中的坐标(-0.5, 0.5)有可能（最终）被映射为屏幕中的坐标(200,450)。注意，处理过的OpenGL坐标范围只为-1到1，因此我们事实上将(-1到1)范围内的坐标映射到(0, 800)和(0, 600)。</p>\n</div>\n\n<p>然而，当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用。这个回调函数的原型如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br></pre></td></tr></table></figure>\n<div class=\"note default\">这个函数类似于 `LIBGdx`中，`Screen`组件中的reSize方法，需要重新计算视窗大小</div>\n\n<p>这个帧缓冲大小函数需要一个GLFWwindow作为它的第一个参数，以及两个整数表示窗口的新维度。每当窗口改变大小，GLFW会调用这个函数并填充相应的参数供你处理。这里我们实现这个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们还需要注册这个函数，告诉GLFW我们希望每当窗口调整大小的时候调用这个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br></pre></td></tr></table></figure>\n<p>这里需要手动使用上面的代码将窗口回调方法注册到openGL里面。<br>当窗口被第一次显示的时候<code>framebuffer_size_callback</code>也会被调用(初始化)。对于视网膜(Retina)显示屏，width和height都会明显比原输入值更高一点。</p>\n<p>我们还可以将我们的函数注册到其它很多的回调函数中。比如说，我们可以创建一个回调函数来处理手柄输入变化，处理错误消息等。我们会在创建窗口之后，渲染循环初始化之前注册这些回调函数。</p>\n<h2 id=\"窗口-1\"><a href=\"#窗口-1\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><p>我们可不希望只绘制一个图像之后我们的应用程序就立即退出并关闭窗口。我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>glfwWindowShouldClose</code>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回true，渲染循环将停止运行，之后我们就可以关闭应用程序。</li>\n<li><code>glfwPollEvents</code>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</li>\n<li><code>glfwSwapBuffers</code>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</li>\n</ul>\n<div class=\"note info no-icon\"><p>双缓冲(Double Buffer)</p>\n<p>应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。</p>\n</div>\n\n<h2 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h2><p>当渲染循环结束后我们需要正确释放&#x2F;删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>这样便能清理所有的资源并正确地退出应用程序。现在你可以尝试编译并运行你的应用程序了，如果没做错的话，你将会看到如下的输出：<br><img src=\"/2024/03/02/open-gl/2024-03-03T001348.png\" alt=\"2024-03-03T001348\"></p>\n<p>如果你看见了一个非常无聊的黑色窗口，那么就对了！我们的Hello World至此成功。</p>\n<p>如果程序编译有问题，请先检查连接器选项是否正确，IDE中是否导入了正确的目录（前面教程解释过）。并且请确认你的代码是否正确.</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>我们同样也希望能够在GLFW中实现一些输入控制，这可以通过使用GLFW的几个输入函数来完成。我们将会使用GLFW的<code>glfwGetKey</code>函数，它需要一个窗口以及一个按键作为输入。这个函数将会返回这个按键是否正在被按下。我们将创建一个<code>processInput</code>函数来让所有的输入代码保持整洁。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow *window)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"built_in\">glfwSetWindowShouldClose</span>(window, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们检查用户是否按下了返回键(Esc)（如果没有按下，glfwGetKey将会返回GLFW_RELEASE。如果用户的确按下了返回键，我们将通过使用glfwSetwindowShouldClose把WindowShouldClose属性设置为 true来关闭GLFW。下一次while循环的条件检测将会失败，程序将关闭。</p>\n<p>这里需要记住 <code>glfwGetKey</code> 函数</p>\n<p>我们接下来在渲染循环的每一个迭代中调用<code>processInput</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就给我们一个非常简单的方式来检测特定的键是否被按下，并在每一帧做出处理。</p>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入</span></span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渲染指令</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查并调用事件，交换缓冲</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<code>glClear</code>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<code>GL_COLOR_BUFFER_BIT</code>，<code>GL_DEPTH_BUFFER_BIT</code>和<code>GL_STENCIL_BUFFER_BIT</code>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<p>注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。</p>\n<p><img src=\"/2024/03/02/open-gl/2024-03-03T004349.png\" alt=\"2024-03-03T004349\"></p>\n<div class=\"note default no-icon\"><p>你应该能够回忆起来我们在 OpenGL 这节教程的内容，glClearColor函数是一个状态设置函数，而glClear函数则是一个状态使用的函数，它使用了当前的状态来获取应该清除为的颜色。</p>\n</div>","length":5712,"excerpt":"<p><img src=\"/2024/03/02/open-gl/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>","more":"<ul>\n<li><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a><ul>\n<li><a href=\"#glfw\">GLFW</a><ul>\n<li><a href=\"#cmake\">CMake</a></li>\n<li><a href=\"#%E7%BC%96%E8%AF%91\">编译</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B\">我们的第一个工程</a><ul>\n<li><a href=\"#%E9%93%BE%E6%8E%A5\">链接</a></li>\n</ul>\n</li>\n<li><a href=\"#glad\">GLAD</a><ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AEglad%E5%BA%93\">配置GLAD库</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#hello-world\">Hello World</a><ul>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n<li><a href=\"#%E7%AA%97%E5%8F%A3\">窗口</a></li>\n<li><a href=\"#glad-1\">GLAD</a></li>\n<li><a href=\"#%E8%A7%86%E5%8F%A3\">视口</a></li>\n<li><a href=\"#%E7%AA%97%E5%8F%A3-1\">窗口</a></li>\n<li><a href=\"#%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90\">释放资源</a></li>\n<li><a href=\"#%E8%BE%93%E5%85%A5\">输入</a></li>\n<li><a href=\"#%E6%B8%B2%E6%9F%93\">渲染</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考资料： <a href=\"https://learnopengl-cn.github.io/\">https://learnopengl-cn.github.io/</a></p>\n</blockquote>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>使用 <strong>Windows10</strong> ， 编程语言: <strong>C++</strong>，IDE: <strong>Visual studio 2022</strong></p>\n<p>在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有意将这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。</p>\n<p>幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和一个OpenGL上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。你可以随意选用其他类似的库，大多数库的配置方法和GLFW差不多。</p>\n<h2 id=\"GLFW\"><a href=\"#GLFW\" class=\"headerlink\" title=\"GLFW\"></a>GLFW</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入，对我们来说这就够了。</p>\n<p>本节和下一节的目标是把GLFW环境配好能且能够跑起来，并保证它正确创建了OpenGL上下文并显示出一个简单的窗口来让我们随意使用。这篇教程会一步步教你如何获取、编译、链接GLFW库。我们使用的是Microsoft Visual Studio 2019 IDE（操作过程在更新的Visual Studio都是相同的）。如果你用的不是Visual Studio（或者用的是它的旧版本）请不要担心，大多数IDE上的操作都是类似的。<br><a href=\"https://www.glfw.org/download.html\">GLFW下载地址</a></p>\n<p>下载源码包之后，将其解压并打开。我们只需要里面的这些内容：</p>\n<ul>\n<li>编译生成的库</li>\n<li>include文件夹</li>\n</ul>\n<p>从源代码编译库可以保证生成的库完全适合你的操作系统和CPU的，而预编译的二进制文件则并非总是提供（有时候，即便提供了预编译的二进制文件，也可能不适用于您的系统）。开放源代码所产生问题在于：并不是每个人都用相同的IDE或者构建系统来搞开发，因而提供的项目&#x2F;解决方案文件可能和一些人的IDE不兼容。所以人们必须使用给定的.c&#x2F;.cpp和.h&#x2F;.hpp文件来自己建立项目&#x2F;解决方案，这是一项很枯燥的工作。但因此也诞生了一个叫做CMake的工具。</p>\n<h3 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h3><p>CMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, Code::Blocks, Eclipse）生成不同IDE的工程文件。这允许我们从GLFW源码创建一个Visual Studio 2019工程文件，之后进行编译。首先，我们需要从这里下载安装CMake。</p>\n<p>当CMake安装成功后，你可以选择从命令行或者GUI启动CMake，由于我们不想让事情变得太过复杂，我们选择用GUI。CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择GLFW的源代码的根目录，然后我们新建一个 build 文件夹，选中作为目标目录。</p>\n<p><img src=\"/2024/03/02/open-gl/2024-03-02T215348.png\" alt=\"CMAKE\"></p>\n<p>在设置完源代码目录和目标目录之后，点击Configure(设置)按钮，让CMake读取设置和源代码。我们接下来需要选择工程的生成器，由于我们使用的是Visual Studio 2019，我们选择 Visual Studio 16 选项（因为Visual Studio 2019的内部版本号是16）。CMake会显示可选的编译选项用来配置最终生成的库。这里我们使用默认设置，并再次点击Configure(设置)按钮保存设置。保存之后，点击Generate(生成)按钮，生成的工程文件会在你的build文件夹中。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>在build文件夹里可以找到GLFW.sln文件，用Visual Studio 2019打开。因为CMake已经配置好了项目，并按照默认配置将其编译为64位的库，所以我们直接点击Build Solution(生成解决方案)按钮，然后在build&#x2F;src&#x2F;Debug文件夹内就会出现我们编译出的库文件glfw3.lib。</p>\n<p>库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：</p>\n<ul>\n<li>找到IDE或者编译器的&#x2F;lib和&#x2F;include文件夹，添加GLFW的include文件夹里的文件到IDE的&#x2F;include文件夹里去。用类似的方法，将glfw3.lib添加到&#x2F;lib文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。</li>\n<li>推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含Libs和Include文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE&#x2F;编译器在哪能找到这些目录。<br>完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！</li>\n</ul>\n<h2 id=\"我们的第一个工程\"><a href=\"#我们的第一个工程\" class=\"headerlink\" title=\"我们的第一个工程\"></a>我们的第一个工程</h2><p>首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择Empty Project(空项目)（别忘了给你的项目起一个合适的名字）。由于我们将在64位模式中执行所有操作，而新项目默认是32位的，因此我们需要将Debug旁边顶部的下拉列表从x86更改为x64：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215643.png\" alt=\"first project\"></p>\n<p>现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>为了使我们的程序使用GLFW，我们需要把GLFW库链接(Link)进工程。这可以通过在链接器的设置里指定我们要使用glfw3.lib来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。</p>\n<p>要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择VC++ Directories(VC++ 目录)选项卡（如下图）。在下面的两栏添加目录：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215724.png\" alt=\"2024-03-02T215724\"><br>这里你可以把自己的目录加进去，让工程知道到哪去搜索。你需要手动把目录加在后面，也可以点击需要的位置字符串，选择选项，之后会出现类似下面这幅图的界面，图是选择Include Directories(包含目录)时的界面：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215738.png\" alt=\"2024-03-02T215738\"><br>这里可以添加任意多个目录，IDE会从这些目录里寻找头文件。所以只要你将GLFW的Include文件夹加进路径中，你就可以使用&lt;GLFW&#x2F;..&gt;来引用头文件。库文件夹也是一样的。</p>\n<p>现在VS可以找到所需的所有文件了。最后需要在Linker(链接器)选项卡里的Input(输入)选项卡里添加glfw3.lib这个文件：<br><img src=\"/2024/03/02/open-gl/2024-03-02T215801.png\" alt=\"2024-03-02T215801\"></p>\n<p>要链接一个库我们必须告诉链接器它的文件名。库名字是glfw3.lib，我们把它加到Additional Dependencies(附加依赖项)字段中(手动或者使用选项都可以)。这样GLFW在编译的时候就会被链接进来了。除了GLFW之外，你还需要添加一个链接条目链接到OpenGL的库，但是这个库可能因为系统的不同而有一些差别。</p>\n<ul>\n<li>Windows上的OpenGL库<br><br>  如果你是Windows平台，opengl32.lib已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了。由于这篇教程用的是VS编译器，并且是在Windows操作系统上，我们只需将opengl32.lib添加进连接器设置里就行了。值得注意的是，OpenGL库64位版本的文件名仍然是opengl32.lib（和32位版本一样），虽然很奇怪但确实如此。</li>\n<li>Linux上的OpenGL库<br><br>  在Linux下你需要链接libGL.so库文件，这需要添加-lGL到你的链接器设置中。如果找不到这个库你可能需要安装Mesa，NVidia或AMD的开发包，这部分因平台而异（而且我也不熟悉Linux）就不仔细讲解了</li>\n</ul>\n<p>接下来，如果你已经添加GLFW和OpenGL库到连接器设置中，你可以用如下方式添加GLFW头文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW\\glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>GLFW的安装与配置就到此为止。</p>\n<h2 id=\"GLAD\"><a href=\"#GLAD\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准&#x2F;规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*GL_GENBUFFERS)</span> <span class=\"params\">(GLsizei, GLuint*)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 找到正确的函数并赋值给函数指针</span></span><br><span class=\"line\">GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)<span class=\"built_in\">wglGetProcAddress</span>(<span class=\"string\">&quot;glGenBuffers&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 现在函数可以被正常调用了</span></span><br><span class=\"line\">GLuint buffer;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br></pre></td></tr></table></figure>\n<p>你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。</p>\n<h3 id=\"配置GLAD库\"><a href=\"#配置GLAD库\" class=\"headerlink\" title=\"配置GLAD库\"></a>配置GLAD库</h3><p>GLAD是一个<a href=\"https://github.com/Dav1dde/glad\">开源</a>的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。</p>\n<p>打开GLAD的<a href=\"https://glad.dav1d.de/\">在线服务</a>，将语言(Language)设置为C&#x2F;C++，在API选项中，选择3.3以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能用）。之后将模式(Profile)设置为Core，并且保证选中了生成加载器(Generate a loader)选项。现在可以先（暂时）忽略扩展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。</p>\n<p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。将两个头文件目录（glad和KHR）复制到你的Include文件夹中（或者增加一个额外的项目指向这些目录），<span style='color:red'><strong>并添加glad.c文件到你的工程中</strong>, 记住这一步，非常重要，否则会导致无法成功启动</span> 。</p>\n<p>经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：<br><code>#include &lt;glad/glad.h&gt; </code></p>\n<p>点击编译按钮应该不会给你提示任何的错误，到这里我们就已经准备好继续学习下一节去真正使用GLFW和GLAD来设置OpenGL上下文并创建一个窗口了。</p>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>让我们试试能不能让GLFW正常工作。首先，新建一个.cpp文件，然后把下面的代码粘贴到该文件的最前面。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<div class=\"note warning\">请确认是在包含GLFW的头文件之前包含了GLAD的头文件。GLAD的头文件包含了正确的OpenGL头文件（例如GL/gl.h），所以需要在其它依赖于OpenGL的头文件之前包含GLAD。</div>\n\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>首先我们需要初始化OpenGL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化GLFW</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"comment\">// glfwWindowHint函数来配置GLFW, </span></span><br><span class=\"line\">    <span class=\"comment\">// 由于本站的教程都是基于OpenGL 3.3版本展开讨论的，所以我们需要告诉GLFW我们要使用的OpenGL版本是3.3，这样GLFW会在创建OpenGL上下文时做出适当的调整。</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span></span><br><span class=\"line\">    <span class=\"comment\">// 上面注释掉的代码是在Mac OS 上使用时，需要的代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><p>接下来，我们需要创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。类型为<code>GLFWwindow</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(<span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br></pre></td></tr></table></figure>\n<div class=\"note info\">glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里我们使用\"LearnOpenGL\"，当然你也可以使用你喜欢的名称。最后两个参数我们暂时忽略。这个函数将会返回一个GLFWwindow对象，我们会在其它的GLFW操作中使用到。创建完窗口我们就可以通知GLFW将我们窗口的上下文设置为当前线程的主上下文了。</div>\n\n<h2 id=\"GLAD-1\"><a href=\"#GLAD-1\" class=\"headerlink\" title=\"GLAD\"></a>GLAD</h2><p>在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><p>在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用glViewport函数来设置窗口的维度(Dimension)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>);</span><br></pre></td></tr></table></figure>\n<p>glViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。</p>\n<p>我们实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。</p>\n<div class=\"note info no-icon\"><p>OpenGL幕后使用glViewport中定义的位置和宽高进行2D坐标的转换，将OpenGL中的位置坐标转换为你的屏幕坐标。例如，OpenGL中的坐标(-0.5, 0.5)有可能（最终）被映射为屏幕中的坐标(200,450)。注意，处理过的OpenGL坐标范围只为-1到1，因此我们事实上将(-1到1)范围内的坐标映射到(0, 800)和(0, 600)。</p>\n</div>\n\n<p>然而，当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用。这个回调函数的原型如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br></pre></td></tr></table></figure>\n<div class=\"note default\">这个函数类似于 `LIBGdx`中，`Screen`组件中的reSize方法，需要重新计算视窗大小</div>\n\n<p>这个帧缓冲大小函数需要一个GLFWwindow作为它的第一个参数，以及两个整数表示窗口的新维度。每当窗口改变大小，GLFW会调用这个函数并填充相应的参数供你处理。这里我们实现这个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们还需要注册这个函数，告诉GLFW我们希望每当窗口调整大小的时候调用这个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br></pre></td></tr></table></figure>\n<p>这里需要手动使用上面的代码将窗口回调方法注册到openGL里面。<br>当窗口被第一次显示的时候<code>framebuffer_size_callback</code>也会被调用(初始化)。对于视网膜(Retina)显示屏，width和height都会明显比原输入值更高一点。</p>\n<p>我们还可以将我们的函数注册到其它很多的回调函数中。比如说，我们可以创建一个回调函数来处理手柄输入变化，处理错误消息等。我们会在创建窗口之后，渲染循环初始化之前注册这些回调函数。</p>\n<h2 id=\"窗口-1\"><a href=\"#窗口-1\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><p>我们可不希望只绘制一个图像之后我们的应用程序就立即退出并关闭窗口。我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>glfwWindowShouldClose</code>函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话，该函数返回true，渲染循环将停止运行，之后我们就可以关闭应用程序。</li>\n<li><code>glfwPollEvents</code>函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。</li>\n<li><code>glfwSwapBuffers</code>函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</li>\n</ul>\n<div class=\"note info no-icon\"><p>双缓冲(Double Buffer)</p>\n<p>应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。</p>\n</div>\n\n<h2 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h2><p>当渲染循环结束后我们需要正确释放&#x2F;删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>这样便能清理所有的资源并正确地退出应用程序。现在你可以尝试编译并运行你的应用程序了，如果没做错的话，你将会看到如下的输出：<br><img src=\"/2024/03/02/open-gl/2024-03-03T001348.png\" alt=\"2024-03-03T001348\"></p>\n<p>如果你看见了一个非常无聊的黑色窗口，那么就对了！我们的Hello World至此成功。</p>\n<p>如果程序编译有问题，请先检查连接器选项是否正确，IDE中是否导入了正确的目录（前面教程解释过）。并且请确认你的代码是否正确.</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>我们同样也希望能够在GLFW中实现一些输入控制，这可以通过使用GLFW的几个输入函数来完成。我们将会使用GLFW的<code>glfwGetKey</code>函数，它需要一个窗口以及一个按键作为输入。这个函数将会返回这个按键是否正在被按下。我们将创建一个<code>processInput</code>函数来让所有的输入代码保持整洁。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow *window)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"built_in\">glfwSetWindowShouldClose</span>(window, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们检查用户是否按下了返回键(Esc)（如果没有按下，glfwGetKey将会返回GLFW_RELEASE。如果用户的确按下了返回键，我们将通过使用glfwSetwindowShouldClose把WindowShouldClose属性设置为 true来关闭GLFW。下一次while循环的条件检测将会失败，程序将关闭。</p>\n<p>这里需要记住 <code>glfwGetKey</code> 函数</p>\n<p>我们接下来在渲染循环的每一个迭代中调用<code>processInput</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就给我们一个非常简单的方式来检测特定的键是否被按下，并在每一帧做出处理。</p>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入</span></span><br><span class=\"line\">    <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渲染指令</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查并调用事件，交换缓冲</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用<code>glClear</code>函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有<code>GL_COLOR_BUFFER_BIT</code>，<code>GL_DEPTH_BUFFER_BIT</code>和<code>GL_STENCIL_BUFFER_BIT</code>。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<p>注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。</p>\n<p><img src=\"/2024/03/02/open-gl/2024-03-03T004349.png\" alt=\"2024-03-03T004349\"></p>\n<div class=\"note default no-icon\"><p>你应该能够回忆起来我们在 OpenGL 这节教程的内容，glClearColor函数是一个状态设置函数，而glClear函数则是一个状态使用的函数，它使用了当前的状态来获取应该清除为的颜色。</p>\n</div>"},{"title":"OpenAL 解析MP3 + OGG 音频","date":"2024-04-12T07:25:41.000Z","_content":"在前面已经成功的给游戏引入了OpenAL作为音频播放工具，并且使用了FreeAlut来解析音频。\n但是这个freeALUT有一个问题，就是目前只支持Wav格式的文件。我们这次来给我们的系统添加对MP3和ogg的支持\n\n<!-- more -->\n# FreeALUT\n首先先看下freeALUT的源码：\n```c++\n  fileName = _alutInputStreamGetFileName (stream);\n  if (fileName != NULL && hasSuffixIgnoringCase (fileName, \".raw\"))\n    {\n      return loadRawFile (stream);\n    }\n\n  /* For other file formats, read the quasi-standard four byte magic number */\n  if (!_alutInputStreamReadInt32BE (stream, &magic))\n    {\n      return AL_FALSE;\n    }\n\n  /* Magic number 'RIFF' == Microsoft '.wav' format */\n  if (magic == 0x52494646)\n    {\n      return loadWavFile (stream);\n    }\n\n  /* Magic number '.snd' == Sun & Next's '.au' format */\n  if (magic == 0x2E736E64)\n    {\n      return loadAUFile (stream);\n    }\n```\n可以看到这里本身确实只支持了raw，wav文件。\n\n# OGG支持\n为了支持ogg，我们需要引入额外的依赖库，libogg + libvorbis。\n我们可以在[这里](https://xiph.org/downloads/)找到下载的链接，也可以去[GITHUB仓库](https://github.com/xiph/ogg)来clone。\n<div class=\"note danger\">需要注意的是，我们这里需要使用两个库，这两个库也是有依赖关系的，即libvorbis 依赖于 libogg ，这点很重要</div>\n\n## LIBOGG\n我们需要编译LIBOGG库。\n直接打开然后使用cmake生成项目文件，然后clean & rebuild 生成即可，默认会生成.a后缀的静态库，我们这里就使用静态库就好。\n\n## libvorbis\n打开libvorbis库，仍然还是使用cmake生成项目文件。\n但是这里需要注意一下，libvorbis库需要依赖libOGG库来编译，因为libvorbis本质是对LIBOGG的一个拓展。\n这里，我们有两个方法来引入libOGG：\n### 更改引用文件\n1. 首先打开libvorbis根目录的cmakelist文件\n2. 注释掉find_package步骤\n3. 添加两个变量，就是我们libOGG打包后的include文件目录，以及生成的依赖文件地址：\n   ![2024-04-12T234529](2024-04-12T234529.png) \n4. 进入lib文件夹下，打开这里的cmakelist\n5. 在第89行左右的位置（如下图），将所有的include directories设置中，全部加上刚才设置的include文件目录变量：\n    ![2024-04-12T234947](2024-04-12T234947.png)\n6. 将下面对 vorbis的 target_link_libraries 中，PUBLIC Ogg::ogg 改为 PUBLIC + `生成的依赖文件地址变量`\n   ![2024-04-12T235104](2024-04-12T235104.png)\n   然后打包编译，\n\n### 方法2 install LIBOGG\n在编译libogg库成功后，可以尝试在libOGG库的cmake文件开头加上如下定义:\n```cmake\nset(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)\n```\n这个定义就是用来设置cmake的安装目录的。其实cmake是有默认的安装目录的，但是其默认安装目录为C:/Program Files, cmake没有权限去install，所以我们最好自己再指定一个目录。然后执行cmake install命令，这样，我们就会在对应目录看到我们的libOGG已经被安装好了。\n这里的安装其实就是把头文件，以及依赖库放在了这里。\n\n然后我们可以在libvorbis根目录的cmakelist文件夹下，加入如下定义:\n```cmake\nset(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)\n\nset(CMAKE_PREFIX_PATH  C:/myWareHouse/dev/cpp/cmake_install)\n\n```\n这里第一个变量含义仍是安装目录，代表现在如果在libvorbis目录下执行install，那么libvorbis也会安装到这里。\n第二个变量`CMAKE_PREFIX_PATH`，代表当前项目在使用cmake构建的时候，会去这个目录下查找当前已经安装过的库，并直接从这里读取头文件以及依赖。\n这样，我们就不必更改别的地方了，直接执行cmake rebuild，cmake就会去我们到的这个目录下自己去找libOGG，即可成功编译打包，最后也可以将libvorbis 进行一下install操作，这样我们的vorbis也会在我们的cmake库中了。\n<div class=\"note info\"> 这个形式其实跟java中的maven有些类似了</div>\n\n### 使用\n在编译打包成功后，会生成三个依赖库文件：\n ![2024-04-12T235156](2024-04-12T235156.png)\n现在我们如果需要解析ogg音频文件，需要引入这三个依赖。同时还需要引入libOGG依赖。\n但是这里有一个坑，<span style='color:red'>libOGG是被这三个所依赖的，在我们自己的应用中，如果要引入这几个依赖，需要先引入libvorbis的三个依赖，然后再引入libOGG，这样我们自己的项目才能成功编译通过，否则是无法使用这个依赖库的。这个是g++本身的设定，其引入库是需要有顺序的，被依赖的库应当放在后面</span>\n像下面这样:\n```cmake\ntarget_link_libraries(${PROJECT_NAME} \nlibvorbisfile.a \nlibvorbis.a\nlibvorbisenc.a\nlibogg.a\n)\n```\n## demo\n最后放上一个使用demo，demo中将该库与openAL进行了整合\n```c++\n#include <AL/al.h>\n#include <AL/alut.h>\n#include <al/alc.h>\n#include <vorbis/vorbisfile.h>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n \n#define BUFFER_SIZE     32768       // 32 KB buffers\n \ntypedef struct ALCdevice_struct ALCdevice;\ntypedef struct ALCcontext_struct ALCcontext;\n \nusing namespace std;\n \nbool LoadOGG(char *name, vector<char> &buffer, ALenum &format, ALsizei &freq)\n{\n    int endian = 0;                         // 0 for Little-Endian, 1 for Big-Endian\n    int bitStream;\n    long bytes;\n    char array[BUFFER_SIZE];                // Local fixed size array\n    FILE *f;\n \n    f = fopen(name, \"rb\");\n \n    if (f == NULL)\n        return false; \n \n    vorbis_info *pInfo;\n    OggVorbis_File oggFile;\n \n    // Try opening the given file\n    if (ov_open(f, &oggFile, NULL, 0) != 0)\n        return false; \n \n    pInfo = ov_info(&oggFile, -1);\n \n    if (pInfo->channels == 1)\n        format = AL_FORMAT_MONO16;\n    else\n        format = AL_FORMAT_STEREO16;\n  \n    freq = pInfo->rate;\n \n    do\n    { \n        bytes = ov_read(&oggFile, array, BUFFER_SIZE, endian, 2, 1, &bitStream);\n \n        if (bytes < 0)\n            {\n            ov_clear(&oggFile);\n            cerr << \"Error decoding \" << \"fileName\" << \"...\" << endl;\n            exit(-1);\n            }\n \n        buffer.insert(buffer.end(), array, array + bytes);\n    }\n    while (bytes > 0);\n \n    ov_clear(&oggFile);\n    return true; \n}\n \nint main(int argc, char *argv[])\n{\n \n    ALCdevice* pDevice;\n    ALCcontext* pContext;\n \n    ALint state;                            // The state of the sound source\n    ALuint bufferID;                        // The OpenAL sound buffer ID\n    ALuint sourceID;                        // The OpenAL sound source\n    ALenum format;                          // The sound data format\n    ALsizei freq;                           // The frequency of the sound data\n    vector<char> bufferData;                // The sound buffer data from file\n     \n\t ALCdevice *device;\n     ALCcontext *context; \n \n       device = alcOpenDevice(0);\n       context = alcCreateContext(device,0);\n\t   ALboolean initStatus = alcMakeContextCurrent(context);    \n \n    // Create sound buffer and source\n    alGenBuffers(1, &bufferID);\n    alGenSources(1, &sourceID);\n \n    // Set the source and listener to the same location\n    alListener3f(AL_POSITION, 0.0f, 0.0f, 0.0f);\n    alSource3f(sourceID, AL_POSITION, 0.0f, 0.0f, 0.0f);\n \n    // Load the OGG file into memory\n    LoadOGG(\"./sound/TestBeatMono.ogg\", bufferData, format, freq);\n \n    // Upload sound data to buffer\n    alBufferData(bufferID, format, &bufferData[0], static_cast<ALsizei>(bufferData.size()), freq);\n \n    // Attach sound buffer to source\n    alSourcei(sourceID, AL_BUFFER, bufferID);\n\t\n\talSourcef (sourceID, AL_GAIN, 1.0 );\n \n    // Finally, play the sound!!!\n    alSourcePlay(sourceID);\n \n    do\n    {\n        // Query the state of the souce\n        alGetSourcei(sourceID, AL_SOURCE_STATE, &state);\n    }\n    while (state != AL_STOPPED);\n \n    // Clean up sound buffer and source\n    alDeleteBuffers(1, &bufferID);\n    alDeleteSources(1, &sourceID);\n \n    alcDestroyContext(context);\n\talcCloseDevice(device);   \n \n    return 0;\n}\n```\n然后我们就可以欣赏美妙的ogg音乐了。\n\n# MP3\n关于MP3，我其实并没有找到特别好用的专门处理MP3的库。但是我找到了一个[全能库](https://github.com/ddiakopoulos/libnyquist)，它不仅能解析MP3，还能解析个各种音频文件。\n关于这个库的编译，没什么好说的，直接下下来，编译打包，install即可。\n这个库的使用有一点点坑\n\n## 格式\n在之前使用openAL播放音频的时候，我们传入的bufferData都是一个char数组，但是这个库它解析出来的数据是float数组。\n这里有一个坑，就是如果给openAL绑定Buffer数据的时候，format如果使用默认的格式，则会出现噪音，乱流，甚至杂音，以及完全无法确认的声源。\n这时我们需要引入`#include <AL/alext.h>`库，这个库中有专门对float32优化的格式：`AL_FORMAT_STEREO_FLOAT32`\n\n具体代码如下,使用libnyquist跟openAL整合：\n```c++\n\n#include <libnyquist/Decoders.h>\n#include <libnyquist/Encoders.h>\n#include <libnyquist/Common.h>\n\n#include <AL/alext.h>\n#include <AL/alut.h>\n\nusing namespace nqr;\nbool compare_pred(unsigned char a, unsigned char b)\n{\n    return std::tolower(a) == std::tolower(b);\n}\nstatic const uint32_t FRAME_SIZE = 512;\nstatic const int32_t CHANNELS = 2;\nstatic const int32_t BUFFER_LENGTH = FRAME_SIZE * CHANNELS;\nint main()\ntry\n{\n    const char *s1 = \"abc123\";\n    const char *s2 = \"123\";\n    std::cout << ((s1 + 3) == s2) << \" - = - \" << std::equal(s1 + 3, s1 + 6, s2) << std::endl;\n    std::shared_ptr<AudioData> fileData = std::make_shared<AudioData>();\n\n    NyquistIO loader;\n\n    std::string cli_arg = std::string(\"./sound/xx.mp3\");\n    auto memory = ReadFile(cli_arg);\n    loader.Load(fileData.get(), \"mp3\", memory.buffer);\n\n    std::cout << fileData.get()->sourceFormat << std::endl;\n    std::cout << fileData.get()->channelCount << std::endl;\n    std::cout << fileData.get()->sampleRate << std::endl;\n    std::cout << \"frameSize: \" << fileData.get()->frameSize << std::endl;\n    std::cout << \"size: \" << fileData.get()->samples.size() << std::endl;\n    fileData.get()->samples.data();\n\n    alutInit(NULL, NULL);\n    ALuint buffer, source;\n    alGenBuffers(1, &buffer);\n    alGenSources(1, &source);\n    ALenum format;\n    if (fileData.get()->channelCount == 1)\n        format = AL_FORMAT_MONO16;\n    else\n        format = AL_FORMAT_STEREO16;\n\n    alBufferData(buffer,\n                 AL_FORMAT_STEREO_FLOAT32, // 这里，需要注意，不能使用上面openAL原生的格式，需要使用alext给我们提供的格式\n                 fileData.get()->samples.data(),\n                 fileData.get()->samples.size() * sizeof(float),\n                 fileData.get()->sampleRate);\n    alSourcei(source, AL_BUFFER, buffer);\n    alSourcePlay(source);\n    system(\"pause\");\n    \n    alSourceStop(source);\n    alDeleteSources(1, &source);\n    alDeleteBuffers(1, &buffer);\n}\ncatch (const UnsupportedExtensionEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const LoadPathNotImplEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const LoadBufferNotImplEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const std::exception &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\n```\n然后就可以听到MP3音乐了。\n\n# 整合\n具体将三种常见格式(WAV,OGG,MP3)整合到一起，放在项目中使用OpenAL操作，可以看我的[游戏](https://github.com/voidvvv/LinkA)中音频部分的实现。\n按照这个思路，其实也可以把更多的音频文件解析给整合进来。","source":"_posts/openAL_MP3_OGG.md","raw":"---\ntitle: OpenAL 解析MP3 + OGG 音频\ndate: 2024-04-12T23:25:41+08:00\ncategories: \n- c++\n- OpenAL\ntags: \n- [c++]\n- [OpenAL]\n---\n在前面已经成功的给游戏引入了OpenAL作为音频播放工具，并且使用了FreeAlut来解析音频。\n但是这个freeALUT有一个问题，就是目前只支持Wav格式的文件。我们这次来给我们的系统添加对MP3和ogg的支持\n\n<!-- more -->\n# FreeALUT\n首先先看下freeALUT的源码：\n```c++\n  fileName = _alutInputStreamGetFileName (stream);\n  if (fileName != NULL && hasSuffixIgnoringCase (fileName, \".raw\"))\n    {\n      return loadRawFile (stream);\n    }\n\n  /* For other file formats, read the quasi-standard four byte magic number */\n  if (!_alutInputStreamReadInt32BE (stream, &magic))\n    {\n      return AL_FALSE;\n    }\n\n  /* Magic number 'RIFF' == Microsoft '.wav' format */\n  if (magic == 0x52494646)\n    {\n      return loadWavFile (stream);\n    }\n\n  /* Magic number '.snd' == Sun & Next's '.au' format */\n  if (magic == 0x2E736E64)\n    {\n      return loadAUFile (stream);\n    }\n```\n可以看到这里本身确实只支持了raw，wav文件。\n\n# OGG支持\n为了支持ogg，我们需要引入额外的依赖库，libogg + libvorbis。\n我们可以在[这里](https://xiph.org/downloads/)找到下载的链接，也可以去[GITHUB仓库](https://github.com/xiph/ogg)来clone。\n<div class=\"note danger\">需要注意的是，我们这里需要使用两个库，这两个库也是有依赖关系的，即libvorbis 依赖于 libogg ，这点很重要</div>\n\n## LIBOGG\n我们需要编译LIBOGG库。\n直接打开然后使用cmake生成项目文件，然后clean & rebuild 生成即可，默认会生成.a后缀的静态库，我们这里就使用静态库就好。\n\n## libvorbis\n打开libvorbis库，仍然还是使用cmake生成项目文件。\n但是这里需要注意一下，libvorbis库需要依赖libOGG库来编译，因为libvorbis本质是对LIBOGG的一个拓展。\n这里，我们有两个方法来引入libOGG：\n### 更改引用文件\n1. 首先打开libvorbis根目录的cmakelist文件\n2. 注释掉find_package步骤\n3. 添加两个变量，就是我们libOGG打包后的include文件目录，以及生成的依赖文件地址：\n   ![2024-04-12T234529](2024-04-12T234529.png) \n4. 进入lib文件夹下，打开这里的cmakelist\n5. 在第89行左右的位置（如下图），将所有的include directories设置中，全部加上刚才设置的include文件目录变量：\n    ![2024-04-12T234947](2024-04-12T234947.png)\n6. 将下面对 vorbis的 target_link_libraries 中，PUBLIC Ogg::ogg 改为 PUBLIC + `生成的依赖文件地址变量`\n   ![2024-04-12T235104](2024-04-12T235104.png)\n   然后打包编译，\n\n### 方法2 install LIBOGG\n在编译libogg库成功后，可以尝试在libOGG库的cmake文件开头加上如下定义:\n```cmake\nset(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)\n```\n这个定义就是用来设置cmake的安装目录的。其实cmake是有默认的安装目录的，但是其默认安装目录为C:/Program Files, cmake没有权限去install，所以我们最好自己再指定一个目录。然后执行cmake install命令，这样，我们就会在对应目录看到我们的libOGG已经被安装好了。\n这里的安装其实就是把头文件，以及依赖库放在了这里。\n\n然后我们可以在libvorbis根目录的cmakelist文件夹下，加入如下定义:\n```cmake\nset(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)\n\nset(CMAKE_PREFIX_PATH  C:/myWareHouse/dev/cpp/cmake_install)\n\n```\n这里第一个变量含义仍是安装目录，代表现在如果在libvorbis目录下执行install，那么libvorbis也会安装到这里。\n第二个变量`CMAKE_PREFIX_PATH`，代表当前项目在使用cmake构建的时候，会去这个目录下查找当前已经安装过的库，并直接从这里读取头文件以及依赖。\n这样，我们就不必更改别的地方了，直接执行cmake rebuild，cmake就会去我们到的这个目录下自己去找libOGG，即可成功编译打包，最后也可以将libvorbis 进行一下install操作，这样我们的vorbis也会在我们的cmake库中了。\n<div class=\"note info\"> 这个形式其实跟java中的maven有些类似了</div>\n\n### 使用\n在编译打包成功后，会生成三个依赖库文件：\n ![2024-04-12T235156](2024-04-12T235156.png)\n现在我们如果需要解析ogg音频文件，需要引入这三个依赖。同时还需要引入libOGG依赖。\n但是这里有一个坑，<span style='color:red'>libOGG是被这三个所依赖的，在我们自己的应用中，如果要引入这几个依赖，需要先引入libvorbis的三个依赖，然后再引入libOGG，这样我们自己的项目才能成功编译通过，否则是无法使用这个依赖库的。这个是g++本身的设定，其引入库是需要有顺序的，被依赖的库应当放在后面</span>\n像下面这样:\n```cmake\ntarget_link_libraries(${PROJECT_NAME} \nlibvorbisfile.a \nlibvorbis.a\nlibvorbisenc.a\nlibogg.a\n)\n```\n## demo\n最后放上一个使用demo，demo中将该库与openAL进行了整合\n```c++\n#include <AL/al.h>\n#include <AL/alut.h>\n#include <al/alc.h>\n#include <vorbis/vorbisfile.h>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n \n#define BUFFER_SIZE     32768       // 32 KB buffers\n \ntypedef struct ALCdevice_struct ALCdevice;\ntypedef struct ALCcontext_struct ALCcontext;\n \nusing namespace std;\n \nbool LoadOGG(char *name, vector<char> &buffer, ALenum &format, ALsizei &freq)\n{\n    int endian = 0;                         // 0 for Little-Endian, 1 for Big-Endian\n    int bitStream;\n    long bytes;\n    char array[BUFFER_SIZE];                // Local fixed size array\n    FILE *f;\n \n    f = fopen(name, \"rb\");\n \n    if (f == NULL)\n        return false; \n \n    vorbis_info *pInfo;\n    OggVorbis_File oggFile;\n \n    // Try opening the given file\n    if (ov_open(f, &oggFile, NULL, 0) != 0)\n        return false; \n \n    pInfo = ov_info(&oggFile, -1);\n \n    if (pInfo->channels == 1)\n        format = AL_FORMAT_MONO16;\n    else\n        format = AL_FORMAT_STEREO16;\n  \n    freq = pInfo->rate;\n \n    do\n    { \n        bytes = ov_read(&oggFile, array, BUFFER_SIZE, endian, 2, 1, &bitStream);\n \n        if (bytes < 0)\n            {\n            ov_clear(&oggFile);\n            cerr << \"Error decoding \" << \"fileName\" << \"...\" << endl;\n            exit(-1);\n            }\n \n        buffer.insert(buffer.end(), array, array + bytes);\n    }\n    while (bytes > 0);\n \n    ov_clear(&oggFile);\n    return true; \n}\n \nint main(int argc, char *argv[])\n{\n \n    ALCdevice* pDevice;\n    ALCcontext* pContext;\n \n    ALint state;                            // The state of the sound source\n    ALuint bufferID;                        // The OpenAL sound buffer ID\n    ALuint sourceID;                        // The OpenAL sound source\n    ALenum format;                          // The sound data format\n    ALsizei freq;                           // The frequency of the sound data\n    vector<char> bufferData;                // The sound buffer data from file\n     \n\t ALCdevice *device;\n     ALCcontext *context; \n \n       device = alcOpenDevice(0);\n       context = alcCreateContext(device,0);\n\t   ALboolean initStatus = alcMakeContextCurrent(context);    \n \n    // Create sound buffer and source\n    alGenBuffers(1, &bufferID);\n    alGenSources(1, &sourceID);\n \n    // Set the source and listener to the same location\n    alListener3f(AL_POSITION, 0.0f, 0.0f, 0.0f);\n    alSource3f(sourceID, AL_POSITION, 0.0f, 0.0f, 0.0f);\n \n    // Load the OGG file into memory\n    LoadOGG(\"./sound/TestBeatMono.ogg\", bufferData, format, freq);\n \n    // Upload sound data to buffer\n    alBufferData(bufferID, format, &bufferData[0], static_cast<ALsizei>(bufferData.size()), freq);\n \n    // Attach sound buffer to source\n    alSourcei(sourceID, AL_BUFFER, bufferID);\n\t\n\talSourcef (sourceID, AL_GAIN, 1.0 );\n \n    // Finally, play the sound!!!\n    alSourcePlay(sourceID);\n \n    do\n    {\n        // Query the state of the souce\n        alGetSourcei(sourceID, AL_SOURCE_STATE, &state);\n    }\n    while (state != AL_STOPPED);\n \n    // Clean up sound buffer and source\n    alDeleteBuffers(1, &bufferID);\n    alDeleteSources(1, &sourceID);\n \n    alcDestroyContext(context);\n\talcCloseDevice(device);   \n \n    return 0;\n}\n```\n然后我们就可以欣赏美妙的ogg音乐了。\n\n# MP3\n关于MP3，我其实并没有找到特别好用的专门处理MP3的库。但是我找到了一个[全能库](https://github.com/ddiakopoulos/libnyquist)，它不仅能解析MP3，还能解析个各种音频文件。\n关于这个库的编译，没什么好说的，直接下下来，编译打包，install即可。\n这个库的使用有一点点坑\n\n## 格式\n在之前使用openAL播放音频的时候，我们传入的bufferData都是一个char数组，但是这个库它解析出来的数据是float数组。\n这里有一个坑，就是如果给openAL绑定Buffer数据的时候，format如果使用默认的格式，则会出现噪音，乱流，甚至杂音，以及完全无法确认的声源。\n这时我们需要引入`#include <AL/alext.h>`库，这个库中有专门对float32优化的格式：`AL_FORMAT_STEREO_FLOAT32`\n\n具体代码如下,使用libnyquist跟openAL整合：\n```c++\n\n#include <libnyquist/Decoders.h>\n#include <libnyquist/Encoders.h>\n#include <libnyquist/Common.h>\n\n#include <AL/alext.h>\n#include <AL/alut.h>\n\nusing namespace nqr;\nbool compare_pred(unsigned char a, unsigned char b)\n{\n    return std::tolower(a) == std::tolower(b);\n}\nstatic const uint32_t FRAME_SIZE = 512;\nstatic const int32_t CHANNELS = 2;\nstatic const int32_t BUFFER_LENGTH = FRAME_SIZE * CHANNELS;\nint main()\ntry\n{\n    const char *s1 = \"abc123\";\n    const char *s2 = \"123\";\n    std::cout << ((s1 + 3) == s2) << \" - = - \" << std::equal(s1 + 3, s1 + 6, s2) << std::endl;\n    std::shared_ptr<AudioData> fileData = std::make_shared<AudioData>();\n\n    NyquistIO loader;\n\n    std::string cli_arg = std::string(\"./sound/xx.mp3\");\n    auto memory = ReadFile(cli_arg);\n    loader.Load(fileData.get(), \"mp3\", memory.buffer);\n\n    std::cout << fileData.get()->sourceFormat << std::endl;\n    std::cout << fileData.get()->channelCount << std::endl;\n    std::cout << fileData.get()->sampleRate << std::endl;\n    std::cout << \"frameSize: \" << fileData.get()->frameSize << std::endl;\n    std::cout << \"size: \" << fileData.get()->samples.size() << std::endl;\n    fileData.get()->samples.data();\n\n    alutInit(NULL, NULL);\n    ALuint buffer, source;\n    alGenBuffers(1, &buffer);\n    alGenSources(1, &source);\n    ALenum format;\n    if (fileData.get()->channelCount == 1)\n        format = AL_FORMAT_MONO16;\n    else\n        format = AL_FORMAT_STEREO16;\n\n    alBufferData(buffer,\n                 AL_FORMAT_STEREO_FLOAT32, // 这里，需要注意，不能使用上面openAL原生的格式，需要使用alext给我们提供的格式\n                 fileData.get()->samples.data(),\n                 fileData.get()->samples.size() * sizeof(float),\n                 fileData.get()->sampleRate);\n    alSourcei(source, AL_BUFFER, buffer);\n    alSourcePlay(source);\n    system(\"pause\");\n    \n    alSourceStop(source);\n    alDeleteSources(1, &source);\n    alDeleteBuffers(1, &buffer);\n}\ncatch (const UnsupportedExtensionEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const LoadPathNotImplEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const LoadBufferNotImplEx &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\ncatch (const std::exception &e)\n{\n    std::cerr << \"Caught: \" << e.what() << std::endl;\n    system(\"pause\");\n}\n```\n然后就可以听到MP3音乐了。\n\n# 整合\n具体将三种常见格式(WAV,OGG,MP3)整合到一起，放在项目中使用OpenAL操作，可以看我的[游戏](https://github.com/voidvvv/LinkA)中音频部分的实现。\n按照这个思路，其实也可以把更多的音频文件解析给整合进来。","slug":"openAL_MP3_OGG","published":1,"updated":"2025-05-25T11:55:04.774Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7q00211wu104bu0ywj","content":"<p>在前面已经成功的给游戏引入了OpenAL作为音频播放工具，并且使用了FreeAlut来解析音频。<br>但是这个freeALUT有一个问题，就是目前只支持Wav格式的文件。我们这次来给我们的系统添加对MP3和ogg的支持</p>\n<span id=\"more\"></span>\n<h1 id=\"FreeALUT\"><a href=\"#FreeALUT\" class=\"headerlink\" title=\"FreeALUT\"></a>FreeALUT</h1><p>首先先看下freeALUT的源码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileName = _alutInputStreamGetFileName (stream);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fileName != <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">hasSuffixIgnoringCase</span> (fileName, <span class=\"string\">&quot;.raw&quot;</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadRawFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* For other file formats, read the quasi-standard four byte magic number */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!_alutInputStreamReadInt32BE (stream, &amp;magic))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AL_FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Magic number &#x27;RIFF&#x27; == Microsoft &#x27;.wav&#x27; format */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (magic == <span class=\"number\">0x52494646</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadWavFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Magic number &#x27;.snd&#x27; == Sun &amp; Next&#x27;s &#x27;.au&#x27; format */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (magic == <span class=\"number\">0x2E736E64</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadAUFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这里本身确实只支持了raw，wav文件。</p>\n<h1 id=\"OGG支持\"><a href=\"#OGG支持\" class=\"headerlink\" title=\"OGG支持\"></a>OGG支持</h1><p>为了支持ogg，我们需要引入额外的依赖库，libogg + libvorbis。<br>我们可以在<a href=\"https://xiph.org/downloads/\">这里</a>找到下载的链接，也可以去<a href=\"https://github.com/xiph/ogg\">GITHUB仓库</a>来clone。</p>\n<div class=\"note danger\">需要注意的是，我们这里需要使用两个库，这两个库也是有依赖关系的，即libvorbis 依赖于 libogg ，这点很重要</div>\n\n<h2 id=\"LIBOGG\"><a href=\"#LIBOGG\" class=\"headerlink\" title=\"LIBOGG\"></a>LIBOGG</h2><p>我们需要编译LIBOGG库。<br>直接打开然后使用cmake生成项目文件，然后clean &amp; rebuild 生成即可，默认会生成.a后缀的静态库，我们这里就使用静态库就好。</p>\n<h2 id=\"libvorbis\"><a href=\"#libvorbis\" class=\"headerlink\" title=\"libvorbis\"></a>libvorbis</h2><p>打开libvorbis库，仍然还是使用cmake生成项目文件。<br>但是这里需要注意一下，libvorbis库需要依赖libOGG库来编译，因为libvorbis本质是对LIBOGG的一个拓展。<br>这里，我们有两个方法来引入libOGG：</p>\n<h3 id=\"更改引用文件\"><a href=\"#更改引用文件\" class=\"headerlink\" title=\"更改引用文件\"></a>更改引用文件</h3><ol>\n<li>首先打开libvorbis根目录的cmakelist文件</li>\n<li>注释掉find_package步骤</li>\n<li>添加两个变量，就是我们libOGG打包后的include文件目录，以及生成的依赖文件地址：<br><img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T234529.png\" alt=\"2024-04-12T234529\"> </li>\n<li>进入lib文件夹下，打开这里的cmakelist</li>\n<li>在第89行左右的位置（如下图），将所有的include directories设置中，全部加上刚才设置的include文件目录变量：<br> <img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T234947.png\" alt=\"2024-04-12T234947\"></li>\n<li>将下面对 vorbis的 target_link_libraries 中，PUBLIC Ogg::ogg 改为 PUBLIC + <code>生成的依赖文件地址变量</code><br><img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T235104.png\" alt=\"2024-04-12T235104\"><br>然后打包编译，</li>\n</ol>\n<h3 id=\"方法2-install-LIBOGG\"><a href=\"#方法2-install-LIBOGG\" class=\"headerlink\" title=\"方法2 install LIBOGG\"></a>方法2 install LIBOGG</h3><p>在编译libogg库成功后，可以尝试在libOGG库的cmake文件开头加上如下定义:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)</span><br></pre></td></tr></table></figure>\n<p>这个定义就是用来设置cmake的安装目录的。其实cmake是有默认的安装目录的，但是其默认安装目录为C:&#x2F;Program Files, cmake没有权限去install，所以我们最好自己再指定一个目录。然后执行cmake install命令，这样，我们就会在对应目录看到我们的libOGG已经被安装好了。<br>这里的安装其实就是把头文件，以及依赖库放在了这里。</p>\n<p>然后我们可以在libvorbis根目录的cmakelist文件夹下，加入如下定义:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_PREFIX_PATH  C:/myWareHouse/dev/cpp/cmake_install)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里第一个变量含义仍是安装目录，代表现在如果在libvorbis目录下执行install，那么libvorbis也会安装到这里。<br>第二个变量<code>CMAKE_PREFIX_PATH</code>，代表当前项目在使用cmake构建的时候，会去这个目录下查找当前已经安装过的库，并直接从这里读取头文件以及依赖。<br>这样，我们就不必更改别的地方了，直接执行cmake rebuild，cmake就会去我们到的这个目录下自己去找libOGG，即可成功编译打包，最后也可以将libvorbis 进行一下install操作，这样我们的vorbis也会在我们的cmake库中了。</p>\n<div class=\"note info\"> 这个形式其实跟java中的maven有些类似了</div>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在编译打包成功后，会生成三个依赖库文件：<br> <img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T235156.png\" alt=\"2024-04-12T235156\"><br>现在我们如果需要解析ogg音频文件，需要引入这三个依赖。同时还需要引入libOGG依赖。<br>但是这里有一个坑，<span style='color:red'>libOGG是被这三个所依赖的，在我们自己的应用中，如果要引入这几个依赖，需要先引入libvorbis的三个依赖，然后再引入libOGG，这样我们自己的项目才能成功编译通过，否则是无法使用这个依赖库的。这个是g++本身的设定，其引入库是需要有顺序的，被依赖的库应当放在后面</span><br>像下面这样:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span> </span><br><span class=\"line\">libvorbisfile.a </span><br><span class=\"line\">libvorbis.a</span><br><span class=\"line\">libvorbisenc.a</span><br><span class=\"line\">libogg.a</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>最后放上一个使用demo，demo中将该库与openAL进行了整合</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/al.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;al/alc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vorbis/vorbisfile.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFFER_SIZE     32768       <span class=\"comment\">// 32 KB buffers</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ALCdevice_struct</span> ALCdevice;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ALCcontext_struct</span> ALCcontext;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">LoadOGG</span><span class=\"params\">(<span class=\"type\">char</span> *name, vector&lt;<span class=\"type\">char</span>&gt; &amp;buffer, ALenum &amp;format, ALsizei &amp;freq)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> endian = <span class=\"number\">0</span>;                         <span class=\"comment\">// 0 for Little-Endian, 1 for Big-Endian</span></span><br><span class=\"line\">    <span class=\"type\">int</span> bitStream;</span><br><span class=\"line\">    <span class=\"type\">long</span> bytes;</span><br><span class=\"line\">    <span class=\"type\">char</span> array[BUFFER_SIZE];                <span class=\"comment\">// Local fixed size array</span></span><br><span class=\"line\">    FILE *f;</span><br><span class=\"line\"> </span><br><span class=\"line\">    f = <span class=\"built_in\">fopen</span>(name, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    vorbis_info *pInfo;</span><br><span class=\"line\">    OggVorbis_File oggFile;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Try opening the given file</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">ov_open</span>(f, &amp;oggFile, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    pInfo = <span class=\"built_in\">ov_info</span>(&amp;oggFile, <span class=\"number\">-1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pInfo-&gt;channels == <span class=\"number\">1</span>)</span><br><span class=\"line\">        format = AL_FORMAT_MONO16;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        format = AL_FORMAT_STEREO16;</span><br><span class=\"line\">  </span><br><span class=\"line\">    freq = pInfo-&gt;rate;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        bytes = <span class=\"built_in\">ov_read</span>(&amp;oggFile, array, BUFFER_SIZE, endian, <span class=\"number\">2</span>, <span class=\"number\">1</span>, &amp;bitStream);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ov_clear</span>(&amp;oggFile);</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;Error decoding &quot;</span> &lt;&lt; <span class=\"string\">&quot;fileName&quot;</span> &lt;&lt; <span class=\"string\">&quot;...&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        buffer.<span class=\"built_in\">insert</span>(buffer.<span class=\"built_in\">end</span>(), array, array + bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytes &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">ov_clear</span>(&amp;oggFile);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ALCdevice* pDevice;</span><br><span class=\"line\">    ALCcontext* pContext;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ALint state;                            <span class=\"comment\">// The state of the sound source</span></span><br><span class=\"line\">    ALuint bufferID;                        <span class=\"comment\">// The OpenAL sound buffer ID</span></span><br><span class=\"line\">    ALuint sourceID;                        <span class=\"comment\">// The OpenAL sound source</span></span><br><span class=\"line\">    ALenum format;                          <span class=\"comment\">// The sound data format</span></span><br><span class=\"line\">    ALsizei freq;                           <span class=\"comment\">// The frequency of the sound data</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">char</span>&gt; bufferData;                <span class=\"comment\">// The sound buffer data from file</span></span><br><span class=\"line\">     </span><br><span class=\"line\">\t ALCdevice *device;</span><br><span class=\"line\">     ALCcontext *context; </span><br><span class=\"line\"> </span><br><span class=\"line\">       device = <span class=\"built_in\">alcOpenDevice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">       context = <span class=\"built_in\">alcCreateContext</span>(device,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t   ALboolean initStatus = <span class=\"built_in\">alcMakeContextCurrent</span>(context);    </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create sound buffer and source</span></span><br><span class=\"line\">    <span class=\"built_in\">alGenBuffers</span>(<span class=\"number\">1</span>, &amp;bufferID);</span><br><span class=\"line\">    <span class=\"built_in\">alGenSources</span>(<span class=\"number\">1</span>, &amp;sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Set the source and listener to the same location</span></span><br><span class=\"line\">    <span class=\"built_in\">alListener3f</span>(AL_POSITION, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">alSource3f</span>(sourceID, AL_POSITION, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Load the OGG file into memory</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadOGG</span>(<span class=\"string\">&quot;./sound/TestBeatMono.ogg&quot;</span>, bufferData, format, freq);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Upload sound data to buffer</span></span><br><span class=\"line\">    <span class=\"built_in\">alBufferData</span>(bufferID, format, &amp;bufferData[<span class=\"number\">0</span>], <span class=\"built_in\">static_cast</span>&lt;ALsizei&gt;(bufferData.<span class=\"built_in\">size</span>()), freq);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Attach sound buffer to source</span></span><br><span class=\"line\">    <span class=\"built_in\">alSourcei</span>(sourceID, AL_BUFFER, bufferID);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">alSourcef</span> (sourceID, AL_GAIN, <span class=\"number\">1.0</span> );</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Finally, play the sound!!!</span></span><br><span class=\"line\">    <span class=\"built_in\">alSourcePlay</span>(sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Query the state of the souce</span></span><br><span class=\"line\">        <span class=\"built_in\">alGetSourcei</span>(sourceID, AL_SOURCE_STATE, &amp;state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (state != AL_STOPPED);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Clean up sound buffer and source</span></span><br><span class=\"line\">    <span class=\"built_in\">alDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;bufferID);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteSources</span>(<span class=\"number\">1</span>, &amp;sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">alcDestroyContext</span>(context);</span><br><span class=\"line\">\t<span class=\"built_in\">alcCloseDevice</span>(device);   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们就可以欣赏美妙的ogg音乐了。</p>\n<h1 id=\"MP3\"><a href=\"#MP3\" class=\"headerlink\" title=\"MP3\"></a>MP3</h1><p>关于MP3，我其实并没有找到特别好用的专门处理MP3的库。但是我找到了一个<a href=\"https://github.com/ddiakopoulos/libnyquist\">全能库</a>，它不仅能解析MP3，还能解析个各种音频文件。<br>关于这个库的编译，没什么好说的，直接下下来，编译打包，install即可。<br>这个库的使用有一点点坑</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>在之前使用openAL播放音频的时候，我们传入的bufferData都是一个char数组，但是这个库它解析出来的数据是float数组。<br>这里有一个坑，就是如果给openAL绑定Buffer数据的时候，format如果使用默认的格式，则会出现噪音，乱流，甚至杂音，以及完全无法确认的声源。<br>这时我们需要引入<code>#include &lt;AL/alext.h&gt;</code>库，这个库中有专门对float32优化的格式：<code>AL_FORMAT_STEREO_FLOAT32</code></p>\n<p>具体代码如下,使用libnyquist跟openAL整合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Decoders.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Encoders.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Common.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alext.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> nqr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare_pred</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> a, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::<span class=\"built_in\">tolower</span>(a) == std::<span class=\"built_in\">tolower</span>(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">uint32_t</span> FRAME_SIZE = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int32_t</span> CHANNELS = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int32_t</span> BUFFER_LENGTH = FRAME_SIZE * CHANNELS;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">try</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *s1 = <span class=\"string\">&quot;abc123&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *s2 = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; ((s1 + <span class=\"number\">3</span>) == s2) &lt;&lt; <span class=\"string\">&quot; - = - &quot;</span> &lt;&lt; std::<span class=\"built_in\">equal</span>(s1 + <span class=\"number\">3</span>, s1 + <span class=\"number\">6</span>, s2) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::shared_ptr&lt;AudioData&gt; fileData = std::<span class=\"built_in\">make_shared</span>&lt;AudioData&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    NyquistIO loader;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string cli_arg = std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;./sound/xx.mp3&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> memory = <span class=\"built_in\">ReadFile</span>(cli_arg);</span><br><span class=\"line\">    loader.<span class=\"built_in\">Load</span>(fileData.<span class=\"built_in\">get</span>(), <span class=\"string\">&quot;mp3&quot;</span>, memory.buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;sourceFormat &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;channelCount &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;sampleRate &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;frameSize: &quot;</span> &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;frameSize &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;size: &quot;</span> &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">size</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">alutInit</span>(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    ALuint buffer, source;</span><br><span class=\"line\">    <span class=\"built_in\">alGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br><span class=\"line\">    <span class=\"built_in\">alGenSources</span>(<span class=\"number\">1</span>, &amp;source);</span><br><span class=\"line\">    ALenum format;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileData.<span class=\"built_in\">get</span>()-&gt;channelCount == <span class=\"number\">1</span>)</span><br><span class=\"line\">        format = AL_FORMAT_MONO16;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        format = AL_FORMAT_STEREO16;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">alBufferData</span>(buffer,</span><br><span class=\"line\">                 AL_FORMAT_STEREO_FLOAT32, <span class=\"comment\">// 这里，需要注意，不能使用上面openAL原生的格式，需要使用alext给我们提供的格式</span></span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">size</span>() * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>),</span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;sampleRate);</span><br><span class=\"line\">    <span class=\"built_in\">alSourcei</span>(source, AL_BUFFER, buffer);</span><br><span class=\"line\">    <span class=\"built_in\">alSourcePlay</span>(source);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">alSourceStop</span>(source);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteSources</span>(<span class=\"number\">1</span>, &amp;source);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> UnsupportedExtensionEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> LoadPathNotImplEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> LoadBufferNotImplEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::exception &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就可以听到MP3音乐了。</p>\n<h1 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h1><p>具体将三种常见格式(WAV,OGG,MP3)整合到一起，放在项目中使用OpenAL操作，可以看我的<a href=\"https://github.com/voidvvv/LinkA\">游戏</a>中音频部分的实现。<br>按照这个思路，其实也可以把更多的音频文件解析给整合进来。</p>\n","length":2035,"excerpt":"<p>在前面已经成功的给游戏引入了OpenAL作为音频播放工具，并且使用了FreeAlut来解析音频。<br>但是这个freeALUT有一个问题，就是目前只支持Wav格式的文件。我们这次来给我们的系统添加对MP3和ogg的支持</p>","more":"<h1 id=\"FreeALUT\"><a href=\"#FreeALUT\" class=\"headerlink\" title=\"FreeALUT\"></a>FreeALUT</h1><p>首先先看下freeALUT的源码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileName = _alutInputStreamGetFileName (stream);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fileName != <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">hasSuffixIgnoringCase</span> (fileName, <span class=\"string\">&quot;.raw&quot;</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadRawFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* For other file formats, read the quasi-standard four byte magic number */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!_alutInputStreamReadInt32BE (stream, &amp;magic))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AL_FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Magic number &#x27;RIFF&#x27; == Microsoft &#x27;.wav&#x27; format */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (magic == <span class=\"number\">0x52494646</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadWavFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Magic number &#x27;.snd&#x27; == Sun &amp; Next&#x27;s &#x27;.au&#x27; format */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (magic == <span class=\"number\">0x2E736E64</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">loadAUFile</span> (stream);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这里本身确实只支持了raw，wav文件。</p>\n<h1 id=\"OGG支持\"><a href=\"#OGG支持\" class=\"headerlink\" title=\"OGG支持\"></a>OGG支持</h1><p>为了支持ogg，我们需要引入额外的依赖库，libogg + libvorbis。<br>我们可以在<a href=\"https://xiph.org/downloads/\">这里</a>找到下载的链接，也可以去<a href=\"https://github.com/xiph/ogg\">GITHUB仓库</a>来clone。</p>\n<div class=\"note danger\">需要注意的是，我们这里需要使用两个库，这两个库也是有依赖关系的，即libvorbis 依赖于 libogg ，这点很重要</div>\n\n<h2 id=\"LIBOGG\"><a href=\"#LIBOGG\" class=\"headerlink\" title=\"LIBOGG\"></a>LIBOGG</h2><p>我们需要编译LIBOGG库。<br>直接打开然后使用cmake生成项目文件，然后clean &amp; rebuild 生成即可，默认会生成.a后缀的静态库，我们这里就使用静态库就好。</p>\n<h2 id=\"libvorbis\"><a href=\"#libvorbis\" class=\"headerlink\" title=\"libvorbis\"></a>libvorbis</h2><p>打开libvorbis库，仍然还是使用cmake生成项目文件。<br>但是这里需要注意一下，libvorbis库需要依赖libOGG库来编译，因为libvorbis本质是对LIBOGG的一个拓展。<br>这里，我们有两个方法来引入libOGG：</p>\n<h3 id=\"更改引用文件\"><a href=\"#更改引用文件\" class=\"headerlink\" title=\"更改引用文件\"></a>更改引用文件</h3><ol>\n<li>首先打开libvorbis根目录的cmakelist文件</li>\n<li>注释掉find_package步骤</li>\n<li>添加两个变量，就是我们libOGG打包后的include文件目录，以及生成的依赖文件地址：<br><img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T234529.png\" alt=\"2024-04-12T234529\"> </li>\n<li>进入lib文件夹下，打开这里的cmakelist</li>\n<li>在第89行左右的位置（如下图），将所有的include directories设置中，全部加上刚才设置的include文件目录变量：<br> <img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T234947.png\" alt=\"2024-04-12T234947\"></li>\n<li>将下面对 vorbis的 target_link_libraries 中，PUBLIC Ogg::ogg 改为 PUBLIC + <code>生成的依赖文件地址变量</code><br><img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T235104.png\" alt=\"2024-04-12T235104\"><br>然后打包编译，</li>\n</ol>\n<h3 id=\"方法2-install-LIBOGG\"><a href=\"#方法2-install-LIBOGG\" class=\"headerlink\" title=\"方法2 install LIBOGG\"></a>方法2 install LIBOGG</h3><p>在编译libogg库成功后，可以尝试在libOGG库的cmake文件开头加上如下定义:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)</span><br></pre></td></tr></table></figure>\n<p>这个定义就是用来设置cmake的安装目录的。其实cmake是有默认的安装目录的，但是其默认安装目录为C:&#x2F;Program Files, cmake没有权限去install，所以我们最好自己再指定一个目录。然后执行cmake install命令，这样，我们就会在对应目录看到我们的libOGG已经被安装好了。<br>这里的安装其实就是把头文件，以及依赖库放在了这里。</p>\n<p>然后我们可以在libvorbis根目录的cmakelist文件夹下，加入如下定义:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_INSTALL_PREFIX  C:/myWareHouse/dev/cpp/cmake_install)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_PREFIX_PATH  C:/myWareHouse/dev/cpp/cmake_install)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里第一个变量含义仍是安装目录，代表现在如果在libvorbis目录下执行install，那么libvorbis也会安装到这里。<br>第二个变量<code>CMAKE_PREFIX_PATH</code>，代表当前项目在使用cmake构建的时候，会去这个目录下查找当前已经安装过的库，并直接从这里读取头文件以及依赖。<br>这样，我们就不必更改别的地方了，直接执行cmake rebuild，cmake就会去我们到的这个目录下自己去找libOGG，即可成功编译打包，最后也可以将libvorbis 进行一下install操作，这样我们的vorbis也会在我们的cmake库中了。</p>\n<div class=\"note info\"> 这个形式其实跟java中的maven有些类似了</div>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在编译打包成功后，会生成三个依赖库文件：<br> <img src=\"/2024/04/12/openAL_MP3_OGG/2024-04-12T235156.png\" alt=\"2024-04-12T235156\"><br>现在我们如果需要解析ogg音频文件，需要引入这三个依赖。同时还需要引入libOGG依赖。<br>但是这里有一个坑，<span style='color:red'>libOGG是被这三个所依赖的，在我们自己的应用中，如果要引入这几个依赖，需要先引入libvorbis的三个依赖，然后再引入libOGG，这样我们自己的项目才能成功编译通过，否则是无法使用这个依赖库的。这个是g++本身的设定，其引入库是需要有顺序的，被依赖的库应当放在后面</span><br>像下面这样:</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span> </span><br><span class=\"line\">libvorbisfile.a </span><br><span class=\"line\">libvorbis.a</span><br><span class=\"line\">libvorbisenc.a</span><br><span class=\"line\">libogg.a</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>最后放上一个使用demo，demo中将该库与openAL进行了整合</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/al.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;al/alc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vorbis/vorbisfile.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFFER_SIZE     32768       <span class=\"comment\">// 32 KB buffers</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ALCdevice_struct</span> ALCdevice;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ALCcontext_struct</span> ALCcontext;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">LoadOGG</span><span class=\"params\">(<span class=\"type\">char</span> *name, vector&lt;<span class=\"type\">char</span>&gt; &amp;buffer, ALenum &amp;format, ALsizei &amp;freq)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> endian = <span class=\"number\">0</span>;                         <span class=\"comment\">// 0 for Little-Endian, 1 for Big-Endian</span></span><br><span class=\"line\">    <span class=\"type\">int</span> bitStream;</span><br><span class=\"line\">    <span class=\"type\">long</span> bytes;</span><br><span class=\"line\">    <span class=\"type\">char</span> array[BUFFER_SIZE];                <span class=\"comment\">// Local fixed size array</span></span><br><span class=\"line\">    FILE *f;</span><br><span class=\"line\"> </span><br><span class=\"line\">    f = <span class=\"built_in\">fopen</span>(name, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    vorbis_info *pInfo;</span><br><span class=\"line\">    OggVorbis_File oggFile;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Try opening the given file</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">ov_open</span>(f, &amp;oggFile, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    pInfo = <span class=\"built_in\">ov_info</span>(&amp;oggFile, <span class=\"number\">-1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pInfo-&gt;channels == <span class=\"number\">1</span>)</span><br><span class=\"line\">        format = AL_FORMAT_MONO16;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        format = AL_FORMAT_STEREO16;</span><br><span class=\"line\">  </span><br><span class=\"line\">    freq = pInfo-&gt;rate;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        bytes = <span class=\"built_in\">ov_read</span>(&amp;oggFile, array, BUFFER_SIZE, endian, <span class=\"number\">2</span>, <span class=\"number\">1</span>, &amp;bitStream);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ov_clear</span>(&amp;oggFile);</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;Error decoding &quot;</span> &lt;&lt; <span class=\"string\">&quot;fileName&quot;</span> &lt;&lt; <span class=\"string\">&quot;...&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        buffer.<span class=\"built_in\">insert</span>(buffer.<span class=\"built_in\">end</span>(), array, array + bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bytes &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">ov_clear</span>(&amp;oggFile);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ALCdevice* pDevice;</span><br><span class=\"line\">    ALCcontext* pContext;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ALint state;                            <span class=\"comment\">// The state of the sound source</span></span><br><span class=\"line\">    ALuint bufferID;                        <span class=\"comment\">// The OpenAL sound buffer ID</span></span><br><span class=\"line\">    ALuint sourceID;                        <span class=\"comment\">// The OpenAL sound source</span></span><br><span class=\"line\">    ALenum format;                          <span class=\"comment\">// The sound data format</span></span><br><span class=\"line\">    ALsizei freq;                           <span class=\"comment\">// The frequency of the sound data</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">char</span>&gt; bufferData;                <span class=\"comment\">// The sound buffer data from file</span></span><br><span class=\"line\">     </span><br><span class=\"line\">\t ALCdevice *device;</span><br><span class=\"line\">     ALCcontext *context; </span><br><span class=\"line\"> </span><br><span class=\"line\">       device = <span class=\"built_in\">alcOpenDevice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">       context = <span class=\"built_in\">alcCreateContext</span>(device,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t   ALboolean initStatus = <span class=\"built_in\">alcMakeContextCurrent</span>(context);    </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create sound buffer and source</span></span><br><span class=\"line\">    <span class=\"built_in\">alGenBuffers</span>(<span class=\"number\">1</span>, &amp;bufferID);</span><br><span class=\"line\">    <span class=\"built_in\">alGenSources</span>(<span class=\"number\">1</span>, &amp;sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Set the source and listener to the same location</span></span><br><span class=\"line\">    <span class=\"built_in\">alListener3f</span>(AL_POSITION, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">alSource3f</span>(sourceID, AL_POSITION, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Load the OGG file into memory</span></span><br><span class=\"line\">    <span class=\"built_in\">LoadOGG</span>(<span class=\"string\">&quot;./sound/TestBeatMono.ogg&quot;</span>, bufferData, format, freq);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Upload sound data to buffer</span></span><br><span class=\"line\">    <span class=\"built_in\">alBufferData</span>(bufferID, format, &amp;bufferData[<span class=\"number\">0</span>], <span class=\"built_in\">static_cast</span>&lt;ALsizei&gt;(bufferData.<span class=\"built_in\">size</span>()), freq);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Attach sound buffer to source</span></span><br><span class=\"line\">    <span class=\"built_in\">alSourcei</span>(sourceID, AL_BUFFER, bufferID);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">alSourcef</span> (sourceID, AL_GAIN, <span class=\"number\">1.0</span> );</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Finally, play the sound!!!</span></span><br><span class=\"line\">    <span class=\"built_in\">alSourcePlay</span>(sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Query the state of the souce</span></span><br><span class=\"line\">        <span class=\"built_in\">alGetSourcei</span>(sourceID, AL_SOURCE_STATE, &amp;state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (state != AL_STOPPED);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Clean up sound buffer and source</span></span><br><span class=\"line\">    <span class=\"built_in\">alDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;bufferID);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteSources</span>(<span class=\"number\">1</span>, &amp;sourceID);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">alcDestroyContext</span>(context);</span><br><span class=\"line\">\t<span class=\"built_in\">alcCloseDevice</span>(device);   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们就可以欣赏美妙的ogg音乐了。</p>\n<h1 id=\"MP3\"><a href=\"#MP3\" class=\"headerlink\" title=\"MP3\"></a>MP3</h1><p>关于MP3，我其实并没有找到特别好用的专门处理MP3的库。但是我找到了一个<a href=\"https://github.com/ddiakopoulos/libnyquist\">全能库</a>，它不仅能解析MP3，还能解析个各种音频文件。<br>关于这个库的编译，没什么好说的，直接下下来，编译打包，install即可。<br>这个库的使用有一点点坑</p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>在之前使用openAL播放音频的时候，我们传入的bufferData都是一个char数组，但是这个库它解析出来的数据是float数组。<br>这里有一个坑，就是如果给openAL绑定Buffer数据的时候，format如果使用默认的格式，则会出现噪音，乱流，甚至杂音，以及完全无法确认的声源。<br>这时我们需要引入<code>#include &lt;AL/alext.h&gt;</code>库，这个库中有专门对float32优化的格式：<code>AL_FORMAT_STEREO_FLOAT32</code></p>\n<p>具体代码如下,使用libnyquist跟openAL整合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Decoders.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Encoders.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnyquist/Common.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alext.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> nqr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare_pred</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> a, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::<span class=\"built_in\">tolower</span>(a) == std::<span class=\"built_in\">tolower</span>(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">uint32_t</span> FRAME_SIZE = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int32_t</span> CHANNELS = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int32_t</span> BUFFER_LENGTH = FRAME_SIZE * CHANNELS;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">try</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *s1 = <span class=\"string\">&quot;abc123&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *s2 = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; ((s1 + <span class=\"number\">3</span>) == s2) &lt;&lt; <span class=\"string\">&quot; - = - &quot;</span> &lt;&lt; std::<span class=\"built_in\">equal</span>(s1 + <span class=\"number\">3</span>, s1 + <span class=\"number\">6</span>, s2) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::shared_ptr&lt;AudioData&gt; fileData = std::<span class=\"built_in\">make_shared</span>&lt;AudioData&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    NyquistIO loader;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string cli_arg = std::<span class=\"built_in\">string</span>(<span class=\"string\">&quot;./sound/xx.mp3&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> memory = <span class=\"built_in\">ReadFile</span>(cli_arg);</span><br><span class=\"line\">    loader.<span class=\"built_in\">Load</span>(fileData.<span class=\"built_in\">get</span>(), <span class=\"string\">&quot;mp3&quot;</span>, memory.buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;sourceFormat &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;channelCount &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;sampleRate &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;frameSize: &quot;</span> &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;frameSize &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;size: &quot;</span> &lt;&lt; fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">size</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">alutInit</span>(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    ALuint buffer, source;</span><br><span class=\"line\">    <span class=\"built_in\">alGenBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br><span class=\"line\">    <span class=\"built_in\">alGenSources</span>(<span class=\"number\">1</span>, &amp;source);</span><br><span class=\"line\">    ALenum format;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileData.<span class=\"built_in\">get</span>()-&gt;channelCount == <span class=\"number\">1</span>)</span><br><span class=\"line\">        format = AL_FORMAT_MONO16;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        format = AL_FORMAT_STEREO16;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">alBufferData</span>(buffer,</span><br><span class=\"line\">                 AL_FORMAT_STEREO_FLOAT32, <span class=\"comment\">// 这里，需要注意，不能使用上面openAL原生的格式，需要使用alext给我们提供的格式</span></span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">data</span>(),</span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;samples.<span class=\"built_in\">size</span>() * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>),</span><br><span class=\"line\">                 fileData.<span class=\"built_in\">get</span>()-&gt;sampleRate);</span><br><span class=\"line\">    <span class=\"built_in\">alSourcei</span>(source, AL_BUFFER, buffer);</span><br><span class=\"line\">    <span class=\"built_in\">alSourcePlay</span>(source);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">alSourceStop</span>(source);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteSources</span>(<span class=\"number\">1</span>, &amp;source);</span><br><span class=\"line\">    <span class=\"built_in\">alDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;buffer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> UnsupportedExtensionEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> LoadPathNotImplEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> LoadBufferNotImplEx &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">catch</span> (<span class=\"type\">const</span> std::exception &amp;e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Caught: &quot;</span> &lt;&lt; e.<span class=\"built_in\">what</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就可以听到MP3音乐了。</p>\n<h1 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h1><p>具体将三种常见格式(WAV,OGG,MP3)整合到一起，放在项目中使用OpenAL操作，可以看我的<a href=\"https://github.com/voidvvv/LinkA\">游戏</a>中音频部分的实现。<br>按照这个思路，其实也可以把更多的音频文件解析给整合进来。</p>"},{"title":"openGL 实现自己的Camera类","date":"2024-03-08T01:55:18.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n一个小实战\n<!-- more -->\n\n\n写一个perspective cameraa作为小实战\n# 头文件\n```c++\ntypedef glm::vec3 VEC3;\nclass MyPerspectCamera\n{\npublic:\n\tVEC3 Position ;\n\tVEC3 Front;\n\tVEC3 Up ;\n\tVEC3 WorldUp;\n\tVEC3 Right;\n\n\t// euler Angles\n\tfloat Yaw;\n\tfloat Pitch;\n\t// camera options\n\tfloat MovementSpeed;\n\tfloat MouseSensitivity;\n\tfloat Zoom;\n\n\tglm::mat4 Projection;\n\n\tMyPerspectCamera(VEC3 position = VEC3(0,0,0), VEC3 front = VEC3(0, 0, 0), VEC3 worldUP = VEC3(0, 0, 0));\n\n\tvoid update();\n\n\tglm::mat4 vieMatrix();\n\n\tglm::mat4 projection();\n\n\tvoid move(CAMERA_DIRECTION , float deltaTime);\n\n\tvoid rotate(float xoffset, float yoffset, GLboolean constrainPitch = true);\n\n\tvoid justZoom(float yoffset);\n};\n\n```\n根据之前的学习，我们知道，想要渲染一个3d物体，我们需要几个矩阵：model，view，projection。\n其中，model矩阵是物体本身的属性，我们相机不负责。剩下的两个，分别是view 和projection是我们的相机可以控制的\n\n## view\n为了构造view矩阵，我们需要知道：当前相机的位置，相机所对的方向，相机的上方（定位）：\n```c++\n\tVEC3 Position ;\n\tVEC3 Front;\n\tVEC3 Up ;\n```\n构造方法中，传入这三个参数。\n\n## method\n我们的摄像机类，还需要几个方法。\n### move\n因为我们的相机想要移动，所以定义一个move方法，方法参数两个，一个是移动方向，另一个是移动持续时间（我们这里一般是当前帧与上一帧的时间差，保证不同渲染性能下表现是一样的）。我们这里同时定义一个移动方向枚举：\n```c++\nenum CAMERA_DIRECTION\n{\n\tCAMERA_UP, CAMERA_DOWN, CAMERA_LEFT, CAMERA_RIGHT\n};\n\n\tvoid move(CAMERA_DIRECTION , float deltaTime);\n```\n### rotate\n我们的相机也需要能够改变视角。类似于一个fps游戏中的第一人称视角控制那种。\n转动需要知道在x轴上以及y轴上转动的角度。为什么不管z轴呢？因为我们还不想做歪头的那种效果。就先管x,y暂时够了\n```c++\n\tvoid rotate(float xoffset, float yoffset, GLboolean constrainPitch = true);\n```\n在这里我们有另外一个参数，表示是否要限制当前的角度。试想一下，正常的fps游戏中玩家的视角转动肯定是有一定限制的，尤其是在y轴上，就是说抬头，最多抬到90°。这里的这个参数就是用来限制的。\n\n## projection\nview相关的操作就先这么多。我们还有另外一个矩阵，projection。\n在projection中，我们只想控制相机的`聚焦`，就是 `glm::perspect`方法的第一个参数。并且这个参数是用鼠标滚轮来控制的，所以我们还需要监控系统鼠标滚轮的变化.\n```c++\n\tvoid justZoom(float yoffset);\n```\n\n## other\n最后，我们要有一个update方法来更新我们的矩阵。还有另外两个get方法把view和projection矩阵获取到\n\n## 实现\n```c++\n#include \"MyPerspectCamera.h\"\n\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nextern enum CAMERA_DIRECTION;\n\nMyPerspectCamera::MyPerspectCamera(VEC3 position, VEC3 front, VEC3 worldUP):\nYaw(YAW),Pitch(PITCH),MovementSpeed(SPEED),MouseSensitivity(SENSITIVITY), Front(glm::vec3(0.0f, 0.0f, -1.0f)),Zoom(ZOOM)\n{\n\tPosition = position;\n\tFront = front;\n    WorldUp = worldUP;\n    Projection = glm::perspective(glm::radians(Zoom), (float)SCREEN_WIDTH / (float)SCREEN_HEIGH, 0.1f,100.f);\n\tupdate();\n}\n\n// view矩阵是用lookat方法获取，用到的就是我们之前定义的属性\nglm::mat4 MyPerspectCamera::vieMatrix() {\n    return glm::lookAt(Position,Position + Front, Up);\n};\n// projection 矩阵则是直接返回我们对象持有的当前projection\nglm::mat4 MyPerspectCamera::projection() {\n    return Projection;\n};\n\nvoid MyPerspectCamera::move(CAMERA_DIRECTION dir, float deltaTime) {\n    if (dir == CAMERA_DIRECTION::CAMERA_UP) {\n        Position += Front * deltaTime;\n    }\n    else if (dir == CAMERA_DIRECTION::CAMERA_DOWN) {\n        Position -= Front * deltaTime;\n    }\n\n    if (dir == CAMERA_DIRECTION::CAMERA_LEFT) {\n        Position -= Right * deltaTime;\n    }\n    else if (dir == CAMERA_DIRECTION::CAMERA_RIGHT) {\n        Position += Right * deltaTime;\n    }\n}\n\nvoid MyPerspectCamera::rotate(float xoffset, float yoffset, GLboolean constrainPitch) {\n    xoffset *= MouseSensitivity;\n    yoffset *= MouseSensitivity;\n\n    Yaw += xoffset;\n    Pitch += yoffset;\n\n    // make sure that when pitch is out of bounds, screen doesn't get flipped\n    if (constrainPitch)\n    {\n        if (Pitch > 89.0f)\n            Pitch = 89.0f;\n        if (Pitch < -89.0f)\n            Pitch = -89.0f;\n    }\n\n    // update Front, Right and Up Vectors using the updated Euler angles\n    update();\n\n}\n\nvoid MyPerspectCamera::justZoom(float yoffset)\n{\n    Zoom -= (float)yoffset;\n    if (Zoom < 1.0f)\n        Zoom = 1.0f;\n    if (Zoom > 45.0f)\n        Zoom = 45.0f;\n    Projection = glm::perspective(glm::radians(Zoom), (float)SCREEN_WIDTH / (float)SCREEN_HEIGH, 0.1f, 100.f);\n}\n\nvoid MyPerspectCamera::update()\n{\n    // calculate the new Front vector\n    glm::vec3 front;\n    front.x = cos(glm::radians(Yaw)) * cos(glm::radians(Pitch));\n    front.y = sin(glm::radians(Pitch));\n    front.z = sin(glm::radians(Yaw)) * cos(glm::radians(Pitch));\n    Front = glm::normalize(front);\n    // also re-calculate the Right and Up vector\n    Right = glm::normalize(glm::cross(Front, WorldUp));  // normalize the vectors, because their length gets closer to 0 the more you look up or down which results in slower movement.\n    Up = glm::normalize(glm::cross(Right, Front));\n}\n```\n\n","source":"_posts/openGL_camera_diy.md","raw":"---\ntitle: openGL 实现自己的Camera类\ndate: 2024-03-08T17:55:18+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n一个小实战\n<!-- more -->\n\n\n写一个perspective cameraa作为小实战\n# 头文件\n```c++\ntypedef glm::vec3 VEC3;\nclass MyPerspectCamera\n{\npublic:\n\tVEC3 Position ;\n\tVEC3 Front;\n\tVEC3 Up ;\n\tVEC3 WorldUp;\n\tVEC3 Right;\n\n\t// euler Angles\n\tfloat Yaw;\n\tfloat Pitch;\n\t// camera options\n\tfloat MovementSpeed;\n\tfloat MouseSensitivity;\n\tfloat Zoom;\n\n\tglm::mat4 Projection;\n\n\tMyPerspectCamera(VEC3 position = VEC3(0,0,0), VEC3 front = VEC3(0, 0, 0), VEC3 worldUP = VEC3(0, 0, 0));\n\n\tvoid update();\n\n\tglm::mat4 vieMatrix();\n\n\tglm::mat4 projection();\n\n\tvoid move(CAMERA_DIRECTION , float deltaTime);\n\n\tvoid rotate(float xoffset, float yoffset, GLboolean constrainPitch = true);\n\n\tvoid justZoom(float yoffset);\n};\n\n```\n根据之前的学习，我们知道，想要渲染一个3d物体，我们需要几个矩阵：model，view，projection。\n其中，model矩阵是物体本身的属性，我们相机不负责。剩下的两个，分别是view 和projection是我们的相机可以控制的\n\n## view\n为了构造view矩阵，我们需要知道：当前相机的位置，相机所对的方向，相机的上方（定位）：\n```c++\n\tVEC3 Position ;\n\tVEC3 Front;\n\tVEC3 Up ;\n```\n构造方法中，传入这三个参数。\n\n## method\n我们的摄像机类，还需要几个方法。\n### move\n因为我们的相机想要移动，所以定义一个move方法，方法参数两个，一个是移动方向，另一个是移动持续时间（我们这里一般是当前帧与上一帧的时间差，保证不同渲染性能下表现是一样的）。我们这里同时定义一个移动方向枚举：\n```c++\nenum CAMERA_DIRECTION\n{\n\tCAMERA_UP, CAMERA_DOWN, CAMERA_LEFT, CAMERA_RIGHT\n};\n\n\tvoid move(CAMERA_DIRECTION , float deltaTime);\n```\n### rotate\n我们的相机也需要能够改变视角。类似于一个fps游戏中的第一人称视角控制那种。\n转动需要知道在x轴上以及y轴上转动的角度。为什么不管z轴呢？因为我们还不想做歪头的那种效果。就先管x,y暂时够了\n```c++\n\tvoid rotate(float xoffset, float yoffset, GLboolean constrainPitch = true);\n```\n在这里我们有另外一个参数，表示是否要限制当前的角度。试想一下，正常的fps游戏中玩家的视角转动肯定是有一定限制的，尤其是在y轴上，就是说抬头，最多抬到90°。这里的这个参数就是用来限制的。\n\n## projection\nview相关的操作就先这么多。我们还有另外一个矩阵，projection。\n在projection中，我们只想控制相机的`聚焦`，就是 `glm::perspect`方法的第一个参数。并且这个参数是用鼠标滚轮来控制的，所以我们还需要监控系统鼠标滚轮的变化.\n```c++\n\tvoid justZoom(float yoffset);\n```\n\n## other\n最后，我们要有一个update方法来更新我们的矩阵。还有另外两个get方法把view和projection矩阵获取到\n\n## 实现\n```c++\n#include \"MyPerspectCamera.h\"\n\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nextern enum CAMERA_DIRECTION;\n\nMyPerspectCamera::MyPerspectCamera(VEC3 position, VEC3 front, VEC3 worldUP):\nYaw(YAW),Pitch(PITCH),MovementSpeed(SPEED),MouseSensitivity(SENSITIVITY), Front(glm::vec3(0.0f, 0.0f, -1.0f)),Zoom(ZOOM)\n{\n\tPosition = position;\n\tFront = front;\n    WorldUp = worldUP;\n    Projection = glm::perspective(glm::radians(Zoom), (float)SCREEN_WIDTH / (float)SCREEN_HEIGH, 0.1f,100.f);\n\tupdate();\n}\n\n// view矩阵是用lookat方法获取，用到的就是我们之前定义的属性\nglm::mat4 MyPerspectCamera::vieMatrix() {\n    return glm::lookAt(Position,Position + Front, Up);\n};\n// projection 矩阵则是直接返回我们对象持有的当前projection\nglm::mat4 MyPerspectCamera::projection() {\n    return Projection;\n};\n\nvoid MyPerspectCamera::move(CAMERA_DIRECTION dir, float deltaTime) {\n    if (dir == CAMERA_DIRECTION::CAMERA_UP) {\n        Position += Front * deltaTime;\n    }\n    else if (dir == CAMERA_DIRECTION::CAMERA_DOWN) {\n        Position -= Front * deltaTime;\n    }\n\n    if (dir == CAMERA_DIRECTION::CAMERA_LEFT) {\n        Position -= Right * deltaTime;\n    }\n    else if (dir == CAMERA_DIRECTION::CAMERA_RIGHT) {\n        Position += Right * deltaTime;\n    }\n}\n\nvoid MyPerspectCamera::rotate(float xoffset, float yoffset, GLboolean constrainPitch) {\n    xoffset *= MouseSensitivity;\n    yoffset *= MouseSensitivity;\n\n    Yaw += xoffset;\n    Pitch += yoffset;\n\n    // make sure that when pitch is out of bounds, screen doesn't get flipped\n    if (constrainPitch)\n    {\n        if (Pitch > 89.0f)\n            Pitch = 89.0f;\n        if (Pitch < -89.0f)\n            Pitch = -89.0f;\n    }\n\n    // update Front, Right and Up Vectors using the updated Euler angles\n    update();\n\n}\n\nvoid MyPerspectCamera::justZoom(float yoffset)\n{\n    Zoom -= (float)yoffset;\n    if (Zoom < 1.0f)\n        Zoom = 1.0f;\n    if (Zoom > 45.0f)\n        Zoom = 45.0f;\n    Projection = glm::perspective(glm::radians(Zoom), (float)SCREEN_WIDTH / (float)SCREEN_HEIGH, 0.1f, 100.f);\n}\n\nvoid MyPerspectCamera::update()\n{\n    // calculate the new Front vector\n    glm::vec3 front;\n    front.x = cos(glm::radians(Yaw)) * cos(glm::radians(Pitch));\n    front.y = sin(glm::radians(Pitch));\n    front.z = sin(glm::radians(Yaw)) * cos(glm::radians(Pitch));\n    Front = glm::normalize(front);\n    // also re-calculate the Right and Up vector\n    Right = glm::normalize(glm::cross(Front, WorldUp));  // normalize the vectors, because their length gets closer to 0 the more you look up or down which results in slower movement.\n    Up = glm::normalize(glm::cross(Right, Front));\n}\n```\n\n","slug":"openGL_camera_diy","published":1,"updated":"2025-03-28T02:05:16.208Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7q00231wu1dyxz1ow1","content":"<p><img src=\"/2024/03/08/openGL_camera_diy/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>一个小实战</p>\n<span id=\"more\"></span>\n\n\n<p>写一个perspective cameraa作为小实战</p>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> glm::vec3 VEC3;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPerspectCamera</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tVEC3 Position ;</span><br><span class=\"line\">\tVEC3 Front;</span><br><span class=\"line\">\tVEC3 Up ;</span><br><span class=\"line\">\tVEC3 WorldUp;</span><br><span class=\"line\">\tVEC3 Right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// euler Angles</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> Yaw;</span><br><span class=\"line\">\t<span class=\"type\">float</span> Pitch;</span><br><span class=\"line\">\t<span class=\"comment\">// camera options</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> MovementSpeed;</span><br><span class=\"line\">\t<span class=\"type\">float</span> MouseSensitivity;</span><br><span class=\"line\">\t<span class=\"type\">float</span> Zoom;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglm::mat4 Projection;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">MyPerspectCamera</span>(VEC3 position = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), VEC3 front = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), VEC3 worldUP = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">glm::mat4 <span class=\"title\">vieMatrix</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">glm::mat4 <span class=\"title\">projection</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">move</span><span class=\"params\">(CAMERA_DIRECTION , <span class=\"type\">float</span> deltaTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch = <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据之前的学习，我们知道，想要渲染一个3d物体，我们需要几个矩阵：model，view，projection。<br>其中，model矩阵是物体本身的属性，我们相机不负责。剩下的两个，分别是view 和projection是我们的相机可以控制的</p>\n<h2 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h2><p>为了构造view矩阵，我们需要知道：当前相机的位置，相机所对的方向，相机的上方（定位）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VEC3 Position ;</span><br><span class=\"line\">VEC3 Front;</span><br><span class=\"line\">VEC3 Up ;</span><br></pre></td></tr></table></figure>\n<p>构造方法中，传入这三个参数。</p>\n<h2 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h2><p>我们的摄像机类，还需要几个方法。</p>\n<h3 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h3><p>因为我们的相机想要移动，所以定义一个move方法，方法参数两个，一个是移动方向，另一个是移动持续时间（我们这里一般是当前帧与上一帧的时间差，保证不同渲染性能下表现是一样的）。我们这里同时定义一个移动方向枚举：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CAMERA_DIRECTION</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tCAMERA_UP, CAMERA_DOWN, CAMERA_LEFT, CAMERA_RIGHT</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">move</span><span class=\"params\">(CAMERA_DIRECTION , <span class=\"type\">float</span> deltaTime)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"rotate\"><a href=\"#rotate\" class=\"headerlink\" title=\"rotate\"></a>rotate</h3><p>我们的相机也需要能够改变视角。类似于一个fps游戏中的第一人称视角控制那种。<br>转动需要知道在x轴上以及y轴上转动的角度。为什么不管z轴呢？因为我们还不想做歪头的那种效果。就先管x,y暂时够了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch = <span class=\"literal\">true</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>在这里我们有另外一个参数，表示是否要限制当前的角度。试想一下，正常的fps游戏中玩家的视角转动肯定是有一定限制的，尤其是在y轴上，就是说抬头，最多抬到90°。这里的这个参数就是用来限制的。</p>\n<h2 id=\"projection\"><a href=\"#projection\" class=\"headerlink\" title=\"projection\"></a>projection</h2><p>view相关的操作就先这么多。我们还有另外一个矩阵，projection。<br>在projection中，我们只想控制相机的<code>聚焦</code>，就是 <code>glm::perspect</code>方法的第一个参数。并且这个参数是用鼠标滚轮来控制的，所以我们还需要监控系统鼠标滚轮的变化.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><p>最后，我们要有一个update方法来更新我们的矩阵。还有另外两个get方法把view和projection矩阵获取到</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyPerspectCamera.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">CAMERA_DIRECTION</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPerspectCamera::<span class=\"built_in\">MyPerspectCamera</span>(VEC3 position, VEC3 front, VEC3 worldUP):</span><br><span class=\"line\"><span class=\"built_in\">Yaw</span>(YAW),<span class=\"built_in\">Pitch</span>(PITCH),<span class=\"built_in\">MovementSpeed</span>(SPEED),<span class=\"built_in\">MouseSensitivity</span>(SENSITIVITY), <span class=\"built_in\">Front</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>)),<span class=\"built_in\">Zoom</span>(ZOOM)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPosition = position;</span><br><span class=\"line\">\tFront = front;</span><br><span class=\"line\">    WorldUp = worldUP;</span><br><span class=\"line\">    Projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(Zoom), (<span class=\"type\">float</span>)SCREEN_WIDTH / (<span class=\"type\">float</span>)SCREEN_HEIGH, <span class=\"number\">0.1f</span>,<span class=\"number\">100.f</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">update</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// view矩阵是用lookat方法获取，用到的就是我们之前定义的属性</span></span><br><span class=\"line\"><span class=\"function\">glm::mat4 <span class=\"title\">MyPerspectCamera::vieMatrix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> glm::<span class=\"built_in\">lookAt</span>(Position,Position + Front, Up);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// projection 矩阵则是直接返回我们对象持有的当前projection</span></span><br><span class=\"line\"><span class=\"function\">glm::mat4 <span class=\"title\">MyPerspectCamera::projection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Projection;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::move</span><span class=\"params\">(CAMERA_DIRECTION dir, <span class=\"type\">float</span> deltaTime)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_UP) &#123;</span><br><span class=\"line\">        Position += Front * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_DOWN) &#123;</span><br><span class=\"line\">        Position -= Front * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_LEFT) &#123;</span><br><span class=\"line\">        Position -= Right * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_RIGHT) &#123;</span><br><span class=\"line\">        Position += Right * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch)</span> </span>&#123;</span><br><span class=\"line\">    xoffset *= MouseSensitivity;</span><br><span class=\"line\">    yoffset *= MouseSensitivity;</span><br><span class=\"line\"></span><br><span class=\"line\">    Yaw += xoffset;</span><br><span class=\"line\">    Pitch += yoffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// make sure that when pitch is out of bounds, screen doesn&#x27;t get flipped</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constrainPitch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pitch &gt; <span class=\"number\">89.0f</span>)</span><br><span class=\"line\">            Pitch = <span class=\"number\">89.0f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pitch &lt; <span class=\"number\">-89.0f</span>)</span><br><span class=\"line\">            Pitch = <span class=\"number\">-89.0f</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update Front, Right and Up Vectors using the updated Euler angles</span></span><br><span class=\"line\">    <span class=\"built_in\">update</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Zoom -= (<span class=\"type\">float</span>)yoffset;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Zoom &lt; <span class=\"number\">1.0f</span>)</span><br><span class=\"line\">        Zoom = <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Zoom &gt; <span class=\"number\">45.0f</span>)</span><br><span class=\"line\">        Zoom = <span class=\"number\">45.0f</span>;</span><br><span class=\"line\">    Projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(Zoom), (<span class=\"type\">float</span>)SCREEN_WIDTH / (<span class=\"type\">float</span>)SCREEN_HEIGH, <span class=\"number\">0.1f</span>, <span class=\"number\">100.f</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::update</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// calculate the new Front vector</span></span><br><span class=\"line\">    glm::vec3 front;</span><br><span class=\"line\">    front.x = <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Yaw)) * <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    front.y = <span class=\"built_in\">sin</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    front.z = <span class=\"built_in\">sin</span>(glm::<span class=\"built_in\">radians</span>(Yaw)) * <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    Front = glm::<span class=\"built_in\">normalize</span>(front);</span><br><span class=\"line\">    <span class=\"comment\">// also re-calculate the Right and Up vector</span></span><br><span class=\"line\">    Right = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(Front, WorldUp));  <span class=\"comment\">// normalize the vectors, because their length gets closer to 0 the more you look up or down which results in slower movement.</span></span><br><span class=\"line\">    Up = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(Right, Front));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","length":974,"excerpt":"<p><img src=\"/2024/03/08/openGL_camera_diy/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>一个小实战</p>","more":"<p>写一个perspective cameraa作为小实战</p>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> glm::vec3 VEC3;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPerspectCamera</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tVEC3 Position ;</span><br><span class=\"line\">\tVEC3 Front;</span><br><span class=\"line\">\tVEC3 Up ;</span><br><span class=\"line\">\tVEC3 WorldUp;</span><br><span class=\"line\">\tVEC3 Right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// euler Angles</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> Yaw;</span><br><span class=\"line\">\t<span class=\"type\">float</span> Pitch;</span><br><span class=\"line\">\t<span class=\"comment\">// camera options</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> MovementSpeed;</span><br><span class=\"line\">\t<span class=\"type\">float</span> MouseSensitivity;</span><br><span class=\"line\">\t<span class=\"type\">float</span> Zoom;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglm::mat4 Projection;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">MyPerspectCamera</span>(VEC3 position = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>), VEC3 front = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), VEC3 worldUP = <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">glm::mat4 <span class=\"title\">vieMatrix</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">glm::mat4 <span class=\"title\">projection</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">move</span><span class=\"params\">(CAMERA_DIRECTION , <span class=\"type\">float</span> deltaTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch = <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>根据之前的学习，我们知道，想要渲染一个3d物体，我们需要几个矩阵：model，view，projection。<br>其中，model矩阵是物体本身的属性，我们相机不负责。剩下的两个，分别是view 和projection是我们的相机可以控制的</p>\n<h2 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h2><p>为了构造view矩阵，我们需要知道：当前相机的位置，相机所对的方向，相机的上方（定位）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VEC3 Position ;</span><br><span class=\"line\">VEC3 Front;</span><br><span class=\"line\">VEC3 Up ;</span><br></pre></td></tr></table></figure>\n<p>构造方法中，传入这三个参数。</p>\n<h2 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h2><p>我们的摄像机类，还需要几个方法。</p>\n<h3 id=\"move\"><a href=\"#move\" class=\"headerlink\" title=\"move\"></a>move</h3><p>因为我们的相机想要移动，所以定义一个move方法，方法参数两个，一个是移动方向，另一个是移动持续时间（我们这里一般是当前帧与上一帧的时间差，保证不同渲染性能下表现是一样的）。我们这里同时定义一个移动方向枚举：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CAMERA_DIRECTION</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tCAMERA_UP, CAMERA_DOWN, CAMERA_LEFT, CAMERA_RIGHT</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">move</span><span class=\"params\">(CAMERA_DIRECTION , <span class=\"type\">float</span> deltaTime)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"rotate\"><a href=\"#rotate\" class=\"headerlink\" title=\"rotate\"></a>rotate</h3><p>我们的相机也需要能够改变视角。类似于一个fps游戏中的第一人称视角控制那种。<br>转动需要知道在x轴上以及y轴上转动的角度。为什么不管z轴呢？因为我们还不想做歪头的那种效果。就先管x,y暂时够了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch = <span class=\"literal\">true</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>在这里我们有另外一个参数，表示是否要限制当前的角度。试想一下，正常的fps游戏中玩家的视角转动肯定是有一定限制的，尤其是在y轴上，就是说抬头，最多抬到90°。这里的这个参数就是用来限制的。</p>\n<h2 id=\"projection\"><a href=\"#projection\" class=\"headerlink\" title=\"projection\"></a>projection</h2><p>view相关的操作就先这么多。我们还有另外一个矩阵，projection。<br>在projection中，我们只想控制相机的<code>聚焦</code>，就是 <code>glm::perspect</code>方法的第一个参数。并且这个参数是用鼠标滚轮来控制的，所以我们还需要监控系统鼠标滚轮的变化.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><p>最后，我们要有一个update方法来更新我们的矩阵。还有另外两个get方法把view和projection矩阵获取到</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyPerspectCamera.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">CAMERA_DIRECTION</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPerspectCamera::<span class=\"built_in\">MyPerspectCamera</span>(VEC3 position, VEC3 front, VEC3 worldUP):</span><br><span class=\"line\"><span class=\"built_in\">Yaw</span>(YAW),<span class=\"built_in\">Pitch</span>(PITCH),<span class=\"built_in\">MovementSpeed</span>(SPEED),<span class=\"built_in\">MouseSensitivity</span>(SENSITIVITY), <span class=\"built_in\">Front</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>)),<span class=\"built_in\">Zoom</span>(ZOOM)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPosition = position;</span><br><span class=\"line\">\tFront = front;</span><br><span class=\"line\">    WorldUp = worldUP;</span><br><span class=\"line\">    Projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(Zoom), (<span class=\"type\">float</span>)SCREEN_WIDTH / (<span class=\"type\">float</span>)SCREEN_HEIGH, <span class=\"number\">0.1f</span>,<span class=\"number\">100.f</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">update</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// view矩阵是用lookat方法获取，用到的就是我们之前定义的属性</span></span><br><span class=\"line\"><span class=\"function\">glm::mat4 <span class=\"title\">MyPerspectCamera::vieMatrix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> glm::<span class=\"built_in\">lookAt</span>(Position,Position + Front, Up);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// projection 矩阵则是直接返回我们对象持有的当前projection</span></span><br><span class=\"line\"><span class=\"function\">glm::mat4 <span class=\"title\">MyPerspectCamera::projection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Projection;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::move</span><span class=\"params\">(CAMERA_DIRECTION dir, <span class=\"type\">float</span> deltaTime)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_UP) &#123;</span><br><span class=\"line\">        Position += Front * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_DOWN) &#123;</span><br><span class=\"line\">        Position -= Front * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_LEFT) &#123;</span><br><span class=\"line\">        Position -= Right * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == CAMERA_DIRECTION::CAMERA_RIGHT) &#123;</span><br><span class=\"line\">        Position += Right * deltaTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::rotate</span><span class=\"params\">(<span class=\"type\">float</span> xoffset, <span class=\"type\">float</span> yoffset, GLboolean constrainPitch)</span> </span>&#123;</span><br><span class=\"line\">    xoffset *= MouseSensitivity;</span><br><span class=\"line\">    yoffset *= MouseSensitivity;</span><br><span class=\"line\"></span><br><span class=\"line\">    Yaw += xoffset;</span><br><span class=\"line\">    Pitch += yoffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// make sure that when pitch is out of bounds, screen doesn&#x27;t get flipped</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constrainPitch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pitch &gt; <span class=\"number\">89.0f</span>)</span><br><span class=\"line\">            Pitch = <span class=\"number\">89.0f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Pitch &lt; <span class=\"number\">-89.0f</span>)</span><br><span class=\"line\">            Pitch = <span class=\"number\">-89.0f</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// update Front, Right and Up Vectors using the updated Euler angles</span></span><br><span class=\"line\">    <span class=\"built_in\">update</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::justZoom</span><span class=\"params\">(<span class=\"type\">float</span> yoffset)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Zoom -= (<span class=\"type\">float</span>)yoffset;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Zoom &lt; <span class=\"number\">1.0f</span>)</span><br><span class=\"line\">        Zoom = <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Zoom &gt; <span class=\"number\">45.0f</span>)</span><br><span class=\"line\">        Zoom = <span class=\"number\">45.0f</span>;</span><br><span class=\"line\">    Projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(Zoom), (<span class=\"type\">float</span>)SCREEN_WIDTH / (<span class=\"type\">float</span>)SCREEN_HEIGH, <span class=\"number\">0.1f</span>, <span class=\"number\">100.f</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyPerspectCamera::update</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// calculate the new Front vector</span></span><br><span class=\"line\">    glm::vec3 front;</span><br><span class=\"line\">    front.x = <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Yaw)) * <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    front.y = <span class=\"built_in\">sin</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    front.z = <span class=\"built_in\">sin</span>(glm::<span class=\"built_in\">radians</span>(Yaw)) * <span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(Pitch));</span><br><span class=\"line\">    Front = glm::<span class=\"built_in\">normalize</span>(front);</span><br><span class=\"line\">    <span class=\"comment\">// also re-calculate the Right and Up vector</span></span><br><span class=\"line\">    Right = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(Front, WorldUp));  <span class=\"comment\">// normalize the vectors, because their length gets closer to 0 the more you look up or down which results in slower movement.</span></span><br><span class=\"line\">    Up = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(Right, Front));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"OpenGL 纹理","date":"2024-03-05T04:10:01.000Z","_content":"\n\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n- [纹理](#纹理)\n  - [纹理环绕方式](#纹理环绕方式)\n  - [纹理过滤](#纹理过滤)\n  - [多级渐远纹理](#多级渐远纹理)\n  - [加载与创建纹理](#加载与创建纹理)\n    - [stb\\_image.h](#stb_imageh)\n  - [生成纹理](#生成纹理)\n  - [应用纹理](#应用纹理)\n  - [纹理单元](#纹理单元)\n\n\n# 纹理\n\n> 纹理设置参数方法： `glTexParameter`\n\n我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模型都会需求更多的顶点，每个顶点又需求一个颜色属性。\n\n艺术家和程序员更喜欢使用纹理(Texture)。纹理是一个2D图片（甚至也有1D和3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。\n\n<div class=\"note info\">简单地说，texture纹理就是把图片以指定形式展示出来(甚至可以贴在我们的物体上)</div>\n\n我们可以为text纹理指定坐标，就像之前指定我们三角形（或者别的形状）指定坐标一样,只需要继续追加坐标即可。\n```c++\nfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t-0.5f,-0.5f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t-0.5f,0.5f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t0.5f,0.5f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t0.5f,-0.5f,\n\n\t};\n```\n\n## 纹理环绕方式\n纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但OpenGL提供了更多的选择：\n\n|环绕方式\t|描述   |\n|-------- | -----|\n|`GL_REPEAT`|\t对纹理的默认行为。重复纹理图像。|\n|`GL_MIRRORED_REPEAT`|\t和GL_REPEAT一样，但每次重复图片是镜像放置的。|\n|`GL_CLAMP_TO_EDGE`|纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。|\n|`GL_CLAMP_TO_BORDER`|\t超出的坐标为用户指定的边缘颜色。|\n\n![2024-03-05T203029](2024-03-05T203029.png)\n前面提到的每个选项都可以使用`glTexParameter*`函数对单独的一个坐标轴设置（s、t（如果是使用3D纹理那么还有一个r）它们和x、y、z是等价的）：\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\n```\n第一个参数指定了纹理目标；我们使用的是2D纹理，因此纹理目标是`GL_TEXTURE_2D`。第二个参数需要我们指定设置的选项与应用的纹理轴。我们打算配置的是WRAP选项，并且指定S和T轴。最后一个参数需要我们传递一个环绕方式(Wrapping)，在这个例子中OpenGL会给当前激活的纹理设定纹理环绕方式为`GL_MIRRORED_REPEAT`。\n如果我们选择`GL_CLAMP_TO_BORDER`选项，我们还需要指定一个边缘的颜色。这需要使用glTexParameter函数的fv后缀形式，用`GL_TEXTURE_BORDER_COLOR`作为它的选项，并且传递一个float数组作为边缘的颜色值：\n```c++\nfloat borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };\nglTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\n```\n\n## 纹理过滤\n纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值，所以OpenGL需要知道怎样将纹理像素(Texture Pixel，也叫Texel，译注1)映射到纹理坐标。**当你有一个很大的物体但是纹理的分辨率很低的时候这就变得很重要了**。你可能已经猜到了，OpenGL也有对于纹理过滤(Texture Filtering)的选项。纹理过滤有很多个选项，但是现在我们只讨论最重要的两种：`GL_NEAREST``和GL_LINEAR。`\n{% note danger no-icon %}\nTexture Pixel也叫Texel，你可以想象你打开一张`.jpg`格式图片，不断放大你会发现它是由无数像素点组成的，这个点就是纹理像素；注意不要和纹理坐标搞混，纹理坐标是你给模型顶点设置的那个数组，OpenGL以这个顶点的纹理坐标数据去查找纹理图像上的像素，然后进行采样提取纹理像素的颜色。\n{% endnote %}\n\n`GL_NEAREST`（也叫邻近过滤，Nearest Neighbor Filtering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：\n![2024-03-05T210625](2024-03-05T210625.png)\n\n`GL_LINEAR`（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：\n![2024-03-05T210640](2024-03-05T210640.png)\n\n那么这两种纹理过滤方式有怎样的视觉效果呢？让我们看看在一个很大的物体上应用一张低分辨率的纹理会发生什么吧（纹理被放大了，每个纹理像素都能看到）：\n![2024-03-05T210658](2024-03-05T210658.png)\n\n`GL_NEAREST`产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而`GL_LINEAR`能够产生更平滑的图案，很难看出单个的纹理像素。`GL_LINEAR`可以产生更真实的输出，但有些开发者更喜欢8-bit风格，所以他们会用`GL_NEAREST`选项。\n\n当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。我们需要使用`glTexParameter*`函数为放大和缩小指定过滤方式。这段代码看起来会和纹理环绕方式的设置很相似：\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n```\n\n## 多级渐远纹理\n想象一下，假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。由于远处的物体可能只产生很少的片段，OpenGL从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色。在小物体上这会产生不真实的感觉，更不用说对它们使用高分辨率纹理浪费内存的问题了。\n\nOpenGL使用一种叫做**多级渐远纹理**(Mipmap)的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。让我们看一下多级渐远纹理是什么样子的：\n\n![2024-03-05T210946](2024-03-05T210946.png)\n\n手工为每个纹理图像创建一系列多级渐远纹理很麻烦，幸好OpenGL有一个`glGenerateMipmaps`函数，在创建完一个纹理后调用它OpenGL就会承担接下来的所有工作了。后面的教程中你会看到该如何使用它。\n\n在渲染中切换多级渐远纹理级别(Level)时，OpenGL在两个不同级别的多级渐远纹理层之间会产生不真实的生硬边界。就像普通的纹理过滤一样，切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用NEAREST和LINEAR过滤。为了指定不同多级渐远纹理级别之间的过滤方式，你可以使用下面四个选项中的一个代替原有的过滤方式：\n|过滤方式|描述|\n|------|------|\n|`GL_NEAREST_MIPMAP_NEAREST`|使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样|\n|`GL_LINEAR_MIPMAP_NEAREST`|使用最邻近的多级渐远纹理级别，并使用线性插值进行采样|\n|`GL_NEAREST_MIPMAP_LINEAR`|在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样|\n|`GL_LINEAR_MIPMAP_LINEAR`|在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样|\n\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n```\n\n注意，一个常见的错误是，将**放大过滤**的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹理的选项会产生一个`GL_INVALID_ENUM`错误代码。\n\n## 加载与创建纹理\n使用纹理之前要做的第一件事是把它们加载到我们的应用中。纹理图像可能被储存为各种各样的格式，每种都有自己的数据结构和排列，所以我们如何才能把这些图像加载到应用中呢？一个解决方案是选一个需要的文件格式，比如`.PNG`，然后自己写一个图像加载器，把图像转化为字节序列。写自己的图像加载器虽然不难，但仍然挺麻烦的，而且如果要支持更多文件格式呢？你就不得不为每种你希望支持的格式写加载器了。\n> 另一个解决方案也许是一种更好的选择，使用一个支持多种流行格式的图像加载库来为我们解决这个问题。比如说我们要用的`stb_image.h`库。\n\n### stb_image.h\n`stb_image.h`是[Sean Barrett](https://github.com/nothings)的一个非常流行的单头文件图像加载库，它能够加载大部分流行的文件格式，并且能够很简单得整合到你的工程之中。stb_image.h可以在这里[下载](https://github.com/nothings/stb/blob/master/stb_image.h)。下载这一个头文件，将它以stb_image.h的名字加入你的工程，并另创建一个新的C++文件，输入以下代码：\n\n```c++\n#define STB_IMAGE_IMPLEMENTATION\n#include \"stb_image.h\"\n```\n通过定义`STB_IMAGE_IMPLEMENTATION`，预处理器会修改头文件，让其只包含相关的函数定义源码，等于是将这个头文件变为一个 .cpp 文件了。现在只需要在你的程序中包含stb_image.h并编译就可以了。\n现在，可以随手挑一张图片。要使用`stb_image.h`加载图片，我们需要使用它的`stbi_load`函数：\n```c++\nint width, height, nrChannels;\nstbi_set_flip_vertically_on_load(true);\nunsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0);\n```\n这个函数首先接受一个图像文件的位置作为输入。接下来它需要三个`int`作为它的第二、第三和第四个参数，`stb_image.h`将会用图像的**宽度、高度和颜色通道**的个数填充这三个变量。我们之后生成纹理的时候会用到的图像的宽度和高度的。\n但是，在导入之前，需要先调用一下 `stbi_set_flip_vertically_on_load`函数，来将图片放正。因为默认的图片的0坐标位置是在最上面。跟我们gl中的相反。\n\n## 生成纹理\n和之前生成的OpenGL对象一样，纹理也是使用ID引用的。让我们来创建一个：\n```c++\nunsigned int texture;\nglGenTextures(1, &texture);\n```\n再然后，在操作纹理前绑定：\n```c++\nglBindTexture(GL_TEXTURE_2D, texture);\n```\n现在纹理已经绑定了，我们可以使用前面载入的图片数据生成一个纹理了。纹理可以通过glTexImage2D来生成：\n```c++\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB,GL_UNSIGNED_BYTE,data);\nglGenerateMipmap(GL_TEXTURE_2D);\n```\n函数很长，参数也不少，所以我们一个一个地讲解：\n- 第一个参数指定了纹理目标(`Target`)。设置为GL_TEXTURE_2D意味着会生成与当前绑定的纹理对象在同一个目标上的纹理（任何绑定到GL_TEXTURE_1D和GL_TEXTURE_3D的纹理不会受到影响）。\n- 第二个参数为纹理指定多级渐远纹理的级别，如果你希望单独手动设置每个多级渐远纹理的级别的话。这里我们填0，也就是基本级别。\n- 第三个参数告诉OpenGL我们希望把纹理储存为何种格式。我们的图像只有RGB值，因此我们也把纹理储存为RGB值。\n- 第四个和第五个参数设置最终的纹理的宽度和高度。我们之前加载图像的时候储存了它们，所以我们使用对应的变量。\n- 下个参数应该总是被设为0（历史遗留的问题）。\n- 第七第八个参数定义了源图的格式和数据类型。我们使用RGB值加载这个图像，并把它们储存为char(byte)数组，我们将会传入对应值。\n- 最后一个参数是真正的图像数据。\n\n当调用`glTexImage2D`时，当前绑定的纹理对象就会被附加上纹理图像。然而，目前只有基本级别(Base-level)的纹理图像被加载了，如果要使用多级渐远纹理，我们必须手动设置所有不同的图像（不断递增第二个参数）。或者，直接在生成纹理之后调用`glGenerateMipmap`。这会为当前绑定的纹理自动生成所有需要的多级渐远纹理。\n生成了纹理和相应的多级渐远纹理后，释放图像的内存是一个很好的习惯。\n```c++\nstbi_image_free(data);\n```\n生成一个纹理的过程应该看起来像这样：\n```c++\nunsigned int texture;\nglGenTextures(1, &texture);\nglBindTexture(GL_TEXTURE_2D, texture);\n// 为当前绑定的纹理对象设置环绕、过滤方式\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   \nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n// 加载并生成纹理\nint width, height, nrChannels;\nunsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0);\nif (data)\n{\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\n    glGenerateMipmap(GL_TEXTURE_2D);\n}\nelse\n{\n    std::cout << \"Failed to load texture\" << std::endl;\n}\nstbi_image_free(data);\n```\n\n## 应用纹理\n后面的这部分我们会使用`glDrawElements`绘制「你好，三角形」教程最后一部分的矩形。我们需要告知OpenGL如何采样纹理，所以我们必须使用纹理坐标更新顶点数据：\n```c++\n\tfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t0.f,0.f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t0.f,1.f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t1.f,1.f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t1.f,0.f,\n\n\t};\n```\n{% note danger no-icon %}\n这里需要讲一下，纹理图片的坐标范围是 0-1 （这点跟gl的-1 - 1 不一样），横坐标 0-1代表一个图片整个宽度，纵坐标 0-1 代表整个图片的高度。\n这里设置属性的意思代表：在GLSL刷新到 （-0.5，-0.5）点的时候，对应的颜色是 (0.5,0,0),对应的纹理坐标为（0，0）. 然后四个坐标依次类推。整个遍历过程是根据定义的EBO中的indices来决定，然后GL依次序来遍历所有的坐标点（**范围内的所有，比如当前这里就是一个（-0.5，-0.5）到(0.5,0.5) 的矩形**）。然后每到一个点，都会根据比例计算出相应的color坐标，textCoords坐标来决定传入的color属性是什么，以及传入的texCoords是什么。\n这里就是在整个GL渲染范围内，正好要渲染整张图片。\n![2024-03-05T223546](2024-03-05T223546.png)\n但如果是下面这样：\n```c++\n\tfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t0.f,0.f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t0.f,0.5f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t0.5f,0.5f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t0.5f,0.f,\n\n\t};\n```\n这样的画图片纹理的范围就只有一半，也就是说，在整个gl遍历的过程中，图片会以一半的形式来占据整个遍历范围。\n\n![2024-03-05T223446](2024-03-05T223446.png)\n{% endnote %}\n\n\n然后，添加新的输入属性:\n```c++\nglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));\nglEnableVertexAttribArray(2);\n```\n接着我们需要调整顶点着色器使其能够接受顶点坐标为一个顶点属性，并把坐标传给片段着色器：\n\n```glsl\n#version 330 core\nuniform float colorSin;\n\nlayout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 \nlayout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1\nlayout (location = 2) in vec2 aTexCoord; // 纹理坐标\n\n\nout vec3 ourColor; // 向片段着色器输出一个颜色\nout vec2 texCoord;\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0);\n    ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色\n    texCoord = aTexCoord;\n}\n```\n\n片段着色器应该接下来会把输出变量TexCoord作为输入变量。\n\n片段着色器也应该能访问纹理对象，但是我们怎样能把纹理对象传给片段着色器呢？GLSL有一个供纹理对象使用的内建数据类型，叫做采样器(Sampler)，它以纹理类型作为后缀，比如sampler1D、sampler3D，或在我们的例子中的sampler2D。我们可以简单声明一个uniform sampler2D把一个纹理添加到片段着色器中，稍后我们会把纹理赋值给这个uniform。\n\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nin vec3 ourColor;\nin vec2 TexCoord;\n\nuniform sampler2D ourTexture;\n\nvoid main()\n{\n    FragColor = texture(ourTexture, TexCoord);\n}\n\n```\n我们使用GLSL内建的texture函数来采样纹理的颜色，它第一个参数是纹理采样器，第二个参数是对应的纹理坐标。texture函数会使用之前设置的纹理参数对相应的颜色值进行采样。这个片段着色器的输出就是纹理的（插值）纹理坐标上的(过滤后的)颜色。\n\n现在只剩下在调用glDrawElements之前绑定纹理了，它会自动把纹理赋值给片段着色器的采样器：\n\n```c++\nglBindTexture(GL_TEXTURE_2D, texture);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n我们还可以把得到的纹理颜色与顶点颜色混合，来获得更有趣的效果。我们只需把纹理颜色与顶点颜色在片段着色器中相乘来混合二者的颜色：\n```glsl\nFragColor = texture(ourTexture, TexCoord) * vec4(ourColor, 1.0);\n```\n最终的效果应该是顶点颜色和纹理颜色的混合色.\n![2024-03-05T223955](2024-03-05T223955.png)\n\n## 纹理单元\n你可能会奇怪为什么sampler2D变量是个uniform，我们却不用glUniform给它赋值。使用glUniform1i，我们可以给纹理采样器分配一个位置值，这样的话我们能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元(Texture Unit)。一个纹理的默认纹理单元是0，它是默认的激活纹理单元，所以教程前面部分我们没有分配一个位置值。\n\n纹理单元的主要目的是让我们在着色器中可以使用多于一个的纹理。通过把纹理单元赋值给采样器，我们可以一次绑定多个纹理，只要我们首先激活对应的纹理单元。就像glBindTexture一样，我们可以使用glActiveTexture激活纹理单元，传入我们需要使用的纹理单元：\n```c++\nglActiveTexture(GL_TEXTURE0); // 在绑定纹理之前先激活纹理单元\nglBindTexture(GL_TEXTURE_2D, texture);\n```\n激活纹理单元之后，接下来的glBindTexture函数调用会绑定这个纹理到当前激活的纹理单元，**纹理单元GL_TEXTURE0默认总是被激活，所以我们在前面的例子里当我们使用glBindTexture的时候，无需激活任何纹理单元**。\n<div class=\"note info\">OpenGL至少保证有16个纹理单元供你使用，也就是说你可以激活从GL_TEXTURE0到GL_TEXTRUE15。它们都是按顺序定义的，所以我们也可以通过GL_TEXTURE0 + 8的方式获得GL_TEXTURE8，这在当我们需要循环一些纹理单元的时候会很有用。</div>\n\n我们仍然需要编辑片段着色器来接收另一个采样器。这应该相对来说非常直接了：\n```glsl\n#version 330 core\n...\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main()\n{\n    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);\n}\n```\n最终输出颜色现在是两个纹理的结合。GLSL内建的mix函数需要接受两个值作为参数，并对它们根据第三个参数进行线性插值。如果第三个值是0.0，它会返回第一个输入；如果是1.0，会返回第二个输入值。0.2会返回80%的第一个输入颜色和20%的第二个输入颜色，即返回两个纹理的混合色。\n\n那么选择第二张图片开始混合把。\n为了使用第二个纹理（以及第一个），我们必须改变一点渲染流程，先绑定两个纹理到对应的纹理单元，然后定义哪个uniform采样器对应哪个纹理单元：\n```c++\n// 使用当前的shader program\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texture1);\nglActiveTexture(GL_TEXTURE1);\nglBindTexture(GL_TEXTURE_2D, texture2);\n\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n````\n上面的意思是依次激活一个纹理单元，然后紧跟着将刚才激活的单元放入一个纹理.\n\n我们还要通过使用`glUniform1i`设置每个采样器的方式告诉OpenGL每个着色器采样器属于哪个纹理单元。我们只需要设置一次即可，所以这个会放在渲染循环的前面：\n```c++\nourShader.use(); // 不要忘记在设置uniform变量之前激活着色器程序！\nglUniform1i(glGetUniformLocation(ourShader.ID, \"texture1\"), 0); // 手动设置\nourShader.setInt(\"texture2\", 1); // 或者使用着色器类设置\n\nwhile(...) \n{\n    [...]\n}\n```\n这个步骤是一次性的，我们定义一次即可，所以可以放在渲染循环外面。意思就是对应的变量名，去对应的纹理单元中取得纹理即可.因为这里的纹理单元对应我们之前激活的数个纹理单元，所以这里应该是uniform的int\n通过使用glUniform1i设置采样器，我们保证了每个uniform采样器对应着正确的纹理单元。\n\n最后，你应该就可以见到一个混合着两幅图的画面了。\n\n\n\n","source":"_posts/openGL_texture.md","raw":"---\ntitle: OpenGL 纹理\ndate: 2024-03-05T20:10:01+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n- [纹理](#纹理)\n  - [纹理环绕方式](#纹理环绕方式)\n  - [纹理过滤](#纹理过滤)\n  - [多级渐远纹理](#多级渐远纹理)\n  - [加载与创建纹理](#加载与创建纹理)\n    - [stb\\_image.h](#stb_imageh)\n  - [生成纹理](#生成纹理)\n  - [应用纹理](#应用纹理)\n  - [纹理单元](#纹理单元)\n\n\n# 纹理\n\n> 纹理设置参数方法： `glTexParameter`\n\n我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模型都会需求更多的顶点，每个顶点又需求一个颜色属性。\n\n艺术家和程序员更喜欢使用纹理(Texture)。纹理是一个2D图片（甚至也有1D和3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。\n\n<div class=\"note info\">简单地说，texture纹理就是把图片以指定形式展示出来(甚至可以贴在我们的物体上)</div>\n\n我们可以为text纹理指定坐标，就像之前指定我们三角形（或者别的形状）指定坐标一样,只需要继续追加坐标即可。\n```c++\nfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t-0.5f,-0.5f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t-0.5f,0.5f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t0.5f,0.5f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t0.5f,-0.5f,\n\n\t};\n```\n\n## 纹理环绕方式\n纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但OpenGL提供了更多的选择：\n\n|环绕方式\t|描述   |\n|-------- | -----|\n|`GL_REPEAT`|\t对纹理的默认行为。重复纹理图像。|\n|`GL_MIRRORED_REPEAT`|\t和GL_REPEAT一样，但每次重复图片是镜像放置的。|\n|`GL_CLAMP_TO_EDGE`|纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。|\n|`GL_CLAMP_TO_BORDER`|\t超出的坐标为用户指定的边缘颜色。|\n\n![2024-03-05T203029](2024-03-05T203029.png)\n前面提到的每个选项都可以使用`glTexParameter*`函数对单独的一个坐标轴设置（s、t（如果是使用3D纹理那么还有一个r）它们和x、y、z是等价的）：\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\n```\n第一个参数指定了纹理目标；我们使用的是2D纹理，因此纹理目标是`GL_TEXTURE_2D`。第二个参数需要我们指定设置的选项与应用的纹理轴。我们打算配置的是WRAP选项，并且指定S和T轴。最后一个参数需要我们传递一个环绕方式(Wrapping)，在这个例子中OpenGL会给当前激活的纹理设定纹理环绕方式为`GL_MIRRORED_REPEAT`。\n如果我们选择`GL_CLAMP_TO_BORDER`选项，我们还需要指定一个边缘的颜色。这需要使用glTexParameter函数的fv后缀形式，用`GL_TEXTURE_BORDER_COLOR`作为它的选项，并且传递一个float数组作为边缘的颜色值：\n```c++\nfloat borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };\nglTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\n```\n\n## 纹理过滤\n纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值，所以OpenGL需要知道怎样将纹理像素(Texture Pixel，也叫Texel，译注1)映射到纹理坐标。**当你有一个很大的物体但是纹理的分辨率很低的时候这就变得很重要了**。你可能已经猜到了，OpenGL也有对于纹理过滤(Texture Filtering)的选项。纹理过滤有很多个选项，但是现在我们只讨论最重要的两种：`GL_NEAREST``和GL_LINEAR。`\n{% note danger no-icon %}\nTexture Pixel也叫Texel，你可以想象你打开一张`.jpg`格式图片，不断放大你会发现它是由无数像素点组成的，这个点就是纹理像素；注意不要和纹理坐标搞混，纹理坐标是你给模型顶点设置的那个数组，OpenGL以这个顶点的纹理坐标数据去查找纹理图像上的像素，然后进行采样提取纹理像素的颜色。\n{% endnote %}\n\n`GL_NEAREST`（也叫邻近过滤，Nearest Neighbor Filtering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：\n![2024-03-05T210625](2024-03-05T210625.png)\n\n`GL_LINEAR`（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：\n![2024-03-05T210640](2024-03-05T210640.png)\n\n那么这两种纹理过滤方式有怎样的视觉效果呢？让我们看看在一个很大的物体上应用一张低分辨率的纹理会发生什么吧（纹理被放大了，每个纹理像素都能看到）：\n![2024-03-05T210658](2024-03-05T210658.png)\n\n`GL_NEAREST`产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而`GL_LINEAR`能够产生更平滑的图案，很难看出单个的纹理像素。`GL_LINEAR`可以产生更真实的输出，但有些开发者更喜欢8-bit风格，所以他们会用`GL_NEAREST`选项。\n\n当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。我们需要使用`glTexParameter*`函数为放大和缩小指定过滤方式。这段代码看起来会和纹理环绕方式的设置很相似：\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n```\n\n## 多级渐远纹理\n想象一下，假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。由于远处的物体可能只产生很少的片段，OpenGL从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色。在小物体上这会产生不真实的感觉，更不用说对它们使用高分辨率纹理浪费内存的问题了。\n\nOpenGL使用一种叫做**多级渐远纹理**(Mipmap)的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。让我们看一下多级渐远纹理是什么样子的：\n\n![2024-03-05T210946](2024-03-05T210946.png)\n\n手工为每个纹理图像创建一系列多级渐远纹理很麻烦，幸好OpenGL有一个`glGenerateMipmaps`函数，在创建完一个纹理后调用它OpenGL就会承担接下来的所有工作了。后面的教程中你会看到该如何使用它。\n\n在渲染中切换多级渐远纹理级别(Level)时，OpenGL在两个不同级别的多级渐远纹理层之间会产生不真实的生硬边界。就像普通的纹理过滤一样，切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用NEAREST和LINEAR过滤。为了指定不同多级渐远纹理级别之间的过滤方式，你可以使用下面四个选项中的一个代替原有的过滤方式：\n|过滤方式|描述|\n|------|------|\n|`GL_NEAREST_MIPMAP_NEAREST`|使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样|\n|`GL_LINEAR_MIPMAP_NEAREST`|使用最邻近的多级渐远纹理级别，并使用线性插值进行采样|\n|`GL_NEAREST_MIPMAP_LINEAR`|在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样|\n|`GL_LINEAR_MIPMAP_LINEAR`|在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样|\n\n```c++\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n```\n\n注意，一个常见的错误是，将**放大过滤**的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹理的选项会产生一个`GL_INVALID_ENUM`错误代码。\n\n## 加载与创建纹理\n使用纹理之前要做的第一件事是把它们加载到我们的应用中。纹理图像可能被储存为各种各样的格式，每种都有自己的数据结构和排列，所以我们如何才能把这些图像加载到应用中呢？一个解决方案是选一个需要的文件格式，比如`.PNG`，然后自己写一个图像加载器，把图像转化为字节序列。写自己的图像加载器虽然不难，但仍然挺麻烦的，而且如果要支持更多文件格式呢？你就不得不为每种你希望支持的格式写加载器了。\n> 另一个解决方案也许是一种更好的选择，使用一个支持多种流行格式的图像加载库来为我们解决这个问题。比如说我们要用的`stb_image.h`库。\n\n### stb_image.h\n`stb_image.h`是[Sean Barrett](https://github.com/nothings)的一个非常流行的单头文件图像加载库，它能够加载大部分流行的文件格式，并且能够很简单得整合到你的工程之中。stb_image.h可以在这里[下载](https://github.com/nothings/stb/blob/master/stb_image.h)。下载这一个头文件，将它以stb_image.h的名字加入你的工程，并另创建一个新的C++文件，输入以下代码：\n\n```c++\n#define STB_IMAGE_IMPLEMENTATION\n#include \"stb_image.h\"\n```\n通过定义`STB_IMAGE_IMPLEMENTATION`，预处理器会修改头文件，让其只包含相关的函数定义源码，等于是将这个头文件变为一个 .cpp 文件了。现在只需要在你的程序中包含stb_image.h并编译就可以了。\n现在，可以随手挑一张图片。要使用`stb_image.h`加载图片，我们需要使用它的`stbi_load`函数：\n```c++\nint width, height, nrChannels;\nstbi_set_flip_vertically_on_load(true);\nunsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0);\n```\n这个函数首先接受一个图像文件的位置作为输入。接下来它需要三个`int`作为它的第二、第三和第四个参数，`stb_image.h`将会用图像的**宽度、高度和颜色通道**的个数填充这三个变量。我们之后生成纹理的时候会用到的图像的宽度和高度的。\n但是，在导入之前，需要先调用一下 `stbi_set_flip_vertically_on_load`函数，来将图片放正。因为默认的图片的0坐标位置是在最上面。跟我们gl中的相反。\n\n## 生成纹理\n和之前生成的OpenGL对象一样，纹理也是使用ID引用的。让我们来创建一个：\n```c++\nunsigned int texture;\nglGenTextures(1, &texture);\n```\n再然后，在操作纹理前绑定：\n```c++\nglBindTexture(GL_TEXTURE_2D, texture);\n```\n现在纹理已经绑定了，我们可以使用前面载入的图片数据生成一个纹理了。纹理可以通过glTexImage2D来生成：\n```c++\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB,GL_UNSIGNED_BYTE,data);\nglGenerateMipmap(GL_TEXTURE_2D);\n```\n函数很长，参数也不少，所以我们一个一个地讲解：\n- 第一个参数指定了纹理目标(`Target`)。设置为GL_TEXTURE_2D意味着会生成与当前绑定的纹理对象在同一个目标上的纹理（任何绑定到GL_TEXTURE_1D和GL_TEXTURE_3D的纹理不会受到影响）。\n- 第二个参数为纹理指定多级渐远纹理的级别，如果你希望单独手动设置每个多级渐远纹理的级别的话。这里我们填0，也就是基本级别。\n- 第三个参数告诉OpenGL我们希望把纹理储存为何种格式。我们的图像只有RGB值，因此我们也把纹理储存为RGB值。\n- 第四个和第五个参数设置最终的纹理的宽度和高度。我们之前加载图像的时候储存了它们，所以我们使用对应的变量。\n- 下个参数应该总是被设为0（历史遗留的问题）。\n- 第七第八个参数定义了源图的格式和数据类型。我们使用RGB值加载这个图像，并把它们储存为char(byte)数组，我们将会传入对应值。\n- 最后一个参数是真正的图像数据。\n\n当调用`glTexImage2D`时，当前绑定的纹理对象就会被附加上纹理图像。然而，目前只有基本级别(Base-level)的纹理图像被加载了，如果要使用多级渐远纹理，我们必须手动设置所有不同的图像（不断递增第二个参数）。或者，直接在生成纹理之后调用`glGenerateMipmap`。这会为当前绑定的纹理自动生成所有需要的多级渐远纹理。\n生成了纹理和相应的多级渐远纹理后，释放图像的内存是一个很好的习惯。\n```c++\nstbi_image_free(data);\n```\n生成一个纹理的过程应该看起来像这样：\n```c++\nunsigned int texture;\nglGenTextures(1, &texture);\nglBindTexture(GL_TEXTURE_2D, texture);\n// 为当前绑定的纹理对象设置环绕、过滤方式\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   \nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n// 加载并生成纹理\nint width, height, nrChannels;\nunsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0);\nif (data)\n{\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\n    glGenerateMipmap(GL_TEXTURE_2D);\n}\nelse\n{\n    std::cout << \"Failed to load texture\" << std::endl;\n}\nstbi_image_free(data);\n```\n\n## 应用纹理\n后面的这部分我们会使用`glDrawElements`绘制「你好，三角形」教程最后一部分的矩形。我们需要告知OpenGL如何采样纹理，所以我们必须使用纹理坐标更新顶点数据：\n```c++\n\tfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t0.f,0.f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t0.f,1.f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t1.f,1.f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t1.f,0.f,\n\n\t};\n```\n{% note danger no-icon %}\n这里需要讲一下，纹理图片的坐标范围是 0-1 （这点跟gl的-1 - 1 不一样），横坐标 0-1代表一个图片整个宽度，纵坐标 0-1 代表整个图片的高度。\n这里设置属性的意思代表：在GLSL刷新到 （-0.5，-0.5）点的时候，对应的颜色是 (0.5,0,0),对应的纹理坐标为（0，0）. 然后四个坐标依次类推。整个遍历过程是根据定义的EBO中的indices来决定，然后GL依次序来遍历所有的坐标点（**范围内的所有，比如当前这里就是一个（-0.5，-0.5）到(0.5,0.5) 的矩形**）。然后每到一个点，都会根据比例计算出相应的color坐标，textCoords坐标来决定传入的color属性是什么，以及传入的texCoords是什么。\n这里就是在整个GL渲染范围内，正好要渲染整张图片。\n![2024-03-05T223546](2024-03-05T223546.png)\n但如果是下面这样：\n```c++\n\tfloat vertex[] = {\n\t\t// position\t\t\t  color\t\t\t\t\ttexCoords\n\t\t-0.5f,-0.5f,0.f,\t0.5f,0.f,0.f,\t\t0.f,0.f,\n\t\t-0.5f,0.5f,0.f,\t\t0.0f,0.5f,0.f,\t\t0.f,0.5f,\n\t\t0.5f,0.5f,0.f,\t\t0.0f,0.f,0.5f,\t\t0.5f,0.5f,\n\t\t0.5f,-0.5f,0.f,\t\t0.5f,0.5f,0.5f,\t\t0.5f,0.f,\n\n\t};\n```\n这样的画图片纹理的范围就只有一半，也就是说，在整个gl遍历的过程中，图片会以一半的形式来占据整个遍历范围。\n\n![2024-03-05T223446](2024-03-05T223446.png)\n{% endnote %}\n\n\n然后，添加新的输入属性:\n```c++\nglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));\nglEnableVertexAttribArray(2);\n```\n接着我们需要调整顶点着色器使其能够接受顶点坐标为一个顶点属性，并把坐标传给片段着色器：\n\n```glsl\n#version 330 core\nuniform float colorSin;\n\nlayout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 \nlayout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1\nlayout (location = 2) in vec2 aTexCoord; // 纹理坐标\n\n\nout vec3 ourColor; // 向片段着色器输出一个颜色\nout vec2 texCoord;\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0);\n    ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色\n    texCoord = aTexCoord;\n}\n```\n\n片段着色器应该接下来会把输出变量TexCoord作为输入变量。\n\n片段着色器也应该能访问纹理对象，但是我们怎样能把纹理对象传给片段着色器呢？GLSL有一个供纹理对象使用的内建数据类型，叫做采样器(Sampler)，它以纹理类型作为后缀，比如sampler1D、sampler3D，或在我们的例子中的sampler2D。我们可以简单声明一个uniform sampler2D把一个纹理添加到片段着色器中，稍后我们会把纹理赋值给这个uniform。\n\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nin vec3 ourColor;\nin vec2 TexCoord;\n\nuniform sampler2D ourTexture;\n\nvoid main()\n{\n    FragColor = texture(ourTexture, TexCoord);\n}\n\n```\n我们使用GLSL内建的texture函数来采样纹理的颜色，它第一个参数是纹理采样器，第二个参数是对应的纹理坐标。texture函数会使用之前设置的纹理参数对相应的颜色值进行采样。这个片段着色器的输出就是纹理的（插值）纹理坐标上的(过滤后的)颜色。\n\n现在只剩下在调用glDrawElements之前绑定纹理了，它会自动把纹理赋值给片段着色器的采样器：\n\n```c++\nglBindTexture(GL_TEXTURE_2D, texture);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n我们还可以把得到的纹理颜色与顶点颜色混合，来获得更有趣的效果。我们只需把纹理颜色与顶点颜色在片段着色器中相乘来混合二者的颜色：\n```glsl\nFragColor = texture(ourTexture, TexCoord) * vec4(ourColor, 1.0);\n```\n最终的效果应该是顶点颜色和纹理颜色的混合色.\n![2024-03-05T223955](2024-03-05T223955.png)\n\n## 纹理单元\n你可能会奇怪为什么sampler2D变量是个uniform，我们却不用glUniform给它赋值。使用glUniform1i，我们可以给纹理采样器分配一个位置值，这样的话我们能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元(Texture Unit)。一个纹理的默认纹理单元是0，它是默认的激活纹理单元，所以教程前面部分我们没有分配一个位置值。\n\n纹理单元的主要目的是让我们在着色器中可以使用多于一个的纹理。通过把纹理单元赋值给采样器，我们可以一次绑定多个纹理，只要我们首先激活对应的纹理单元。就像glBindTexture一样，我们可以使用glActiveTexture激活纹理单元，传入我们需要使用的纹理单元：\n```c++\nglActiveTexture(GL_TEXTURE0); // 在绑定纹理之前先激活纹理单元\nglBindTexture(GL_TEXTURE_2D, texture);\n```\n激活纹理单元之后，接下来的glBindTexture函数调用会绑定这个纹理到当前激活的纹理单元，**纹理单元GL_TEXTURE0默认总是被激活，所以我们在前面的例子里当我们使用glBindTexture的时候，无需激活任何纹理单元**。\n<div class=\"note info\">OpenGL至少保证有16个纹理单元供你使用，也就是说你可以激活从GL_TEXTURE0到GL_TEXTRUE15。它们都是按顺序定义的，所以我们也可以通过GL_TEXTURE0 + 8的方式获得GL_TEXTURE8，这在当我们需要循环一些纹理单元的时候会很有用。</div>\n\n我们仍然需要编辑片段着色器来接收另一个采样器。这应该相对来说非常直接了：\n```glsl\n#version 330 core\n...\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main()\n{\n    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);\n}\n```\n最终输出颜色现在是两个纹理的结合。GLSL内建的mix函数需要接受两个值作为参数，并对它们根据第三个参数进行线性插值。如果第三个值是0.0，它会返回第一个输入；如果是1.0，会返回第二个输入值。0.2会返回80%的第一个输入颜色和20%的第二个输入颜色，即返回两个纹理的混合色。\n\n那么选择第二张图片开始混合把。\n为了使用第二个纹理（以及第一个），我们必须改变一点渲染流程，先绑定两个纹理到对应的纹理单元，然后定义哪个uniform采样器对应哪个纹理单元：\n```c++\n// 使用当前的shader program\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texture1);\nglActiveTexture(GL_TEXTURE1);\nglBindTexture(GL_TEXTURE_2D, texture2);\n\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n````\n上面的意思是依次激活一个纹理单元，然后紧跟着将刚才激活的单元放入一个纹理.\n\n我们还要通过使用`glUniform1i`设置每个采样器的方式告诉OpenGL每个着色器采样器属于哪个纹理单元。我们只需要设置一次即可，所以这个会放在渲染循环的前面：\n```c++\nourShader.use(); // 不要忘记在设置uniform变量之前激活着色器程序！\nglUniform1i(glGetUniformLocation(ourShader.ID, \"texture1\"), 0); // 手动设置\nourShader.setInt(\"texture2\", 1); // 或者使用着色器类设置\n\nwhile(...) \n{\n    [...]\n}\n```\n这个步骤是一次性的，我们定义一次即可，所以可以放在渲染循环外面。意思就是对应的变量名，去对应的纹理单元中取得纹理即可.因为这里的纹理单元对应我们之前激活的数个纹理单元，所以这里应该是uniform的int\n通过使用glUniform1i设置采样器，我们保证了每个uniform采样器对应着正确的纹理单元。\n\n最后，你应该就可以见到一个混合着两幅图的画面了。\n\n\n\n","slug":"openGL_texture","published":1,"updated":"2025-03-28T02:05:16.214Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7q00261wu14r7c6ii1","content":"<p><img src=\"/2024/03/05/openGL_texture/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>\n<span id=\"more\"></span>\n<ul>\n<li><a href=\"#%E7%BA%B9%E7%90%86\">纹理</a><ul>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E7%8E%AF%E7%BB%95%E6%96%B9%E5%BC%8F\">纹理环绕方式</a></li>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E8%BF%87%E6%BB%A4\">纹理过滤</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%A7%E6%B8%90%E8%BF%9C%E7%BA%B9%E7%90%86\">多级渐远纹理</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%9B%E5%BB%BA%E7%BA%B9%E7%90%86\">加载与创建纹理</a><ul>\n<li><a href=\"#stb_imageh\">stb_image.h</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E7%BA%B9%E7%90%86\">生成纹理</a></li>\n<li><a href=\"#%E5%BA%94%E7%94%A8%E7%BA%B9%E7%90%86\">应用纹理</a></li>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E5%8D%95%E5%85%83\">纹理单元</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"纹理\"><a href=\"#纹理\" class=\"headerlink\" title=\"纹理\"></a>纹理</h1><blockquote>\n<p>纹理设置参数方法： <code>glTexParameter</code></p>\n</blockquote>\n<p>我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模型都会需求更多的顶点，每个顶点又需求一个颜色属性。</p>\n<p>艺术家和程序员更喜欢使用纹理(Texture)。纹理是一个2D图片（甚至也有1D和3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。</p>\n<div class=\"note info\">简单地说，texture纹理就是把图片以指定形式展示出来(甚至可以贴在我们的物体上)</div>\n\n<p>我们可以为text纹理指定坐标，就像之前指定我们三角形（或者别的形状）指定坐标一样,只需要继续追加坐标即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"纹理环绕方式\"><a href=\"#纹理环绕方式\" class=\"headerlink\" title=\"纹理环绕方式\"></a>纹理环绕方式</h2><p>纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但OpenGL提供了更多的选择：</p>\n<table>\n<thead>\n<tr>\n<th>环绕方式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>GL_REPEAT</code></td>\n<td>对纹理的默认行为。重复纹理图像。</td>\n</tr>\n<tr>\n<td><code>GL_MIRRORED_REPEAT</code></td>\n<td>和GL_REPEAT一样，但每次重复图片是镜像放置的。</td>\n</tr>\n<tr>\n<td><code>GL_CLAMP_TO_EDGE</code></td>\n<td>纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</td>\n</tr>\n<tr>\n<td><code>GL_CLAMP_TO_BORDER</code></td>\n<td>超出的坐标为用户指定的边缘颜色。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/2024/03/05/openGL_texture/2024-03-05T203029.png\" alt=\"2024-03-05T203029\"><br>前面提到的每个选项都可以使用<code>glTexParameter*</code>函数对单独的一个坐标轴设置（s、t（如果是使用3D纹理那么还有一个r）它们和x、y、z是等价的）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);</span><br></pre></td></tr></table></figure>\n<p>第一个参数指定了纹理目标；我们使用的是2D纹理，因此纹理目标是<code>GL_TEXTURE_2D</code>。第二个参数需要我们指定设置的选项与应用的纹理轴。我们打算配置的是WRAP选项，并且指定S和T轴。最后一个参数需要我们传递一个环绕方式(Wrapping)，在这个例子中OpenGL会给当前激活的纹理设定纹理环绕方式为<code>GL_MIRRORED_REPEAT</code>。<br>如果我们选择<code>GL_CLAMP_TO_BORDER</code>选项，我们还需要指定一个边缘的颜色。这需要使用glTexParameter函数的fv后缀形式，用<code>GL_TEXTURE_BORDER_COLOR</code>作为它的选项，并且传递一个float数组作为边缘的颜色值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> borderColor[] = &#123; <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">glTexParameterfv</span>(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"纹理过滤\"><a href=\"#纹理过滤\" class=\"headerlink\" title=\"纹理过滤\"></a>纹理过滤</h2><p>纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值，所以OpenGL需要知道怎样将纹理像素(Texture Pixel，也叫Texel，译注1)映射到纹理坐标。<strong>当你有一个很大的物体但是纹理的分辨率很低的时候这就变得很重要了</strong>。你可能已经猜到了，OpenGL也有对于纹理过滤(Texture Filtering)的选项。纹理过滤有很多个选项，但是现在我们只讨论最重要的两种：<code>GL_NEAREST``和GL_LINEAR。</code></p>\n<div class=\"note danger no-icon\"><p>Texture Pixel也叫Texel，你可以想象你打开一张<code>.jpg</code>格式图片，不断放大你会发现它是由无数像素点组成的，这个点就是纹理像素；注意不要和纹理坐标搞混，纹理坐标是你给模型顶点设置的那个数组，OpenGL以这个顶点的纹理坐标数据去查找纹理图像上的像素，然后进行采样提取纹理像素的颜色。</p>\n</div>\n\n<p><code>GL_NEAREST</code>（也叫邻近过滤，Nearest Neighbor Filtering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210625.png\" alt=\"2024-03-05T210625\"></p>\n<p><code>GL_LINEAR</code>（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210640.png\" alt=\"2024-03-05T210640\"></p>\n<p>那么这两种纹理过滤方式有怎样的视觉效果呢？让我们看看在一个很大的物体上应用一张低分辨率的纹理会发生什么吧（纹理被放大了，每个纹理像素都能看到）：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210658.png\" alt=\"2024-03-05T210658\"></p>\n<p><code>GL_NEAREST</code>产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而<code>GL_LINEAR</code>能够产生更平滑的图案，很难看出单个的纹理像素。<code>GL_LINEAR</code>可以产生更真实的输出，但有些开发者更喜欢8-bit风格，所以他们会用<code>GL_NEAREST</code>选项。</p>\n<p>当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。我们需要使用<code>glTexParameter*</code>函数为放大和缩小指定过滤方式。这段代码看起来会和纹理环绕方式的设置很相似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多级渐远纹理\"><a href=\"#多级渐远纹理\" class=\"headerlink\" title=\"多级渐远纹理\"></a>多级渐远纹理</h2><p>想象一下，假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。由于远处的物体可能只产生很少的片段，OpenGL从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色。在小物体上这会产生不真实的感觉，更不用说对它们使用高分辨率纹理浪费内存的问题了。</p>\n<p>OpenGL使用一种叫做<strong>多级渐远纹理</strong>(Mipmap)的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。让我们看一下多级渐远纹理是什么样子的：</p>\n<p><img src=\"/2024/03/05/openGL_texture/2024-03-05T210946.png\" alt=\"2024-03-05T210946\"></p>\n<p>手工为每个纹理图像创建一系列多级渐远纹理很麻烦，幸好OpenGL有一个<code>glGenerateMipmaps</code>函数，在创建完一个纹理后调用它OpenGL就会承担接下来的所有工作了。后面的教程中你会看到该如何使用它。</p>\n<p>在渲染中切换多级渐远纹理级别(Level)时，OpenGL在两个不同级别的多级渐远纹理层之间会产生不真实的生硬边界。就像普通的纹理过滤一样，切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用NEAREST和LINEAR过滤。为了指定不同多级渐远纹理级别之间的过滤方式，你可以使用下面四个选项中的一个代替原有的过滤方式：</p>\n<table>\n<thead>\n<tr>\n<th>过滤方式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>GL_NEAREST_MIPMAP_NEAREST</code></td>\n<td>使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样</td>\n</tr>\n<tr>\n<td><code>GL_LINEAR_MIPMAP_NEAREST</code></td>\n<td>使用最邻近的多级渐远纹理级别，并使用线性插值进行采样</td>\n</tr>\n<tr>\n<td><code>GL_NEAREST_MIPMAP_LINEAR</code></td>\n<td>在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样</td>\n</tr>\n<tr>\n<td><code>GL_LINEAR_MIPMAP_LINEAR</code></td>\n<td>在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br></pre></td></tr></table></figure>\n\n<p>注意，一个常见的错误是，将<strong>放大过滤</strong>的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹理的选项会产生一个<code>GL_INVALID_ENUM</code>错误代码。</p>\n<h2 id=\"加载与创建纹理\"><a href=\"#加载与创建纹理\" class=\"headerlink\" title=\"加载与创建纹理\"></a>加载与创建纹理</h2><p>使用纹理之前要做的第一件事是把它们加载到我们的应用中。纹理图像可能被储存为各种各样的格式，每种都有自己的数据结构和排列，所以我们如何才能把这些图像加载到应用中呢？一个解决方案是选一个需要的文件格式，比如<code>.PNG</code>，然后自己写一个图像加载器，把图像转化为字节序列。写自己的图像加载器虽然不难，但仍然挺麻烦的，而且如果要支持更多文件格式呢？你就不得不为每种你希望支持的格式写加载器了。</p>\n<blockquote>\n<p>另一个解决方案也许是一种更好的选择，使用一个支持多种流行格式的图像加载库来为我们解决这个问题。比如说我们要用的<code>stb_image.h</code>库。</p>\n</blockquote>\n<h3 id=\"stb-image-h\"><a href=\"#stb-image-h\" class=\"headerlink\" title=\"stb_image.h\"></a>stb_image.h</h3><p><code>stb_image.h</code>是<a href=\"https://github.com/nothings\">Sean Barrett</a>的一个非常流行的单头文件图像加载库，它能够加载大部分流行的文件格式，并且能够很简单得整合到你的工程之中。stb_image.h可以在这里<a href=\"https://github.com/nothings/stb/blob/master/stb_image.h\">下载</a>。下载这一个头文件，将它以stb_image.h的名字加入你的工程，并另创建一个新的C++文件，输入以下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STB_IMAGE_IMPLEMENTATION</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stb_image.h&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>通过定义<code>STB_IMAGE_IMPLEMENTATION</code>，预处理器会修改头文件，让其只包含相关的函数定义源码，等于是将这个头文件变为一个 .cpp 文件了。现在只需要在你的程序中包含stb_image.h并编译就可以了。<br>现在，可以随手挑一张图片。要使用<code>stb_image.h</code>加载图片，我们需要使用它的<code>stbi_load</code>函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> width, height, nrChannels;</span><br><span class=\"line\"><span class=\"built_in\">stbi_set_flip_vertically_on_load</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data = <span class=\"built_in\">stbi_load</span>(<span class=\"string\">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数首先接受一个图像文件的位置作为输入。接下来它需要三个<code>int</code>作为它的第二、第三和第四个参数，<code>stb_image.h</code>将会用图像的<strong>宽度、高度和颜色通道</strong>的个数填充这三个变量。我们之后生成纹理的时候会用到的图像的宽度和高度的。<br>但是，在导入之前，需要先调用一下 <code>stbi_set_flip_vertically_on_load</code>函数，来将图片放正。因为默认的图片的0坐标位置是在最上面。跟我们gl中的相反。</p>\n<h2 id=\"生成纹理\"><a href=\"#生成纹理\" class=\"headerlink\" title=\"生成纹理\"></a>生成纹理</h2><p>和之前生成的OpenGL对象一样，纹理也是使用ID引用的。让我们来创建一个：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> texture;</span><br><span class=\"line\"><span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br></pre></td></tr></table></figure>\n<p>再然后，在操作纹理前绑定：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>\n<p>现在纹理已经绑定了，我们可以使用前面载入的图片数据生成一个纹理了。纹理可以通过glTexImage2D来生成：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexImage2D</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>, GL_RGB, width, height, <span class=\"number\">0</span>, GL_RGB,GL_UNSIGNED_BYTE,data);</span><br><span class=\"line\"><span class=\"built_in\">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br></pre></td></tr></table></figure>\n<p>函数很长，参数也不少，所以我们一个一个地讲解：</p>\n<ul>\n<li>第一个参数指定了纹理目标(<code>Target</code>)。设置为GL_TEXTURE_2D意味着会生成与当前绑定的纹理对象在同一个目标上的纹理（任何绑定到GL_TEXTURE_1D和GL_TEXTURE_3D的纹理不会受到影响）。</li>\n<li>第二个参数为纹理指定多级渐远纹理的级别，如果你希望单独手动设置每个多级渐远纹理的级别的话。这里我们填0，也就是基本级别。</li>\n<li>第三个参数告诉OpenGL我们希望把纹理储存为何种格式。我们的图像只有RGB值，因此我们也把纹理储存为RGB值。</li>\n<li>第四个和第五个参数设置最终的纹理的宽度和高度。我们之前加载图像的时候储存了它们，所以我们使用对应的变量。</li>\n<li>下个参数应该总是被设为0（历史遗留的问题）。</li>\n<li>第七第八个参数定义了源图的格式和数据类型。我们使用RGB值加载这个图像，并把它们储存为char(byte)数组，我们将会传入对应值。</li>\n<li>最后一个参数是真正的图像数据。</li>\n</ul>\n<p>当调用<code>glTexImage2D</code>时，当前绑定的纹理对象就会被附加上纹理图像。然而，目前只有基本级别(Base-level)的纹理图像被加载了，如果要使用多级渐远纹理，我们必须手动设置所有不同的图像（不断递增第二个参数）。或者，直接在生成纹理之后调用<code>glGenerateMipmap</code>。这会为当前绑定的纹理自动生成所有需要的多级渐远纹理。<br>生成了纹理和相应的多级渐远纹理后，释放图像的内存是一个很好的习惯。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stbi_image_free</span>(data);</span><br></pre></td></tr></table></figure>\n<p>生成一个纹理的过程应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> texture;</span><br><span class=\"line\"><span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\"><span class=\"comment\">// 为当前绑定的纹理对象设置环绕、过滤方式</span></span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   </span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class=\"line\"><span class=\"comment\">// 加载并生成纹理</span></span><br><span class=\"line\"><span class=\"type\">int</span> width, height, nrChannels;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data = <span class=\"built_in\">stbi_load</span>(<span class=\"string\">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glTexImage2D</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>, GL_RGB, width, height, <span class=\"number\">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class=\"line\">    <span class=\"built_in\">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to load texture&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">stbi_image_free</span>(data);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用纹理\"><a href=\"#应用纹理\" class=\"headerlink\" title=\"应用纹理\"></a>应用纹理</h2><p>后面的这部分我们会使用<code>glDrawElements</code>绘制「你好，三角形」教程最后一部分的矩形。我们需要告知OpenGL如何采样纹理，所以我们必须使用纹理坐标更新顶点数据：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">1.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">1.f</span>,<span class=\"number\">1.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">1.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note danger no-icon\"><p>这里需要讲一下，纹理图片的坐标范围是 0-1 （这点跟gl的-1 - 1 不一样），横坐标 0-1代表一个图片整个宽度，纵坐标 0-1 代表整个图片的高度。<br>这里设置属性的意思代表：在GLSL刷新到 （-0.5，-0.5）点的时候，对应的颜色是 (0.5,0,0),对应的纹理坐标为（0，0）. 然后四个坐标依次类推。整个遍历过程是根据定义的EBO中的indices来决定，然后GL依次序来遍历所有的坐标点（<strong>范围内的所有，比如当前这里就是一个（-0.5，-0.5）到(0.5,0.5) 的矩形</strong>）。然后每到一个点，都会根据比例计算出相应的color坐标，textCoords坐标来决定传入的color属性是什么，以及传入的texCoords是什么。<br>这里就是在整个GL渲染范围内，正好要渲染整张图片。<br><img src=\"/2024-03-05T223546.png\" alt=\"2024-03-05T223546\"><br>但如果是下面这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样的画图片纹理的范围就只有一半，也就是说，在整个gl遍历的过程中，图片会以一半的形式来占据整个遍历范围。</p>\n<p><img src=\"/2024-03-05T223446.png\" alt=\"2024-03-05T223446\"></p>\n</div>\n\n\n<p>然后，添加新的输入属性:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>接着我们需要调整顶点着色器使其能够接受顶点坐标为一个顶点属性，并把坐标传给片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">float</span> colorSin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;   <span class=\"comment\">// 位置变量的属性位置值为 0 </span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aColor; <span class=\"comment\">// 颜色变量的属性位置值为 1</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">2</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord; <span class=\"comment\">// 纹理坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> ourColor; <span class=\"comment\">// 向片段着色器输出一个颜色</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ourColor = aColor; <span class=\"comment\">// 将ourColor设置为我们从顶点数据那里得到的输入颜色</span></span><br><span class=\"line\">    texCoord = aTexCoord;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>片段着色器应该接下来会把输出变量TexCoord作为输入变量。</p>\n<p>片段着色器也应该能访问纹理对象，但是我们怎样能把纹理对象传给片段着色器呢？GLSL有一个供纹理对象使用的内建数据类型，叫做采样器(Sampler)，它以纹理类型作为后缀，比如sampler1D、sampler3D，或在我们的例子中的sampler2D。我们可以简单声明一个uniform sampler2D把一个纹理添加到片段着色器中，稍后我们会把纹理赋值给这个uniform。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> ourColor;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec2</span> TexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> ourTexture;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">texture</span>(ourTexture, TexCoord);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们使用GLSL内建的texture函数来采样纹理的颜色，它第一个参数是纹理采样器，第二个参数是对应的纹理坐标。texture函数会使用之前设置的纹理参数对相应的颜色值进行采样。这个片段着色器的输出就是纹理的（插值）纹理坐标上的(过滤后的)颜色。</p>\n<p>现在只剩下在调用glDrawElements之前绑定纹理了，它会自动把纹理赋值给片段着色器的采样器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以把得到的纹理颜色与顶点颜色混合，来获得更有趣的效果。我们只需把纹理颜色与顶点颜色在片段着色器中相乘来混合二者的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragColor = <span class=\"built_in\">texture</span>(ourTexture, TexCoord) * <span class=\"type\">vec4</span>(ourColor, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>最终的效果应该是顶点颜色和纹理颜色的混合色.<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T223955.png\" alt=\"2024-03-05T223955\"></p>\n<h2 id=\"纹理单元\"><a href=\"#纹理单元\" class=\"headerlink\" title=\"纹理单元\"></a>纹理单元</h2><p>你可能会奇怪为什么sampler2D变量是个uniform，我们却不用glUniform给它赋值。使用glUniform1i，我们可以给纹理采样器分配一个位置值，这样的话我们能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元(Texture Unit)。一个纹理的默认纹理单元是0，它是默认的激活纹理单元，所以教程前面部分我们没有分配一个位置值。</p>\n<p>纹理单元的主要目的是让我们在着色器中可以使用多于一个的纹理。通过把纹理单元赋值给采样器，我们可以一次绑定多个纹理，只要我们首先激活对应的纹理单元。就像glBindTexture一样，我们可以使用glActiveTexture激活纹理单元，传入我们需要使用的纹理单元：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0); <span class=\"comment\">// 在绑定纹理之前先激活纹理单元</span></span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>\n<p>激活纹理单元之后，接下来的glBindTexture函数调用会绑定这个纹理到当前激活的纹理单元，<strong>纹理单元GL_TEXTURE0默认总是被激活，所以我们在前面的例子里当我们使用glBindTexture的时候，无需激活任何纹理单元</strong>。</p>\n<div class=\"note info\">OpenGL至少保证有16个纹理单元供你使用，也就是说你可以激活从GL_TEXTURE0到GL_TEXTRUE15。它们都是按顺序定义的，所以我们也可以通过GL_TEXTURE0 + 8的方式获得GL_TEXTURE8，这在当我们需要循环一些纹理单元的时候会很有用。</div>\n\n<p>我们仍然需要编辑片段着色器来接收另一个采样器。这应该相对来说非常直接了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> texture1;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> texture2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">mix</span>(<span class=\"built_in\">texture</span>(texture1, TexCoord), <span class=\"built_in\">texture</span>(texture2, TexCoord), <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终输出颜色现在是两个纹理的结合。GLSL内建的mix函数需要接受两个值作为参数，并对它们根据第三个参数进行线性插值。如果第三个值是0.0，它会返回第一个输入；如果是1.0，会返回第二个输入值。0.2会返回80%的第一个输入颜色和20%的第二个输入颜色，即返回两个纹理的混合色。</p>\n<p>那么选择第二张图片开始混合把。<br>为了使用第二个纹理（以及第一个），我们必须改变一点渲染流程，先绑定两个纹理到对应的纹理单元，然后定义哪个uniform采样器对应哪个纹理单元：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用当前的shader program</span></span><br><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture1);</span><br><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\">````</span><br><span class=\"line\">上面的意思是依次激活一个纹理单元，然后紧跟着将刚才激活的单元放入一个纹理.</span><br><span class=\"line\"></span><br><span class=\"line\">我们还要通过使用`glUniform1i`设置每个采样器的方式告诉OpenGL每个着色器采样器属于哪个纹理单元。我们只需要设置一次即可，所以这个会放在渲染循环的前面：</span><br><span class=\"line\">```c++</span><br><span class=\"line\">ourShader.<span class=\"built_in\">use</span>(); <span class=\"comment\">// 不要忘记在设置uniform变量之前激活着色器程序！</span></span><br><span class=\"line\"><span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;texture1&quot;</span>), <span class=\"number\">0</span>); <span class=\"comment\">// 手动设置</span></span><br><span class=\"line\">ourShader.<span class=\"built_in\">setInt</span>(<span class=\"string\">&quot;texture2&quot;</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 或者使用着色器类设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(...) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个步骤是一次性的，我们定义一次即可，所以可以放在渲染循环外面。意思就是对应的变量名，去对应的纹理单元中取得纹理即可.因为这里的纹理单元对应我们之前激活的数个纹理单元，所以这里应该是uniform的int<br>通过使用glUniform1i设置采样器，我们保证了每个uniform采样器对应着正确的纹理单元。</p>\n<p>最后，你应该就可以见到一个混合着两幅图的画面了。</p>\n","length":5700,"excerpt":"<p><img src=\"/2024/03/05/openGL_texture/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>","more":"<ul>\n<li><a href=\"#%E7%BA%B9%E7%90%86\">纹理</a><ul>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E7%8E%AF%E7%BB%95%E6%96%B9%E5%BC%8F\">纹理环绕方式</a></li>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E8%BF%87%E6%BB%A4\">纹理过滤</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%A7%E6%B8%90%E8%BF%9C%E7%BA%B9%E7%90%86\">多级渐远纹理</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%9B%E5%BB%BA%E7%BA%B9%E7%90%86\">加载与创建纹理</a><ul>\n<li><a href=\"#stb_imageh\">stb_image.h</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E7%BA%B9%E7%90%86\">生成纹理</a></li>\n<li><a href=\"#%E5%BA%94%E7%94%A8%E7%BA%B9%E7%90%86\">应用纹理</a></li>\n<li><a href=\"#%E7%BA%B9%E7%90%86%E5%8D%95%E5%85%83\">纹理单元</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"纹理\"><a href=\"#纹理\" class=\"headerlink\" title=\"纹理\"></a>纹理</h1><blockquote>\n<p>纹理设置参数方法： <code>glTexParameter</code></p>\n</blockquote>\n<p>我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模型都会需求更多的顶点，每个顶点又需求一个颜色属性。</p>\n<p>艺术家和程序员更喜欢使用纹理(Texture)。纹理是一个2D图片（甚至也有1D和3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。</p>\n<div class=\"note info\">简单地说，texture纹理就是把图片以指定形式展示出来(甚至可以贴在我们的物体上)</div>\n\n<p>我们可以为text纹理指定坐标，就像之前指定我们三角形（或者别的形状）指定坐标一样,只需要继续追加坐标即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"纹理环绕方式\"><a href=\"#纹理环绕方式\" class=\"headerlink\" title=\"纹理环绕方式\"></a>纹理环绕方式</h2><p>纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但OpenGL提供了更多的选择：</p>\n<table>\n<thead>\n<tr>\n<th>环绕方式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>GL_REPEAT</code></td>\n<td>对纹理的默认行为。重复纹理图像。</td>\n</tr>\n<tr>\n<td><code>GL_MIRRORED_REPEAT</code></td>\n<td>和GL_REPEAT一样，但每次重复图片是镜像放置的。</td>\n</tr>\n<tr>\n<td><code>GL_CLAMP_TO_EDGE</code></td>\n<td>纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</td>\n</tr>\n<tr>\n<td><code>GL_CLAMP_TO_BORDER</code></td>\n<td>超出的坐标为用户指定的边缘颜色。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/2024/03/05/openGL_texture/2024-03-05T203029.png\" alt=\"2024-03-05T203029\"><br>前面提到的每个选项都可以使用<code>glTexParameter*</code>函数对单独的一个坐标轴设置（s、t（如果是使用3D纹理那么还有一个r）它们和x、y、z是等价的）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);</span><br></pre></td></tr></table></figure>\n<p>第一个参数指定了纹理目标；我们使用的是2D纹理，因此纹理目标是<code>GL_TEXTURE_2D</code>。第二个参数需要我们指定设置的选项与应用的纹理轴。我们打算配置的是WRAP选项，并且指定S和T轴。最后一个参数需要我们传递一个环绕方式(Wrapping)，在这个例子中OpenGL会给当前激活的纹理设定纹理环绕方式为<code>GL_MIRRORED_REPEAT</code>。<br>如果我们选择<code>GL_CLAMP_TO_BORDER</code>选项，我们还需要指定一个边缘的颜色。这需要使用glTexParameter函数的fv后缀形式，用<code>GL_TEXTURE_BORDER_COLOR</code>作为它的选项，并且传递一个float数组作为边缘的颜色值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> borderColor[] = &#123; <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">glTexParameterfv</span>(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"纹理过滤\"><a href=\"#纹理过滤\" class=\"headerlink\" title=\"纹理过滤\"></a>纹理过滤</h2><p>纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值，所以OpenGL需要知道怎样将纹理像素(Texture Pixel，也叫Texel，译注1)映射到纹理坐标。<strong>当你有一个很大的物体但是纹理的分辨率很低的时候这就变得很重要了</strong>。你可能已经猜到了，OpenGL也有对于纹理过滤(Texture Filtering)的选项。纹理过滤有很多个选项，但是现在我们只讨论最重要的两种：<code>GL_NEAREST``和GL_LINEAR。</code></p>\n<div class=\"note danger no-icon\"><p>Texture Pixel也叫Texel，你可以想象你打开一张<code>.jpg</code>格式图片，不断放大你会发现它是由无数像素点组成的，这个点就是纹理像素；注意不要和纹理坐标搞混，纹理坐标是你给模型顶点设置的那个数组，OpenGL以这个顶点的纹理坐标数据去查找纹理图像上的像素，然后进行采样提取纹理像素的颜色。</p>\n</div>\n\n<p><code>GL_NEAREST</code>（也叫邻近过滤，Nearest Neighbor Filtering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210625.png\" alt=\"2024-03-05T210625\"></p>\n<p><code>GL_LINEAR</code>（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210640.png\" alt=\"2024-03-05T210640\"></p>\n<p>那么这两种纹理过滤方式有怎样的视觉效果呢？让我们看看在一个很大的物体上应用一张低分辨率的纹理会发生什么吧（纹理被放大了，每个纹理像素都能看到）：<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T210658.png\" alt=\"2024-03-05T210658\"></p>\n<p><code>GL_NEAREST</code>产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而<code>GL_LINEAR</code>能够产生更平滑的图案，很难看出单个的纹理像素。<code>GL_LINEAR</code>可以产生更真实的输出，但有些开发者更喜欢8-bit风格，所以他们会用<code>GL_NEAREST</code>选项。</p>\n<p>当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。我们需要使用<code>glTexParameter*</code>函数为放大和缩小指定过滤方式。这段代码看起来会和纹理环绕方式的设置很相似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多级渐远纹理\"><a href=\"#多级渐远纹理\" class=\"headerlink\" title=\"多级渐远纹理\"></a>多级渐远纹理</h2><p>想象一下，假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。由于远处的物体可能只产生很少的片段，OpenGL从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色。在小物体上这会产生不真实的感觉，更不用说对它们使用高分辨率纹理浪费内存的问题了。</p>\n<p>OpenGL使用一种叫做<strong>多级渐远纹理</strong>(Mipmap)的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。让我们看一下多级渐远纹理是什么样子的：</p>\n<p><img src=\"/2024/03/05/openGL_texture/2024-03-05T210946.png\" alt=\"2024-03-05T210946\"></p>\n<p>手工为每个纹理图像创建一系列多级渐远纹理很麻烦，幸好OpenGL有一个<code>glGenerateMipmaps</code>函数，在创建完一个纹理后调用它OpenGL就会承担接下来的所有工作了。后面的教程中你会看到该如何使用它。</p>\n<p>在渲染中切换多级渐远纹理级别(Level)时，OpenGL在两个不同级别的多级渐远纹理层之间会产生不真实的生硬边界。就像普通的纹理过滤一样，切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用NEAREST和LINEAR过滤。为了指定不同多级渐远纹理级别之间的过滤方式，你可以使用下面四个选项中的一个代替原有的过滤方式：</p>\n<table>\n<thead>\n<tr>\n<th>过滤方式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>GL_NEAREST_MIPMAP_NEAREST</code></td>\n<td>使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样</td>\n</tr>\n<tr>\n<td><code>GL_LINEAR_MIPMAP_NEAREST</code></td>\n<td>使用最邻近的多级渐远纹理级别，并使用线性插值进行采样</td>\n</tr>\n<tr>\n<td><code>GL_NEAREST_MIPMAP_LINEAR</code></td>\n<td>在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样</td>\n</tr>\n<tr>\n<td><code>GL_LINEAR_MIPMAP_LINEAR</code></td>\n<td>在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br></pre></td></tr></table></figure>\n\n<p>注意，一个常见的错误是，将<strong>放大过滤</strong>的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹理的选项会产生一个<code>GL_INVALID_ENUM</code>错误代码。</p>\n<h2 id=\"加载与创建纹理\"><a href=\"#加载与创建纹理\" class=\"headerlink\" title=\"加载与创建纹理\"></a>加载与创建纹理</h2><p>使用纹理之前要做的第一件事是把它们加载到我们的应用中。纹理图像可能被储存为各种各样的格式，每种都有自己的数据结构和排列，所以我们如何才能把这些图像加载到应用中呢？一个解决方案是选一个需要的文件格式，比如<code>.PNG</code>，然后自己写一个图像加载器，把图像转化为字节序列。写自己的图像加载器虽然不难，但仍然挺麻烦的，而且如果要支持更多文件格式呢？你就不得不为每种你希望支持的格式写加载器了。</p>\n<blockquote>\n<p>另一个解决方案也许是一种更好的选择，使用一个支持多种流行格式的图像加载库来为我们解决这个问题。比如说我们要用的<code>stb_image.h</code>库。</p>\n</blockquote>\n<h3 id=\"stb-image-h\"><a href=\"#stb-image-h\" class=\"headerlink\" title=\"stb_image.h\"></a>stb_image.h</h3><p><code>stb_image.h</code>是<a href=\"https://github.com/nothings\">Sean Barrett</a>的一个非常流行的单头文件图像加载库，它能够加载大部分流行的文件格式，并且能够很简单得整合到你的工程之中。stb_image.h可以在这里<a href=\"https://github.com/nothings/stb/blob/master/stb_image.h\">下载</a>。下载这一个头文件，将它以stb_image.h的名字加入你的工程，并另创建一个新的C++文件，输入以下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STB_IMAGE_IMPLEMENTATION</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stb_image.h&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>通过定义<code>STB_IMAGE_IMPLEMENTATION</code>，预处理器会修改头文件，让其只包含相关的函数定义源码，等于是将这个头文件变为一个 .cpp 文件了。现在只需要在你的程序中包含stb_image.h并编译就可以了。<br>现在，可以随手挑一张图片。要使用<code>stb_image.h</code>加载图片，我们需要使用它的<code>stbi_load</code>函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> width, height, nrChannels;</span><br><span class=\"line\"><span class=\"built_in\">stbi_set_flip_vertically_on_load</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data = <span class=\"built_in\">stbi_load</span>(<span class=\"string\">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数首先接受一个图像文件的位置作为输入。接下来它需要三个<code>int</code>作为它的第二、第三和第四个参数，<code>stb_image.h</code>将会用图像的<strong>宽度、高度和颜色通道</strong>的个数填充这三个变量。我们之后生成纹理的时候会用到的图像的宽度和高度的。<br>但是，在导入之前，需要先调用一下 <code>stbi_set_flip_vertically_on_load</code>函数，来将图片放正。因为默认的图片的0坐标位置是在最上面。跟我们gl中的相反。</p>\n<h2 id=\"生成纹理\"><a href=\"#生成纹理\" class=\"headerlink\" title=\"生成纹理\"></a>生成纹理</h2><p>和之前生成的OpenGL对象一样，纹理也是使用ID引用的。让我们来创建一个：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> texture;</span><br><span class=\"line\"><span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br></pre></td></tr></table></figure>\n<p>再然后，在操作纹理前绑定：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>\n<p>现在纹理已经绑定了，我们可以使用前面载入的图片数据生成一个纹理了。纹理可以通过glTexImage2D来生成：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glTexImage2D</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>, GL_RGB, width, height, <span class=\"number\">0</span>, GL_RGB,GL_UNSIGNED_BYTE,data);</span><br><span class=\"line\"><span class=\"built_in\">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br></pre></td></tr></table></figure>\n<p>函数很长，参数也不少，所以我们一个一个地讲解：</p>\n<ul>\n<li>第一个参数指定了纹理目标(<code>Target</code>)。设置为GL_TEXTURE_2D意味着会生成与当前绑定的纹理对象在同一个目标上的纹理（任何绑定到GL_TEXTURE_1D和GL_TEXTURE_3D的纹理不会受到影响）。</li>\n<li>第二个参数为纹理指定多级渐远纹理的级别，如果你希望单独手动设置每个多级渐远纹理的级别的话。这里我们填0，也就是基本级别。</li>\n<li>第三个参数告诉OpenGL我们希望把纹理储存为何种格式。我们的图像只有RGB值，因此我们也把纹理储存为RGB值。</li>\n<li>第四个和第五个参数设置最终的纹理的宽度和高度。我们之前加载图像的时候储存了它们，所以我们使用对应的变量。</li>\n<li>下个参数应该总是被设为0（历史遗留的问题）。</li>\n<li>第七第八个参数定义了源图的格式和数据类型。我们使用RGB值加载这个图像，并把它们储存为char(byte)数组，我们将会传入对应值。</li>\n<li>最后一个参数是真正的图像数据。</li>\n</ul>\n<p>当调用<code>glTexImage2D</code>时，当前绑定的纹理对象就会被附加上纹理图像。然而，目前只有基本级别(Base-level)的纹理图像被加载了，如果要使用多级渐远纹理，我们必须手动设置所有不同的图像（不断递增第二个参数）。或者，直接在生成纹理之后调用<code>glGenerateMipmap</code>。这会为当前绑定的纹理自动生成所有需要的多级渐远纹理。<br>生成了纹理和相应的多级渐远纹理后，释放图像的内存是一个很好的习惯。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stbi_image_free</span>(data);</span><br></pre></td></tr></table></figure>\n<p>生成一个纹理的过程应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> texture;</span><br><span class=\"line\"><span class=\"built_in\">glGenTextures</span>(<span class=\"number\">1</span>, &amp;texture);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\"><span class=\"comment\">// 为当前绑定的纹理对象设置环绕、过滤方式</span></span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   </span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class=\"line\"><span class=\"built_in\">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class=\"line\"><span class=\"comment\">// 加载并生成纹理</span></span><br><span class=\"line\"><span class=\"type\">int</span> width, height, nrChannels;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data = <span class=\"built_in\">stbi_load</span>(<span class=\"string\">&quot;container.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrChannels, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glTexImage2D</span>(GL_TEXTURE_2D, <span class=\"number\">0</span>, GL_RGB, width, height, <span class=\"number\">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class=\"line\">    <span class=\"built_in\">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Failed to load texture&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">stbi_image_free</span>(data);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用纹理\"><a href=\"#应用纹理\" class=\"headerlink\" title=\"应用纹理\"></a>应用纹理</h2><p>后面的这部分我们会使用<code>glDrawElements</code>绘制「你好，三角形」教程最后一部分的矩形。我们需要告知OpenGL如何采样纹理，所以我们必须使用纹理坐标更新顶点数据：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">1.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">1.f</span>,<span class=\"number\">1.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">1.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note danger no-icon\"><p>这里需要讲一下，纹理图片的坐标范围是 0-1 （这点跟gl的-1 - 1 不一样），横坐标 0-1代表一个图片整个宽度，纵坐标 0-1 代表整个图片的高度。<br>这里设置属性的意思代表：在GLSL刷新到 （-0.5，-0.5）点的时候，对应的颜色是 (0.5,0,0),对应的纹理坐标为（0，0）. 然后四个坐标依次类推。整个遍历过程是根据定义的EBO中的indices来决定，然后GL依次序来遍历所有的坐标点（<strong>范围内的所有，比如当前这里就是一个（-0.5，-0.5）到(0.5,0.5) 的矩形</strong>）。然后每到一个点，都会根据比例计算出相应的color坐标，textCoords坐标来决定传入的color属性是什么，以及传入的texCoords是什么。<br>这里就是在整个GL渲染范围内，正好要渲染整张图片。<br><img src=\"/2024-03-05T223546.png\" alt=\"2024-03-05T223546\"><br>但如果是下面这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// position\t\t\t  color\t\t\t\t\ttexCoords</span></span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\">\t<span class=\"number\">-0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.0f</span>,<span class=\"number\">0.f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,</span><br><span class=\"line\">\t<span class=\"number\">0.5f</span>,<span class=\"number\">-0.5f</span>,<span class=\"number\">0.f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.5f</span>,\t\t<span class=\"number\">0.5f</span>,<span class=\"number\">0.f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样的画图片纹理的范围就只有一半，也就是说，在整个gl遍历的过程中，图片会以一半的形式来占据整个遍历范围。</p>\n<p><img src=\"/2024-03-05T223446.png\" alt=\"2024-03-05T223446\"></p>\n</div>\n\n\n<p>然后，添加新的输入属性:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>接着我们需要调整顶点着色器使其能够接受顶点坐标为一个顶点属性，并把坐标传给片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">float</span> colorSin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;   <span class=\"comment\">// 位置变量的属性位置值为 0 </span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aColor; <span class=\"comment\">// 颜色变量的属性位置值为 1</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">2</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord; <span class=\"comment\">// 纹理坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> ourColor; <span class=\"comment\">// 向片段着色器输出一个颜色</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ourColor = aColor; <span class=\"comment\">// 将ourColor设置为我们从顶点数据那里得到的输入颜色</span></span><br><span class=\"line\">    texCoord = aTexCoord;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>片段着色器应该接下来会把输出变量TexCoord作为输入变量。</p>\n<p>片段着色器也应该能访问纹理对象，但是我们怎样能把纹理对象传给片段着色器呢？GLSL有一个供纹理对象使用的内建数据类型，叫做采样器(Sampler)，它以纹理类型作为后缀，比如sampler1D、sampler3D，或在我们的例子中的sampler2D。我们可以简单声明一个uniform sampler2D把一个纹理添加到片段着色器中，稍后我们会把纹理赋值给这个uniform。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> ourColor;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec2</span> TexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> ourTexture;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">texture</span>(ourTexture, TexCoord);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们使用GLSL内建的texture函数来采样纹理的颜色，它第一个参数是纹理采样器，第二个参数是对应的纹理坐标。texture函数会使用之前设置的纹理参数对相应的颜色值进行采样。这个片段着色器的输出就是纹理的（插值）纹理坐标上的(过滤后的)颜色。</p>\n<p>现在只剩下在调用glDrawElements之前绑定纹理了，它会自动把纹理赋值给片段着色器的采样器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以把得到的纹理颜色与顶点颜色混合，来获得更有趣的效果。我们只需把纹理颜色与顶点颜色在片段着色器中相乘来混合二者的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragColor = <span class=\"built_in\">texture</span>(ourTexture, TexCoord) * <span class=\"type\">vec4</span>(ourColor, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>最终的效果应该是顶点颜色和纹理颜色的混合色.<br><img src=\"/2024/03/05/openGL_texture/2024-03-05T223955.png\" alt=\"2024-03-05T223955\"></p>\n<h2 id=\"纹理单元\"><a href=\"#纹理单元\" class=\"headerlink\" title=\"纹理单元\"></a>纹理单元</h2><p>你可能会奇怪为什么sampler2D变量是个uniform，我们却不用glUniform给它赋值。使用glUniform1i，我们可以给纹理采样器分配一个位置值，这样的话我们能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元(Texture Unit)。一个纹理的默认纹理单元是0，它是默认的激活纹理单元，所以教程前面部分我们没有分配一个位置值。</p>\n<p>纹理单元的主要目的是让我们在着色器中可以使用多于一个的纹理。通过把纹理单元赋值给采样器，我们可以一次绑定多个纹理，只要我们首先激活对应的纹理单元。就像glBindTexture一样，我们可以使用glActiveTexture激活纹理单元，传入我们需要使用的纹理单元：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0); <span class=\"comment\">// 在绑定纹理之前先激活纹理单元</span></span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>\n<p>激活纹理单元之后，接下来的glBindTexture函数调用会绑定这个纹理到当前激活的纹理单元，<strong>纹理单元GL_TEXTURE0默认总是被激活，所以我们在前面的例子里当我们使用glBindTexture的时候，无需激活任何纹理单元</strong>。</p>\n<div class=\"note info\">OpenGL至少保证有16个纹理单元供你使用，也就是说你可以激活从GL_TEXTURE0到GL_TEXTRUE15。它们都是按顺序定义的，所以我们也可以通过GL_TEXTURE0 + 8的方式获得GL_TEXTURE8，这在当我们需要循环一些纹理单元的时候会很有用。</div>\n\n<p>我们仍然需要编辑片段着色器来接收另一个采样器。这应该相对来说非常直接了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> texture1;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> texture2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"built_in\">mix</span>(<span class=\"built_in\">texture</span>(texture1, TexCoord), <span class=\"built_in\">texture</span>(texture2, TexCoord), <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终输出颜色现在是两个纹理的结合。GLSL内建的mix函数需要接受两个值作为参数，并对它们根据第三个参数进行线性插值。如果第三个值是0.0，它会返回第一个输入；如果是1.0，会返回第二个输入值。0.2会返回80%的第一个输入颜色和20%的第二个输入颜色，即返回两个纹理的混合色。</p>\n<p>那么选择第二张图片开始混合把。<br>为了使用第二个纹理（以及第一个），我们必须改变一点渲染流程，先绑定两个纹理到对应的纹理单元，然后定义哪个uniform采样器对应哪个纹理单元：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用当前的shader program</span></span><br><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture1);</span><br><span class=\"line\"><span class=\"built_in\">glActiveTexture</span>(GL_TEXTURE1);</span><br><span class=\"line\"><span class=\"built_in\">glBindTexture</span>(GL_TEXTURE_2D, texture2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\">````</span><br><span class=\"line\">上面的意思是依次激活一个纹理单元，然后紧跟着将刚才激活的单元放入一个纹理.</span><br><span class=\"line\"></span><br><span class=\"line\">我们还要通过使用`glUniform1i`设置每个采样器的方式告诉OpenGL每个着色器采样器属于哪个纹理单元。我们只需要设置一次即可，所以这个会放在渲染循环的前面：</span><br><span class=\"line\">```c++</span><br><span class=\"line\">ourShader.<span class=\"built_in\">use</span>(); <span class=\"comment\">// 不要忘记在设置uniform变量之前激活着色器程序！</span></span><br><span class=\"line\"><span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;texture1&quot;</span>), <span class=\"number\">0</span>); <span class=\"comment\">// 手动设置</span></span><br><span class=\"line\">ourShader.<span class=\"built_in\">setInt</span>(<span class=\"string\">&quot;texture2&quot;</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 或者使用着色器类设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(...) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个步骤是一次性的，我们定义一次即可，所以可以放在渲染循环外面。意思就是对应的变量名，去对应的纹理单元中取得纹理即可.因为这里的纹理单元对应我们之前激活的数个纹理单元，所以这里应该是uniform的int<br>通过使用glUniform1i设置采样器，我们保证了每个uniform采样器对应着正确的纹理单元。</p>\n<p>最后，你应该就可以见到一个混合着两幅图的画面了。</p>"},{"title":"OpenGL 学习中遇到的issue","date":"2024-03-04T14:32:16.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n纯粹为了记录自己的愚蠢\n<!-- more -->\n- [2024-03-04](#2024-03-04)\n- [2024-03-05 凌晨](#2024-03-05-凌晨)\n- [03-10 glVertexAttribPointer](#03-10-glvertexattribpointer)\n- [2024-03-12 凌晨](#2024-03-12-凌晨)\n- [2024-04-07 记录一次动态设置顶点数组的问题排查](#2024-04-07-记录一次动态设置顶点数组的问题排查)\n\n\n# 2024-03-04\n本来想复习一下周末的学习成果的，在没有使用EBO的时候，很开熏，代码一切正常。\n直到我使用了EBO并且脑子抽了。代码如下：\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include \"MyShader.h\"\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\n#define DEFAULT_VERTEX_FILE_PATH \"./vertex01.vert\"\n#define DEFAULT_FRAGMENT_FILE_PATH \"./fragment01.frag\"\n\nint test_0304() {\n\n\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    // 创建窗口\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);//注册回调\n\n    // 检测窗口是否正常启动，传入内置方法\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n    float vertices[] = {\n        // 位置              // 颜色\n         0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n        -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n         0.5f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f ,   // 顶部\n         -0.5f, 0.5f, 0.0f,   0.f, 0.f, 0.f,\n         //0.5f, -0.5f, 0.0f,\n         //-0.5f, -0.5f, 0.0f,\n         // 0.0f,  0.5f, 0.0f,\n         // -0.5f, 0.5f, 0.0f,\n    };\n\n     float indices[] = {\n        0,1,2,\n        2,3,1\n    };\n\n    GLuint VAO = 0, VBO = 0, EBO = 0;\n    // 注册三个data\n    glGenVertexArrays(1,&VAO);// 两个参数，第一个代表要几个\n    glGenBuffers(1, &VBO);//VBO\n    glGenBuffers(1, &EBO);\n    glBindVertexArray(VAO);// 注册后需要立刻绑定，因为后面的操作要绑定到当前的VAO上面\n    glBindBuffer(GL_ARRAY_BUFFER,VBO);\n    glBufferData(GL_ARRAY_BUFFER,sizeof(vertices), vertices, GL_STATIC_DRAW);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n    glVertexAttribPointer(0,3, GL_FLOAT,GL_FALSE,6*sizeof(float),(void*)0);\n    glEnableVertexAttribArray(0); // 定义一个参数并启用\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6* sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1); // 定义一个参数并启用\n\n\n\n\n    int success;\n    char infoLog[1024];\n\n    // shader\n    GLuint shaderProgram = glCreateProgram();\n    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n\n    std::string vertexSourceCoded;\n    const char* vertexSourceCodedC;\n    std::string fragmentSourceCode;\n    const char* fragmentSourceCodeC;\n\n    std::ifstream vShaderFile;\n    std::ifstream fShaderFile;\n\n    vShaderFile.open(DEFAULT_VERTEX_FILE_PATH);\n    std::stringstream vst;\n    vst << vShaderFile.rdbuf();\n    vShaderFile.close();\n    vertexSourceCoded = vst.str();\n    vertexSourceCodedC = vertexSourceCoded.c_str();\n    std::stringstream vst2;\n    fShaderFile.open(DEFAULT_FRAGMENT_FILE_PATH);\n    vst2 << fShaderFile.rdbuf();\n    fShaderFile.close();\n    fragmentSourceCode = vst2.str();\n    std::cout << fragmentSourceCode << std::endl;\n\n    fragmentSourceCodeC = fragmentSourceCode.c_str();\n\n    glShaderSource(vertexShader,1,&vertexSourceCodedC,NULL);\n    glCompileShader(vertexShader);\n    glGetShaderiv(vertexShader,GL_COMPILE_STATUS,&success);\n\n    if (!success) {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n\n    glShaderSource(fragmentShader,1,&fragmentSourceCodeC,NULL);\n    glCompileShader(fragmentShader);\n    glGetShaderiv(fragmentShader,GL_COMPILE_STATUS,&success);\n    if (!success) {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n\n    glAttachShader(shaderProgram,vertexShader);\n    glAttachShader(shaderProgram,fragmentShader);\n    glLinkProgram(shaderProgram);\n\n    glGetProgramiv(shaderProgram,GL_LINK_STATUS,&success);\n    if (!success) {\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\" << infoLog << std::endl;\n    }\n    glDeleteShader(fragmentShader);\n    glDeleteShader(vertexShader);\n\n    //主循环\n    while (!glfwWindowShouldClose(window)) {\n        // do something...\n        processInput(window);\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT); // 清屏\n        \n        glUseProgram(shaderProgram);\n        glBindVertexArray(VAO);         \n        //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n        //glDrawArrays(GL_TRIANGLES,0,3);\n        //glDrawElements(GL_TRIANGLES,6, GL_UNSIGNED_INT,0);\n        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    glDeleteVertexArrays(1, &VAO);\n    glDeleteBuffers(1, &VBO);\n    glDeleteBuffers(1, &EBO);\n    glDeleteProgram(shaderProgram);\n    glfwTerminate();\n    return 0;\n}\n```\n\n一开始我还没看出问题，直到运行时，怎么也出不来想要的图像。我就感觉事态不对了。各种翻看昨天的笔记，代码，逐行对照，都没有结果。\n**在尝试搜索答案未果，进群找人无人理睬的情况下，我开始了把昨天的代码逐行复制到这里查看异常。最后结果出来了：**\n```c++\n    // 这里是int, int,int\n    // float indices[] = {\n    unsigned int indices[] = {\n        0,1,2,\n        2,3,1\n    };\n```\n我这里定义成了float。。\n这里，indices代表参数下标，所以必须是整数int，我不知道脑子抽什么风了把这里写成了float。\n以此为戒吧。被自己蠢哭\n\n# 2024-03-05 凌晨\n又遇见一个问题。这个问题是不熟悉C++导致的。\n当我读取shader源码准备编译时，出现了shader编译报错，代码如下:\n```c++\n\tconst char* fragmentSourceCodeC;\n\tstd::stringstream ss2;\n\tstd::ifstream fragmentFileHandle;\n\tfragmentFileHandle.open(DEFAULT_FRAGMENT_FILE_PATH);\n\n\tss2 << fragmentFileHandle.rdbuf();\n\tfragmentFileHandle.close();\n\n\tfragmentSourceCodeC = ss2.str().c_str();\n```\n一直编译shader失败。我就打印了`fragmentSourceCodeC`看了下，结果全是乱码汉字。但是这段代码跟之前的唯一区别就是我把生成C字符串省略成一个方法了。\n当代码改回来的时候，一切就正常了;\n```c++\n\tstd::string fragmentSourceCode;\n\tconst char* fragmentSourceCodeC;\n\tstd::stringstream ss2;\n\tstd::ifstream fragmentFileHandle;\n\tfragmentFileHandle.open(DEFAULT_FRAGMENT_FILE_PATH);\n\n\tss2 << fragmentFileHandle.rdbuf();\n\tfragmentFileHandle.close();\n\n\tfragmentSourceCode = ss2.str();\n\tfragmentSourceCodeC = fragmentSourceCode.c_str();\n```\n暂不明确原因，应该是与c++底层的实现有关.\n\n# 03-10 glVertexAttribPointer\n记录一个坑，表现是渲染出的3d物体能够正常显示模型 ，但是无法显示显示纹理材质。\n原因是这个方法：\n```c++\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n\n    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n```\n\n<span style='color:red'>\n    这里面的最后一个参数，起始位置偏移量需要强转成(void*),并且，<span style='font-weight:bold'>长度是参数个数 × 参数类型长度</span>\n    </span>\n\n# 2024-03-12 凌晨\n两个低级错误：\n1. 学习光照渲染的时候，最后一步渲染出来的界面只有光源cube，没有被照亮物体。将被光源渲染代码去掉发现屏幕只会渲染没有经过矩阵变换的原始vertex顶点，并且颜色为白色。排查了好半天，最后跟教程源码比对发现，片段着色器居然少加了一个in参数，这个参数本应该是从顶点着色器传入给片段着色器的，但是片段着色器没有声明这个参数，导致渲染异常。但是这个异常很诡异。大晚上的着实吓着我了。\n2. 对矩阵不熟悉。在c++代码中使用位移向量构造灯源的model矩阵后，为了把灯源位置传入给物体着色器，我在代码中又使用变换后的transform矩阵乘了位移向量然后转成vec3传入，导致最后的结果偏差的有些离谱.\n\n# 2024-04-07 记录一次动态设置顶点数组的问题排查\n在写自己的[小游戏](https://github.com/voidvvv/LinkA)的时候，我想要添加一个功能，就是在两个方块相连接消除的时候，显示两个方块相连的路线。\n算法方面，我选择了AStar寻路算法，这方面写的头晕眼花，但是问题不大。\n最后渲染的时候，却无论如何也渲染不出来。\n我是手写了一个basicRender来渲染的，所以理所当然的我就怀疑是我的render写的有问题,下面就是我的render:\n```c++\n#ifndef __BASICRENDER_H__\n#define __BASICRENDER_H__\n\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include <iostream>\n\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n#include <glm/gtc/type_ptr.hpp>\n#include \"Camera.h\"\n\n#include \"Shader.h\"\n\n\n\n// render use for rendering basic shape, include line, dot and rectangle\nclass BasicRender\n{\nprivate:\n    float vertex[5000];\n    int vIndex;\n    int vSize;\n    GLuint VAO;\n    GLuint VBO;\n    ShaderProgram *shader; \n    void setVec3(glm::vec3);\n    unsigned int vertexCount;\n\npublic:\n    BasicRender(ShaderProgram *shader);\n\n    void initialData();\n\n    void drawLine(glm::vec3 start,glm::vec3 end, Camera* camera , glm::vec3 color1 = glm::vec3(1.f), glm::vec3 color2 = glm::vec3(1.f));\n    void drawLine(glm::vec2 start,glm::vec2 end, Camera* camera , glm::vec3 color1 = glm::vec3(1.f), glm::vec3 color2 = glm::vec3(1.f));\n\n    // void drawFillLine();\n};\n\n#endif // __BASICRENDER_H__\n```\n\ncpp:\n```c++\n#include \"BasicRender.h\"\n\n#define Point GL_POINTS\n#define Line GL_LINES\n#define Filled GL_TRIANGLES\n\nvoid BasicRender::setVec3(glm::vec3 v3)\n{\n    vertex[vIndex++] = v3[0];\n    vertex[vIndex++] = v3[1];\n    vertex[vIndex++] = v3[2];\n    vertexCount++;\n}\n\nBasicRender::BasicRender(ShaderProgram *_shader)\n    : shader(_shader), VAO(0)\n{\n    vertexCount = 0;\n    vIndex = 0;\n}\n\nvoid BasicRender::initialData()\n{\n\n    glGenVertexArrays(1, &VAO);\n    glBindVertexArray(VAO);\n    glGenBuffers(1, &VBO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, 600 * sizeof(float), NULL, GL_DYNAMIC_DRAW);\n    // postion\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)0);\n    glEnableVertexAttribArray(0);\n    // color\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n    // glBindBuffer(GL_ARRAY_BUFFER,0);\n    glBindVertexArray(0);\n}\n\nvoid BasicRender::drawLine(glm::vec3 start, glm::vec3 end,\n\n                           Camera *camera, glm::vec3 color1, glm::vec3 color2)\n{\n    vertexCount = 0;\n    vIndex = 0;\n    // bind matrix\n    shader->use();\n    glBindVertexArray(VAO);\n    shader->setUniformMat4(\"projection\", camera->getProjectionMatrix());\n    // shader->setUniformMat4(\"projection\", glm::mat4(1.f));\n\n    shader->setUniformMat4(\"view\", camera->getViewMatrix());\n    // shader->setUniformMat4(\"view\", glm::mat4(1.f));\n\n    shader->setUniformMat4(\"model\", glm::mat4(1.f));\n\n    // position\n    setVec3(start);\n    // setVec3(glm::vec3(0.f));\n    setVec3(color1);\n\n    setVec3(end);\n    // setVec3(glm::vec3(1.f));\n    setVec3(color2);\n\n\n    glBufferSubData(GL_ARRAY_BUFFER, 0, vIndex * sizeof(float), vertex);\n\n    glDrawArrays(GL_LINES, 0, 2);\n\n    glBindVertexArray(0);\n}\n\nvoid BasicRender::drawLine(glm::vec2 start, glm::vec2 end, Camera *camera, glm::vec3 color1,\n                           glm::vec3 color2)\n{\n    drawLine(glm::vec3(start, 0.f), glm::vec3(end, 0.f), camera, color1, color2);\n}\n```\n我就怀疑是动态设置顶点数组无法这么`glBufferSubData`设置,就各种搜索，各种改。但是还是没有改变，仍然无法渲染。\n最后我开始怀疑不是render的问题了，为了确认我的想法，于是我就把顶点在方法设置中写死，view和projection矩阵设置为标准矩阵（上面的注释里的内容）,然后开始渲染，神奇的是，竟然成功的渲染出了一条线段。\n于是乎，我确认了我的render是没有问题的，自然我就开始查找我算法获取到的路径了。\n首先，我加了一个标准输出来查看找出的路劲中心点信息：\n```c++\nvoid printPath(std::vector<Card*> path){\n    std::cout<< \"----\"<<std::endl;\n    for (Card* c:path){\n        std::cout<< c->center.x<< \" - \"<< c->center.y <<std::endl;\n    }\n        \n\n    std::cout<< \"----\"<<std::endl;\n};\n```\n然后我在查找路径出来的地方来打印信息:\n```c++\n                bool b = outer->pathFinder->searchNodePath(extraCard.get(), selecedCard.get(), Game_Heuristic, Game_ShouldStop, outer->linkAPath);\n                std::cout << \"A: X - [\" << extraCard.get()->x << \"]  Y - [\" << extraCard.get()->y << \"]  B: x - [\" << selecedCard.get()->x << \"]   y- [\" << selecedCard.get()->y << \"] reseult: \" << b << std::endl;\n\n                if (b)\n                {\n                    std::cout << \"outer->linkAPath size: \" << outer->linkAPath.size() << std::endl;\n                    printPath(outer->linkAPath);\n                    outer->showPath = true;\n                    events->sendMessaage(_CARD_SUCCESS_MATCH, NULL, extraCard.get(), outer);\n                    events->sendMessaage(_CARD_SUCCESS_MATCH, NULL, selecedCard.get(), outer);\n                }\n```\n结果令我大吃一惊，所有节点的中心坐标完全一样，也就是说，之前并不是没有渲染路径，而是路径全部渲染到了一个像素点上，我看不到。\n然后我就跑到给card设置中心点的位置看了下:\n```C++\n        std::shared_ptr<Card> objPtr = objs[i];\n        int c_col = i % column;\n        int c_row = i / column;\n\n        objPtr.get()->position.x = cardGapx * (c_col + 1) + cardWidth * c_col + cardsOrigin.x;\n        objPtr.get()->position.y = cardGapy * (c_row + 1) + c_row * cardHeight + cardsOrigin.y;\n\n        objPtr.get()->size.x = cardWidth;\n        objPtr.get()->size.y = cardHeight;\n\n        // 啊 这\n        objPtr.get()->center.x = position.x + cardWidth/2;\n        objPtr.get()->center.y = position.y + cardHeight/2;\n```\n这里的position是我Board的position，也就是整个连连看地盘的position，每个card都这么设置，那么每个card自然都是同样的坐标。正确的设置应该是:\n```c++\n        objPtr.get()->center.x = objPtr.get()->position.x + cardWidth/2;\n        objPtr.get()->center.y = objPtr.get()->position.y + cardHeight/2;\n```\n然后一段困扰我一下午的排查就告一段落了。哎，粗心大意害死人\n","source":"_posts/opengl-issues.md","raw":"---\ntitle: OpenGL 学习中遇到的issue\ndate: 2024-03-04 22:32:16\ncategories: \n- c++\n- OpenGL\n- issue\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n纯粹为了记录自己的愚蠢\n<!-- more -->\n- [2024-03-04](#2024-03-04)\n- [2024-03-05 凌晨](#2024-03-05-凌晨)\n- [03-10 glVertexAttribPointer](#03-10-glvertexattribpointer)\n- [2024-03-12 凌晨](#2024-03-12-凌晨)\n- [2024-04-07 记录一次动态设置顶点数组的问题排查](#2024-04-07-记录一次动态设置顶点数组的问题排查)\n\n\n# 2024-03-04\n本来想复习一下周末的学习成果的，在没有使用EBO的时候，很开熏，代码一切正常。\n直到我使用了EBO并且脑子抽了。代码如下：\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include \"MyShader.h\"\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\n#define DEFAULT_VERTEX_FILE_PATH \"./vertex01.vert\"\n#define DEFAULT_FRAGMENT_FILE_PATH \"./fragment01.frag\"\n\nint test_0304() {\n\n\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    // 创建窗口\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);//注册回调\n\n    // 检测窗口是否正常启动，传入内置方法\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n    float vertices[] = {\n        // 位置              // 颜色\n         0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n        -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n         0.5f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f ,   // 顶部\n         -0.5f, 0.5f, 0.0f,   0.f, 0.f, 0.f,\n         //0.5f, -0.5f, 0.0f,\n         //-0.5f, -0.5f, 0.0f,\n         // 0.0f,  0.5f, 0.0f,\n         // -0.5f, 0.5f, 0.0f,\n    };\n\n     float indices[] = {\n        0,1,2,\n        2,3,1\n    };\n\n    GLuint VAO = 0, VBO = 0, EBO = 0;\n    // 注册三个data\n    glGenVertexArrays(1,&VAO);// 两个参数，第一个代表要几个\n    glGenBuffers(1, &VBO);//VBO\n    glGenBuffers(1, &EBO);\n    glBindVertexArray(VAO);// 注册后需要立刻绑定，因为后面的操作要绑定到当前的VAO上面\n    glBindBuffer(GL_ARRAY_BUFFER,VBO);\n    glBufferData(GL_ARRAY_BUFFER,sizeof(vertices), vertices, GL_STATIC_DRAW);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n    glVertexAttribPointer(0,3, GL_FLOAT,GL_FALSE,6*sizeof(float),(void*)0);\n    glEnableVertexAttribArray(0); // 定义一个参数并启用\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6* sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1); // 定义一个参数并启用\n\n\n\n\n    int success;\n    char infoLog[1024];\n\n    // shader\n    GLuint shaderProgram = glCreateProgram();\n    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n\n    std::string vertexSourceCoded;\n    const char* vertexSourceCodedC;\n    std::string fragmentSourceCode;\n    const char* fragmentSourceCodeC;\n\n    std::ifstream vShaderFile;\n    std::ifstream fShaderFile;\n\n    vShaderFile.open(DEFAULT_VERTEX_FILE_PATH);\n    std::stringstream vst;\n    vst << vShaderFile.rdbuf();\n    vShaderFile.close();\n    vertexSourceCoded = vst.str();\n    vertexSourceCodedC = vertexSourceCoded.c_str();\n    std::stringstream vst2;\n    fShaderFile.open(DEFAULT_FRAGMENT_FILE_PATH);\n    vst2 << fShaderFile.rdbuf();\n    fShaderFile.close();\n    fragmentSourceCode = vst2.str();\n    std::cout << fragmentSourceCode << std::endl;\n\n    fragmentSourceCodeC = fragmentSourceCode.c_str();\n\n    glShaderSource(vertexShader,1,&vertexSourceCodedC,NULL);\n    glCompileShader(vertexShader);\n    glGetShaderiv(vertexShader,GL_COMPILE_STATUS,&success);\n\n    if (!success) {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n\n    glShaderSource(fragmentShader,1,&fragmentSourceCodeC,NULL);\n    glCompileShader(fragmentShader);\n    glGetShaderiv(fragmentShader,GL_COMPILE_STATUS,&success);\n    if (!success) {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n\n    glAttachShader(shaderProgram,vertexShader);\n    glAttachShader(shaderProgram,fragmentShader);\n    glLinkProgram(shaderProgram);\n\n    glGetProgramiv(shaderProgram,GL_LINK_STATUS,&success);\n    if (!success) {\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\" << infoLog << std::endl;\n    }\n    glDeleteShader(fragmentShader);\n    glDeleteShader(vertexShader);\n\n    //主循环\n    while (!glfwWindowShouldClose(window)) {\n        // do something...\n        processInput(window);\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT); // 清屏\n        \n        glUseProgram(shaderProgram);\n        glBindVertexArray(VAO);         \n        //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n        //glDrawArrays(GL_TRIANGLES,0,3);\n        //glDrawElements(GL_TRIANGLES,6, GL_UNSIGNED_INT,0);\n        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    glDeleteVertexArrays(1, &VAO);\n    glDeleteBuffers(1, &VBO);\n    glDeleteBuffers(1, &EBO);\n    glDeleteProgram(shaderProgram);\n    glfwTerminate();\n    return 0;\n}\n```\n\n一开始我还没看出问题，直到运行时，怎么也出不来想要的图像。我就感觉事态不对了。各种翻看昨天的笔记，代码，逐行对照，都没有结果。\n**在尝试搜索答案未果，进群找人无人理睬的情况下，我开始了把昨天的代码逐行复制到这里查看异常。最后结果出来了：**\n```c++\n    // 这里是int, int,int\n    // float indices[] = {\n    unsigned int indices[] = {\n        0,1,2,\n        2,3,1\n    };\n```\n我这里定义成了float。。\n这里，indices代表参数下标，所以必须是整数int，我不知道脑子抽什么风了把这里写成了float。\n以此为戒吧。被自己蠢哭\n\n# 2024-03-05 凌晨\n又遇见一个问题。这个问题是不熟悉C++导致的。\n当我读取shader源码准备编译时，出现了shader编译报错，代码如下:\n```c++\n\tconst char* fragmentSourceCodeC;\n\tstd::stringstream ss2;\n\tstd::ifstream fragmentFileHandle;\n\tfragmentFileHandle.open(DEFAULT_FRAGMENT_FILE_PATH);\n\n\tss2 << fragmentFileHandle.rdbuf();\n\tfragmentFileHandle.close();\n\n\tfragmentSourceCodeC = ss2.str().c_str();\n```\n一直编译shader失败。我就打印了`fragmentSourceCodeC`看了下，结果全是乱码汉字。但是这段代码跟之前的唯一区别就是我把生成C字符串省略成一个方法了。\n当代码改回来的时候，一切就正常了;\n```c++\n\tstd::string fragmentSourceCode;\n\tconst char* fragmentSourceCodeC;\n\tstd::stringstream ss2;\n\tstd::ifstream fragmentFileHandle;\n\tfragmentFileHandle.open(DEFAULT_FRAGMENT_FILE_PATH);\n\n\tss2 << fragmentFileHandle.rdbuf();\n\tfragmentFileHandle.close();\n\n\tfragmentSourceCode = ss2.str();\n\tfragmentSourceCodeC = fragmentSourceCode.c_str();\n```\n暂不明确原因，应该是与c++底层的实现有关.\n\n# 03-10 glVertexAttribPointer\n记录一个坑，表现是渲染出的3d物体能够正常显示模型 ，但是无法显示显示纹理材质。\n原因是这个方法：\n```c++\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n\n    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n```\n\n<span style='color:red'>\n    这里面的最后一个参数，起始位置偏移量需要强转成(void*),并且，<span style='font-weight:bold'>长度是参数个数 × 参数类型长度</span>\n    </span>\n\n# 2024-03-12 凌晨\n两个低级错误：\n1. 学习光照渲染的时候，最后一步渲染出来的界面只有光源cube，没有被照亮物体。将被光源渲染代码去掉发现屏幕只会渲染没有经过矩阵变换的原始vertex顶点，并且颜色为白色。排查了好半天，最后跟教程源码比对发现，片段着色器居然少加了一个in参数，这个参数本应该是从顶点着色器传入给片段着色器的，但是片段着色器没有声明这个参数，导致渲染异常。但是这个异常很诡异。大晚上的着实吓着我了。\n2. 对矩阵不熟悉。在c++代码中使用位移向量构造灯源的model矩阵后，为了把灯源位置传入给物体着色器，我在代码中又使用变换后的transform矩阵乘了位移向量然后转成vec3传入，导致最后的结果偏差的有些离谱.\n\n# 2024-04-07 记录一次动态设置顶点数组的问题排查\n在写自己的[小游戏](https://github.com/voidvvv/LinkA)的时候，我想要添加一个功能，就是在两个方块相连接消除的时候，显示两个方块相连的路线。\n算法方面，我选择了AStar寻路算法，这方面写的头晕眼花，但是问题不大。\n最后渲染的时候，却无论如何也渲染不出来。\n我是手写了一个basicRender来渲染的，所以理所当然的我就怀疑是我的render写的有问题,下面就是我的render:\n```c++\n#ifndef __BASICRENDER_H__\n#define __BASICRENDER_H__\n\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include <iostream>\n\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n#include <glm/gtc/type_ptr.hpp>\n#include \"Camera.h\"\n\n#include \"Shader.h\"\n\n\n\n// render use for rendering basic shape, include line, dot and rectangle\nclass BasicRender\n{\nprivate:\n    float vertex[5000];\n    int vIndex;\n    int vSize;\n    GLuint VAO;\n    GLuint VBO;\n    ShaderProgram *shader; \n    void setVec3(glm::vec3);\n    unsigned int vertexCount;\n\npublic:\n    BasicRender(ShaderProgram *shader);\n\n    void initialData();\n\n    void drawLine(glm::vec3 start,glm::vec3 end, Camera* camera , glm::vec3 color1 = glm::vec3(1.f), glm::vec3 color2 = glm::vec3(1.f));\n    void drawLine(glm::vec2 start,glm::vec2 end, Camera* camera , glm::vec3 color1 = glm::vec3(1.f), glm::vec3 color2 = glm::vec3(1.f));\n\n    // void drawFillLine();\n};\n\n#endif // __BASICRENDER_H__\n```\n\ncpp:\n```c++\n#include \"BasicRender.h\"\n\n#define Point GL_POINTS\n#define Line GL_LINES\n#define Filled GL_TRIANGLES\n\nvoid BasicRender::setVec3(glm::vec3 v3)\n{\n    vertex[vIndex++] = v3[0];\n    vertex[vIndex++] = v3[1];\n    vertex[vIndex++] = v3[2];\n    vertexCount++;\n}\n\nBasicRender::BasicRender(ShaderProgram *_shader)\n    : shader(_shader), VAO(0)\n{\n    vertexCount = 0;\n    vIndex = 0;\n}\n\nvoid BasicRender::initialData()\n{\n\n    glGenVertexArrays(1, &VAO);\n    glBindVertexArray(VAO);\n    glGenBuffers(1, &VBO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, 600 * sizeof(float), NULL, GL_DYNAMIC_DRAW);\n    // postion\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)0);\n    glEnableVertexAttribArray(0);\n    // color\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n    // glBindBuffer(GL_ARRAY_BUFFER,0);\n    glBindVertexArray(0);\n}\n\nvoid BasicRender::drawLine(glm::vec3 start, glm::vec3 end,\n\n                           Camera *camera, glm::vec3 color1, glm::vec3 color2)\n{\n    vertexCount = 0;\n    vIndex = 0;\n    // bind matrix\n    shader->use();\n    glBindVertexArray(VAO);\n    shader->setUniformMat4(\"projection\", camera->getProjectionMatrix());\n    // shader->setUniformMat4(\"projection\", glm::mat4(1.f));\n\n    shader->setUniformMat4(\"view\", camera->getViewMatrix());\n    // shader->setUniformMat4(\"view\", glm::mat4(1.f));\n\n    shader->setUniformMat4(\"model\", glm::mat4(1.f));\n\n    // position\n    setVec3(start);\n    // setVec3(glm::vec3(0.f));\n    setVec3(color1);\n\n    setVec3(end);\n    // setVec3(glm::vec3(1.f));\n    setVec3(color2);\n\n\n    glBufferSubData(GL_ARRAY_BUFFER, 0, vIndex * sizeof(float), vertex);\n\n    glDrawArrays(GL_LINES, 0, 2);\n\n    glBindVertexArray(0);\n}\n\nvoid BasicRender::drawLine(glm::vec2 start, glm::vec2 end, Camera *camera, glm::vec3 color1,\n                           glm::vec3 color2)\n{\n    drawLine(glm::vec3(start, 0.f), glm::vec3(end, 0.f), camera, color1, color2);\n}\n```\n我就怀疑是动态设置顶点数组无法这么`glBufferSubData`设置,就各种搜索，各种改。但是还是没有改变，仍然无法渲染。\n最后我开始怀疑不是render的问题了，为了确认我的想法，于是我就把顶点在方法设置中写死，view和projection矩阵设置为标准矩阵（上面的注释里的内容）,然后开始渲染，神奇的是，竟然成功的渲染出了一条线段。\n于是乎，我确认了我的render是没有问题的，自然我就开始查找我算法获取到的路径了。\n首先，我加了一个标准输出来查看找出的路劲中心点信息：\n```c++\nvoid printPath(std::vector<Card*> path){\n    std::cout<< \"----\"<<std::endl;\n    for (Card* c:path){\n        std::cout<< c->center.x<< \" - \"<< c->center.y <<std::endl;\n    }\n        \n\n    std::cout<< \"----\"<<std::endl;\n};\n```\n然后我在查找路径出来的地方来打印信息:\n```c++\n                bool b = outer->pathFinder->searchNodePath(extraCard.get(), selecedCard.get(), Game_Heuristic, Game_ShouldStop, outer->linkAPath);\n                std::cout << \"A: X - [\" << extraCard.get()->x << \"]  Y - [\" << extraCard.get()->y << \"]  B: x - [\" << selecedCard.get()->x << \"]   y- [\" << selecedCard.get()->y << \"] reseult: \" << b << std::endl;\n\n                if (b)\n                {\n                    std::cout << \"outer->linkAPath size: \" << outer->linkAPath.size() << std::endl;\n                    printPath(outer->linkAPath);\n                    outer->showPath = true;\n                    events->sendMessaage(_CARD_SUCCESS_MATCH, NULL, extraCard.get(), outer);\n                    events->sendMessaage(_CARD_SUCCESS_MATCH, NULL, selecedCard.get(), outer);\n                }\n```\n结果令我大吃一惊，所有节点的中心坐标完全一样，也就是说，之前并不是没有渲染路径，而是路径全部渲染到了一个像素点上，我看不到。\n然后我就跑到给card设置中心点的位置看了下:\n```C++\n        std::shared_ptr<Card> objPtr = objs[i];\n        int c_col = i % column;\n        int c_row = i / column;\n\n        objPtr.get()->position.x = cardGapx * (c_col + 1) + cardWidth * c_col + cardsOrigin.x;\n        objPtr.get()->position.y = cardGapy * (c_row + 1) + c_row * cardHeight + cardsOrigin.y;\n\n        objPtr.get()->size.x = cardWidth;\n        objPtr.get()->size.y = cardHeight;\n\n        // 啊 这\n        objPtr.get()->center.x = position.x + cardWidth/2;\n        objPtr.get()->center.y = position.y + cardHeight/2;\n```\n这里的position是我Board的position，也就是整个连连看地盘的position，每个card都这么设置，那么每个card自然都是同样的坐标。正确的设置应该是:\n```c++\n        objPtr.get()->center.x = objPtr.get()->position.x + cardWidth/2;\n        objPtr.get()->center.y = objPtr.get()->position.y + cardHeight/2;\n```\n然后一段困扰我一下午的排查就告一段落了。哎，粗心大意害死人\n","slug":"opengl-issues","published":1,"updated":"2025-03-28T02:05:16.268Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7r00281wu1e578143e","content":"<p><img src=\"/2024/03/04/opengl-issues/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>纯粹为了记录自己的愚蠢</p>\n<span id=\"more\"></span>\n<ul>\n<li><a href=\"#2024-03-04\">2024-03-04</a></li>\n<li><a href=\"#2024-03-05-%E5%87%8C%E6%99%A8\">2024-03-05 凌晨</a></li>\n<li><a href=\"#03-10-glvertexattribpointer\">03-10 glVertexAttribPointer</a></li>\n<li><a href=\"#2024-03-12-%E5%87%8C%E6%99%A8\">2024-03-12 凌晨</a></li>\n<li><a href=\"#2024-04-07-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5\">2024-04-07 记录一次动态设置顶点数组的问题排查</a></li>\n</ul>\n<h1 id=\"2024-03-04\"><a href=\"#2024-03-04\" class=\"headerlink\" title=\"2024-03-04\"></a>2024-03-04</h1><p>本来想复习一下周末的学习成果的，在没有使用EBO的时候，很开熏，代码一切正常。<br>直到我使用了EBO并且脑子抽了。代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_VERTEX_FILE_PATH <span class=\"string\">&quot;./vertex01.vert&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_FRAGMENT_FILE_PATH <span class=\"string\">&quot;./fragment01.frag&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test_0304</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建窗口</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);<span class=\"comment\">//注册回调</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检测窗口是否正常启动，传入内置方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">         <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">        <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">         <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span> ,   <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">         <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"number\">0.f</span>, <span class=\"number\">0.f</span>, <span class=\"number\">0.f</span>,</span><br><span class=\"line\">         <span class=\"comment\">//0.5f, -0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">//-0.5f, -0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">// 0.0f,  0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">// -0.5f, 0.5f, 0.0f,</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">float</span> indices[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    GLuint VAO = <span class=\"number\">0</span>, VBO = <span class=\"number\">0</span>, EBO = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 注册三个data</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;VAO);<span class=\"comment\">// 两个参数，第一个代表要几个</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);<span class=\"comment\">//VBO</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);<span class=\"comment\">// 注册后需要立刻绑定，因为后面的操作要绑定到当前的VAO上面</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER,<span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>, GL_FLOAT,GL_FALSE,<span class=\"number\">6</span>*<span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>),(<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 定义一个参数并启用</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span>* <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 定义一个参数并启用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> success;</span><br><span class=\"line\">    <span class=\"type\">char</span> infoLog[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// shader</span></span><br><span class=\"line\">    GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\">    GLuint vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\">    GLuint fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string vertexSourceCoded;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vertexSourceCodedC;</span><br><span class=\"line\">    std::string fragmentSourceCode;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::ifstream vShaderFile;</span><br><span class=\"line\">    std::ifstream fShaderFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">open</span>(DEFAULT_VERTEX_FILE_PATH);</span><br><span class=\"line\">    std::stringstream vst;</span><br><span class=\"line\">    vst &lt;&lt; vShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    vertexSourceCoded = vst.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    vertexSourceCodedC = vertexSourceCoded.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    std::stringstream vst2;</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\">    vst2 &lt;&lt; fShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    fragmentSourceCode = vst2.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; fragmentSourceCode &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    fragmentSourceCodeC = fragmentSourceCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(vertexShader,<span class=\"number\">1</span>,&amp;vertexSourceCodedC,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(vertexShader,GL_COMPILE_STATUS,&amp;success);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(fragmentShader,<span class=\"number\">1</span>,&amp;fragmentSourceCodeC,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(fragmentShader,GL_COMPILE_STATUS,&amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram,vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram,fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramiv</span>(shaderProgram,GL_LINK_STATUS,&amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//主循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT); <span class=\"comment\">// 清屏</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);         </span><br><span class=\"line\">        <span class=\"comment\">//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span></span><br><span class=\"line\">        <span class=\"comment\">//glDrawArrays(GL_TRIANGLES,0,3);</span></span><br><span class=\"line\">        <span class=\"comment\">//glDrawElements(GL_TRIANGLES,6, GL_UNSIGNED_INT,0);</span></span><br><span class=\"line\">        <span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteProgram</span>(shaderProgram);</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一开始我还没看出问题，直到运行时，怎么也出不来想要的图像。我就感觉事态不对了。各种翻看昨天的笔记，代码，逐行对照，都没有结果。<br><strong>在尝试搜索答案未果，进群找人无人理睬的情况下，我开始了把昨天的代码逐行复制到这里查看异常。最后结果出来了：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里是int, int,int</span></span><br><span class=\"line\"><span class=\"comment\">// float indices[] = &#123;</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我这里定义成了float。。<br>这里，indices代表参数下标，所以必须是整数int，我不知道脑子抽什么风了把这里写成了float。<br>以此为戒吧。被自己蠢哭</p>\n<h1 id=\"2024-03-05-凌晨\"><a href=\"#2024-03-05-凌晨\" class=\"headerlink\" title=\"2024-03-05 凌晨\"></a>2024-03-05 凌晨</h1><p>又遇见一个问题。这个问题是不熟悉C++导致的。<br>当我读取shader源码准备编译时，出现了shader编译报错，代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\">std::stringstream ss2;</span><br><span class=\"line\">std::ifstream fragmentFileHandle;</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">ss2 &lt;&lt; fragmentFileHandle.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">fragmentSourceCodeC = ss2.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>();</span><br></pre></td></tr></table></figure>\n<p>一直编译shader失败。我就打印了<code>fragmentSourceCodeC</code>看了下，结果全是乱码汉字。但是这段代码跟之前的唯一区别就是我把生成C字符串省略成一个方法了。<br>当代码改回来的时候，一切就正常了;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::string fragmentSourceCode;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\">std::stringstream ss2;</span><br><span class=\"line\">std::ifstream fragmentFileHandle;</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">ss2 &lt;&lt; fragmentFileHandle.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">fragmentSourceCode = ss2.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">fragmentSourceCodeC = fragmentSourceCode.<span class=\"built_in\">c_str</span>();</span><br></pre></td></tr></table></figure>\n<p>暂不明确原因，应该是与c++底层的实现有关.</p>\n<h1 id=\"03-10-glVertexAttribPointer\"><a href=\"#03-10-glVertexAttribPointer\" class=\"headerlink\" title=\"03-10 glVertexAttribPointer\"></a>03-10 glVertexAttribPointer</h1><p>记录一个坑，表现是渲染出的3d物体能够正常显示模型 ，但是无法显示显示纹理材质。<br>原因是这个方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">5</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">5</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<span style='color:red'>\n    这里面的最后一个参数，起始位置偏移量需要强转成(void*),并且，<span style='font-weight:bold'>长度是参数个数 × 参数类型长度</span>\n    </span>\n\n<h1 id=\"2024-03-12-凌晨\"><a href=\"#2024-03-12-凌晨\" class=\"headerlink\" title=\"2024-03-12 凌晨\"></a>2024-03-12 凌晨</h1><p>两个低级错误：</p>\n<ol>\n<li>学习光照渲染的时候，最后一步渲染出来的界面只有光源cube，没有被照亮物体。将被光源渲染代码去掉发现屏幕只会渲染没有经过矩阵变换的原始vertex顶点，并且颜色为白色。排查了好半天，最后跟教程源码比对发现，片段着色器居然少加了一个in参数，这个参数本应该是从顶点着色器传入给片段着色器的，但是片段着色器没有声明这个参数，导致渲染异常。但是这个异常很诡异。大晚上的着实吓着我了。</li>\n<li>对矩阵不熟悉。在c++代码中使用位移向量构造灯源的model矩阵后，为了把灯源位置传入给物体着色器，我在代码中又使用变换后的transform矩阵乘了位移向量然后转成vec3传入，导致最后的结果偏差的有些离谱.</li>\n</ol>\n<h1 id=\"2024-04-07-记录一次动态设置顶点数组的问题排查\"><a href=\"#2024-04-07-记录一次动态设置顶点数组的问题排查\" class=\"headerlink\" title=\"2024-04-07 记录一次动态设置顶点数组的问题排查\"></a>2024-04-07 记录一次动态设置顶点数组的问题排查</h1><p>在写自己的<a href=\"https://github.com/voidvvv/LinkA\">小游戏</a>的时候，我想要添加一个功能，就是在两个方块相连接消除的时候，显示两个方块相连的路线。<br>算法方面，我选择了AStar寻路算法，这方面写的头晕眼花，但是问题不大。<br>最后渲染的时候，却无论如何也渲染不出来。<br>我是手写了一个basicRender来渲染的，所以理所当然的我就怀疑是我的render写的有问题,下面就是我的render:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __BASICRENDER_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __BASICRENDER_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/glm.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/type_ptr.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Camera.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Shader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render use for rendering basic shape, include line, dot and rectangle</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicRender</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">float</span> vertex[<span class=\"number\">5000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vIndex;</span><br><span class=\"line\">    <span class=\"type\">int</span> vSize;</span><br><span class=\"line\">    GLuint VAO;</span><br><span class=\"line\">    GLuint VBO;</span><br><span class=\"line\">    ShaderProgram *shader; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setVec3</span><span class=\"params\">(glm::vec3)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertexCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BasicRender</span>(ShaderProgram *shader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initialData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(glm::vec3 start,glm::vec3 end, Camera* camera , glm::vec3 color1 = glm::vec3(<span class=\"number\">1.f</span>), glm::vec3 color2 = glm::vec3(<span class=\"number\">1.f</span>))</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(glm::vec2 start,glm::vec2 end, Camera* camera , glm::vec3 color1 = glm::vec3(<span class=\"number\">1.f</span>), glm::vec3 color2 = glm::vec3(<span class=\"number\">1.f</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// void drawFillLine();</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __BASICRENDER_H__</span></span></span><br></pre></td></tr></table></figure>\n\n<p>cpp:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BasicRender.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Point GL_POINTS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Line GL_LINES</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Filled GL_TRIANGLES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::setVec3</span><span class=\"params\">(glm::vec3 v3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">0</span>];</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">1</span>];</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">2</span>];</span><br><span class=\"line\">    vertexCount++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BasicRender::<span class=\"built_in\">BasicRender</span>(ShaderProgram *_shader)</span><br><span class=\"line\">    : <span class=\"built_in\">shader</span>(_shader), <span class=\"built_in\">VAO</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vertexCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::initialData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"number\">600</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), <span class=\"literal\">NULL</span>, GL_DYNAMIC_DRAW);</span><br><span class=\"line\">    <span class=\"comment\">// postion</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// color</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span> *)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// glBindBuffer(GL_ARRAY_BUFFER,0);</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::drawLine</span><span class=\"params\">(glm::vec3 start, glm::vec3 end,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                           Camera *camera, glm::vec3 color1, glm::vec3 color2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vertexCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// bind matrix</span></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;projection&quot;</span>, camera-&gt;<span class=\"built_in\">getProjectionMatrix</span>());</span><br><span class=\"line\">    <span class=\"comment\">// shader-&gt;setUniformMat4(&quot;projection&quot;, glm::mat4(1.f));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;view&quot;</span>, camera-&gt;<span class=\"built_in\">getViewMatrix</span>());</span><br><span class=\"line\">    <span class=\"comment\">// shader-&gt;setUniformMat4(&quot;view&quot;, glm::mat4(1.f));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;model&quot;</span>, glm::<span class=\"built_in\">mat4</span>(<span class=\"number\">1.f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// position</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(start);</span><br><span class=\"line\">    <span class=\"comment\">// setVec3(glm::vec3(0.f));</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(color1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(end);</span><br><span class=\"line\">    <span class=\"comment\">// setVec3(glm::vec3(1.f));</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(color2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glBufferSubData</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>, vIndex * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), vertex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glDrawArrays</span>(GL_LINES, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::drawLine</span><span class=\"params\">(glm::vec2 start, glm::vec2 end, Camera *camera, glm::vec3 color1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                           glm::vec3 color2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">drawLine</span>(glm::<span class=\"built_in\">vec3</span>(start, <span class=\"number\">0.f</span>), glm::<span class=\"built_in\">vec3</span>(end, <span class=\"number\">0.f</span>), camera, color1, color2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我就怀疑是动态设置顶点数组无法这么<code>glBufferSubData</code>设置,就各种搜索，各种改。但是还是没有改变，仍然无法渲染。<br>最后我开始怀疑不是render的问题了，为了确认我的想法，于是我就把顶点在方法设置中写死，view和projection矩阵设置为标准矩阵（上面的注释里的内容）,然后开始渲染，神奇的是，竟然成功的渲染出了一条线段。<br>于是乎，我确认了我的render是没有问题的，自然我就开始查找我算法获取到的路径了。<br>首先，我加了一个标准输出来查看找出的路劲中心点信息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPath</span><span class=\"params\">(std::vector&lt;Card*&gt; path)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt; <span class=\"string\">&quot;----&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Card* c:path)&#123;</span><br><span class=\"line\">        std::cout&lt;&lt; c-&gt;center.x&lt;&lt; <span class=\"string\">&quot; - &quot;</span>&lt;&lt; c-&gt;center.y &lt;&lt;std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout&lt;&lt; <span class=\"string\">&quot;----&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后我在查找路径出来的地方来打印信息:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> b = outer-&gt;pathFinder-&gt;<span class=\"built_in\">searchNodePath</span>(extraCard.<span class=\"built_in\">get</span>(), selecedCard.<span class=\"built_in\">get</span>(), Game_Heuristic, Game_ShouldStop, outer-&gt;linkAPath);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;A: X - [&quot;</span> &lt;&lt; extraCard.<span class=\"built_in\">get</span>()-&gt;x &lt;&lt; <span class=\"string\">&quot;]  Y - [&quot;</span> &lt;&lt; extraCard.<span class=\"built_in\">get</span>()-&gt;y &lt;&lt; <span class=\"string\">&quot;]  B: x - [&quot;</span> &lt;&lt; selecedCard.<span class=\"built_in\">get</span>()-&gt;x &lt;&lt; <span class=\"string\">&quot;]   y- [&quot;</span> &lt;&lt; selecedCard.<span class=\"built_in\">get</span>()-&gt;y &lt;&lt; <span class=\"string\">&quot;] reseult: &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;outer-&gt;linkAPath size: &quot;</span> &lt;&lt; outer-&gt;linkAPath.<span class=\"built_in\">size</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">printPath</span>(outer-&gt;linkAPath);</span><br><span class=\"line\">    outer-&gt;showPath = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    events-&gt;<span class=\"built_in\">sendMessaage</span>(_CARD_SUCCESS_MATCH, <span class=\"literal\">NULL</span>, extraCard.<span class=\"built_in\">get</span>(), outer);</span><br><span class=\"line\">    events-&gt;<span class=\"built_in\">sendMessaage</span>(_CARD_SUCCESS_MATCH, <span class=\"literal\">NULL</span>, selecedCard.<span class=\"built_in\">get</span>(), outer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果令我大吃一惊，所有节点的中心坐标完全一样，也就是说，之前并不是没有渲染路径，而是路径全部渲染到了一个像素点上，我看不到。<br>然后我就跑到给card设置中心点的位置看了下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::shared_ptr&lt;Card&gt; objPtr = objs[i];</span><br><span class=\"line\"><span class=\"type\">int</span> c_col = i % column;</span><br><span class=\"line\"><span class=\"type\">int</span> c_row = i / column;</span><br><span class=\"line\"></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;position.x = cardGapx * (c_col + <span class=\"number\">1</span>) + cardWidth * c_col + cardsOrigin.x;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;position.y = cardGapy * (c_row + <span class=\"number\">1</span>) + c_row * cardHeight + cardsOrigin.y;</span><br><span class=\"line\"></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;size.x = cardWidth;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;size.y = cardHeight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 啊 这</span></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.x = position.x + cardWidth/<span class=\"number\">2</span>;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.y = position.y + cardHeight/<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里的position是我Board的position，也就是整个连连看地盘的position，每个card都这么设置，那么每个card自然都是同样的坐标。正确的设置应该是:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.x = objPtr.<span class=\"built_in\">get</span>()-&gt;position.x + cardWidth/<span class=\"number\">2</span>;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.y = objPtr.<span class=\"built_in\">get</span>()-&gt;position.y + cardHeight/<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>然后一段困扰我一下午的排查就告一段落了。哎，粗心大意害死人</p>\n","length":2335,"excerpt":"<p><img src=\"/2024/03/04/opengl-issues/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>纯粹为了记录自己的愚蠢</p>","more":"<ul>\n<li><a href=\"#2024-03-04\">2024-03-04</a></li>\n<li><a href=\"#2024-03-05-%E5%87%8C%E6%99%A8\">2024-03-05 凌晨</a></li>\n<li><a href=\"#03-10-glvertexattribpointer\">03-10 glVertexAttribPointer</a></li>\n<li><a href=\"#2024-03-12-%E5%87%8C%E6%99%A8\">2024-03-12 凌晨</a></li>\n<li><a href=\"#2024-04-07-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5\">2024-04-07 记录一次动态设置顶点数组的问题排查</a></li>\n</ul>\n<h1 id=\"2024-03-04\"><a href=\"#2024-03-04\" class=\"headerlink\" title=\"2024-03-04\"></a>2024-03-04</h1><p>本来想复习一下周末的学习成果的，在没有使用EBO的时候，很开熏，代码一切正常。<br>直到我使用了EBO并且脑子抽了。代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_VERTEX_FILE_PATH <span class=\"string\">&quot;./vertex01.vert&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_FRAGMENT_FILE_PATH <span class=\"string\">&quot;./fragment01.frag&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test_0304</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建窗口</span></span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);<span class=\"comment\">//注册回调</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检测窗口是否正常启动，传入内置方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">         <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">        <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">         <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span> ,   <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">         <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"number\">0.f</span>, <span class=\"number\">0.f</span>, <span class=\"number\">0.f</span>,</span><br><span class=\"line\">         <span class=\"comment\">//0.5f, -0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">//-0.5f, -0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">// 0.0f,  0.5f, 0.0f,</span></span><br><span class=\"line\">         <span class=\"comment\">// -0.5f, 0.5f, 0.0f,</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">float</span> indices[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    GLuint VAO = <span class=\"number\">0</span>, VBO = <span class=\"number\">0</span>, EBO = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 注册三个data</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;VAO);<span class=\"comment\">// 两个参数，第一个代表要几个</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);<span class=\"comment\">//VBO</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);<span class=\"comment\">// 注册后需要立刻绑定，因为后面的操作要绑定到当前的VAO上面</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER,<span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>, GL_FLOAT,GL_FALSE,<span class=\"number\">6</span>*<span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>),(<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 定义一个参数并启用</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span>* <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 定义一个参数并启用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> success;</span><br><span class=\"line\">    <span class=\"type\">char</span> infoLog[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// shader</span></span><br><span class=\"line\">    GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\">    GLuint vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\">    GLuint fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string vertexSourceCoded;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vertexSourceCodedC;</span><br><span class=\"line\">    std::string fragmentSourceCode;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::ifstream vShaderFile;</span><br><span class=\"line\">    std::ifstream fShaderFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">open</span>(DEFAULT_VERTEX_FILE_PATH);</span><br><span class=\"line\">    std::stringstream vst;</span><br><span class=\"line\">    vst &lt;&lt; vShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    vertexSourceCoded = vst.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    vertexSourceCodedC = vertexSourceCoded.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    std::stringstream vst2;</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\">    vst2 &lt;&lt; fShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    fragmentSourceCode = vst2.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; fragmentSourceCode &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    fragmentSourceCodeC = fragmentSourceCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(vertexShader,<span class=\"number\">1</span>,&amp;vertexSourceCodedC,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(vertexShader,GL_COMPILE_STATUS,&amp;success);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(fragmentShader,<span class=\"number\">1</span>,&amp;fragmentSourceCodeC,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(fragmentShader,GL_COMPILE_STATUS,&amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram,vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram,fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramiv</span>(shaderProgram,GL_LINK_STATUS,&amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//主循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something...</span></span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT); <span class=\"comment\">// 清屏</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);         </span><br><span class=\"line\">        <span class=\"comment\">//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span></span><br><span class=\"line\">        <span class=\"comment\">//glDrawArrays(GL_TRIANGLES,0,3);</span></span><br><span class=\"line\">        <span class=\"comment\">//glDrawElements(GL_TRIANGLES,6, GL_UNSIGNED_INT,0);</span></span><br><span class=\"line\">        <span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteProgram</span>(shaderProgram);</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一开始我还没看出问题，直到运行时，怎么也出不来想要的图像。我就感觉事态不对了。各种翻看昨天的笔记，代码，逐行对照，都没有结果。<br><strong>在尝试搜索答案未果，进群找人无人理睬的情况下，我开始了把昨天的代码逐行复制到这里查看异常。最后结果出来了：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里是int, int,int</span></span><br><span class=\"line\"><span class=\"comment\">// float indices[] = &#123;</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我这里定义成了float。。<br>这里，indices代表参数下标，所以必须是整数int，我不知道脑子抽什么风了把这里写成了float。<br>以此为戒吧。被自己蠢哭</p>\n<h1 id=\"2024-03-05-凌晨\"><a href=\"#2024-03-05-凌晨\" class=\"headerlink\" title=\"2024-03-05 凌晨\"></a>2024-03-05 凌晨</h1><p>又遇见一个问题。这个问题是不熟悉C++导致的。<br>当我读取shader源码准备编译时，出现了shader编译报错，代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\">std::stringstream ss2;</span><br><span class=\"line\">std::ifstream fragmentFileHandle;</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">ss2 &lt;&lt; fragmentFileHandle.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">fragmentSourceCodeC = ss2.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>();</span><br></pre></td></tr></table></figure>\n<p>一直编译shader失败。我就打印了<code>fragmentSourceCodeC</code>看了下，结果全是乱码汉字。但是这段代码跟之前的唯一区别就是我把生成C字符串省略成一个方法了。<br>当代码改回来的时候，一切就正常了;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::string fragmentSourceCode;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentSourceCodeC;</span><br><span class=\"line\">std::stringstream ss2;</span><br><span class=\"line\">std::ifstream fragmentFileHandle;</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">open</span>(DEFAULT_FRAGMENT_FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">ss2 &lt;&lt; fragmentFileHandle.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">fragmentFileHandle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">fragmentSourceCode = ss2.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">fragmentSourceCodeC = fragmentSourceCode.<span class=\"built_in\">c_str</span>();</span><br></pre></td></tr></table></figure>\n<p>暂不明确原因，应该是与c++底层的实现有关.</p>\n<h1 id=\"03-10-glVertexAttribPointer\"><a href=\"#03-10-glVertexAttribPointer\" class=\"headerlink\" title=\"03-10 glVertexAttribPointer\"></a>03-10 glVertexAttribPointer</h1><p>记录一个坑，表现是渲染出的3d物体能够正常显示模型 ，但是无法显示显示纹理材质。<br>原因是这个方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">5</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">5</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<span style='color:red'>\n    这里面的最后一个参数，起始位置偏移量需要强转成(void*),并且，<span style='font-weight:bold'>长度是参数个数 × 参数类型长度</span>\n    </span>\n\n<h1 id=\"2024-03-12-凌晨\"><a href=\"#2024-03-12-凌晨\" class=\"headerlink\" title=\"2024-03-12 凌晨\"></a>2024-03-12 凌晨</h1><p>两个低级错误：</p>\n<ol>\n<li>学习光照渲染的时候，最后一步渲染出来的界面只有光源cube，没有被照亮物体。将被光源渲染代码去掉发现屏幕只会渲染没有经过矩阵变换的原始vertex顶点，并且颜色为白色。排查了好半天，最后跟教程源码比对发现，片段着色器居然少加了一个in参数，这个参数本应该是从顶点着色器传入给片段着色器的，但是片段着色器没有声明这个参数，导致渲染异常。但是这个异常很诡异。大晚上的着实吓着我了。</li>\n<li>对矩阵不熟悉。在c++代码中使用位移向量构造灯源的model矩阵后，为了把灯源位置传入给物体着色器，我在代码中又使用变换后的transform矩阵乘了位移向量然后转成vec3传入，导致最后的结果偏差的有些离谱.</li>\n</ol>\n<h1 id=\"2024-04-07-记录一次动态设置顶点数组的问题排查\"><a href=\"#2024-04-07-记录一次动态设置顶点数组的问题排查\" class=\"headerlink\" title=\"2024-04-07 记录一次动态设置顶点数组的问题排查\"></a>2024-04-07 记录一次动态设置顶点数组的问题排查</h1><p>在写自己的<a href=\"https://github.com/voidvvv/LinkA\">小游戏</a>的时候，我想要添加一个功能，就是在两个方块相连接消除的时候，显示两个方块相连的路线。<br>算法方面，我选择了AStar寻路算法，这方面写的头晕眼花，但是问题不大。<br>最后渲染的时候，却无论如何也渲染不出来。<br>我是手写了一个basicRender来渲染的，所以理所当然的我就怀疑是我的render写的有问题,下面就是我的render:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __BASICRENDER_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __BASICRENDER_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/glm.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/type_ptr.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Camera.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Shader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render use for rendering basic shape, include line, dot and rectangle</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicRender</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">float</span> vertex[<span class=\"number\">5000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vIndex;</span><br><span class=\"line\">    <span class=\"type\">int</span> vSize;</span><br><span class=\"line\">    GLuint VAO;</span><br><span class=\"line\">    GLuint VBO;</span><br><span class=\"line\">    ShaderProgram *shader; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setVec3</span><span class=\"params\">(glm::vec3)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertexCount;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">BasicRender</span>(ShaderProgram *shader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initialData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(glm::vec3 start,glm::vec3 end, Camera* camera , glm::vec3 color1 = glm::vec3(<span class=\"number\">1.f</span>), glm::vec3 color2 = glm::vec3(<span class=\"number\">1.f</span>))</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawLine</span><span class=\"params\">(glm::vec2 start,glm::vec2 end, Camera* camera , glm::vec3 color1 = glm::vec3(<span class=\"number\">1.f</span>), glm::vec3 color2 = glm::vec3(<span class=\"number\">1.f</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// void drawFillLine();</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// __BASICRENDER_H__</span></span></span><br></pre></td></tr></table></figure>\n\n<p>cpp:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;BasicRender.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Point GL_POINTS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Line GL_LINES</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Filled GL_TRIANGLES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::setVec3</span><span class=\"params\">(glm::vec3 v3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">0</span>];</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">1</span>];</span><br><span class=\"line\">    vertex[vIndex++] = v3[<span class=\"number\">2</span>];</span><br><span class=\"line\">    vertexCount++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BasicRender::<span class=\"built_in\">BasicRender</span>(ShaderProgram *_shader)</span><br><span class=\"line\">    : <span class=\"built_in\">shader</span>(_shader), <span class=\"built_in\">VAO</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vertexCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::initialData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"number\">600</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), <span class=\"literal\">NULL</span>, GL_DYNAMIC_DRAW);</span><br><span class=\"line\">    <span class=\"comment\">// postion</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// color</span></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span> *)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// glBindBuffer(GL_ARRAY_BUFFER,0);</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::drawLine</span><span class=\"params\">(glm::vec3 start, glm::vec3 end,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                           Camera *camera, glm::vec3 color1, glm::vec3 color2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vertexCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// bind matrix</span></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;projection&quot;</span>, camera-&gt;<span class=\"built_in\">getProjectionMatrix</span>());</span><br><span class=\"line\">    <span class=\"comment\">// shader-&gt;setUniformMat4(&quot;projection&quot;, glm::mat4(1.f));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;view&quot;</span>, camera-&gt;<span class=\"built_in\">getViewMatrix</span>());</span><br><span class=\"line\">    <span class=\"comment\">// shader-&gt;setUniformMat4(&quot;view&quot;, glm::mat4(1.f));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    shader-&gt;<span class=\"built_in\">setUniformMat4</span>(<span class=\"string\">&quot;model&quot;</span>, glm::<span class=\"built_in\">mat4</span>(<span class=\"number\">1.f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// position</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(start);</span><br><span class=\"line\">    <span class=\"comment\">// setVec3(glm::vec3(0.f));</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(color1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(end);</span><br><span class=\"line\">    <span class=\"comment\">// setVec3(glm::vec3(1.f));</span></span><br><span class=\"line\">    <span class=\"built_in\">setVec3</span>(color2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glBufferSubData</span>(GL_ARRAY_BUFFER, <span class=\"number\">0</span>, vIndex * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), vertex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glDrawArrays</span>(GL_LINES, <span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">BasicRender::drawLine</span><span class=\"params\">(glm::vec2 start, glm::vec2 end, Camera *camera, glm::vec3 color1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                           glm::vec3 color2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">drawLine</span>(glm::<span class=\"built_in\">vec3</span>(start, <span class=\"number\">0.f</span>), glm::<span class=\"built_in\">vec3</span>(end, <span class=\"number\">0.f</span>), camera, color1, color2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我就怀疑是动态设置顶点数组无法这么<code>glBufferSubData</code>设置,就各种搜索，各种改。但是还是没有改变，仍然无法渲染。<br>最后我开始怀疑不是render的问题了，为了确认我的想法，于是我就把顶点在方法设置中写死，view和projection矩阵设置为标准矩阵（上面的注释里的内容）,然后开始渲染，神奇的是，竟然成功的渲染出了一条线段。<br>于是乎，我确认了我的render是没有问题的，自然我就开始查找我算法获取到的路径了。<br>首先，我加了一个标准输出来查看找出的路劲中心点信息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printPath</span><span class=\"params\">(std::vector&lt;Card*&gt; path)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt; <span class=\"string\">&quot;----&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Card* c:path)&#123;</span><br><span class=\"line\">        std::cout&lt;&lt; c-&gt;center.x&lt;&lt; <span class=\"string\">&quot; - &quot;</span>&lt;&lt; c-&gt;center.y &lt;&lt;std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout&lt;&lt; <span class=\"string\">&quot;----&quot;</span>&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后我在查找路径出来的地方来打印信息:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> b = outer-&gt;pathFinder-&gt;<span class=\"built_in\">searchNodePath</span>(extraCard.<span class=\"built_in\">get</span>(), selecedCard.<span class=\"built_in\">get</span>(), Game_Heuristic, Game_ShouldStop, outer-&gt;linkAPath);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;A: X - [&quot;</span> &lt;&lt; extraCard.<span class=\"built_in\">get</span>()-&gt;x &lt;&lt; <span class=\"string\">&quot;]  Y - [&quot;</span> &lt;&lt; extraCard.<span class=\"built_in\">get</span>()-&gt;y &lt;&lt; <span class=\"string\">&quot;]  B: x - [&quot;</span> &lt;&lt; selecedCard.<span class=\"built_in\">get</span>()-&gt;x &lt;&lt; <span class=\"string\">&quot;]   y- [&quot;</span> &lt;&lt; selecedCard.<span class=\"built_in\">get</span>()-&gt;y &lt;&lt; <span class=\"string\">&quot;] reseult: &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;outer-&gt;linkAPath size: &quot;</span> &lt;&lt; outer-&gt;linkAPath.<span class=\"built_in\">size</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">printPath</span>(outer-&gt;linkAPath);</span><br><span class=\"line\">    outer-&gt;showPath = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    events-&gt;<span class=\"built_in\">sendMessaage</span>(_CARD_SUCCESS_MATCH, <span class=\"literal\">NULL</span>, extraCard.<span class=\"built_in\">get</span>(), outer);</span><br><span class=\"line\">    events-&gt;<span class=\"built_in\">sendMessaage</span>(_CARD_SUCCESS_MATCH, <span class=\"literal\">NULL</span>, selecedCard.<span class=\"built_in\">get</span>(), outer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果令我大吃一惊，所有节点的中心坐标完全一样，也就是说，之前并不是没有渲染路径，而是路径全部渲染到了一个像素点上，我看不到。<br>然后我就跑到给card设置中心点的位置看了下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::shared_ptr&lt;Card&gt; objPtr = objs[i];</span><br><span class=\"line\"><span class=\"type\">int</span> c_col = i % column;</span><br><span class=\"line\"><span class=\"type\">int</span> c_row = i / column;</span><br><span class=\"line\"></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;position.x = cardGapx * (c_col + <span class=\"number\">1</span>) + cardWidth * c_col + cardsOrigin.x;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;position.y = cardGapy * (c_row + <span class=\"number\">1</span>) + c_row * cardHeight + cardsOrigin.y;</span><br><span class=\"line\"></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;size.x = cardWidth;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;size.y = cardHeight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 啊 这</span></span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.x = position.x + cardWidth/<span class=\"number\">2</span>;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.y = position.y + cardHeight/<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里的position是我Board的position，也就是整个连连看地盘的position，每个card都这么设置，那么每个card自然都是同样的坐标。正确的设置应该是:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.x = objPtr.<span class=\"built_in\">get</span>()-&gt;position.x + cardWidth/<span class=\"number\">2</span>;</span><br><span class=\"line\">objPtr.<span class=\"built_in\">get</span>()-&gt;center.y = objPtr.<span class=\"built_in\">get</span>()-&gt;position.y + cardHeight/<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>然后一段困扰我一下午的排查就告一段落了。哎，粗心大意害死人</p>"},{"title":"OpenGL 学习 (2)","date":"2024-03-02T17:56:16.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [从三角形开始](#从三角形开始)\n  - [顶点输入](#顶点输入)\n  - [顶点着色器](#顶点着色器)\n  - [编译着色器](#编译着色器)\n  - [片段着色器](#片段着色器)\n  - [着色器程序](#着色器程序)\n  - [链接顶点属性](#链接顶点属性)\n  - [顶点数组对象](#顶点数组对象)\n  - [hello 三角形](#hello-三角形)\n  - [元素缓冲对象](#元素缓冲对象)\n\n# 从三角形开始\n---\n{% note default no-icon %}\n在学习此节之前，建议将这三个单词先记下来：\n\n顶点数组对象：<span style='color:blue'>Vertex Array Object，VAO</span>\n顶点缓冲对象：<span style='color:blue'>Vertex Buffer Object，VBO</span>\n元素缓冲对象：<span style='color:blue'>Element Buffer Object，EBO</span> 或 索引缓冲对象 Index Buffer Object，IBO\n当指代这三个东西的时候，可能使用的是全称，也可能用的是英文缩写，翻译的时候和原文保持的一致。由于没有英文那样的分词间隔，中文全称的部分可能不太容易注意。但请记住，缩写和中文全称指代的是一个东西。\n{% endnote %}\n\n在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。\n\n{% note info no-icon %}\n2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕/窗口分辨率的限制。\n{% endnote %}\n\n图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)。\n\n有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的，在下一节中我们再花更多时间研究它。\n\n下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。\n\n![2024-03-03T100007](2024-03-03T100007.png)\n\n如你所见，图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段。我们会概括性地解释一下渲染管线的每个部分，让你对图形渲染管线的工作方式有个大概了解。\n\n**首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个顶点(Vertex)是一个3D坐标的数据的集合。而顶点数据是用顶点属性(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。**\n\n<div class=\"note default\">当我们谈论一个“位置”的时候，它代表在一个“空间”中所处地点的这个特殊属性；同时“空间”代表着任何一种坐标系，比如x、y、z三维坐标系，x、y二维坐标系，或者一条直线上的x和y的线性关系，只不过二维坐标系是一个扁扁的平面空间，而一条直线是一个很瘦的长长的空间。</div>\n\n{% note info no-icon %}\n为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？做出的这些提示叫做`图元`(`Primitive`)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：`GL_POINTS`、`GL_TRIANGLES`、`GL_LINE_STRIP`。\n{% endnote %}\n\n图形渲染管线的第一个部分是**顶点着色器**(`Vertex Shader`)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。\n\n图元装配(`Primitive Assembly`)阶段将顶点着色器输出的所有顶点作为输入（如果是`GL_POINTS`，那么就是一个顶点），并所有的点装配成指定图元的形状；本节例子中是一个三角形。\n\n图元装配阶段的输出会传递给几何着色器(`Geometry Shader`)。几何着色器把图元形式的一系列顶点的集合作为输入，它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。\n\n几何着色器的输出会被传入光栅化阶段(`Rasterization Stage`)，这里它会把图元映射为最终屏幕上相应的像素，生成供**片段着色器**(`Fragment Shader`)使用的片段(`Fragment`)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。\n<div class=\"note info\">OpenGL中的一个片段是OpenGL渲染一个像素所需的所有数据。</div>\n\n**片段着色器**的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。\n\n在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。\n\n可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。\n\n在现代OpenGL中，我们必须定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。\n\n<span style='color:red'>**顶点着色器**和**片段着色器**是非常重要的，他们是使用GL语言编写的，在程序运行时被编译的一种代码，这种代码需要执行在GPU中，也就是我们常说的显卡。</span>\n\n## 顶点输入\n---\n开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把所有的3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做**标准化设备坐标**(`Normalized Device Coordinates`)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。\n\n由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个float数组。\n\n```c++\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n```\n由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的深度(Depth，译注2)都是一样的，从而使它看上去像是2D的。\n<div class=\"note info\">通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</div>\n\n一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是标准化设备坐标了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：\n![2024-03-03T101619](2024-03-03T101619.png)\n\n**与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。**\n\n通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，**标准化设备坐标**(Normalized Device Coordinates)会变换为**屏幕空间坐标**(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。\n\n我们通过顶点缓冲对象(`Vertex Buffer Objects, VBO`)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。\n\n{% note success no-icon %}\n个人理解：**顶点着色器**类似于把我们传入的，图像世界中的坐标，转换成我们的**标准化设备坐标**。\n比如我们上面的三个点，分别都会被转化成[-1 - 1]之间的值，意思就是将顶点定位，并且把这个定位值传递给下一个着色器。\n之后到了我们的**片段着色器**，我们只需要返回颜色即可。这个颜色应该渲染在屏幕上哪个像素块呢？这个就是前面**顶点着色器**计算出来的位置。\n**顶点着色器**不仅仅只会计算出传入的三个点所在的位置，甚至按照`图元`，来计算这些点之间的点的坐标。\n就像上面我们定义的三个点，我们如果选择的图元是`GL_TRIANGLES`，那么这个三个点围成的三角形，顶点着色器会给里面所有的点一个 **标准化设备坐标**，并且这些点都会经过**片段着色器**来着色。\n{% endnote %}\n\n顶点缓冲对象(`VBO`)是我们在`OpenGL`教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用`glGenBuffers`函数和一个缓冲ID生成一个VBO对象：\n```c++\n// glGenBuffers 方法可以生成一个缓冲对象并返回一个缓冲对象id。\nunsigned int VBO;\n// 第一个参数是要生成的缓冲对象的数量，第二个是要输入用来存储缓冲对象名称的数组\nglGenBuffers(1, &VBO);\n// GLuint vbo;\n//glGenBuffers(1,&vbo);\n//GLuint vbo[3];\n//glGenBuffers(3,vbo);\n```\nOpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标上：\n\n```c++\n// 因为我们要的是顶点缓冲对象，所以我们需要把生成的这个id绑定在顶点缓冲对象上：\nglBindBuffer(GL_ARRAY_BUFFER, VBO); \n```\n从这一刻起，我们使用的任何（在`GL_ARRAY_BUFFER`目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用`glBufferData`函数，它会把之前定义的顶点数据复制到缓冲的内存中：\n```c++\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n{% note success no-icon %}\n`glBufferData`是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的**第一个参数**是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。**第二个参数**指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。**第三个参数**是我们希望发送的实际数据。\n第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：\n\n- GL_STATIC_DRAW ：数据不会或几乎不会改变。\n- GL_DYNAMIC_DRAW：数据会被改变很多。\n- GL_STREAM_DRAW ：数据每次绘制时都会改变。\n\n三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。\n\n现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。\n{% endnote %}\n\n## 顶点着色器\n**顶点着色器**(`Vertex Shader`)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个**顶点**和一个**片段着色器**。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。\n\n我们需要做的第一件事是用着色器语言GLSL(**OpenGL Shading Language**)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nvoid main()\n{\n    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n```\n可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。\n\n下一步，使用`in`关键字，在顶点着色器中声明所有的输入顶点属性(`Input Vertex Attribute`)。现在我们只关心位置(`Position`)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个float分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个vec3输入变量aPos。我们同样也通过layout (location = 0)设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。\n\n<div class=\"note info\">向量(Vector)\n\n在图形编程中我们经常会使用向量这个数学概念，因为它简明地表达了任意空间中的位置和方向，并且它有非常有用的数学属性。在GLSL中一个向量有最多4个分量，每个分量值都代表空间中的一个坐标，它们可以通过vec.x、vec.y、vec.z和vec.w来获取。注意vec.w分量不是用作表达空间中的位置的（我们处理的是3D不是4D），而是用在所谓透视除法(Perspective Division)上。我们会在后面的教程中更详细地讨论向量。</div>\n\n为了设置顶点着色器的输出，我们必须把位置数据赋值给**预定义**的`gl_Position`变量，它在幕后是vec4类型的。在main函数的最后，我们将gl_Position设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把vec3的数据作为vec4构造器的参数，同时把w分量设置为1.0f（我们会在后面解释为什么）来完成这一任务。\n\n当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。\n\n{% note info no-icon %}\n我们可以看到，我们当前的这个顶点着色器是直接把输入的坐标拿来直接使用返回了，这里是因为我们之前定义的向量范围就是在 -1 - 1 之间的。所以我们在这里并没有进行其他的处理。\n一般正常情况下，我们需要把我们传入的坐标（`一般是世界坐标`），再加上一个相机矩阵（`Matrix`）相乘,得到我们GLSL需要的坐标（-1 - 1）\n{% endnote %}\n\n## 编译着色器\n现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：\n```c++\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n    \"layout (location = 0) in vec3 aPos;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n    \"}\\0\";\n```\n为了能够让OpenGL使用它，我们必须在运行时`动态编译`它的源代码。\n\n我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为`unsigned int`，然后用`glCreateShader`创建这个着色器：\n```c++\n// 这个方法接受一个参数，表示当前shader的类型。我们现在要的是顶点着色器，所以传入GL_VERTEX_SHADER。后面还会有片段着色器\n    GLenum vertexShader = glCreateShader(GL_VERTEX_SHADER);\n```\n下一步我们把这个着色器源码附加到着色器对象上，然后编译它：\n```c++\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n```\n`glShaderSource`函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为NULL。\n\n然后，使用`glCompileShader`来动态编译shader源码。\n\n{% note info no-icon %}\n你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n```c++\nint  success;\nchar infoLog[512];\nglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n```\n首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。\n```c++\nif(!success)\n{\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n{% endnote %}\n如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。\n## 片段着色器\n片段着色器(`Fragment Shader`)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。\n{% note info no-icon %}\n在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n{% endnote %}\n类似于`顶点着色器`，我们需要先写出来着色器源码，我们现在只想让它展示一种颜色，不需要变化：\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n} \n```\n片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用out关键字，这里我们命名为FragColor。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的vec4赋值给颜色输出。\n\n编译片段着色器的过程与顶点着色器类似，只不过我们使用`GL_FRAGMENT_SHADER`常量作为着色器类型：\n```c++\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n```\n\n两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的着色器程序(Shader Program)中。\n\n## 着色器程序\n着色器程序对象(`Shader Program Object`)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们链接(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。\n\n当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。\n\n创建一个程序对象很简单：\n```c++\nGLuint shaderProgram = glCreateProgram();\n```\n`glCreateProgram`函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用`glLinkProgram`链接它们：\n```c++\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n代码应该很清楚，我们把着色器附加到了程序上，然后用glLinkProgram链接。\n<div class=\"note info\">就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用glGetShaderiv和glGetShaderInfoLog，现在我们使用：\n\n```c++\nglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\nif(!success) {\n    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n    \n}\n```\n</div>\n得到的结果就是一个程序对象，我们可以调用`glUseProgram`函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n```c++\nglUseProgram(shaderProgram);\n```\n\n在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。\n\n对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\n```c++\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。\n\n## 链接顶点属性\n顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。\n\n我们的顶点缓冲数据会被解析为下面这样子：\n![2024-03-03T134604](2024-03-03T134604.png)\n  - 位置数据被储存为32位（4字节）浮点值。\n  - 每个位置包含3个这样的值。\n  - 在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列(Tightly Packed)。\n  - 数据中第一个值在缓冲开始的位置。\n\n这就是我们上面定义的顶点集合的解析。我们现在需要把这个解析方法告诉给GPU。\n有了这些信息我们就可以使用`glVertexAttribPointer`函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n`glVertexAttribPointer`函数的参数非常多，所以我会逐一介绍它们：\n  - 第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用layout(location = 0)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为0。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入0。\n  - 第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。\n  - 第三个参数指定数据的类型，这里是`GL_FLOAT`(GLSL中vec*都是由浮点数值组成的)。\n  - 下个参数定义我们是否希望数据被标准化(`Normalize`)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。\n  - 第五个参数叫做步长(`Stride`)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个float之后，我们把步长设置为3 * sizeof(float)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。\n  - **最后一个参数的类型是void*，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数**。\n<div class=\"note info\">说人话的额讲，就是告诉GPU，我这个属性，你从参数第一个里面拿，拿出来以后，我给的这个数组，你三个三个的解析，解析成float，不要给我标准化，每解析完3个，就从开头数三个后再来解析，直到最后。这样，你会解析出来n个点，每个点都是我预设的数组里的三位连在一起的float</div>\n<div class=\"note danger\">每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。</div>\n\n现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用glEnableVertexAttribArray，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：\n\n```c++\n// 0. 复制顶点数组到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 1. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 2. 当我们渲染一个物体时要使用着色器程序\nglUseProgram(shaderProgram);\n// 3. 绘制物体\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？\n\n## 顶点数组对象\n顶点数组对象(`Vertex Array Object, VAO`)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中\n<div class=\"note info\">简单地说，VAO就是把VBO的一系列操作封装记录了下来。每次绘制物体时，不再需要繁琐的配置VBO，只需要绑定对应物体的VAO即可。VBO的繁琐操作放在了一次性绑定在VAO上面</div>\n\nOpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n一个顶点数组对象会储存以下这些内容：\n- `glEnableVertexAttribArray`和`glDisableVertexAttribArray`的调用。\n- 通过`glVertexAttribPointer`设置的顶点属性配置。\n- 通过`glVertexAttribPointer`调用与顶点属性关联的顶点缓冲对象。\n\n创建一个VAO和创建一个VBO很类似：\n```C++\nunsigned int VAO;\nglGenVertexArrays(1, &VAO);\n```\n\n要想使用VAO，要做的只是使用`glBindVertexArray`绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：\n\n```C++\n// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..\n// 1. 绑定VAO\nglBindVertexArray(VAO);\n// 2. 把顶点数组复制到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n[...]\n\n// ..:: 绘制代码（渲染循环中） :: ..\n// 4. 绘制物体\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n## hello 三角形\n要想绘制我们想要的物体，OpenGL给我们提供了`glDrawArrays`函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。\n```c++\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n```\n`glDrawArrays`函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。第二个参数指定了顶点数组的起始索引，我们这里填0。最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。\n\n现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：\n\n![2024-03-03T141244](2024-03-03T141244.png)\n\n完整代码如下:\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\nint main() {\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n\n    unsigned int VAO;\n    glGenVertexArrays(1, &VAO);\n    GLuint VBO;     // 定义VBO\n    glGenBuffers(1, &VBO);\n\n\n    // 绑定某个物体到VAO上(这里时默认的 vertices 三角形)\n    glBindVertexArray(VAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    // 绑定某个物体到VAO上(这里时默认的 vertices 三角形) end\n    // \n    // 顶点着色器\n    const char* vertexShaderSource = \"#version 330 core\\n\"\n        \"layout (location = 0) in vec3 aPos;\\n\"\n        \"void main()\\n\"\n        \"{\\n\"\n        \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n        \"}\\0\";\n\n    // 顶点着色器\n    GLenum vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\n    glCompileShader(vertexShader);\n\n    // 检查是否编译成功\n    int  success;\n    char infoLog[512];\n    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n    if (!success)\n    {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 顶点着色器 end\n\n    // 片段着色器\n    const char* fragmentShaderSource = \"#version 330 core\\n\"\n        \"out vec4 FragColor;\\n\"\n\n    \"void main()\\n\"\n    \"{\\n\"\n        \"FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f); \\n\"\n    \"} \\n\";\n    unsigned int fragmentShader;\n    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\n    glCompileShader(fragmentShader);\n\n    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);\n    if (!success)\n    {\n        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::FRAGEMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 片段着色器 end\n\n    // 着色器程序\n    GLuint shaderProgram = glCreateProgram();\n    // 链接\n    glAttachShader(shaderProgram, vertexShader);\n    glAttachShader(shaderProgram, fragmentShader);\n    glLinkProgram(shaderProgram);\n    //\n    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\n    if (!success) {\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::program::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 着色器程序 end\n\n    // delete 着色器，因为已经link到着色器程序里了，我们自己已经用不到这个了\n    glDeleteShader(vertexShader);\n    glDeleteShader(fragmentShader);\n\n    while (!glfwWindowShouldClose(window))\n    {\n        processInput(window);\n\n        // render\n        // ------\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        //use 着色器程序\n        glUseProgram(shaderProgram);\n        glBindVertexArray(VAO);\n        glDrawArrays(GL_TRIANGLES, 0, 3);\n        \n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    glfwTerminate();\n    return 0;\n}\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0, 0, width, height);\n}\n\nvoid processInput(GLFWwindow* window)\n{\n    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n```\n\n## 元素缓冲对象\n在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(`Element Buffer Object`，EBO)，也叫索引缓冲对象(`Index Buffer Object`，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：\n\n```c++\nfloat vertices[] = {\n    // 第一个三角形\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, 0.5f, 0.0f,  // 左上角\n    // 第二个三角形\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n```\n\n可以看到，有几个顶点叠加了。我们指定了**右下角**和**左上角**两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？\n\n值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的索引绘制(`Indexed Drawing`)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：\n\n```c++\nfloat vertices[] = {\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n\nunsigned int indices[] = {\n    // 注意索引从0开始! \n    // 此例的索引(0,1,2,3)就是顶点数组vertices的下标，\n    // 这样可以由下标代表顶点组合成矩形\n\n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：\n```c++\nunsigned int EBO;\nglGenBuffers(1, &EBO);\n```\n与VBO类似，我们先绑定EBO然后用glBufferData把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为`GL_ELEMENT_ARRAY_BUFFER`。\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n注意：我们传递了`GL_ELEMENT_ARRAY_BUFFER`当作缓冲目标。最后一件要做的事是用`glDrawElements`来替换`glDrawArrays`函数，表示我们要从索引缓冲区渲染三角形。使用`glDrawElements`时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是GL_UNSIGNED_INT。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。\n\nglDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。\n\n![2024-03-03T141941](2024-03-03T141941.png)\n\n<div class=\"note warning\">当目标是GL_ELEMENT_ARRAY_BUFFER的时候，VAO会储存glBindBuffer的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。</div>\n最后的初始化和绘制代码现在看起来像这样：\n\n```c++\n// ..:: 初始化代码 :: ..\n// 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// 4. 设定顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n[...]\n\n// ..:: 绘制代码（渲染循环中） :: ..\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\n```\n\n运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用线框模式(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。\n![2024-03-03T142231](2024-03-03T142231.png)\n\n{% note info no-icon %}\n线框模式(Wireframe Mode)\n\n要想用线框模式绘制你的三角形，你可以通过glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)函数配置OpenGL如何绘制图元。第一个参数表示我们打算将其应用到所有的三角形的正面和背面，第二个参数告诉我们用线来绘制。之后的绘制调用会一直以线框模式绘制三角形，直到我们用glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)将其设置回默认模式。\n{% endnote %}","source":"_posts/open_gl2.md","raw":"---\ntitle: OpenGL 学习 (2)\ndate: 2024-03-03T09:56:16+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [从三角形开始](#从三角形开始)\n  - [顶点输入](#顶点输入)\n  - [顶点着色器](#顶点着色器)\n  - [编译着色器](#编译着色器)\n  - [片段着色器](#片段着色器)\n  - [着色器程序](#着色器程序)\n  - [链接顶点属性](#链接顶点属性)\n  - [顶点数组对象](#顶点数组对象)\n  - [hello 三角形](#hello-三角形)\n  - [元素缓冲对象](#元素缓冲对象)\n\n# 从三角形开始\n---\n{% note default no-icon %}\n在学习此节之前，建议将这三个单词先记下来：\n\n顶点数组对象：<span style='color:blue'>Vertex Array Object，VAO</span>\n顶点缓冲对象：<span style='color:blue'>Vertex Buffer Object，VBO</span>\n元素缓冲对象：<span style='color:blue'>Element Buffer Object，EBO</span> 或 索引缓冲对象 Index Buffer Object，IBO\n当指代这三个东西的时候，可能使用的是全称，也可能用的是英文缩写，翻译的时候和原文保持的一致。由于没有英文那样的分词间隔，中文全称的部分可能不太容易注意。但请记住，缩写和中文全称指代的是一个东西。\n{% endnote %}\n\n在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。\n\n{% note info no-icon %}\n2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕/窗口分辨率的限制。\n{% endnote %}\n\n图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)。\n\n有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的，在下一节中我们再花更多时间研究它。\n\n下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。\n\n![2024-03-03T100007](2024-03-03T100007.png)\n\n如你所见，图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段。我们会概括性地解释一下渲染管线的每个部分，让你对图形渲染管线的工作方式有个大概了解。\n\n**首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个顶点(Vertex)是一个3D坐标的数据的集合。而顶点数据是用顶点属性(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。**\n\n<div class=\"note default\">当我们谈论一个“位置”的时候，它代表在一个“空间”中所处地点的这个特殊属性；同时“空间”代表着任何一种坐标系，比如x、y、z三维坐标系，x、y二维坐标系，或者一条直线上的x和y的线性关系，只不过二维坐标系是一个扁扁的平面空间，而一条直线是一个很瘦的长长的空间。</div>\n\n{% note info no-icon %}\n为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？做出的这些提示叫做`图元`(`Primitive`)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：`GL_POINTS`、`GL_TRIANGLES`、`GL_LINE_STRIP`。\n{% endnote %}\n\n图形渲染管线的第一个部分是**顶点着色器**(`Vertex Shader`)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。\n\n图元装配(`Primitive Assembly`)阶段将顶点着色器输出的所有顶点作为输入（如果是`GL_POINTS`，那么就是一个顶点），并所有的点装配成指定图元的形状；本节例子中是一个三角形。\n\n图元装配阶段的输出会传递给几何着色器(`Geometry Shader`)。几何着色器把图元形式的一系列顶点的集合作为输入，它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。\n\n几何着色器的输出会被传入光栅化阶段(`Rasterization Stage`)，这里它会把图元映射为最终屏幕上相应的像素，生成供**片段着色器**(`Fragment Shader`)使用的片段(`Fragment`)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。\n<div class=\"note info\">OpenGL中的一个片段是OpenGL渲染一个像素所需的所有数据。</div>\n\n**片段着色器**的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。\n\n在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。\n\n可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。\n\n在现代OpenGL中，我们必须定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点/片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。\n\n<span style='color:red'>**顶点着色器**和**片段着色器**是非常重要的，他们是使用GL语言编写的，在程序运行时被编译的一种代码，这种代码需要执行在GPU中，也就是我们常说的显卡。</span>\n\n## 顶点输入\n---\n开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把所有的3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做**标准化设备坐标**(`Normalized Device Coordinates`)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。\n\n由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个float数组。\n\n```c++\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n```\n由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的深度(Depth，译注2)都是一样的，从而使它看上去像是2D的。\n<div class=\"note info\">通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</div>\n\n一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是标准化设备坐标了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：\n![2024-03-03T101619](2024-03-03T101619.png)\n\n**与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。**\n\n通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，**标准化设备坐标**(Normalized Device Coordinates)会变换为**屏幕空间坐标**(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。\n\n我们通过顶点缓冲对象(`Vertex Buffer Objects, VBO`)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。\n\n{% note success no-icon %}\n个人理解：**顶点着色器**类似于把我们传入的，图像世界中的坐标，转换成我们的**标准化设备坐标**。\n比如我们上面的三个点，分别都会被转化成[-1 - 1]之间的值，意思就是将顶点定位，并且把这个定位值传递给下一个着色器。\n之后到了我们的**片段着色器**，我们只需要返回颜色即可。这个颜色应该渲染在屏幕上哪个像素块呢？这个就是前面**顶点着色器**计算出来的位置。\n**顶点着色器**不仅仅只会计算出传入的三个点所在的位置，甚至按照`图元`，来计算这些点之间的点的坐标。\n就像上面我们定义的三个点，我们如果选择的图元是`GL_TRIANGLES`，那么这个三个点围成的三角形，顶点着色器会给里面所有的点一个 **标准化设备坐标**，并且这些点都会经过**片段着色器**来着色。\n{% endnote %}\n\n顶点缓冲对象(`VBO`)是我们在`OpenGL`教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用`glGenBuffers`函数和一个缓冲ID生成一个VBO对象：\n```c++\n// glGenBuffers 方法可以生成一个缓冲对象并返回一个缓冲对象id。\nunsigned int VBO;\n// 第一个参数是要生成的缓冲对象的数量，第二个是要输入用来存储缓冲对象名称的数组\nglGenBuffers(1, &VBO);\n// GLuint vbo;\n//glGenBuffers(1,&vbo);\n//GLuint vbo[3];\n//glGenBuffers(3,vbo);\n```\nOpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标上：\n\n```c++\n// 因为我们要的是顶点缓冲对象，所以我们需要把生成的这个id绑定在顶点缓冲对象上：\nglBindBuffer(GL_ARRAY_BUFFER, VBO); \n```\n从这一刻起，我们使用的任何（在`GL_ARRAY_BUFFER`目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用`glBufferData`函数，它会把之前定义的顶点数据复制到缓冲的内存中：\n```c++\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n```\n\n{% note success no-icon %}\n`glBufferData`是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的**第一个参数**是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。**第二个参数**指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。**第三个参数**是我们希望发送的实际数据。\n第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：\n\n- GL_STATIC_DRAW ：数据不会或几乎不会改变。\n- GL_DYNAMIC_DRAW：数据会被改变很多。\n- GL_STREAM_DRAW ：数据每次绘制时都会改变。\n\n三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。\n\n现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。\n{% endnote %}\n\n## 顶点着色器\n**顶点着色器**(`Vertex Shader`)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个**顶点**和一个**片段着色器**。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。\n\n我们需要做的第一件事是用着色器语言GLSL(**OpenGL Shading Language**)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nvoid main()\n{\n    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n}\n```\n可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。\n\n下一步，使用`in`关键字，在顶点着色器中声明所有的输入顶点属性(`Input Vertex Attribute`)。现在我们只关心位置(`Position`)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个float分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个vec3输入变量aPos。我们同样也通过layout (location = 0)设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。\n\n<div class=\"note info\">向量(Vector)\n\n在图形编程中我们经常会使用向量这个数学概念，因为它简明地表达了任意空间中的位置和方向，并且它有非常有用的数学属性。在GLSL中一个向量有最多4个分量，每个分量值都代表空间中的一个坐标，它们可以通过vec.x、vec.y、vec.z和vec.w来获取。注意vec.w分量不是用作表达空间中的位置的（我们处理的是3D不是4D），而是用在所谓透视除法(Perspective Division)上。我们会在后面的教程中更详细地讨论向量。</div>\n\n为了设置顶点着色器的输出，我们必须把位置数据赋值给**预定义**的`gl_Position`变量，它在幕后是vec4类型的。在main函数的最后，我们将gl_Position设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把vec3的数据作为vec4构造器的参数，同时把w分量设置为1.0f（我们会在后面解释为什么）来完成这一任务。\n\n当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。\n\n{% note info no-icon %}\n我们可以看到，我们当前的这个顶点着色器是直接把输入的坐标拿来直接使用返回了，这里是因为我们之前定义的向量范围就是在 -1 - 1 之间的。所以我们在这里并没有进行其他的处理。\n一般正常情况下，我们需要把我们传入的坐标（`一般是世界坐标`），再加上一个相机矩阵（`Matrix`）相乘,得到我们GLSL需要的坐标（-1 - 1）\n{% endnote %}\n\n## 编译着色器\n现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：\n```c++\nconst char *vertexShaderSource = \"#version 330 core\\n\"\n    \"layout (location = 0) in vec3 aPos;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n    \"}\\0\";\n```\n为了能够让OpenGL使用它，我们必须在运行时`动态编译`它的源代码。\n\n我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为`unsigned int`，然后用`glCreateShader`创建这个着色器：\n```c++\n// 这个方法接受一个参数，表示当前shader的类型。我们现在要的是顶点着色器，所以传入GL_VERTEX_SHADER。后面还会有片段着色器\n    GLenum vertexShader = glCreateShader(GL_VERTEX_SHADER);\n```\n下一步我们把这个着色器源码附加到着色器对象上，然后编译它：\n```c++\nglShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\nglCompileShader(vertexShader);\n```\n`glShaderSource`函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为NULL。\n\n然后，使用`glCompileShader`来动态编译shader源码。\n\n{% note info no-icon %}\n你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\n```c++\nint  success;\nchar infoLog[512];\nglGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n```\n首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。\n```c++\nif(!success)\n{\n    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n}\n```\n\n{% endnote %}\n如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。\n## 片段着色器\n片段着色器(`Fragment Shader`)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。\n{% note info no-icon %}\n在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\n{% endnote %}\n类似于`顶点着色器`，我们需要先写出来着色器源码，我们现在只想让它展示一种颜色，不需要变化：\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n} \n```\n片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用out关键字，这里我们命名为FragColor。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的vec4赋值给颜色输出。\n\n编译片段着色器的过程与顶点着色器类似，只不过我们使用`GL_FRAGMENT_SHADER`常量作为着色器类型：\n```c++\nunsigned int fragmentShader;\nfragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\nglShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\nglCompileShader(fragmentShader);\n```\n\n两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的着色器程序(Shader Program)中。\n\n## 着色器程序\n着色器程序对象(`Shader Program Object`)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们链接(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。\n\n当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。\n\n创建一个程序对象很简单：\n```c++\nGLuint shaderProgram = glCreateProgram();\n```\n`glCreateProgram`函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用`glLinkProgram`链接它们：\n```c++\nglAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);\nglLinkProgram(shaderProgram);\n```\n代码应该很清楚，我们把着色器附加到了程序上，然后用glLinkProgram链接。\n<div class=\"note info\">就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用glGetShaderiv和glGetShaderInfoLog，现在我们使用：\n\n```c++\nglGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\nif(!success) {\n    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n    \n}\n```\n</div>\n得到的结果就是一个程序对象，我们可以调用`glUseProgram`函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n```c++\nglUseProgram(shaderProgram);\n```\n\n在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。\n\n对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\n```c++\nglDeleteShader(vertexShader);\nglDeleteShader(fragmentShader);\n```\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。\n\n## 链接顶点属性\n顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。\n\n我们的顶点缓冲数据会被解析为下面这样子：\n![2024-03-03T134604](2024-03-03T134604.png)\n  - 位置数据被储存为32位（4字节）浮点值。\n  - 每个位置包含3个这样的值。\n  - 在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列(Tightly Packed)。\n  - 数据中第一个值在缓冲开始的位置。\n\n这就是我们上面定义的顶点集合的解析。我们现在需要把这个解析方法告诉给GPU。\n有了这些信息我们就可以使用`glVertexAttribPointer`函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n`glVertexAttribPointer`函数的参数非常多，所以我会逐一介绍它们：\n  - 第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用layout(location = 0)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为0。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入0。\n  - 第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。\n  - 第三个参数指定数据的类型，这里是`GL_FLOAT`(GLSL中vec*都是由浮点数值组成的)。\n  - 下个参数定义我们是否希望数据被标准化(`Normalize`)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。\n  - 第五个参数叫做步长(`Stride`)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个float之后，我们把步长设置为3 * sizeof(float)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。\n  - **最后一个参数的类型是void*，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数**。\n<div class=\"note info\">说人话的额讲，就是告诉GPU，我这个属性，你从参数第一个里面拿，拿出来以后，我给的这个数组，你三个三个的解析，解析成float，不要给我标准化，每解析完3个，就从开头数三个后再来解析，直到最后。这样，你会解析出来n个点，每个点都是我预设的数组里的三位连在一起的float</div>\n<div class=\"note danger\">每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。</div>\n\n现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用glEnableVertexAttribArray，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：\n\n```c++\n// 0. 复制顶点数组到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 1. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 2. 当我们渲染一个物体时要使用着色器程序\nglUseProgram(shaderProgram);\n// 3. 绘制物体\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？\n\n## 顶点数组对象\n顶点数组对象(`Vertex Array Object, VAO`)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中\n<div class=\"note info\">简单地说，VAO就是把VBO的一系列操作封装记录了下来。每次绘制物体时，不再需要繁琐的配置VBO，只需要绑定对应物体的VAO即可。VBO的繁琐操作放在了一次性绑定在VAO上面</div>\n\nOpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\n一个顶点数组对象会储存以下这些内容：\n- `glEnableVertexAttribArray`和`glDisableVertexAttribArray`的调用。\n- 通过`glVertexAttribPointer`设置的顶点属性配置。\n- 通过`glVertexAttribPointer`调用与顶点属性关联的顶点缓冲对象。\n\n创建一个VAO和创建一个VBO很类似：\n```C++\nunsigned int VAO;\nglGenVertexArrays(1, &VAO);\n```\n\n要想使用VAO，要做的只是使用`glBindVertexArray`绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：\n\n```C++\n// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..\n// 1. 绑定VAO\nglBindVertexArray(VAO);\n// 2. 把顶点数组复制到缓冲中供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 设置顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n[...]\n\n// ..:: 绘制代码（渲染循环中） :: ..\n// 4. 绘制物体\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nsomeOpenGLFunctionThatDrawsOurTriangle();\n```\n\n## hello 三角形\n要想绘制我们想要的物体，OpenGL给我们提供了`glDrawArrays`函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。\n```c++\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3);\n```\n`glDrawArrays`函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。第二个参数指定了顶点数组的起始索引，我们这里填0。最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。\n\n现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：\n\n![2024-03-03T141244](2024-03-03T141244.png)\n\n完整代码如下:\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\nfloat vertices[] = {\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n};\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\nint main() {\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n\n    unsigned int VAO;\n    glGenVertexArrays(1, &VAO);\n    GLuint VBO;     // 定义VBO\n    glGenBuffers(1, &VBO);\n\n\n    // 绑定某个物体到VAO上(这里时默认的 vertices 三角形)\n    glBindVertexArray(VAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    // 绑定某个物体到VAO上(这里时默认的 vertices 三角形) end\n    // \n    // 顶点着色器\n    const char* vertexShaderSource = \"#version 330 core\\n\"\n        \"layout (location = 0) in vec3 aPos;\\n\"\n        \"void main()\\n\"\n        \"{\\n\"\n        \"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"\n        \"}\\0\";\n\n    // 顶点着色器\n    GLenum vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);\n    glCompileShader(vertexShader);\n\n    // 检查是否编译成功\n    int  success;\n    char infoLog[512];\n    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);\n    if (!success)\n    {\n        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 顶点着色器 end\n\n    // 片段着色器\n    const char* fragmentShaderSource = \"#version 330 core\\n\"\n        \"out vec4 FragColor;\\n\"\n\n    \"void main()\\n\"\n    \"{\\n\"\n        \"FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f); \\n\"\n    \"} \\n\";\n    unsigned int fragmentShader;\n    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);\n    glCompileShader(fragmentShader);\n\n    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);\n    if (!success)\n    {\n        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::FRAGEMENT::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 片段着色器 end\n\n    // 着色器程序\n    GLuint shaderProgram = glCreateProgram();\n    // 链接\n    glAttachShader(shaderProgram, vertexShader);\n    glAttachShader(shaderProgram, fragmentShader);\n    glLinkProgram(shaderProgram);\n    //\n    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);\n    if (!success) {\n        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);\n        std::cout << \"ERROR::SHADER::program::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n        return -1;\n    }\n    // 着色器程序 end\n\n    // delete 着色器，因为已经link到着色器程序里了，我们自己已经用不到这个了\n    glDeleteShader(vertexShader);\n    glDeleteShader(fragmentShader);\n\n    while (!glfwWindowShouldClose(window))\n    {\n        processInput(window);\n\n        // render\n        // ------\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        //use 着色器程序\n        glUseProgram(shaderProgram);\n        glBindVertexArray(VAO);\n        glDrawArrays(GL_TRIANGLES, 0, 3);\n        \n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n    glfwTerminate();\n    return 0;\n}\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n    glViewport(0, 0, width, height);\n}\n\nvoid processInput(GLFWwindow* window)\n{\n    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n```\n\n## 元素缓冲对象\n在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(`Element Buffer Object`，EBO)，也叫索引缓冲对象(`Index Buffer Object`，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：\n\n```c++\nfloat vertices[] = {\n    // 第一个三角形\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, 0.5f, 0.0f,  // 左上角\n    // 第二个三角形\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n```\n\n可以看到，有几个顶点叠加了。我们指定了**右下角**和**左上角**两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？\n\n值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的索引绘制(`Indexed Drawing`)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：\n\n```c++\nfloat vertices[] = {\n    0.5f, 0.5f, 0.0f,   // 右上角\n    0.5f, -0.5f, 0.0f,  // 右下角\n    -0.5f, -0.5f, 0.0f, // 左下角\n    -0.5f, 0.5f, 0.0f   // 左上角\n};\n\nunsigned int indices[] = {\n    // 注意索引从0开始! \n    // 此例的索引(0,1,2,3)就是顶点数组vertices的下标，\n    // 这样可以由下标代表顶点组合成矩形\n\n    0, 1, 3, // 第一个三角形\n    1, 2, 3  // 第二个三角形\n};\n```\n你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：\n```c++\nunsigned int EBO;\nglGenBuffers(1, &EBO);\n```\n与VBO类似，我们先绑定EBO然后用glBufferData把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为`GL_ELEMENT_ARRAY_BUFFER`。\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n```\n注意：我们传递了`GL_ELEMENT_ARRAY_BUFFER`当作缓冲目标。最后一件要做的事是用`glDrawElements`来替换`glDrawArrays`函数，表示我们要从索引缓冲区渲染三角形。使用`glDrawElements`时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：\n```c++\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n```\n\n第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是GL_UNSIGNED_INT。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。\n\nglDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。\n\n![2024-03-03T141941](2024-03-03T141941.png)\n\n<div class=\"note warning\">当目标是GL_ELEMENT_ARRAY_BUFFER的时候，VAO会储存glBindBuffer的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。</div>\n最后的初始化和绘制代码现在看起来像这样：\n\n```c++\n// ..:: 初始化代码 :: ..\n// 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// 4. 设定顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n[...]\n\n// ..:: 绘制代码（渲染循环中） :: ..\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\n```\n\n运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用线框模式(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。\n![2024-03-03T142231](2024-03-03T142231.png)\n\n{% note info no-icon %}\n线框模式(Wireframe Mode)\n\n要想用线框模式绘制你的三角形，你可以通过glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)函数配置OpenGL如何绘制图元。第一个参数表示我们打算将其应用到所有的三角形的正面和背面，第二个参数告诉我们用线来绘制。之后的绘制调用会一直以线框模式绘制三角形，直到我们用glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)将其设置回默认模式。\n{% endnote %}","slug":"open_gl2","published":1,"updated":"2025-03-28T02:05:16.247Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7r002c1wu16l8k9nln","content":"<p><img src=\"/2024/03/03/open_gl2/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"#%E4%BB%8E%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%80%E5%A7%8B\">从三角形开始</a><ul>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E8%BE%93%E5%85%A5\">顶点输入</a></li>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E7%9D%80%E8%89%B2%E5%99%A8\">顶点着色器</a></li>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E7%9D%80%E8%89%B2%E5%99%A8\">编译着色器</a></li>\n<li><a href=\"#%E7%89%87%E6%AE%B5%E7%9D%80%E8%89%B2%E5%99%A8\">片段着色器</a></li>\n<li><a href=\"#%E7%9D%80%E8%89%B2%E5%99%A8%E7%A8%8B%E5%BA%8F\">着色器程序</a></li>\n<li><a href=\"#%E9%93%BE%E6%8E%A5%E9%A1%B6%E7%82%B9%E5%B1%9E%E6%80%A7\">链接顶点属性</a></li>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\">顶点数组对象</a></li>\n<li><a href=\"#hello-%E4%B8%89%E8%A7%92%E5%BD%A2\">hello 三角形</a></li>\n<li><a href=\"#%E5%85%83%E7%B4%A0%E7%BC%93%E5%86%B2%E5%AF%B9%E8%B1%A1\">元素缓冲对象</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"从三角形开始\"><a href=\"#从三角形开始\" class=\"headerlink\" title=\"从三角形开始\"></a>从三角形开始</h1><hr>\n<div class=\"note default no-icon\"><p>在学习此节之前，建议将这三个单词先记下来：</p>\n<p>顶点数组对象：<span style='color:blue'>Vertex Array Object，VAO</span><br>顶点缓冲对象：<span style='color:blue'>Vertex Buffer Object，VBO</span><br>元素缓冲对象：<span style='color:blue'>Element Buffer Object，EBO</span> 或 索引缓冲对象 Index Buffer Object，IBO<br>当指代这三个东西的时候，可能使用的是全称，也可能用的是英文缩写，翻译的时候和原文保持的一致。由于没有英文那样的分词间隔，中文全称的部分可能不太容易注意。但请记住，缩写和中文全称指代的是一个东西。</p>\n</div>\n\n<p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。</p>\n<div class=\"note info no-icon\"><p>2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕&#x2F;窗口分辨率的限制。</p>\n</div>\n\n<p>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)。</p>\n<p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的，在下一节中我们再花更多时间研究它。</p>\n<p>下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T100007.png\" alt=\"2024-03-03T100007\"></p>\n<p>如你所见，图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段。我们会概括性地解释一下渲染管线的每个部分，让你对图形渲染管线的工作方式有个大概了解。</p>\n<p><strong>首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个顶点(Vertex)是一个3D坐标的数据的集合。而顶点数据是用顶点属性(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。</strong></p>\n<div class=\"note default\">当我们谈论一个“位置”的时候，它代表在一个“空间”中所处地点的这个特殊属性；同时“空间”代表着任何一种坐标系，比如x、y、z三维坐标系，x、y二维坐标系，或者一条直线上的x和y的线性关系，只不过二维坐标系是一个扁扁的平面空间，而一条直线是一个很瘦的长长的空间。</div>\n\n<div class=\"note info no-icon\"><p>为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？做出的这些提示叫做<code>图元</code>(<code>Primitive</code>)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：<code>GL_POINTS</code>、<code>GL_TRIANGLES</code>、<code>GL_LINE_STRIP</code>。</p>\n</div>\n\n<p>图形渲染管线的第一个部分是<strong>顶点着色器</strong>(<code>Vertex Shader</code>)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。</p>\n<p>图元装配(<code>Primitive Assembly</code>)阶段将顶点着色器输出的所有顶点作为输入（如果是<code>GL_POINTS</code>，那么就是一个顶点），并所有的点装配成指定图元的形状；本节例子中是一个三角形。</p>\n<p>图元装配阶段的输出会传递给几何着色器(<code>Geometry Shader</code>)。几何着色器把图元形式的一系列顶点的集合作为输入，它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。</p>\n<p>几何着色器的输出会被传入光栅化阶段(<code>Rasterization Stage</code>)，这里它会把图元映射为最终屏幕上相应的像素，生成供<strong>片段着色器</strong>(<code>Fragment Shader</code>)使用的片段(<code>Fragment</code>)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p>\n<div class=\"note info\">OpenGL中的一个片段是OpenGL渲染一个像素所需的所有数据。</div>\n\n<p><strong>片段着色器</strong>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。</p>\n<p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。</p>\n<p>可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</p>\n<p>在现代OpenGL中，我们必须定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点&#x2F;片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p>\n<p><span style='color:red'><strong>顶点着色器</strong>和<strong>片段着色器</strong>是非常重要的，他们是使用GL语言编写的，在程序运行时被编译的一种代码，这种代码需要执行在GPU中，也就是我们常说的显卡。</span></p>\n<h2 id=\"顶点输入\"><a href=\"#顶点输入\" class=\"headerlink\" title=\"顶点输入\"></a>顶点输入</h2><hr>\n<p>开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把所有的3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<strong>标准化设备坐标</strong>(<code>Normalized Device Coordinates</code>)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p>\n<p>由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个float数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的深度(Depth，译注2)都是一样的，从而使它看上去像是2D的。</p>\n<div class=\"note info\">通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</div>\n\n<p>一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是标准化设备坐标了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃&#x2F;裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：<br><img src=\"/2024/03/03/open_gl2/2024-03-03T101619.png\" alt=\"2024-03-03T101619\"></p>\n<p><strong>与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。</strong></p>\n<p>通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，<strong>标准化设备坐标</strong>(Normalized Device Coordinates)会变换为<strong>屏幕空间坐标</strong>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p>\n<p>我们通过顶点缓冲对象(<code>Vertex Buffer Objects, VBO</code>)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p>\n<div class=\"note success no-icon\"><p>个人理解：<strong>顶点着色器</strong>类似于把我们传入的，图像世界中的坐标，转换成我们的<strong>标准化设备坐标</strong>。<br>比如我们上面的三个点，分别都会被转化成[-1 - 1]之间的值，意思就是将顶点定位，并且把这个定位值传递给下一个着色器。<br>之后到了我们的<strong>片段着色器</strong>，我们只需要返回颜色即可。这个颜色应该渲染在屏幕上哪个像素块呢？这个就是前面<strong>顶点着色器</strong>计算出来的位置。<br><strong>顶点着色器</strong>不仅仅只会计算出传入的三个点所在的位置，甚至按照<code>图元</code>，来计算这些点之间的点的坐标。<br>就像上面我们定义的三个点，我们如果选择的图元是<code>GL_TRIANGLES</code>，那么这个三个点围成的三角形，顶点着色器会给里面所有的点一个 <strong>标准化设备坐标</strong>，并且这些点都会经过<strong>片段着色器</strong>来着色。</p>\n</div>\n\n<p>顶点缓冲对象(<code>VBO</code>)是我们在<code>OpenGL</code>教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<code>glGenBuffers</code>函数和一个缓冲ID生成一个VBO对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// glGenBuffers 方法可以生成一个缓冲对象并返回一个缓冲对象id。</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VBO;</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数是要生成的缓冲对象的数量，第二个是要输入用来存储缓冲对象名称的数组</span></span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\"><span class=\"comment\">// GLuint vbo;</span></span><br><span class=\"line\"><span class=\"comment\">//glGenBuffers(1,&amp;vbo);</span></span><br><span class=\"line\"><span class=\"comment\">//GLuint vbo[3];</span></span><br><span class=\"line\"><span class=\"comment\">//glGenBuffers(3,vbo);</span></span><br></pre></td></tr></table></figure>\n<p>OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为我们要的是顶点缓冲对象，所以我们需要把生成的这个id绑定在顶点缓冲对象上：</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br></pre></td></tr></table></figure>\n<p>从这一刻起，我们使用的任何（在<code>GL_ARRAY_BUFFER</code>目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用<code>glBufferData</code>函数，它会把之前定义的顶点数据复制到缓冲的内存中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success no-icon\"><p><code>glBufferData</code>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的<strong>第一个参数</strong>是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。<strong>第二个参数</strong>指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。<strong>第三个参数</strong>是我们希望发送的实际数据。<br>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：</p>\n<ul>\n<li>GL_STATIC_DRAW ：数据不会或几乎不会改变。</li>\n<li>GL_DYNAMIC_DRAW：数据会被改变很多。</li>\n<li>GL_STREAM_DRAW ：数据每次绘制时都会改变。</li>\n</ul>\n<p>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。</p>\n<p>现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。</p>\n</div>\n\n<h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p><strong>顶点着色器</strong>(<code>Vertex Shader</code>)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个<strong>顶点</strong>和一个<strong>片段着色器</strong>。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。</p>\n<p>我们需要做的第一件事是用着色器语言GLSL(<strong>OpenGL Shading Language</strong>)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。</p>\n<p>下一步，使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(<code>Input Vertex Attribute</code>)。现在我们只关心位置(<code>Position</code>)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个float分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个vec3输入变量aPos。我们同样也通过layout (location &#x3D; 0)设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。</p>\n<div class=\"note info\">向量(Vector)\n\n<p>在图形编程中我们经常会使用向量这个数学概念，因为它简明地表达了任意空间中的位置和方向，并且它有非常有用的数学属性。在GLSL中一个向量有最多4个分量，每个分量值都代表空间中的一个坐标，它们可以通过vec.x、vec.y、vec.z和vec.w来获取。注意vec.w分量不是用作表达空间中的位置的（我们处理的是3D不是4D），而是用在所谓透视除法(Perspective Division)上。我们会在后面的教程中更详细地讨论向量。</div></p>\n<p>为了设置顶点着色器的输出，我们必须把位置数据赋值给<strong>预定义</strong>的<code>gl_Position</code>变量，它在幕后是vec4类型的。在main函数的最后，我们将gl_Position设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把vec3的数据作为vec4构造器的参数，同时把w分量设置为1.0f（我们会在后面解释为什么）来完成这一任务。</p>\n<p>当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。</p>\n<div class=\"note info no-icon\"><p>我们可以看到，我们当前的这个顶点着色器是直接把输入的坐标拿来直接使用返回了，这里是因为我们之前定义的向量范围就是在 -1 - 1 之间的。所以我们在这里并没有进行其他的处理。<br>一般正常情况下，我们需要把我们传入的坐标（<code>一般是世界坐标</code>），再加上一个相机矩阵（<code>Matrix</code>）相乘,得到我们GLSL需要的坐标（-1 - 1）</p>\n</div>\n\n<h2 id=\"编译着色器\"><a href=\"#编译着色器\" class=\"headerlink\" title=\"编译着色器\"></a>编译着色器</h2><p>现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>为了能够让OpenGL使用它，我们必须在运行时<code>动态编译</code>它的源代码。</p>\n<p>我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用<code>glCreateShader</code>创建这个着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法接受一个参数，表示当前shader的类型。我们现在要的是顶点着色器，所以传入GL_VERTEX_SHADER。后面还会有片段着色器</span></span><br><span class=\"line\">    GLenum vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br></pre></td></tr></table></figure>\n<p>下一步我们把这个着色器源码附加到着色器对象上，然后编译它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br></pre></td></tr></table></figure>\n<p><code>glShaderSource</code>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为NULL。</p>\n<p>然后，使用<code>glCompileShader</code>来动态编译shader源码。</p>\n<div class=\"note info no-icon\"><p>你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>  success;</span><br><span class=\"line\"><span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\"><span class=\"built_in\">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br></pre></td></tr></table></figure>\n<p>首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<p>如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。</p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>片段着色器(<code>Fragment Shader</code>)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。</p>\n<div class=\"note info no-icon\"><p>在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！</p>\n</div>\n<p>类似于<code>顶点着色器</code>，我们需要先写出来着色器源码，我们现在只想让它展示一种颜色，不需要变化：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">0.5</span>f, <span class=\"number\">0.2</span>f, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用out关键字，这里我们命名为FragColor。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的vec4赋值给颜色输出。</p>\n<p>编译片段着色器的过程与顶点着色器类似，只不过我们使用<code>GL_FRAGMENT_SHADER</code>常量作为着色器类型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的着色器程序(Shader Program)中。</p>\n<h2 id=\"着色器程序\"><a href=\"#着色器程序\" class=\"headerlink\" title=\"着色器程序\"></a>着色器程序</h2><p>着色器程序对象(<code>Shader Program Object</code>)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们链接(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。</p>\n<p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p>\n<p>创建一个程序对象很简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br></pre></td></tr></table></figure>\n<p><code>glCreateProgram</code>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<code>glLinkProgram</code>链接它们：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n<p>代码应该很清楚，我们把着色器附加到了程序上，然后用glLinkProgram链接。</p>\n<div class=\"note info\">就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用glGetShaderiv和glGetShaderInfoLog，现在我们使用：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glGetProgramiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n得到的结果就是一个程序对象，我们可以调用`glUseProgram`函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。</p>\n<p>对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n<p>现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。</p>\n<h2 id=\"链接顶点属性\"><a href=\"#链接顶点属性\" class=\"headerlink\" title=\"链接顶点属性\"></a>链接顶点属性</h2><p>顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。</p>\n<p>我们的顶点缓冲数据会被解析为下面这样子：<br><img src=\"/2024/03/03/open_gl2/2024-03-03T134604.png\" alt=\"2024-03-03T134604\"></p>\n<ul>\n<li>位置数据被储存为32位（4字节）浮点值。</li>\n<li>每个位置包含3个这样的值。</li>\n<li>在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列(Tightly Packed)。</li>\n<li>数据中第一个值在缓冲开始的位置。</li>\n</ul>\n<p>这就是我们上面定义的顶点集合的解析。我们现在需要把这个解析方法告诉给GPU。<br>有了这些信息我们就可以使用<code>glVertexAttribPointer</code>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><code>glVertexAttribPointer</code>函数的参数非常多，所以我会逐一介绍它们：</p>\n<ul>\n<li>第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用layout(location &#x3D; 0)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为0。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入0。</li>\n<li>第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。</li>\n<li>第三个参数指定数据的类型，这里是<code>GL_FLOAT</code>(GLSL中vec*都是由浮点数值组成的)。</li>\n<li>下个参数定义我们是否希望数据被标准化(<code>Normalize</code>)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。</li>\n<li>第五个参数叫做步长(<code>Stride</code>)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个float之后，我们把步长设置为3 * sizeof(float)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。</li>\n<li><em><em>最后一个参数的类型是void</em>，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数</em>*。</li>\n</ul>\n<div class=\"note info\">说人话的额讲，就是告诉GPU，我这个属性，你从参数第一个里面拿，拿出来以后，我给的这个数组，你三个三个的解析，解析成float，不要给我标准化，每解析完3个，就从开头数三个后再来解析，直到最后。这样，你会解析出来n个点，每个点都是我预设的数组里的三位连在一起的float</div>\n<div class=\"note danger\">每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。</div>\n\n<p>现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用glEnableVertexAttribArray，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0. 复制顶点数组到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 1. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 当我们渲染一个物体时要使用着色器程序</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 3. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？</p>\n<h2 id=\"顶点数组对象\"><a href=\"#顶点数组对象\" class=\"headerlink\" title=\"顶点数组对象\"></a>顶点数组对象</h2><p>顶点数组对象(<code>Vertex Array Object, VAO</code>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\n<div class=\"note info\">简单地说，VAO就是把VBO的一系列操作封装记录了下来。每次绘制物体时，不再需要繁琐的配置VBO，只需要绑定对应物体的VAO即可。VBO的繁琐操作放在了一次性绑定在VAO上面</div>\n\n<p>OpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。<br>一个顶点数组对象会储存以下这些内容：</p>\n<ul>\n<li><code>glEnableVertexAttribArray</code>和<code>glDisableVertexAttribArray</code>的调用。</li>\n<li>通过<code>glVertexAttribPointer</code>设置的顶点属性配置。</li>\n<li>通过<code>glVertexAttribPointer</code>调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n<p>创建一个VAO和创建一个VBO很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br></pre></td></tr></table></figure>\n\n<p>要想使用VAO，要做的只是使用<code>glBindVertexArray</code>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定VAO</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hello-三角形\"><a href=\"#hello-三角形\" class=\"headerlink\" title=\"hello 三角形\"></a>hello 三角形</h2><p>要想绘制我们想要的物体，OpenGL给我们提供了<code>glDrawArrays</code>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p><code>glDrawArrays</code>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。第二个参数指定了顶点数组的起始索引，我们这里填0。最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</p>\n<p>现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T141244.png\" alt=\"2024-03-03T141244\"></p>\n<p>完整代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    GLuint VBO;     <span class=\"comment\">// 定义VBO</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绑定某个物体到VAO上(这里时默认的 vertices 三角形)</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定某个物体到VAO上(这里时默认的 vertices 三角形) end</span></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">    GLenum vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否编译成功</span></span><br><span class=\"line\">    <span class=\"type\">int</span>  success;</span><br><span class=\"line\">    <span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 片段着色器</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;out vec4 FragColor;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f); \\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125; \\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">    fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(fragmentShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FRAGEMENT::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 片段着色器 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 着色器程序</span></span><br><span class=\"line\">    GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 链接</span></span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::program::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 着色器程序 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// delete 着色器，因为已经link到着色器程序里了，我们自己已经用不到这个了</span></span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// render</span></span><br><span class=\"line\">        <span class=\"comment\">// ------</span></span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//use 着色器程序</span></span><br><span class=\"line\">        <span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"built_in\">glfwSetWindowShouldClose</span>(window, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素缓冲对象\"><a href=\"#元素缓冲对象\" class=\"headerlink\" title=\"元素缓冲对象\"></a>元素缓冲对象</h2><p>在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(<code>Element Buffer Object</code>，EBO)，也叫索引缓冲对象(<code>Index Buffer Object</code>，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，有几个顶点叠加了。我们指定了<strong>右下角</strong>和<strong>左上角</strong>两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？</p>\n<p>值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的索引绘制(<code>Indexed Drawing</code>)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"comment\">// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样可以由下标代表顶点组合成矩形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> EBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure>\n<p>与VBO类似，我们先绑定EBO然后用glBufferData把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<code>GL_ELEMENT_ARRAY_BUFFER</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n<p>注意：我们传递了<code>GL_ELEMENT_ARRAY_BUFFER</code>当作缓冲目标。最后一件要做的事是用<code>glDrawElements</code>来替换<code>glDrawArrays</code>函数，表示我们要从索引缓冲区渲染三角形。使用<code>glDrawElements</code>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是GL_UNSIGNED_INT。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。</p>\n<p>glDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T141941.png\" alt=\"2024-03-03T141941\"></p>\n<div class=\"note warning\">当目标是GL_ELEMENT_ARRAY_BUFFER的时候，VAO会储存glBindBuffer的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。</div>\n最后的初始化和绘制代码现在看起来像这样：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码 :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定顶点数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 4. 设定顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用线框模式(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。<br><img src=\"/2024/03/03/open_gl2/2024-03-03T142231.png\" alt=\"2024-03-03T142231\"></p>\n<div class=\"note info no-icon\"><p>线框模式(Wireframe Mode)</p>\n<p>要想用线框模式绘制你的三角形，你可以通过glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)函数配置OpenGL如何绘制图元。第一个参数表示我们打算将其应用到所有的三角形的正面和背面，第二个参数告诉我们用线来绘制。之后的绘制调用会一直以线框模式绘制三角形，直到我们用glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)将其设置回默认模式。</p>\n</div>","length":10737,"excerpt":"<p><img src=\"/2024/03/03/open_gl2/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>","more":"<ul>\n<li><a href=\"#%E4%BB%8E%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%80%E5%A7%8B\">从三角形开始</a><ul>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E8%BE%93%E5%85%A5\">顶点输入</a></li>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E7%9D%80%E8%89%B2%E5%99%A8\">顶点着色器</a></li>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E7%9D%80%E8%89%B2%E5%99%A8\">编译着色器</a></li>\n<li><a href=\"#%E7%89%87%E6%AE%B5%E7%9D%80%E8%89%B2%E5%99%A8\">片段着色器</a></li>\n<li><a href=\"#%E7%9D%80%E8%89%B2%E5%99%A8%E7%A8%8B%E5%BA%8F\">着色器程序</a></li>\n<li><a href=\"#%E9%93%BE%E6%8E%A5%E9%A1%B6%E7%82%B9%E5%B1%9E%E6%80%A7\">链接顶点属性</a></li>\n<li><a href=\"#%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\">顶点数组对象</a></li>\n<li><a href=\"#hello-%E4%B8%89%E8%A7%92%E5%BD%A2\">hello 三角形</a></li>\n<li><a href=\"#%E5%85%83%E7%B4%A0%E7%BC%93%E5%86%B2%E5%AF%B9%E8%B1%A1\">元素缓冲对象</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"从三角形开始\"><a href=\"#从三角形开始\" class=\"headerlink\" title=\"从三角形开始\"></a>从三角形开始</h1><hr>\n<div class=\"note default no-icon\"><p>在学习此节之前，建议将这三个单词先记下来：</p>\n<p>顶点数组对象：<span style='color:blue'>Vertex Array Object，VAO</span><br>顶点缓冲对象：<span style='color:blue'>Vertex Buffer Object，VBO</span><br>元素缓冲对象：<span style='color:blue'>Element Buffer Object，EBO</span> 或 索引缓冲对象 Index Buffer Object，IBO<br>当指代这三个东西的时候，可能使用的是全称，也可能用的是英文缩写，翻译的时候和原文保持的一致。由于没有英文那样的分词间隔，中文全称的部分可能不太容易注意。但请记住，缩写和中文全称指代的是一个东西。</p>\n</div>\n\n<p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。图形渲染管线可以被划分为两个主要部分：第一部分把你的3D坐标转换为2D坐标，第二部分是把2D坐标转变为实际的有颜色的像素。这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。</p>\n<div class=\"note info no-icon\"><p>2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕&#x2F;窗口分辨率的限制。</p>\n</div>\n\n<p>图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。图形渲染管线可以被划分为几个阶段，每个阶段将会把前一个阶段的输出作为输入。所有这些阶段都是高度专门化的（它们都有一个特定的函数），并且很容易并行执行。正是由于它们具有并行执行的特性，当今大多数显卡都有成千上万的小处理核心，它们在GPU上为每一个（渲染管线）阶段运行各自的小程序，从而在图形渲染管线中快速处理你的数据。这些小程序叫做着色器(Shader)。</p>\n<p>有些着色器可以由开发者配置，因为允许用自己写的着色器来代替默认的，所以能够更细致地控制图形渲染管线中的特定部分了。因为它们运行在GPU上，所以节省了宝贵的CPU时间。OpenGL着色器是用OpenGL着色器语言(OpenGL Shading Language, GLSL)写成的，在下一节中我们再花更多时间研究它。</p>\n<p>下面，你会看到一个图形渲染管线的每个阶段的抽象展示。要注意蓝色部分代表的是我们可以注入自定义的着色器的部分。</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T100007.png\" alt=\"2024-03-03T100007\"></p>\n<p>如你所见，图形渲染管线包含很多部分，每个部分都将在转换顶点数据到最终像素这一过程中处理各自特定的阶段。我们会概括性地解释一下渲染管线的每个部分，让你对图形渲染管线的工作方式有个大概了解。</p>\n<p><strong>首先，我们以数组的形式传递3个3D坐标作为图形渲染管线的输入，用来表示一个三角形，这个数组叫做顶点数据(Vertex Data)；顶点数据是一系列顶点的集合。一个顶点(Vertex)是一个3D坐标的数据的集合。而顶点数据是用顶点属性(Vertex Attribute)表示的，它可以包含任何我们想用的数据，但是简单起见，我们还是假定每个顶点只由一个3D位置(译注1)和一些颜色值组成的吧。</strong></p>\n<div class=\"note default\">当我们谈论一个“位置”的时候，它代表在一个“空间”中所处地点的这个特殊属性；同时“空间”代表着任何一种坐标系，比如x、y、z三维坐标系，x、y二维坐标系，或者一条直线上的x和y的线性关系，只不过二维坐标系是一个扁扁的平面空间，而一条直线是一个很瘦的长长的空间。</div>\n\n<div class=\"note info no-icon\"><p>为了让OpenGL知道我们的坐标和颜色值构成的到底是什么，OpenGL需要你去指定这些数据所表示的渲染类型。我们是希望把这些数据渲染成一系列的点？一系列的三角形？还是仅仅是一个长长的线？做出的这些提示叫做<code>图元</code>(<code>Primitive</code>)，任何一个绘制指令的调用都将把图元传递给OpenGL。这是其中的几个：<code>GL_POINTS</code>、<code>GL_TRIANGLES</code>、<code>GL_LINE_STRIP</code>。</p>\n</div>\n\n<p>图形渲染管线的第一个部分是<strong>顶点着色器</strong>(<code>Vertex Shader</code>)，它把一个单独的顶点作为输入。顶点着色器主要的目的是把3D坐标转为另一种3D坐标（后面会解释），同时顶点着色器允许我们对顶点属性进行一些基本处理。</p>\n<p>图元装配(<code>Primitive Assembly</code>)阶段将顶点着色器输出的所有顶点作为输入（如果是<code>GL_POINTS</code>，那么就是一个顶点），并所有的点装配成指定图元的形状；本节例子中是一个三角形。</p>\n<p>图元装配阶段的输出会传递给几何着色器(<code>Geometry Shader</code>)。几何着色器把图元形式的一系列顶点的集合作为输入，它可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状。例子中，它生成了另一个三角形。</p>\n<p>几何着色器的输出会被传入光栅化阶段(<code>Rasterization Stage</code>)，这里它会把图元映射为最终屏幕上相应的像素，生成供<strong>片段着色器</strong>(<code>Fragment Shader</code>)使用的片段(<code>Fragment</code>)。在片段着色器运行之前会执行裁切(Clipping)。裁切会丢弃超出你的视图以外的所有像素，用来提升执行效率。</p>\n<div class=\"note info\">OpenGL中的一个片段是OpenGL渲染一个像素所需的所有数据。</div>\n\n<p><strong>片段着色器</strong>的主要目的是计算一个像素的最终颜色，这也是所有OpenGL高级效果产生的地方。通常，片段着色器包含3D场景的数据（比如光照、阴影、光的颜色等等），这些数据可以被用来计算最终像素的颜色。</p>\n<p>在所有对应颜色值确定以后，最终的对象将会被传到最后一个阶段，我们叫做Alpha测试和混合(Blending)阶段。这个阶段检测片段的对应的深度（和模板(Stencil)）值（后面会讲），用它们来判断这个像素是其它物体的前面还是后面，决定是否应该丢弃。这个阶段也会检查alpha值（alpha值定义了一个物体的透明度）并对物体进行混合(Blend)。所以，即使在片段着色器中计算出来了一个像素输出的颜色，在渲染多个三角形的时候最后的像素颜色也可能完全不同。</p>\n<p>可以看到，图形渲染管线非常复杂，它包含很多可配置的部分。然而，对于大多数场合，我们只需要配置顶点和片段着色器就行了。几何着色器是可选的，通常使用它默认的着色器就行了。</p>\n<p>在现代OpenGL中，我们必须定义至少一个顶点着色器和一个片段着色器（因为GPU中没有默认的顶点&#x2F;片段着色器）。出于这个原因，刚开始学习现代OpenGL的时候可能会非常困难，因为在你能够渲染自己的第一个三角形之前已经需要了解一大堆知识了。在本节结束你最终渲染出你的三角形的时候，你也会了解到非常多的图形编程知识。</p>\n<p><span style='color:red'><strong>顶点着色器</strong>和<strong>片段着色器</strong>是非常重要的，他们是使用GL语言编写的，在程序运行时被编译的一种代码，这种代码需要执行在GPU中，也就是我们常说的显卡。</span></p>\n<h2 id=\"顶点输入\"><a href=\"#顶点输入\" class=\"headerlink\" title=\"顶点输入\"></a>顶点输入</h2><hr>\n<p>开始绘制图形之前，我们需要先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以在OpenGL中我们指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把所有的3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上-1.0到1.0的范围内时才处理它。所有在这个范围内的坐标叫做<strong>标准化设备坐标</strong>(<code>Normalized Device Coordinates</code>)，此范围内的坐标最终显示在屏幕上（在这个范围以外的坐标则不会显示）。</p>\n<p>由于我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个float数组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>由于OpenGL是在3D空间中工作的，而我们渲染的是一个2D三角形，我们将它顶点的z坐标设置为0.0。这样子的话三角形每一点的深度(Depth，译注2)都是一样的，从而使它看上去像是2D的。</p>\n<div class=\"note info\">通常深度可以理解为z坐标，它代表一个像素在空间中和你的距离，如果离你远就可能被别的像素遮挡，你就看不到它了，它会被丢弃，以节省资源。</div>\n\n<p>一旦你的顶点坐标已经在顶点着色器中处理过，它们就应该是标准化设备坐标了，标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃&#x2F;裁剪，不会显示在你的屏幕上。下面你会看到我们定义的在标准化设备坐标中的三角形(忽略z轴)：<br><img src=\"/2024/03/03/open_gl2/2024-03-03T101619.png\" alt=\"2024-03-03T101619\"></p>\n<p><strong>与通常的屏幕坐标不同，y轴正方向为向上，(0, 0)坐标是这个图像的中心，而不是左上角。最终你希望所有(变换过的)坐标都在这个坐标空间中，否则它们就不可见了。</strong></p>\n<p>通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，<strong>标准化设备坐标</strong>(Normalized Device Coordinates)会变换为<strong>屏幕空间坐标</strong>(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中。 定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p>\n<p>我们通过顶点缓冲对象(<code>Vertex Buffer Objects, VBO</code>)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p>\n<div class=\"note success no-icon\"><p>个人理解：<strong>顶点着色器</strong>类似于把我们传入的，图像世界中的坐标，转换成我们的<strong>标准化设备坐标</strong>。<br>比如我们上面的三个点，分别都会被转化成[-1 - 1]之间的值，意思就是将顶点定位，并且把这个定位值传递给下一个着色器。<br>之后到了我们的<strong>片段着色器</strong>，我们只需要返回颜色即可。这个颜色应该渲染在屏幕上哪个像素块呢？这个就是前面<strong>顶点着色器</strong>计算出来的位置。<br><strong>顶点着色器</strong>不仅仅只会计算出传入的三个点所在的位置，甚至按照<code>图元</code>，来计算这些点之间的点的坐标。<br>就像上面我们定义的三个点，我们如果选择的图元是<code>GL_TRIANGLES</code>，那么这个三个点围成的三角形，顶点着色器会给里面所有的点一个 <strong>标准化设备坐标</strong>，并且这些点都会经过<strong>片段着色器</strong>来着色。</p>\n</div>\n\n<p>顶点缓冲对象(<code>VBO</code>)是我们在<code>OpenGL</code>教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用<code>glGenBuffers</code>函数和一个缓冲ID生成一个VBO对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// glGenBuffers 方法可以生成一个缓冲对象并返回一个缓冲对象id。</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VBO;</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数是要生成的缓冲对象的数量，第二个是要输入用来存储缓冲对象名称的数组</span></span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\"><span class=\"comment\">// GLuint vbo;</span></span><br><span class=\"line\"><span class=\"comment\">//glGenBuffers(1,&amp;vbo);</span></span><br><span class=\"line\"><span class=\"comment\">//GLuint vbo[3];</span></span><br><span class=\"line\"><span class=\"comment\">//glGenBuffers(3,vbo);</span></span><br></pre></td></tr></table></figure>\n<p>OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标上：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为我们要的是顶点缓冲对象，所以我们需要把生成的这个id绑定在顶点缓冲对象上：</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); </span><br></pre></td></tr></table></figure>\n<p>从这一刻起，我们使用的任何（在<code>GL_ARRAY_BUFFER</code>目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)。然后我们可以调用<code>glBufferData</code>函数，它会把之前定义的顶点数据复制到缓冲的内存中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success no-icon\"><p><code>glBufferData</code>是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的<strong>第一个参数</strong>是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。<strong>第二个参数</strong>指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。<strong>第三个参数</strong>是我们希望发送的实际数据。<br>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：</p>\n<ul>\n<li>GL_STATIC_DRAW ：数据不会或几乎不会改变。</li>\n<li>GL_DYNAMIC_DRAW：数据会被改变很多。</li>\n<li>GL_STREAM_DRAW ：数据每次绘制时都会改变。</li>\n</ul>\n<p>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。</p>\n<p>现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。下面我们会创建一个顶点着色器和片段着色器来真正处理这些数据。现在我们开始着手创建它们吧。</p>\n</div>\n\n<h2 id=\"顶点着色器\"><a href=\"#顶点着色器\" class=\"headerlink\" title=\"顶点着色器\"></a>顶点着色器</h2><p><strong>顶点着色器</strong>(<code>Vertex Shader</code>)是几个可编程着色器中的一个。如果我们打算做渲染的话，现代OpenGL需要我们至少设置一个<strong>顶点</strong>和一个<strong>片段着色器</strong>。我们会简要介绍一下着色器以及配置两个非常简单的着色器来绘制我们第一个三角形。下一节中我们会更详细的讨论着色器。</p>\n<p>我们需要做的第一件事是用着色器语言GLSL(<strong>OpenGL Shading Language</strong>)编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它了。下面你会看到一个非常基础的GLSL顶点着色器的源代码：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos.x, aPos.y, aPos.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，GLSL看起来很像C语言。每个着色器都起始于一个版本声明。OpenGL 3.3以及和更高版本中，GLSL版本号和OpenGL的版本是匹配的（比如说GLSL 420版本对应于OpenGL 4.2）。我们同样明确表示我们会使用核心模式。</p>\n<p>下一步，使用<code>in</code>关键字，在顶点着色器中声明所有的输入顶点属性(<code>Input Vertex Attribute</code>)。现在我们只关心位置(<code>Position</code>)数据，所以我们只需要一个顶点属性。GLSL有一个向量数据类型，它包含1到4个float分量，包含的数量可以从它的后缀数字看出来。由于每个顶点都有一个3D坐标，我们就创建一个vec3输入变量aPos。我们同样也通过layout (location &#x3D; 0)设定了输入变量的位置值(Location)你后面会看到为什么我们会需要这个位置值。</p>\n<div class=\"note info\">向量(Vector)\n\n<p>在图形编程中我们经常会使用向量这个数学概念，因为它简明地表达了任意空间中的位置和方向，并且它有非常有用的数学属性。在GLSL中一个向量有最多4个分量，每个分量值都代表空间中的一个坐标，它们可以通过vec.x、vec.y、vec.z和vec.w来获取。注意vec.w分量不是用作表达空间中的位置的（我们处理的是3D不是4D），而是用在所谓透视除法(Perspective Division)上。我们会在后面的教程中更详细地讨论向量。</div></p>\n<p>为了设置顶点着色器的输出，我们必须把位置数据赋值给<strong>预定义</strong>的<code>gl_Position</code>变量，它在幕后是vec4类型的。在main函数的最后，我们将gl_Position设置的值会成为该顶点着色器的输出。由于我们的输入是一个3分量的向量，我们必须把它转换为4分量的。我们可以把vec3的数据作为vec4构造器的参数，同时把w分量设置为1.0f（我们会在后面解释为什么）来完成这一任务。</p>\n<p>当前这个顶点着色器可能是我们能想到的最简单的顶点着色器了，因为我们对输入数据什么都没有处理就把它传到着色器的输出了。在真实的程序里输入数据通常都不是标准化设备坐标，所以我们首先必须先把它们转换至OpenGL的可视区域内。</p>\n<div class=\"note info no-icon\"><p>我们可以看到，我们当前的这个顶点着色器是直接把输入的坐标拿来直接使用返回了，这里是因为我们之前定义的向量范围就是在 -1 - 1 之间的。所以我们在这里并没有进行其他的处理。<br>一般正常情况下，我们需要把我们传入的坐标（<code>一般是世界坐标</code>），再加上一个相机矩阵（<code>Matrix</code>）相乘,得到我们GLSL需要的坐标（-1 - 1）</p>\n</div>\n\n<h2 id=\"编译着色器\"><a href=\"#编译着色器\" class=\"headerlink\" title=\"编译着色器\"></a>编译着色器</h2><p>现在，我们暂时将顶点着色器的源代码硬编码在代码文件顶部的C风格字符串中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>为了能够让OpenGL使用它，我们必须在运行时<code>动态编译</code>它的源代码。</p>\n<p>我们首先要做的是创建一个着色器对象，注意还是用ID来引用的。所以我们储存这个顶点着色器为<code>unsigned int</code>，然后用<code>glCreateShader</code>创建这个着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法接受一个参数，表示当前shader的类型。我们现在要的是顶点着色器，所以传入GL_VERTEX_SHADER。后面还会有片段着色器</span></span><br><span class=\"line\">    GLenum vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br></pre></td></tr></table></figure>\n<p>下一步我们把这个着色器源码附加到着色器对象上，然后编译它：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br></pre></td></tr></table></figure>\n<p><code>glShaderSource</code>函数把要编译的着色器对象作为第一个参数。第二参数指定了传递的源码字符串数量，这里只有一个。第三个参数是顶点着色器真正的源码，第四个参数我们先设置为NULL。</p>\n<p>然后，使用<code>glCompileShader</code>来动态编译shader源码。</p>\n<div class=\"note info no-icon\"><p>你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>  success;</span><br><span class=\"line\"><span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\"><span class=\"built_in\">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br></pre></td></tr></table></figure>\n<p>首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n<p>如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。</p>\n<h2 id=\"片段着色器\"><a href=\"#片段着色器\" class=\"headerlink\" title=\"片段着色器\"></a>片段着色器</h2><p>片段着色器(<code>Fragment Shader</code>)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器所做的是计算像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。</p>\n<div class=\"note info no-icon\"><p>在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！</p>\n</div>\n<p>类似于<code>顶点着色器</code>，我们需要先写出来着色器源码，我们现在只想让它展示一种颜色，不需要变化：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">0.5</span>f, <span class=\"number\">0.2</span>f, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>片段着色器只需要一个输出变量，这个变量是一个4分量向量，它表示的是最终的输出颜色，我们应该自己将其计算出来。声明输出变量可以使用out关键字，这里我们命名为FragColor。下面，我们将一个Alpha值为1.0(1.0代表完全不透明)的橘黄色的vec4赋值给颜色输出。</p>\n<p>编译片段着色器的过程与顶点着色器类似，只不过我们使用<code>GL_FRAGMENT_SHADER</code>常量作为着色器类型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n\n<p>两个着色器现在都编译了，剩下的事情是把两个着色器对象链接到一个用来渲染的着色器程序(Shader Program)中。</p>\n<h2 id=\"着色器程序\"><a href=\"#着色器程序\" class=\"headerlink\" title=\"着色器程序\"></a>着色器程序</h2><p>着色器程序对象(<code>Shader Program Object</code>)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们链接(Link)为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。</p>\n<p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p>\n<p>创建一个程序对象很简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br></pre></td></tr></table></figure>\n<p><code>glCreateProgram</code>函数创建一个程序，并返回新创建程序对象的ID引用。现在我们需要把之前编译的着色器附加到程序对象上，然后用<code>glLinkProgram</code>链接它们：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n<p>代码应该很清楚，我们把着色器附加到了程序上，然后用glLinkProgram链接。</p>\n<div class=\"note info\">就像着色器的编译一样，我们也可以检测链接着色器程序是否失败，并获取相应的日志。与上面不同，我们不会调用glGetShaderiv和glGetShaderInfoLog，现在我们使用：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glGetProgramiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n得到的结果就是一个程序对象，我们可以调用`glUseProgram`函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br></pre></td></tr></table></figure>\n\n<p>在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。</p>\n<p>对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br></pre></td></tr></table></figure>\n<p>现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。</p>\n<h2 id=\"链接顶点属性\"><a href=\"#链接顶点属性\" class=\"headerlink\" title=\"链接顶点属性\"></a>链接顶点属性</h2><p>顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据。</p>\n<p>我们的顶点缓冲数据会被解析为下面这样子：<br><img src=\"/2024/03/03/open_gl2/2024-03-03T134604.png\" alt=\"2024-03-03T134604\"></p>\n<ul>\n<li>位置数据被储存为32位（4字节）浮点值。</li>\n<li>每个位置包含3个这样的值。</li>\n<li>在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列(Tightly Packed)。</li>\n<li>数据中第一个值在缓冲开始的位置。</li>\n</ul>\n<p>这就是我们上面定义的顶点集合的解析。我们现在需要把这个解析方法告诉给GPU。<br>有了这些信息我们就可以使用<code>glVertexAttribPointer</code>函数告诉OpenGL该如何解析顶点数据（应用到逐个顶点属性上）了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><code>glVertexAttribPointer</code>函数的参数非常多，所以我会逐一介绍它们：</p>\n<ul>\n<li>第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用layout(location &#x3D; 0)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为0。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入0。</li>\n<li>第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。</li>\n<li>第三个参数指定数据的类型，这里是<code>GL_FLOAT</code>(GLSL中vec*都是由浮点数值组成的)。</li>\n<li>下个参数定义我们是否希望数据被标准化(<code>Normalize</code>)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。</li>\n<li>第五个参数叫做步长(<code>Stride</code>)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个float之后，我们把步长设置为3 * sizeof(float)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子（译注: 这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节）。</li>\n<li><em><em>最后一个参数的类型是void</em>，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。我们会在后面详细解释这个参数</em>*。</li>\n</ul>\n<div class=\"note info\">说人话的额讲，就是告诉GPU，我这个属性，你从参数第一个里面拿，拿出来以后，我给的这个数组，你三个三个的解析，解析成float，不要给我标准化，每解析完3个，就从开头数三个后再来解析，直到最后。这样，你会解析出来n个点，每个点都是我预设的数组里的三位连在一起的float</div>\n<div class=\"note danger\">每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。</div>\n\n<p>现在我们已经定义了OpenGL该如何解释顶点数据，我们现在应该使用glEnableVertexAttribArray，以顶点属性位置值作为参数，启用顶点属性；顶点属性默认是禁用的。自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0. 复制顶点数组到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 1. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. 当我们渲染一个物体时要使用着色器程序</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"comment\">// 3. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<p>每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？</p>\n<h2 id=\"顶点数组对象\"><a href=\"#顶点数组对象\" class=\"headerlink\" title=\"顶点数组对象\"></a>顶点数组对象</h2><p>顶点数组对象(<code>Vertex Array Object, VAO</code>)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\n<div class=\"note info\">简单地说，VAO就是把VBO的一系列操作封装记录了下来。每次绘制物体时，不再需要繁琐的配置VBO，只需要绑定对应物体的VAO即可。VBO的繁琐操作放在了一次性绑定在VAO上面</div>\n\n<p>OpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。<br>一个顶点数组对象会储存以下这些内容：</p>\n<ul>\n<li><code>glEnableVertexAttribArray</code>和<code>glDisableVertexAttribArray</code>的调用。</li>\n<li>通过<code>glVertexAttribPointer</code>设置的顶点属性配置。</li>\n<li>通过<code>glVertexAttribPointer</code>调用与顶点属性关联的顶点缓冲对象。</li>\n</ul>\n<p>创建一个VAO和创建一个VBO很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br></pre></td></tr></table></figure>\n\n<p>要想使用VAO，要做的只是使用<code>glBindVertexArray</code>绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定VAO</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 设置顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 绘制物体</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">someOpenGLFunctionThatDrawsOurTriangle</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hello-三角形\"><a href=\"#hello-三角形\" class=\"headerlink\" title=\"hello 三角形\"></a>hello 三角形</h2><p>要想绘制我们想要的物体，OpenGL给我们提供了<code>glDrawArrays</code>函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p><code>glDrawArrays</code>函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。第二个参数指定了顶点数组的起始索引，我们这里填0。最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</p>\n<p>现在尝试编译代码，如果弹出了任何错误，回头检查你的代码。如果你编译通过了，你应该看到下面的结果：</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T141244.png\" alt=\"2024-03-03T141244\"></p>\n<p>完整代码如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> VAO;</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    GLuint VBO;     <span class=\"comment\">// 定义VBO</span></span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绑定某个物体到VAO上(这里时默认的 vertices 三角形)</span></span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定某个物体到VAO上(这里时默认的 vertices 三角形) end</span></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vertexShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;layout (location = 0) in vec3 aPos;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&#125;\\0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">    GLenum vertexShader = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(vertexShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否编译成功</span></span><br><span class=\"line\">    <span class=\"type\">int</span>  success;</span><br><span class=\"line\">    <span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 顶点着色器 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 片段着色器</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentShaderSource = <span class=\"string\">&quot;#version 330 core\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;out vec4 FragColor;\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;void main()\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#123;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f); \\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&#125; \\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fragmentShader;</span><br><span class=\"line\">    fragmentShader = <span class=\"built_in\">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">    <span class=\"built_in\">glShaderSource</span>(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glCompileShader</span>(fragmentShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderiv</span>(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetShaderInfoLog</span>(fragmentShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FRAGEMENT::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 片段着色器 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 着色器程序</span></span><br><span class=\"line\">    GLuint shaderProgram = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 链接</span></span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class=\"line\">    <span class=\"built_in\">glLinkProgram</span>(shaderProgram);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramiv</span>(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">glGetProgramInfoLog</span>(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::program::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 着色器程序 end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// delete 着色器，因为已经link到着色器程序里了，我们自己已经用不到这个了</span></span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(vertexShader);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteShader</span>(fragmentShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// render</span></span><br><span class=\"line\">        <span class=\"comment\">// ------</span></span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//use 着色器程序</span></span><br><span class=\"line\">        <span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class=\"line\">        <span class=\"built_in\">glfwSetWindowShouldClose</span>(window, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素缓冲对象\"><a href=\"#元素缓冲对象\" class=\"headerlink\" title=\"元素缓冲对象\"></a>元素缓冲对象</h2><p>在渲染顶点这一话题上我们还有最后一个需要讨论的东西——元素缓冲对象(<code>Element Buffer Object</code>，EBO)，也叫索引缓冲对象(<code>Index Buffer Object</code>，IBO)。要解释元素缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，有几个顶点叠加了。我们指定了<strong>右下角</strong>和<strong>左上角</strong>两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？</p>\n<p>值得庆幸的是，元素缓冲区对象的工作方式正是如此。 EBO是一个缓冲区，就像一个顶点缓冲区对象一样，它存储 OpenGL 用来决定要绘制哪些顶点的索引。这种所谓的索引绘制(<code>Indexed Drawing</code>)正是我们问题的解决方案。首先，我们先要定义（不重复的）顶点，和绘制出矩形所需的索引：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> indices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"comment\">// 此例的索引(0,1,2,3)就是顶点数组vertices的下标，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样可以由下标代表顶点组合成矩形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>你可以看到，当使用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建元素缓冲对象：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> EBO;</span><br><span class=\"line\"><span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br></pre></td></tr></table></figure>\n<p>与VBO类似，我们先绑定EBO然后用glBufferData把索引复制到缓冲里。同样，和VBO类似，我们会把这些函数调用放在绑定和解绑函数调用之间，只不过这次我们把缓冲的类型定义为<code>GL_ELEMENT_ARRAY_BUFFER</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure>\n<p>注意：我们传递了<code>GL_ELEMENT_ARRAY_BUFFER</code>当作缓冲目标。最后一件要做的事是用<code>glDrawElements</code>来替换<code>glDrawArrays</code>函数，表示我们要从索引缓冲区渲染三角形。使用<code>glDrawElements</code>时，我们会使用当前绑定的索引缓冲对象中的索引进行绘制：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。第三个参数是索引的类型，这里是GL_UNSIGNED_INT。最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。</p>\n<p>glDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取其索引。这意味着我们每次想要使用索引渲染对象时都必须绑定相应的EBO，这又有点麻烦。碰巧顶点数组对象也跟踪元素缓冲区对象绑定。在绑定VAO时，绑定的最后一个元素缓冲区对象存储为VAO的元素缓冲区对象。然后，绑定到VAO也会自动绑定该EBO。</p>\n<p><img src=\"/2024/03/03/open_gl2/2024-03-03T141941.png\" alt=\"2024-03-03T141941\"></p>\n<div class=\"note warning\">当目标是GL_ELEMENT_ARRAY_BUFFER的时候，VAO会储存glBindBuffer的函数调用。这也意味着它也会储存解绑调用，所以确保你没有在解绑VAO之前解绑索引数组缓冲，否则它就没有这个EBO配置了。</div>\n最后的初始化和绘制代码现在看起来像这样：\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码 :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定顶点数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"comment\">// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\"><span class=\"built_in\">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\"><span class=\"comment\">// 4. 设定顶点属性指针</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（渲染循环中） :: ..</span></span><br><span class=\"line\"><span class=\"built_in\">glUseProgram</span>(shaderProgram);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawElements</span>(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行程序会获得下面这样的图片的结果。左侧图片看应该起来很熟悉，而右侧的则是使用线框模式(Wireframe Mode)绘制的。线框矩形可以显示出矩形的确是由两个三角形组成的。<br><img src=\"/2024/03/03/open_gl2/2024-03-03T142231.png\" alt=\"2024-03-03T142231\"></p>\n<div class=\"note info no-icon\"><p>线框模式(Wireframe Mode)</p>\n<p>要想用线框模式绘制你的三角形，你可以通过glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)函数配置OpenGL如何绘制图元。第一个参数表示我们打算将其应用到所有的三角形的正面和背面，第二个参数告诉我们用线来绘制。之后的绘制调用会一直以线框模式绘制三角形，直到我们用glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)将其设置回默认模式。</p>\n</div>"},{"title":"OpenGL Shader","date":"2024-03-02T23:18:49.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [Shader](#shader)\n  - [GLSL](#glsl)\n  - [数据类型](#数据类型)\n    - [向量](#向量)\n  - [输入与输出](#输入与输出)\n  - [Uniform](#uniform)\n  - [更多属性！](#更多属性)\n  - [我们自己的着色器类](#我们自己的着色器类)\n    - [从文件读取](#从文件读取)\n\n\n着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。\n\n前面的教程里我们简要地触及了一点着色器的皮毛，并了解了如何恰当地使用它们。现在我们会用一种更加广泛的形式详细解释着色器，特别是OpenGL着色器语言(GLSL)。\n\n# Shader\n着色器是使用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。\n\n## GLSL\n着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。\n\n一个典型的着色器有下面的结构：\n```GLSL\n#version version_number\nin type in_variable_name;\nin type in_variable_name;\n\nout type out_variable_name;\n\nuniform type uniform_name;\n\nint main()\n{\n  // 处理输入并进行一些图形操作\n  ...\n  // 输出处理过的结果到输出变量\n  out_variable_name = weird_stuff_we_processed;\n}\n```\n\n当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex Attribute)。我们能声明的顶点属性是有上限的，它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：\n```c++\nint nrAttributes;\nglGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);\nstd::cout << \"Maximum nr of vertex attributes supported: \" << nrAttributes << std::endl;\n```\n\n通常情况下它至少会返回16个，大部分情况下是够用了。\n## 数据类型\n和其他编程语言一样，GLSL有数据类型可以来指定变量的种类。GLSL中包含C等其它语言大部分的默认基础数据类型：`int`、`float`、`double`、`uint`和`bool`。GLSL也有两种容器类型，它们会在这个教程中使用很多，分别是向量(Vector)和矩阵(Matrix)，其中矩阵我们会在之后的教程里再讨论。\n\n### 向量\nGLSL中的向量是一个可以包含有2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。它们可以是下面的形式（n代表分量的数量）：\n![2024-03-03T152501](2024-03-03T152501.png)\n\n大多数时候我们使用`vecn`，因为`float`足够满足大多数要求了。\n\n一个向量的分量可以通过`vec.x`这种方式获取，这里x是指这个向量的第一个分量。你可以分别使用`.x、.y、.z`和.w来获取它们的第1、2、3、4个分量。GLSL也允许你对颜色使用`rgba`，或是对纹理坐标使用`stpq`访问相同的分量。\n\n向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(**Swizzling**)。重组允许这样的语法：\n\n```GLSL\nvec2 someVec;\nvec4 differentVec = someVec.xyxx;\nvec3 anotherVec = differentVec.zyw;\nvec4 otherVec = someVec.xxxx + anotherVec.yxzy;\n```\n\n你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：\n```GLSL\nvec2 vect = vec2(0.5, 0.7);\nvec4 result = vec4(vect, 0.0, 0.0);\nvec4 otherResult = vec4(result.xyz, 1.0);\n```\n向量是一种灵活的数据类型，我们可以把它用在各种输入和输出上。学完教程你会看到很多新颖的管理向量的例子。\n\n## 输入与输出\n虽然着色器是各自独立的小程序，但是它们都是一个整体的一部分，出于这样的原因，我们希望每个着色器都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。\n\n顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量，这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，`layout (location = 0)`。顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。\n\n<div class=\"note info\">你也可以忽略layout (location = 0)标识符，通过在OpenGL代码中使用glGetAttribLocation查询属性位置值(Location)，但是我更喜欢在着色器中设置它们，这样会更容易理解而且节省你（和OpenGL）的工作量。</div>\n\n另一个例外是片段着色器，它需要一个vec4颜色输出变量，因为片段着色器需要生成一个最终输出的颜色。如果你在片段着色器没有定义输出颜色，OpenGL会把你的物体渲染为黑色（或白色）。\n\n所以，如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。为了展示这是如何工作的，我们会稍微改动一下之前教程里的那个着色器，让顶点着色器为片段着色器决定颜色。\n**顶点着色器**\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0\n\nout vec4 vertexColor; // 为片段着色器指定一个颜色输出\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数\n    vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // 把输出变量设置为暗红色\n}\n```\n**片段着色器**\n```GLSL\n#version 330 core\nout vec4 FragColor;\n\nin vec4 vertexColor; // 从顶点着色器传来的输入变量（名称相同、类型相同）\n\nvoid main()\n{\n    FragColor = vertexColor;\n}\n```\n\n你可以看到我们在顶点着色器中声明了一个vertexColor变量作为vec4输出，并在片段着色器中声明了一个类似的vertexColor。由于它们名字相同且类型相同，片段着色器中的vertexColor就和顶点着色器中的vertexColor链接了。由于我们在顶点着色器中将颜色设置为深红色，最终的片段也是深红色的。下面的图片展示了输出结果：\n![2024-03-03T153532](2024-03-03T153532.png)\n\n完成了！我们成功地从顶点着色器向片段着色器发送数据。让我们更上一层楼，看看能否从应用程序中直接给片段着色器发送一个颜色！\n\n## Uniform\n> Uniform 可以视作我们的应用传送给GPU的参数。这个参数在一次渲染中不可更改，在所有shader中都通用。\n\n\nUniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)。全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。\n\n我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。从此处开始我们就可以在着色器中使用新声明的uniform了。我们来看看这次是否能通过uniform设置三角形的颜色：\n```GLSL\n#version 330 core\nout vec4 FragColor;\n\nuniform vec4 ourColor; // 在OpenGL程序代码中设定这个变量\n\nvoid main()\n{\n    FragColor = ourColor;\n}\n```\n我们在片段着色器中声明了一个uniform vec4的ourColor，并把片段着色器的输出颜色设置为uniform值的内容。因为uniform是全局变量，我们可以在任何着色器中定义它们，而无需通过顶点着色器作为中介。顶点着色器中不需要这个uniform，所以我们不用在那里定义它。\n\n{% note danger no-icon %}\n如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量，导致最后编译出的版本中并不会包含它，这可能导致几个非常麻烦的错误，记住这点！\n{% endnote %}\n这个uniform现在还是空的；我们还没有给它添加任何数据，所以下面我们就做这件事。我们首先需要找到着色器中uniform属性的索引/位置值。当我们得到uniform的索引/位置值后，我们就可以更新它的值了。这次我们不去给像素传递单独一个颜色，而是让它随着时间改变颜色：\n```GLSL\n//渲染的循环内\nfloat timeValue = glfwGetTime();\nfloat greenValue = (sin(timeValue) / 2.0f) + 0.5f;\nint vertexColorLocation = glGetUniformLocation(shaderProgram, \"ourColor\");\nglUseProgram(shaderProgram);\nglUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);\n```\n首先我们通过`glfwGetTime()`获取运行的秒数。然后我们使用sin函数让颜色在0.0到1.0之间改变，最后将结果储存到`greenValue`里。\n\n接着，我们用`glGetUniformLocation`查询`uniform ourColor`的位置值。我们为查询函数提供着色器程序和uniform的名字（这是我们希望获得的位置值的来源）。如果`glGetUniformLocation`返回-1就代表没有找到这个位置值。最后，我们可以通过`glUniform4f`函数设置uniform值。注意，**查询uniform地址不要求你之前使用过着色器程序，但是更新一个uniform之前你必须先使用程序（调用glUseProgram)**，因为它是在当前激活的着色器程序中设置uniform的。\n\n![2024-03-03T154900](2024-03-03T154900.png)\n\n## 更多属性！\n在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：\n```c++\nfloat vertices[] = {\n    // 位置              // 颜色\n     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // 顶部\n};\n```\n由于现在有更多的数据要发送到顶点着色器，我们有必要去调整一下顶点着色器，使它能够接收颜色值作为一个顶点属性输入。需要注意的是我们用layout标识符来把aColor属性的位置值设置为1：\n\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 \nlayout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1\n\nout vec3 ourColor; // 向片段着色器输出一个颜色\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0);\n    ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色\n}\n```\n\n由于我们不再使用uniform来传递片段的颜色了，现在使用ourColor输出变量，我们必须再修改一下片段着色器：\n```glsl\n#version 330 core\nout vec4 FragColor;  \nin vec3 ourColor;\n\nvoid main()\n{\n    FragColor = vec4(ourColor, 1.0);\n}\n```\n因为我们添加了另一个顶点属性，并且更新了VBO的内存，我们就必须重新配置顶点属性指针。更新后的VBO内存中的数据现在看起来像这样：\n![2024-03-03T155941](2024-03-03T155941.png)\n\n知道了现在使用的布局，我们就可以使用glVertexAttribPointer函数更新顶点格式，\n```c++\n// 位置属性\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 颜色属性\nglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3* sizeof(float)));\nglEnableVertexAttribArray(1);\n```\n\nglVertexAttribPointer函数的前几个参数比较明了。这次我们配置属性位置值为1的顶点属性。颜色值有3个float那么大，我们不去标准化这些值。\n\n由于我们现在有了两个顶点属性，我们不得不重新计算步长值。为获得数据队列中下一个属性值（比如位置向量的下个x分量）我们必须向右移动6个float，其中3个是位置值，另外3个是颜色值。这使我们的步长值为6乘以float的字节数（=24字节）。\n同样，这次我们必须指定一个偏移量。对于每个顶点来说，位置顶点属性在前，所以它的偏移量是0。颜色属性紧随位置数据之后，所以偏移量就是3 * sizeof(float)，用字节来计算就是12字节。\n\n现在，你就可以看到三角形颜色随着时间而变化了\n\n## 我们自己的着色器类\n\n编写、编译、管理着色器是件麻烦事。在着色器主题的最后，我们会写一个类来让我们的生活轻松一点，它可以从硬盘读取着色器，然后编译并链接它们，并对它们进行错误检测，这就变得很好用了。这也会让你了解该如何封装目前所学的知识到一个抽象对象中。\n\n我们会把着色器类全部放在在头文件里，主要是为了学习用途，当然也方便移植。我们先来添加必要的include，并定义类结构：\n```c++\n#ifndef SHADER_H\n#define SHADER_H\n\n#include <glad/glad.h>; // 包含glad来获取所有的必须OpenGL头文件\n\n#include <string>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n\n\nclass Shader\n{\npublic:\n    // 程序ID\n    unsigned int ID;\n\n    // 构造器读取并构建着色器\n    Shader(const char* vertexPath, const char* fragmentPath);\n    // 使用/激活程序\n    void use();\n    // uniform工具函数\n    void setBool(const std::string &name, bool value) const;  \n    void setInt(const std::string &name, int value) const;   \n    void setFloat(const std::string &name, float value) const;\n};\n\n#endif\n```\n\n着色器类储存了着色器程序的ID。它的构造器需要顶点和片段着色器源代码的文件路径，这样我们就可以把源码的文本文件储存在硬盘上了。除此之外，为了让我们的生活更轻松一点，还加入了一些工具函数：use用来激活着色器程序，所有的set…函数能够查询一个unform的位置值并设置它的值。\n\n### 从文件读取\n我们使用C++文件流读取着色器内容，储存到几个string对象里：\n```c++\nShader(const char* vertexPath, const char* fragmentPath)\n{\n    // 1. 从文件路径中获取顶点/片段着色器\n    std::string vertexCode;\n    std::string fragmentCode;\n    std::ifstream vShaderFile;\n    std::ifstream fShaderFile;\n    // 保证ifstream对象可以抛出异常：\n    vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);\n    fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);\n    try \n    {\n        // 打开文件\n        vShaderFile.open(vertexPath);\n        fShaderFile.open(fragmentPath);\n        std::stringstream vShaderStream, fShaderStream;\n        // 读取文件的缓冲内容到数据流中\n        vShaderStream << vShaderFile.rdbuf();\n        fShaderStream << fShaderFile.rdbuf();       \n        // 关闭文件处理器\n        vShaderFile.close();\n        fShaderFile.close();\n        // 转换数据流到string\n        vertexCode   = vShaderStream.str();\n        fragmentCode = fShaderStream.str();     \n    }\n    catch(std::ifstream::failure e)\n    {\n        std::cout << \"ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ\" << std::endl;\n    }\n    const char* vShaderCode = vertexCode.c_str();\n    const char* fShaderCode = fragmentCode.c_str();\n    [...]\n```\n下一步，我们需要编译和链接着色器。注意，我们也将检查编译/链接是否失败，如果失败则打印编译时错误，调试的时候这些错误输出会及其重要（你总会需要这些错误日志的）：\n\n```c++\n// 2. 编译着色器\nunsigned int vertex, fragment;\nint success;\nchar infoLog[512];\n\n// 顶点着色器\nvertex = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertex, 1, &vShaderCode, NULL);\nglCompileShader(vertex);\n// 打印编译错误（如果有的话）\nglGetShaderiv(vertex, GL_COMPILE_STATUS, &success);\nif(!success)\n{\n    glGetShaderInfoLog(vertex, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n};\n\n// 片段着色器也类似\n[...]\n\n// 着色器程序\nID = glCreateProgram();\nglAttachShader(ID, vertex);\nglAttachShader(ID, fragment);\nglLinkProgram(ID);\n// 打印连接错误（如果有的话）\nglGetProgramiv(ID, GL_LINK_STATUS, &success);\nif(!success)\n{\n    glGetProgramInfoLog(ID, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\" << infoLog << std::endl;\n}\n\n// 删除着色器，它们已经链接到我们的程序中了，已经不再需要了\nglDeleteShader(vertex);\nglDeleteShader(fragment);\n```\n\nuse函数非常简单：\n```c++\nvoid use() \n{ \n    glUseProgram(ID);\n}\n```\nuniform的setter函数也很类似：\n```c++\nvoid setBool(const std::string &name, bool value) const\n{\n    glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value); \n}\nvoid setInt(const std::string &name, int value) const\n{ \n    glUniform1i(glGetUniformLocation(ID, name.c_str()), value); \n}\nvoid setFloat(const std::string &name, float value) const\n{ \n    glUniform1f(glGetUniformLocation(ID, name.c_str()), value); \n} \n```\n\n现在我们就写完了一个完整的着色器类。使用这个着色器类很简单；只要创建一个着色器对象，从那一点开始我们就可以开始使用了：\n```c++\nShader ourShader(\"path/to/shaders/shader.vs\", \"path/to/shaders/shader.fs\");\n...\nwhile(...)\n{\n    ourShader.use();\n    ourShader.setFloat(\"someUniform\", 1.0f);\n    DrawStuff();\n}\n```\n\n我们把顶点和片段着色器储存为两个叫做shader.vs和shader.fs的文件。你可以使用自己喜欢的名字命名着色器文件；我自己觉得用`.vert`和`.frag`作为扩展名很直观。\n\n代码：\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include \"MyShader.h\"\n\ntypedef void (*DEL_BUFFER) ();\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\n#define DEFAULT_VERTEX_FILE_PATH \"./vertex01.vert\"\n#define DEFAULT_FRAGMENT_FILE_PATH \"./fragment01.frag\"\n\nfloat vertices2[] = {\n    // 位置              // 颜色\n     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // 顶部\n};\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\nvoid bindBufferLocal(GLuint &VAO, GLuint VBO, GLuint EBO) {\n    glGenVertexArrays(1, &VAO);\n    glBindVertexArray(VAO);\n    glGenBuffers(1, &VBO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);\n\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n}\n\n\nint test01() {\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n    GLuint VAO = 0,VBO = 0,EBO = 0;\n    bindBufferLocal(VAO,VBO,EBO);\n\n    // shader\n    MyShader myshader(DEFAULT_VERTEX_FILE_PATH, DEFAULT_FRAGMENT_FILE_PATH);\n\n    while (!glfwWindowShouldClose(window))\n    {\n        processInput(window);\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n        myshader.use();\n\n        auto time = glfwGetTime();\n        auto st = sin(time)/2 + 0.5f;\n        myshader.setFloat(\"colorSin\", st);\n        glBindVertexArray(VAO);\n        glDrawArrays(GL_TRIANGLES, 0, 3);\n\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n\n    glDeleteVertexArrays(1, &VAO);\n    glDeleteBuffers(1, &VBO);\n    glDeleteBuffers(1, &EBO);\n    glDeleteProgram(myshader.ID);\n\n\n    glfwTerminate();\n    return 0;\n}\n\n```","source":"_posts/opengl_GLSL.md","raw":"---\ntitle: OpenGL Shader\ndate: 2024-03-03T15:18:49+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n- [Shader](#shader)\n  - [GLSL](#glsl)\n  - [数据类型](#数据类型)\n    - [向量](#向量)\n  - [输入与输出](#输入与输出)\n  - [Uniform](#uniform)\n  - [更多属性！](#更多属性)\n  - [我们自己的着色器类](#我们自己的着色器类)\n    - [从文件读取](#从文件读取)\n\n\n着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。\n\n前面的教程里我们简要地触及了一点着色器的皮毛，并了解了如何恰当地使用它们。现在我们会用一种更加广泛的形式详细解释着色器，特别是OpenGL着色器语言(GLSL)。\n\n# Shader\n着色器是使用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。\n\n## GLSL\n着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。\n\n一个典型的着色器有下面的结构：\n```GLSL\n#version version_number\nin type in_variable_name;\nin type in_variable_name;\n\nout type out_variable_name;\n\nuniform type uniform_name;\n\nint main()\n{\n  // 处理输入并进行一些图形操作\n  ...\n  // 输出处理过的结果到输出变量\n  out_variable_name = weird_stuff_we_processed;\n}\n```\n\n当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex Attribute)。我们能声明的顶点属性是有上限的，它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：\n```c++\nint nrAttributes;\nglGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);\nstd::cout << \"Maximum nr of vertex attributes supported: \" << nrAttributes << std::endl;\n```\n\n通常情况下它至少会返回16个，大部分情况下是够用了。\n## 数据类型\n和其他编程语言一样，GLSL有数据类型可以来指定变量的种类。GLSL中包含C等其它语言大部分的默认基础数据类型：`int`、`float`、`double`、`uint`和`bool`。GLSL也有两种容器类型，它们会在这个教程中使用很多，分别是向量(Vector)和矩阵(Matrix)，其中矩阵我们会在之后的教程里再讨论。\n\n### 向量\nGLSL中的向量是一个可以包含有2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。它们可以是下面的形式（n代表分量的数量）：\n![2024-03-03T152501](2024-03-03T152501.png)\n\n大多数时候我们使用`vecn`，因为`float`足够满足大多数要求了。\n\n一个向量的分量可以通过`vec.x`这种方式获取，这里x是指这个向量的第一个分量。你可以分别使用`.x、.y、.z`和.w来获取它们的第1、2、3、4个分量。GLSL也允许你对颜色使用`rgba`，或是对纹理坐标使用`stpq`访问相同的分量。\n\n向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(**Swizzling**)。重组允许这样的语法：\n\n```GLSL\nvec2 someVec;\nvec4 differentVec = someVec.xyxx;\nvec3 anotherVec = differentVec.zyw;\nvec4 otherVec = someVec.xxxx + anotherVec.yxzy;\n```\n\n你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：\n```GLSL\nvec2 vect = vec2(0.5, 0.7);\nvec4 result = vec4(vect, 0.0, 0.0);\nvec4 otherResult = vec4(result.xyz, 1.0);\n```\n向量是一种灵活的数据类型，我们可以把它用在各种输入和输出上。学完教程你会看到很多新颖的管理向量的例子。\n\n## 输入与输出\n虽然着色器是各自独立的小程序，但是它们都是一个整体的一部分，出于这样的原因，我们希望每个着色器都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。\n\n顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量，这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，`layout (location = 0)`。顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。\n\n<div class=\"note info\">你也可以忽略layout (location = 0)标识符，通过在OpenGL代码中使用glGetAttribLocation查询属性位置值(Location)，但是我更喜欢在着色器中设置它们，这样会更容易理解而且节省你（和OpenGL）的工作量。</div>\n\n另一个例外是片段着色器，它需要一个vec4颜色输出变量，因为片段着色器需要生成一个最终输出的颜色。如果你在片段着色器没有定义输出颜色，OpenGL会把你的物体渲染为黑色（或白色）。\n\n所以，如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。为了展示这是如何工作的，我们会稍微改动一下之前教程里的那个着色器，让顶点着色器为片段着色器决定颜色。\n**顶点着色器**\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0\n\nout vec4 vertexColor; // 为片段着色器指定一个颜色输出\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数\n    vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // 把输出变量设置为暗红色\n}\n```\n**片段着色器**\n```GLSL\n#version 330 core\nout vec4 FragColor;\n\nin vec4 vertexColor; // 从顶点着色器传来的输入变量（名称相同、类型相同）\n\nvoid main()\n{\n    FragColor = vertexColor;\n}\n```\n\n你可以看到我们在顶点着色器中声明了一个vertexColor变量作为vec4输出，并在片段着色器中声明了一个类似的vertexColor。由于它们名字相同且类型相同，片段着色器中的vertexColor就和顶点着色器中的vertexColor链接了。由于我们在顶点着色器中将颜色设置为深红色，最终的片段也是深红色的。下面的图片展示了输出结果：\n![2024-03-03T153532](2024-03-03T153532.png)\n\n完成了！我们成功地从顶点着色器向片段着色器发送数据。让我们更上一层楼，看看能否从应用程序中直接给片段着色器发送一个颜色！\n\n## Uniform\n> Uniform 可以视作我们的应用传送给GPU的参数。这个参数在一次渲染中不可更改，在所有shader中都通用。\n\n\nUniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)。全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。\n\n我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。从此处开始我们就可以在着色器中使用新声明的uniform了。我们来看看这次是否能通过uniform设置三角形的颜色：\n```GLSL\n#version 330 core\nout vec4 FragColor;\n\nuniform vec4 ourColor; // 在OpenGL程序代码中设定这个变量\n\nvoid main()\n{\n    FragColor = ourColor;\n}\n```\n我们在片段着色器中声明了一个uniform vec4的ourColor，并把片段着色器的输出颜色设置为uniform值的内容。因为uniform是全局变量，我们可以在任何着色器中定义它们，而无需通过顶点着色器作为中介。顶点着色器中不需要这个uniform，所以我们不用在那里定义它。\n\n{% note danger no-icon %}\n如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量，导致最后编译出的版本中并不会包含它，这可能导致几个非常麻烦的错误，记住这点！\n{% endnote %}\n这个uniform现在还是空的；我们还没有给它添加任何数据，所以下面我们就做这件事。我们首先需要找到着色器中uniform属性的索引/位置值。当我们得到uniform的索引/位置值后，我们就可以更新它的值了。这次我们不去给像素传递单独一个颜色，而是让它随着时间改变颜色：\n```GLSL\n//渲染的循环内\nfloat timeValue = glfwGetTime();\nfloat greenValue = (sin(timeValue) / 2.0f) + 0.5f;\nint vertexColorLocation = glGetUniformLocation(shaderProgram, \"ourColor\");\nglUseProgram(shaderProgram);\nglUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);\n```\n首先我们通过`glfwGetTime()`获取运行的秒数。然后我们使用sin函数让颜色在0.0到1.0之间改变，最后将结果储存到`greenValue`里。\n\n接着，我们用`glGetUniformLocation`查询`uniform ourColor`的位置值。我们为查询函数提供着色器程序和uniform的名字（这是我们希望获得的位置值的来源）。如果`glGetUniformLocation`返回-1就代表没有找到这个位置值。最后，我们可以通过`glUniform4f`函数设置uniform值。注意，**查询uniform地址不要求你之前使用过着色器程序，但是更新一个uniform之前你必须先使用程序（调用glUseProgram)**，因为它是在当前激活的着色器程序中设置uniform的。\n\n![2024-03-03T154900](2024-03-03T154900.png)\n\n## 更多属性！\n在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：\n```c++\nfloat vertices[] = {\n    // 位置              // 颜色\n     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // 顶部\n};\n```\n由于现在有更多的数据要发送到顶点着色器，我们有必要去调整一下顶点着色器，使它能够接收颜色值作为一个顶点属性输入。需要注意的是我们用layout标识符来把aColor属性的位置值设置为1：\n\n```GLSL\n#version 330 core\nlayout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 \nlayout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1\n\nout vec3 ourColor; // 向片段着色器输出一个颜色\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0);\n    ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色\n}\n```\n\n由于我们不再使用uniform来传递片段的颜色了，现在使用ourColor输出变量，我们必须再修改一下片段着色器：\n```glsl\n#version 330 core\nout vec4 FragColor;  \nin vec3 ourColor;\n\nvoid main()\n{\n    FragColor = vec4(ourColor, 1.0);\n}\n```\n因为我们添加了另一个顶点属性，并且更新了VBO的内存，我们就必须重新配置顶点属性指针。更新后的VBO内存中的数据现在看起来像这样：\n![2024-03-03T155941](2024-03-03T155941.png)\n\n知道了现在使用的布局，我们就可以使用glVertexAttribPointer函数更新顶点格式，\n```c++\n// 位置属性\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n// 颜色属性\nglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3* sizeof(float)));\nglEnableVertexAttribArray(1);\n```\n\nglVertexAttribPointer函数的前几个参数比较明了。这次我们配置属性位置值为1的顶点属性。颜色值有3个float那么大，我们不去标准化这些值。\n\n由于我们现在有了两个顶点属性，我们不得不重新计算步长值。为获得数据队列中下一个属性值（比如位置向量的下个x分量）我们必须向右移动6个float，其中3个是位置值，另外3个是颜色值。这使我们的步长值为6乘以float的字节数（=24字节）。\n同样，这次我们必须指定一个偏移量。对于每个顶点来说，位置顶点属性在前，所以它的偏移量是0。颜色属性紧随位置数据之后，所以偏移量就是3 * sizeof(float)，用字节来计算就是12字节。\n\n现在，你就可以看到三角形颜色随着时间而变化了\n\n## 我们自己的着色器类\n\n编写、编译、管理着色器是件麻烦事。在着色器主题的最后，我们会写一个类来让我们的生活轻松一点，它可以从硬盘读取着色器，然后编译并链接它们，并对它们进行错误检测，这就变得很好用了。这也会让你了解该如何封装目前所学的知识到一个抽象对象中。\n\n我们会把着色器类全部放在在头文件里，主要是为了学习用途，当然也方便移植。我们先来添加必要的include，并定义类结构：\n```c++\n#ifndef SHADER_H\n#define SHADER_H\n\n#include <glad/glad.h>; // 包含glad来获取所有的必须OpenGL头文件\n\n#include <string>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n\n\nclass Shader\n{\npublic:\n    // 程序ID\n    unsigned int ID;\n\n    // 构造器读取并构建着色器\n    Shader(const char* vertexPath, const char* fragmentPath);\n    // 使用/激活程序\n    void use();\n    // uniform工具函数\n    void setBool(const std::string &name, bool value) const;  \n    void setInt(const std::string &name, int value) const;   \n    void setFloat(const std::string &name, float value) const;\n};\n\n#endif\n```\n\n着色器类储存了着色器程序的ID。它的构造器需要顶点和片段着色器源代码的文件路径，这样我们就可以把源码的文本文件储存在硬盘上了。除此之外，为了让我们的生活更轻松一点，还加入了一些工具函数：use用来激活着色器程序，所有的set…函数能够查询一个unform的位置值并设置它的值。\n\n### 从文件读取\n我们使用C++文件流读取着色器内容，储存到几个string对象里：\n```c++\nShader(const char* vertexPath, const char* fragmentPath)\n{\n    // 1. 从文件路径中获取顶点/片段着色器\n    std::string vertexCode;\n    std::string fragmentCode;\n    std::ifstream vShaderFile;\n    std::ifstream fShaderFile;\n    // 保证ifstream对象可以抛出异常：\n    vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);\n    fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);\n    try \n    {\n        // 打开文件\n        vShaderFile.open(vertexPath);\n        fShaderFile.open(fragmentPath);\n        std::stringstream vShaderStream, fShaderStream;\n        // 读取文件的缓冲内容到数据流中\n        vShaderStream << vShaderFile.rdbuf();\n        fShaderStream << fShaderFile.rdbuf();       \n        // 关闭文件处理器\n        vShaderFile.close();\n        fShaderFile.close();\n        // 转换数据流到string\n        vertexCode   = vShaderStream.str();\n        fragmentCode = fShaderStream.str();     \n    }\n    catch(std::ifstream::failure e)\n    {\n        std::cout << \"ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ\" << std::endl;\n    }\n    const char* vShaderCode = vertexCode.c_str();\n    const char* fShaderCode = fragmentCode.c_str();\n    [...]\n```\n下一步，我们需要编译和链接着色器。注意，我们也将检查编译/链接是否失败，如果失败则打印编译时错误，调试的时候这些错误输出会及其重要（你总会需要这些错误日志的）：\n\n```c++\n// 2. 编译着色器\nunsigned int vertex, fragment;\nint success;\nchar infoLog[512];\n\n// 顶点着色器\nvertex = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertex, 1, &vShaderCode, NULL);\nglCompileShader(vertex);\n// 打印编译错误（如果有的话）\nglGetShaderiv(vertex, GL_COMPILE_STATUS, &success);\nif(!success)\n{\n    glGetShaderInfoLog(vertex, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\" << infoLog << std::endl;\n};\n\n// 片段着色器也类似\n[...]\n\n// 着色器程序\nID = glCreateProgram();\nglAttachShader(ID, vertex);\nglAttachShader(ID, fragment);\nglLinkProgram(ID);\n// 打印连接错误（如果有的话）\nglGetProgramiv(ID, GL_LINK_STATUS, &success);\nif(!success)\n{\n    glGetProgramInfoLog(ID, 512, NULL, infoLog);\n    std::cout << \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\" << infoLog << std::endl;\n}\n\n// 删除着色器，它们已经链接到我们的程序中了，已经不再需要了\nglDeleteShader(vertex);\nglDeleteShader(fragment);\n```\n\nuse函数非常简单：\n```c++\nvoid use() \n{ \n    glUseProgram(ID);\n}\n```\nuniform的setter函数也很类似：\n```c++\nvoid setBool(const std::string &name, bool value) const\n{\n    glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value); \n}\nvoid setInt(const std::string &name, int value) const\n{ \n    glUniform1i(glGetUniformLocation(ID, name.c_str()), value); \n}\nvoid setFloat(const std::string &name, float value) const\n{ \n    glUniform1f(glGetUniformLocation(ID, name.c_str()), value); \n} \n```\n\n现在我们就写完了一个完整的着色器类。使用这个着色器类很简单；只要创建一个着色器对象，从那一点开始我们就可以开始使用了：\n```c++\nShader ourShader(\"path/to/shaders/shader.vs\", \"path/to/shaders/shader.fs\");\n...\nwhile(...)\n{\n    ourShader.use();\n    ourShader.setFloat(\"someUniform\", 1.0f);\n    DrawStuff();\n}\n```\n\n我们把顶点和片段着色器储存为两个叫做shader.vs和shader.fs的文件。你可以使用自己喜欢的名字命名着色器文件；我自己觉得用`.vert`和`.frag`作为扩展名很直观。\n\n代码：\n```c++\n#include <iostream>\n#include <glad/glad.h>\n#include <GLFW/glfw3.h>\n#include \"MyShader.h\"\n\ntypedef void (*DEL_BUFFER) ();\n\n#define SCREEN_WIDTH 800\n#define SCREEN_HEIGH 600\n\n#define DEFAULT_VERTEX_FILE_PATH \"./vertex01.vert\"\n#define DEFAULT_FRAGMENT_FILE_PATH \"./fragment01.frag\"\n\nfloat vertices2[] = {\n    // 位置              // 颜色\n     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下\n    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下\n     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // 顶部\n};\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow* window);\n\nvoid bindBufferLocal(GLuint &VAO, GLuint VBO, GLuint EBO) {\n    glGenVertexArrays(1, &VAO);\n    glBindVertexArray(VAO);\n    glGenBuffers(1, &VBO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);\n\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n}\n\n\nint test01() {\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS\n\n    GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"LearnOpenGL\", NULL, NULL);\n    if (window == NULL)\n    {\n        std::cout << \"Failed to create GLFW window\" << std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout << \"Failed to initialize GLAD\" << std::endl;\n        return -1;\n    }\n    GLuint VAO = 0,VBO = 0,EBO = 0;\n    bindBufferLocal(VAO,VBO,EBO);\n\n    // shader\n    MyShader myshader(DEFAULT_VERTEX_FILE_PATH, DEFAULT_FRAGMENT_FILE_PATH);\n\n    while (!glfwWindowShouldClose(window))\n    {\n        processInput(window);\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n        myshader.use();\n\n        auto time = glfwGetTime();\n        auto st = sin(time)/2 + 0.5f;\n        myshader.setFloat(\"colorSin\", st);\n        glBindVertexArray(VAO);\n        glDrawArrays(GL_TRIANGLES, 0, 3);\n\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    }\n\n    glDeleteVertexArrays(1, &VAO);\n    glDeleteBuffers(1, &VBO);\n    glDeleteBuffers(1, &EBO);\n    glDeleteProgram(myshader.ID);\n\n\n    glfwTerminate();\n    return 0;\n}\n\n```","slug":"opengl_GLSL","published":1,"updated":"2025-03-28T02:05:16.271Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7s002f1wu1e8c7c9pj","content":"<p><img src=\"/2024/03/03/opengl_GLSL/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"#shader\">Shader</a><ul>\n<li><a href=\"#glsl\">GLSL</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">数据类型</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F\">向量</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA\">输入与输出</a></li>\n<li><a href=\"#uniform\">Uniform</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E5%B1%9E%E6%80%A7\">更多属性！</a></li>\n<li><a href=\"#%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9D%80%E8%89%B2%E5%99%A8%E7%B1%BB\">我们自己的着色器类</a><ul>\n<li><a href=\"#%E4%BB%8E%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\">从文件读取</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。</p>\n<p>前面的教程里我们简要地触及了一点着色器的皮毛，并了解了如何恰当地使用它们。现在我们会用一种更加广泛的形式详细解释着色器，特别是OpenGL着色器语言(GLSL)。</p>\n<h1 id=\"Shader\"><a href=\"#Shader\" class=\"headerlink\" title=\"Shader\"></a>Shader</h1><p>着色器是使用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。</p>\n<h2 id=\"GLSL\"><a href=\"#GLSL\" class=\"headerlink\" title=\"GLSL\"></a>GLSL</h2><p>着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。</p>\n<p>一个典型的着色器有下面的结构：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version version_number</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> type in_variable_name;</span><br><span class=\"line\"><span class=\"keyword\">in</span> type in_variable_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> type out_variable_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> type uniform_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理输入并进行一些图形操作</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// 输出处理过的结果到输出变量</span></span><br><span class=\"line\">  out_variable_name = weird_stuff_we_processed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex Attribute)。我们能声明的顶点属性是有上限的，它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> nrAttributes;</span><br><span class=\"line\"><span class=\"built_in\">glGetIntegerv</span>(GL_MAX_VERTEX_ATTRIBS, &amp;nrAttributes);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Maximum nr of vertex attributes supported: &quot;</span> &lt;&lt; nrAttributes &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下它至少会返回16个，大部分情况下是够用了。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>和其他编程语言一样，GLSL有数据类型可以来指定变量的种类。GLSL中包含C等其它语言大部分的默认基础数据类型：<code>int</code>、<code>float</code>、<code>double</code>、<code>uint</code>和<code>bool</code>。GLSL也有两种容器类型，它们会在这个教程中使用很多，分别是向量(Vector)和矩阵(Matrix)，其中矩阵我们会在之后的教程里再讨论。</p>\n<h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>GLSL中的向量是一个可以包含有2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。它们可以是下面的形式（n代表分量的数量）：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T152501.png\" alt=\"2024-03-03T152501\"></p>\n<p>大多数时候我们使用<code>vecn</code>，因为<code>float</code>足够满足大多数要求了。</p>\n<p>一个向量的分量可以通过<code>vec.x</code>这种方式获取，这里x是指这个向量的第一个分量。你可以分别使用<code>.x、.y、.z</code>和.w来获取它们的第1、2、3、4个分量。GLSL也允许你对颜色使用<code>rgba</code>，或是对纹理坐标使用<code>stpq</code>访问相同的分量。</p>\n<p>向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(<strong>Swizzling</strong>)。重组允许这样的语法：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec2</span> someVec;</span><br><span class=\"line\"><span class=\"type\">vec4</span> differentVec = someVec.xyxx;</span><br><span class=\"line\"><span class=\"type\">vec3</span> anotherVec = differentVec.zyw;</span><br><span class=\"line\"><span class=\"type\">vec4</span> otherVec = someVec.xxxx + anotherVec.yxzy;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec2</span> vect = <span class=\"type\">vec2</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\"><span class=\"type\">vec4</span> result = <span class=\"type\">vec4</span>(vect, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"type\">vec4</span> otherResult = <span class=\"type\">vec4</span>(result.xyz, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>向量是一种灵活的数据类型，我们可以把它用在各种输入和输出上。学完教程你会看到很多新颖的管理向量的例子。</p>\n<h2 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h2><p>虽然着色器是各自独立的小程序，但是它们都是一个整体的一部分，出于这样的原因，我们希望每个着色器都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。</p>\n<p>顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量，这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，<code>layout (location = 0)</code>。顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。</p>\n<div class=\"note info\">你也可以忽略layout (location = 0)标识符，通过在OpenGL代码中使用glGetAttribLocation查询属性位置值(Location)，但是我更喜欢在着色器中设置它们，这样会更容易理解而且节省你（和OpenGL）的工作量。</div>\n\n<p>另一个例外是片段着色器，它需要一个vec4颜色输出变量，因为片段着色器需要生成一个最终输出的颜色。如果你在片段着色器没有定义输出颜色，OpenGL会把你的物体渲染为黑色（或白色）。</p>\n<p>所以，如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。为了展示这是如何工作的，我们会稍微改动一下之前教程里的那个着色器，让顶点着色器为片段着色器决定颜色。<br><strong>顶点着色器</strong></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos; <span class=\"comment\">// 位置变量的属性位置值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> vertexColor; <span class=\"comment\">// 为片段着色器指定一个颜色输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>); <span class=\"comment\">// 注意我们如何把一个vec3作为vec4的构造器的参数</span></span><br><span class=\"line\">    vertexColor = <span class=\"type\">vec4</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>); <span class=\"comment\">// 把输出变量设置为暗红色</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>片段着色器</strong></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec4</span> vertexColor; <span class=\"comment\">// 从顶点着色器传来的输入变量（名称相同、类型相同）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = vertexColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到我们在顶点着色器中声明了一个vertexColor变量作为vec4输出，并在片段着色器中声明了一个类似的vertexColor。由于它们名字相同且类型相同，片段着色器中的vertexColor就和顶点着色器中的vertexColor链接了。由于我们在顶点着色器中将颜色设置为深红色，最终的片段也是深红色的。下面的图片展示了输出结果：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T153532.png\" alt=\"2024-03-03T153532\"></p>\n<p>完成了！我们成功地从顶点着色器向片段着色器发送数据。让我们更上一层楼，看看能否从应用程序中直接给片段着色器发送一个颜色！</p>\n<h2 id=\"Uniform\"><a href=\"#Uniform\" class=\"headerlink\" title=\"Uniform\"></a>Uniform</h2><blockquote>\n<p>Uniform 可以视作我们的应用传送给GPU的参数。这个参数在一次渲染中不可更改，在所有shader中都通用。</p>\n</blockquote>\n<p>Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)。全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。</p>\n<p>我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。从此处开始我们就可以在着色器中使用新声明的uniform了。我们来看看这次是否能通过uniform设置三角形的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec4</span> ourColor; <span class=\"comment\">// 在OpenGL程序代码中设定这个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = ourColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在片段着色器中声明了一个uniform vec4的ourColor，并把片段着色器的输出颜色设置为uniform值的内容。因为uniform是全局变量，我们可以在任何着色器中定义它们，而无需通过顶点着色器作为中介。顶点着色器中不需要这个uniform，所以我们不用在那里定义它。</p>\n<div class=\"note danger no-icon\"><p>如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量，导致最后编译出的版本中并不会包含它，这可能导致几个非常麻烦的错误，记住这点！</p>\n</div>\n<p>这个uniform现在还是空的；我们还没有给它添加任何数据，所以下面我们就做这件事。我们首先需要找到着色器中uniform属性的索引&#x2F;位置值。当我们得到uniform的索引&#x2F;位置值后，我们就可以更新它的值了。这次我们不去给像素传递单独一个颜色，而是让它随着时间改变颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//渲染的循环内</span></span><br><span class=\"line\"><span class=\"type\">float</span> timeValue = glfwGetTime();</span><br><span class=\"line\"><span class=\"type\">float</span> greenValue = (<span class=\"built_in\">sin</span>(timeValue) / <span class=\"number\">2.0</span>f) + <span class=\"number\">0.5</span>f;</span><br><span class=\"line\"><span class=\"type\">int</span> vertexColorLocation = glGetUniformLocation(shaderProgram, &quot;ourColor&quot;);</span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glUniform4f(vertexColorLocation, <span class=\"number\">0.0</span>f, greenValue, <span class=\"number\">0.0</span>f, <span class=\"number\">1.0</span>f);</span><br></pre></td></tr></table></figure>\n<p>首先我们通过<code>glfwGetTime()</code>获取运行的秒数。然后我们使用sin函数让颜色在0.0到1.0之间改变，最后将结果储存到<code>greenValue</code>里。</p>\n<p>接着，我们用<code>glGetUniformLocation</code>查询<code>uniform ourColor</code>的位置值。我们为查询函数提供着色器程序和uniform的名字（这是我们希望获得的位置值的来源）。如果<code>glGetUniformLocation</code>返回-1就代表没有找到这个位置值。最后，我们可以通过<code>glUniform4f</code>函数设置uniform值。注意，<strong>查询uniform地址不要求你之前使用过着色器程序，但是更新一个uniform之前你必须先使用程序（调用glUseProgram)</strong>，因为它是在当前激活的着色器程序中设置uniform的。</p>\n<p><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T154900.png\" alt=\"2024-03-03T154900\"></p>\n<h2 id=\"更多属性！\"><a href=\"#更多属性！\" class=\"headerlink\" title=\"更多属性！\"></a>更多属性！</h2><p>在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>    <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>由于现在有更多的数据要发送到顶点着色器，我们有必要去调整一下顶点着色器，使它能够接收颜色值作为一个顶点属性输入。需要注意的是我们用layout标识符来把aColor属性的位置值设置为1：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;   <span class=\"comment\">// 位置变量的属性位置值为 0 </span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aColor; <span class=\"comment\">// 颜色变量的属性位置值为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> ourColor; <span class=\"comment\">// 向片段着色器输出一个颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ourColor = aColor; <span class=\"comment\">// 将ourColor设置为我们从顶点数据那里得到的输入颜色</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们不再使用uniform来传递片段的颜色了，现在使用ourColor输出变量，我们必须再修改一下片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;  </span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> ourColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(ourColor, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我们添加了另一个顶点属性，并且更新了VBO的内存，我们就必须重新配置顶点属性指针。更新后的VBO内存中的数据现在看起来像这样：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T155941.png\" alt=\"2024-03-03T155941\"></p>\n<p>知道了现在使用的布局，我们就可以使用glVertexAttribPointer函数更新顶点格式，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 位置属性</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 颜色属性</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span>* <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>glVertexAttribPointer函数的前几个参数比较明了。这次我们配置属性位置值为1的顶点属性。颜色值有3个float那么大，我们不去标准化这些值。</p>\n<p>由于我们现在有了两个顶点属性，我们不得不重新计算步长值。为获得数据队列中下一个属性值（比如位置向量的下个x分量）我们必须向右移动6个float，其中3个是位置值，另外3个是颜色值。这使我们的步长值为6乘以float的字节数（&#x3D;24字节）。<br>同样，这次我们必须指定一个偏移量。对于每个顶点来说，位置顶点属性在前，所以它的偏移量是0。颜色属性紧随位置数据之后，所以偏移量就是3 * sizeof(float)，用字节来计算就是12字节。</p>\n<p>现在，你就可以看到三角形颜色随着时间而变化了</p>\n<h2 id=\"我们自己的着色器类\"><a href=\"#我们自己的着色器类\" class=\"headerlink\" title=\"我们自己的着色器类\"></a>我们自己的着色器类</h2><p>编写、编译、管理着色器是件麻烦事。在着色器主题的最后，我们会写一个类来让我们的生活轻松一点，它可以从硬盘读取着色器，然后编译并链接它们，并对它们进行错误检测，这就变得很好用了。这也会让你了解该如何封装目前所学的知识到一个抽象对象中。</p>\n<p>我们会把着色器类全部放在在头文件里，主要是为了学习用途，当然也方便移植。我们先来添加必要的include，并定义类结构：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> SHADER_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SHADER_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span>; <span class=\"comment\">// 包含glad来获取所有的必须OpenGL头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 程序ID</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器读取并构建着色器</span></span><br><span class=\"line\">    <span class=\"built_in\">Shader</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath, <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentPath);</span><br><span class=\"line\">    <span class=\"comment\">// 使用/激活程序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// uniform工具函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBool</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">bool</span> value)</span> <span class=\"type\">const</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setInt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">int</span> value)</span> <span class=\"type\">const</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFloat</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">float</span> value)</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>着色器类储存了着色器程序的ID。它的构造器需要顶点和片段着色器源代码的文件路径，这样我们就可以把源码的文本文件储存在硬盘上了。除此之外，为了让我们的生活更轻松一点，还加入了一些工具函数：use用来激活着色器程序，所有的set…函数能够查询一个unform的位置值并设置它的值。</p>\n<h3 id=\"从文件读取\"><a href=\"#从文件读取\" class=\"headerlink\" title=\"从文件读取\"></a>从文件读取</h3><p>我们使用C++文件流读取着色器内容，储存到几个string对象里：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Shader</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath, <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 从文件路径中获取顶点/片段着色器</span></span><br><span class=\"line\">    std::string vertexCode;</span><br><span class=\"line\">    std::string fragmentCode;</span><br><span class=\"line\">    std::ifstream vShaderFile;</span><br><span class=\"line\">    std::ifstream fShaderFile;</span><br><span class=\"line\">    <span class=\"comment\">// 保证ifstream对象可以抛出异常：</span></span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开文件</span></span><br><span class=\"line\">        vShaderFile.<span class=\"built_in\">open</span>(vertexPath);</span><br><span class=\"line\">        fShaderFile.<span class=\"built_in\">open</span>(fragmentPath);</span><br><span class=\"line\">        std::stringstream vShaderStream, fShaderStream;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的缓冲内容到数据流中</span></span><br><span class=\"line\">        vShaderStream &lt;&lt; vShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">        fShaderStream &lt;&lt; fShaderFile.<span class=\"built_in\">rdbuf</span>();       </span><br><span class=\"line\">        <span class=\"comment\">// 关闭文件处理器</span></span><br><span class=\"line\">        vShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        fShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 转换数据流到string</span></span><br><span class=\"line\">        vertexCode   = vShaderStream.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">        fragmentCode = fShaderStream.<span class=\"built_in\">str</span>();     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">catch</span>(std::ifstream::failure e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vShaderCode = vertexCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fShaderCode = fragmentCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    [...]</span><br></pre></td></tr></table></figure>\n<p>下一步，我们需要编译和链接着色器。注意，我们也将检查编译&#x2F;链接是否失败，如果失败则打印编译时错误，调试的时候这些错误输出会及其重要（你总会需要这些错误日志的）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 编译着色器</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertex, fragment;</span><br><span class=\"line\"><span class=\"type\">int</span> success;</span><br><span class=\"line\"><span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">vertex = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertex, <span class=\"number\">1</span>, &amp;vShaderCode, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertex);</span><br><span class=\"line\"><span class=\"comment\">// 打印编译错误（如果有的话）</span></span><br><span class=\"line\"><span class=\"built_in\">glGetShaderiv</span>(vertex, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderInfoLog</span>(vertex, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 片段着色器也类似</span></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 着色器程序</span></span><br><span class=\"line\">ID = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(ID, vertex);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(ID, fragment);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(ID);</span><br><span class=\"line\"><span class=\"comment\">// 打印连接错误（如果有的话）</span></span><br><span class=\"line\"><span class=\"built_in\">glGetProgramiv</span>(ID, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramInfoLog</span>(ID, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除着色器，它们已经链接到我们的程序中了，已经不再需要了</span></span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertex);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragment);</span><br></pre></td></tr></table></figure>\n\n<p>use函数非常简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUseProgram</span>(ID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>uniform的setter函数也很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBool</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">bool</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), (<span class=\"type\">int</span>)value); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setInt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">int</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), value); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFloat</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">float</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUniform1f</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), value); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>现在我们就写完了一个完整的着色器类。使用这个着色器类很简单；只要创建一个着色器对象，从那一点开始我们就可以开始使用了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Shader <span class=\"title\">ourShader</span><span class=\"params\">(<span class=\"string\">&quot;path/to/shaders/shader.vs&quot;</span>, <span class=\"string\">&quot;path/to/shaders/shader.fs&quot;</span>)</span></span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">while</span>(...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ourShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    ourShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;someUniform&quot;</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">DrawStuff</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把顶点和片段着色器储存为两个叫做shader.vs和shader.fs的文件。你可以使用自己喜欢的名字命名着色器文件；我自己觉得用<code>.vert</code>和<code>.frag</code>作为扩展名很直观。</p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*DEL_BUFFER)</span> <span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_VERTEX_FILE_PATH <span class=\"string\">&quot;./vertex01.vert&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_FRAGMENT_FILE_PATH <span class=\"string\">&quot;./fragment01.frag&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> vertices2[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>    <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bindBufferLocal</span><span class=\"params\">(GLuint &amp;VAO, GLuint VBO, GLuint EBO)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices2), vertices2, GL_STATIC_DRAW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GLuint VAO = <span class=\"number\">0</span>,VBO = <span class=\"number\">0</span>,EBO = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bindBufferLocal</span>(VAO,VBO,EBO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// shader</span></span><br><span class=\"line\">    <span class=\"function\">MyShader <span class=\"title\">myshader</span><span class=\"params\">(DEFAULT_VERTEX_FILE_PATH, DEFAULT_FRAGMENT_FILE_PATH)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        myshader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> time = <span class=\"built_in\">glfwGetTime</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> st = <span class=\"built_in\">sin</span>(time)/<span class=\"number\">2</span> + <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">        myshader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;colorSin&quot;</span>, st);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glDeleteVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteProgram</span>(myshader.ID);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":4686,"excerpt":"<p><img src=\"/2024/03/03/opengl_GLSL/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>","more":"<ul>\n<li><a href=\"#shader\">Shader</a><ul>\n<li><a href=\"#glsl\">GLSL</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">数据类型</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F\">向量</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA\">输入与输出</a></li>\n<li><a href=\"#uniform\">Uniform</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E5%B1%9E%E6%80%A7\">更多属性！</a></li>\n<li><a href=\"#%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9D%80%E8%89%B2%E5%99%A8%E7%B1%BB\">我们自己的着色器类</a><ul>\n<li><a href=\"#%E4%BB%8E%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\">从文件读取</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。</p>\n<p>前面的教程里我们简要地触及了一点着色器的皮毛，并了解了如何恰当地使用它们。现在我们会用一种更加广泛的形式详细解释着色器，特别是OpenGL着色器语言(GLSL)。</p>\n<h1 id=\"Shader\"><a href=\"#Shader\" class=\"headerlink\" title=\"Shader\"></a>Shader</h1><p>着色器是使用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。</p>\n<h2 id=\"GLSL\"><a href=\"#GLSL\" class=\"headerlink\" title=\"GLSL\"></a>GLSL</h2><p>着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。</p>\n<p>一个典型的着色器有下面的结构：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version version_number</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> type in_variable_name;</span><br><span class=\"line\"><span class=\"keyword\">in</span> type in_variable_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> type out_variable_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> type uniform_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理输入并进行一些图形操作</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// 输出处理过的结果到输出变量</span></span><br><span class=\"line\">  out_variable_name = weird_stuff_we_processed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex Attribute)。我们能声明的顶点属性是有上限的，它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> nrAttributes;</span><br><span class=\"line\"><span class=\"built_in\">glGetIntegerv</span>(GL_MAX_VERTEX_ATTRIBS, &amp;nrAttributes);</span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Maximum nr of vertex attributes supported: &quot;</span> &lt;&lt; nrAttributes &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下它至少会返回16个，大部分情况下是够用了。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>和其他编程语言一样，GLSL有数据类型可以来指定变量的种类。GLSL中包含C等其它语言大部分的默认基础数据类型：<code>int</code>、<code>float</code>、<code>double</code>、<code>uint</code>和<code>bool</code>。GLSL也有两种容器类型，它们会在这个教程中使用很多，分别是向量(Vector)和矩阵(Matrix)，其中矩阵我们会在之后的教程里再讨论。</p>\n<h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>GLSL中的向量是一个可以包含有2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。它们可以是下面的形式（n代表分量的数量）：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T152501.png\" alt=\"2024-03-03T152501\"></p>\n<p>大多数时候我们使用<code>vecn</code>，因为<code>float</code>足够满足大多数要求了。</p>\n<p>一个向量的分量可以通过<code>vec.x</code>这种方式获取，这里x是指这个向量的第一个分量。你可以分别使用<code>.x、.y、.z</code>和.w来获取它们的第1、2、3、4个分量。GLSL也允许你对颜色使用<code>rgba</code>，或是对纹理坐标使用<code>stpq</code>访问相同的分量。</p>\n<p>向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(<strong>Swizzling</strong>)。重组允许这样的语法：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec2</span> someVec;</span><br><span class=\"line\"><span class=\"type\">vec4</span> differentVec = someVec.xyxx;</span><br><span class=\"line\"><span class=\"type\">vec3</span> anotherVec = differentVec.zyw;</span><br><span class=\"line\"><span class=\"type\">vec4</span> otherVec = someVec.xxxx + anotherVec.yxzy;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec2</span> vect = <span class=\"type\">vec2</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\"><span class=\"type\">vec4</span> result = <span class=\"type\">vec4</span>(vect, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"type\">vec4</span> otherResult = <span class=\"type\">vec4</span>(result.xyz, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>向量是一种灵活的数据类型，我们可以把它用在各种输入和输出上。学完教程你会看到很多新颖的管理向量的例子。</p>\n<h2 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h2><p>虽然着色器是各自独立的小程序，但是它们都是一个整体的一部分，出于这样的原因，我们希望每个着色器都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。</p>\n<p>顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量，这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，<code>layout (location = 0)</code>。顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。</p>\n<div class=\"note info\">你也可以忽略layout (location = 0)标识符，通过在OpenGL代码中使用glGetAttribLocation查询属性位置值(Location)，但是我更喜欢在着色器中设置它们，这样会更容易理解而且节省你（和OpenGL）的工作量。</div>\n\n<p>另一个例外是片段着色器，它需要一个vec4颜色输出变量，因为片段着色器需要生成一个最终输出的颜色。如果你在片段着色器没有定义输出颜色，OpenGL会把你的物体渲染为黑色（或白色）。</p>\n<p>所以，如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。为了展示这是如何工作的，我们会稍微改动一下之前教程里的那个着色器，让顶点着色器为片段着色器决定颜色。<br><strong>顶点着色器</strong></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos; <span class=\"comment\">// 位置变量的属性位置值为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> vertexColor; <span class=\"comment\">// 为片段着色器指定一个颜色输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>); <span class=\"comment\">// 注意我们如何把一个vec3作为vec4的构造器的参数</span></span><br><span class=\"line\">    vertexColor = <span class=\"type\">vec4</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>); <span class=\"comment\">// 把输出变量设置为暗红色</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>片段着色器</strong></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec4</span> vertexColor; <span class=\"comment\">// 从顶点着色器传来的输入变量（名称相同、类型相同）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = vertexColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到我们在顶点着色器中声明了一个vertexColor变量作为vec4输出，并在片段着色器中声明了一个类似的vertexColor。由于它们名字相同且类型相同，片段着色器中的vertexColor就和顶点着色器中的vertexColor链接了。由于我们在顶点着色器中将颜色设置为深红色，最终的片段也是深红色的。下面的图片展示了输出结果：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T153532.png\" alt=\"2024-03-03T153532\"></p>\n<p>完成了！我们成功地从顶点着色器向片段着色器发送数据。让我们更上一层楼，看看能否从应用程序中直接给片段着色器发送一个颜色！</p>\n<h2 id=\"Uniform\"><a href=\"#Uniform\" class=\"headerlink\" title=\"Uniform\"></a>Uniform</h2><blockquote>\n<p>Uniform 可以视作我们的应用传送给GPU的参数。这个参数在一次渲染中不可更改，在所有shader中都通用。</p>\n</blockquote>\n<p>Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)。全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。</p>\n<p>我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。从此处开始我们就可以在着色器中使用新声明的uniform了。我们来看看这次是否能通过uniform设置三角形的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec4</span> ourColor; <span class=\"comment\">// 在OpenGL程序代码中设定这个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = ourColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在片段着色器中声明了一个uniform vec4的ourColor，并把片段着色器的输出颜色设置为uniform值的内容。因为uniform是全局变量，我们可以在任何着色器中定义它们，而无需通过顶点着色器作为中介。顶点着色器中不需要这个uniform，所以我们不用在那里定义它。</p>\n<div class=\"note danger no-icon\"><p>如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量，导致最后编译出的版本中并不会包含它，这可能导致几个非常麻烦的错误，记住这点！</p>\n</div>\n<p>这个uniform现在还是空的；我们还没有给它添加任何数据，所以下面我们就做这件事。我们首先需要找到着色器中uniform属性的索引&#x2F;位置值。当我们得到uniform的索引&#x2F;位置值后，我们就可以更新它的值了。这次我们不去给像素传递单独一个颜色，而是让它随着时间改变颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//渲染的循环内</span></span><br><span class=\"line\"><span class=\"type\">float</span> timeValue = glfwGetTime();</span><br><span class=\"line\"><span class=\"type\">float</span> greenValue = (<span class=\"built_in\">sin</span>(timeValue) / <span class=\"number\">2.0</span>f) + <span class=\"number\">0.5</span>f;</span><br><span class=\"line\"><span class=\"type\">int</span> vertexColorLocation = glGetUniformLocation(shaderProgram, &quot;ourColor&quot;);</span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glUniform4f(vertexColorLocation, <span class=\"number\">0.0</span>f, greenValue, <span class=\"number\">0.0</span>f, <span class=\"number\">1.0</span>f);</span><br></pre></td></tr></table></figure>\n<p>首先我们通过<code>glfwGetTime()</code>获取运行的秒数。然后我们使用sin函数让颜色在0.0到1.0之间改变，最后将结果储存到<code>greenValue</code>里。</p>\n<p>接着，我们用<code>glGetUniformLocation</code>查询<code>uniform ourColor</code>的位置值。我们为查询函数提供着色器程序和uniform的名字（这是我们希望获得的位置值的来源）。如果<code>glGetUniformLocation</code>返回-1就代表没有找到这个位置值。最后，我们可以通过<code>glUniform4f</code>函数设置uniform值。注意，<strong>查询uniform地址不要求你之前使用过着色器程序，但是更新一个uniform之前你必须先使用程序（调用glUseProgram)</strong>，因为它是在当前激活的着色器程序中设置uniform的。</p>\n<p><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T154900.png\" alt=\"2024-03-03T154900\"></p>\n<h2 id=\"更多属性！\"><a href=\"#更多属性！\" class=\"headerlink\" title=\"更多属性！\"></a>更多属性！</h2><p>在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>    <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>由于现在有更多的数据要发送到顶点着色器，我们有必要去调整一下顶点着色器，使它能够接收颜色值作为一个顶点属性输入。需要注意的是我们用layout标识符来把aColor属性的位置值设置为1：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;   <span class=\"comment\">// 位置变量的属性位置值为 0 </span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aColor; <span class=\"comment\">// 颜色变量的属性位置值为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> ourColor; <span class=\"comment\">// 向片段着色器输出一个颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ourColor = aColor; <span class=\"comment\">// 将ourColor设置为我们从顶点数据那里得到的输入颜色</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我们不再使用uniform来传递片段的颜色了，现在使用ourColor输出变量，我们必须再修改一下片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;  </span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> ourColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(ourColor, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我们添加了另一个顶点属性，并且更新了VBO的内存，我们就必须重新配置顶点属性指针。更新后的VBO内存中的数据现在看起来像这样：<br><img src=\"/2024/03/03/opengl_GLSL/2024-03-03T155941.png\" alt=\"2024-03-03T155941\"></p>\n<p>知道了现在使用的布局，我们就可以使用glVertexAttribPointer函数更新顶点格式，</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 位置属性</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 颜色属性</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span>* <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>glVertexAttribPointer函数的前几个参数比较明了。这次我们配置属性位置值为1的顶点属性。颜色值有3个float那么大，我们不去标准化这些值。</p>\n<p>由于我们现在有了两个顶点属性，我们不得不重新计算步长值。为获得数据队列中下一个属性值（比如位置向量的下个x分量）我们必须向右移动6个float，其中3个是位置值，另外3个是颜色值。这使我们的步长值为6乘以float的字节数（&#x3D;24字节）。<br>同样，这次我们必须指定一个偏移量。对于每个顶点来说，位置顶点属性在前，所以它的偏移量是0。颜色属性紧随位置数据之后，所以偏移量就是3 * sizeof(float)，用字节来计算就是12字节。</p>\n<p>现在，你就可以看到三角形颜色随着时间而变化了</p>\n<h2 id=\"我们自己的着色器类\"><a href=\"#我们自己的着色器类\" class=\"headerlink\" title=\"我们自己的着色器类\"></a>我们自己的着色器类</h2><p>编写、编译、管理着色器是件麻烦事。在着色器主题的最后，我们会写一个类来让我们的生活轻松一点，它可以从硬盘读取着色器，然后编译并链接它们，并对它们进行错误检测，这就变得很好用了。这也会让你了解该如何封装目前所学的知识到一个抽象对象中。</p>\n<p>我们会把着色器类全部放在在头文件里，主要是为了学习用途，当然也方便移植。我们先来添加必要的include，并定义类结构：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> SHADER_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SHADER_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span>; <span class=\"comment\">// 包含glad来获取所有的必须OpenGL头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 程序ID</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器读取并构建着色器</span></span><br><span class=\"line\">    <span class=\"built_in\">Shader</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath, <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentPath);</span><br><span class=\"line\">    <span class=\"comment\">// 使用/激活程序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// uniform工具函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBool</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">bool</span> value)</span> <span class=\"type\">const</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setInt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">int</span> value)</span> <span class=\"type\">const</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFloat</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">float</span> value)</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>着色器类储存了着色器程序的ID。它的构造器需要顶点和片段着色器源代码的文件路径，这样我们就可以把源码的文本文件储存在硬盘上了。除此之外，为了让我们的生活更轻松一点，还加入了一些工具函数：use用来激活着色器程序，所有的set…函数能够查询一个unform的位置值并设置它的值。</p>\n<h3 id=\"从文件读取\"><a href=\"#从文件读取\" class=\"headerlink\" title=\"从文件读取\"></a>从文件读取</h3><p>我们使用C++文件流读取着色器内容，储存到几个string对象里：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Shader</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath, <span class=\"type\">const</span> <span class=\"type\">char</span>* fragmentPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 从文件路径中获取顶点/片段着色器</span></span><br><span class=\"line\">    std::string vertexCode;</span><br><span class=\"line\">    std::string fragmentCode;</span><br><span class=\"line\">    std::ifstream vShaderFile;</span><br><span class=\"line\">    std::ifstream fShaderFile;</span><br><span class=\"line\">    <span class=\"comment\">// 保证ifstream对象可以抛出异常：</span></span><br><span class=\"line\">    vShaderFile.<span class=\"built_in\">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class=\"line\">    fShaderFile.<span class=\"built_in\">exceptions</span> (std::ifstream::failbit | std::ifstream::badbit);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开文件</span></span><br><span class=\"line\">        vShaderFile.<span class=\"built_in\">open</span>(vertexPath);</span><br><span class=\"line\">        fShaderFile.<span class=\"built_in\">open</span>(fragmentPath);</span><br><span class=\"line\">        std::stringstream vShaderStream, fShaderStream;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的缓冲内容到数据流中</span></span><br><span class=\"line\">        vShaderStream &lt;&lt; vShaderFile.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">        fShaderStream &lt;&lt; fShaderFile.<span class=\"built_in\">rdbuf</span>();       </span><br><span class=\"line\">        <span class=\"comment\">// 关闭文件处理器</span></span><br><span class=\"line\">        vShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        fShaderFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 转换数据流到string</span></span><br><span class=\"line\">        vertexCode   = vShaderStream.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">        fragmentCode = fShaderStream.<span class=\"built_in\">str</span>();     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">catch</span>(std::ifstream::failure e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* vShaderCode = vertexCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* fShaderCode = fragmentCode.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    [...]</span><br></pre></td></tr></table></figure>\n<p>下一步，我们需要编译和链接着色器。注意，我们也将检查编译&#x2F;链接是否失败，如果失败则打印编译时错误，调试的时候这些错误输出会及其重要（你总会需要这些错误日志的）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. 编译着色器</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> vertex, fragment;</span><br><span class=\"line\"><span class=\"type\">int</span> success;</span><br><span class=\"line\"><span class=\"type\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顶点着色器</span></span><br><span class=\"line\">vertex = <span class=\"built_in\">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class=\"line\"><span class=\"built_in\">glShaderSource</span>(vertex, <span class=\"number\">1</span>, &amp;vShaderCode, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">glCompileShader</span>(vertex);</span><br><span class=\"line\"><span class=\"comment\">// 打印编译错误（如果有的话）</span></span><br><span class=\"line\"><span class=\"built_in\">glGetShaderiv</span>(vertex, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetShaderInfoLog</span>(vertex, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 片段着色器也类似</span></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 着色器程序</span></span><br><span class=\"line\">ID = <span class=\"built_in\">glCreateProgram</span>();</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(ID, vertex);</span><br><span class=\"line\"><span class=\"built_in\">glAttachShader</span>(ID, fragment);</span><br><span class=\"line\"><span class=\"built_in\">glLinkProgram</span>(ID);</span><br><span class=\"line\"><span class=\"comment\">// 打印连接错误（如果有的话）</span></span><br><span class=\"line\"><span class=\"built_in\">glGetProgramiv</span>(ID, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGetProgramInfoLog</span>(ID, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除着色器，它们已经链接到我们的程序中了，已经不再需要了</span></span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(vertex);</span><br><span class=\"line\"><span class=\"built_in\">glDeleteShader</span>(fragment);</span><br></pre></td></tr></table></figure>\n\n<p>use函数非常简单：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUseProgram</span>(ID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>uniform的setter函数也很类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setBool</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">bool</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), (<span class=\"type\">int</span>)value); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setInt</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">int</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUniform1i</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), value); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setFloat</span><span class=\"params\">(<span class=\"type\">const</span> std::string &amp;name, <span class=\"type\">float</span> value)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">glUniform1f</span>(<span class=\"built_in\">glGetUniformLocation</span>(ID, name.<span class=\"built_in\">c_str</span>()), value); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>现在我们就写完了一个完整的着色器类。使用这个着色器类很简单；只要创建一个着色器对象，从那一点开始我们就可以开始使用了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Shader <span class=\"title\">ourShader</span><span class=\"params\">(<span class=\"string\">&quot;path/to/shaders/shader.vs&quot;</span>, <span class=\"string\">&quot;path/to/shaders/shader.fs&quot;</span>)</span></span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">while</span>(...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ourShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">    ourShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;someUniform&quot;</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">DrawStuff</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们把顶点和片段着色器储存为两个叫做shader.vs和shader.fs的文件。你可以使用自己喜欢的名字命名着色器文件；我自己觉得用<code>.vert</code>和<code>.frag</code>作为扩展名很直观。</p>\n<p>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*DEL_BUFFER)</span> <span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_WIDTH 800</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SCREEN_HEIGH 600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_VERTEX_FILE_PATH <span class=\"string\">&quot;./vertex01.vert&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEFAULT_FRAGMENT_FILE_PATH <span class=\"string\">&quot;./fragment01.frag&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> vertices2[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 位置              // 颜色</span></span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右下</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 左下</span></span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>    <span class=\"comment\">// 顶部</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow* window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bindBufferLocal</span><span class=\"params\">(GLuint &amp;VAO, GLuint VBO, GLuint EBO)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER, <span class=\"built_in\">sizeof</span>(vertices2), vertices2, GL_STATIC_DRAW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">glfwInit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\">    <span class=\"comment\">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); OS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    GLFWwindow* window = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;LearnOpenGL&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">    <span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GLuint VAO = <span class=\"number\">0</span>,VBO = <span class=\"number\">0</span>,EBO = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bindBufferLocal</span>(VAO,VBO,EBO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// shader</span></span><br><span class=\"line\">    <span class=\"function\">MyShader <span class=\"title\">myshader</span><span class=\"params\">(DEFAULT_VERTEX_FILE_PATH, DEFAULT_FRAGMENT_FILE_PATH)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">glfwWindowShouldClose</span>(window))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">        <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        myshader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> time = <span class=\"built_in\">glfwGetTime</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> st = <span class=\"built_in\">sin</span>(time)/<span class=\"number\">2</span> + <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">        myshader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;colorSin&quot;</span>, st);</span><br><span class=\"line\">        <span class=\"built_in\">glBindVertexArray</span>(VAO);</span><br><span class=\"line\">        <span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">        <span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glDeleteVertexArrays</span>(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteBuffers</span>(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">    <span class=\"built_in\">glDeleteProgram</span>(myshader.ID);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">glfwTerminate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"opengl 光照(2)","date":"2024-03-23T00:16:40.000Z","_content":"![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 投光物(光源)\n我们目前使用的光照都来自于空间中的一个点。它能给我们不错的效果，但现实世界中，我们有很多种类的光照，每种的表现都不同。将光投射(Cast)到物体的光源叫做投光物(Light Caster)。在这一节中，我们将会讨论几种不同类型的投光物。学会模拟不同种类的光源是又一个能够进一步丰富场景的工具。\n\n我们首先将会讨论定向光(Directional Light)，接下来是点光源(Point Light)，它是我们之前学习的光源的拓展，最后我们将会讨论聚光(Spotlight)。在下一节中我们将讨论如何将这些不同种类的光照类型整合到一个场景之中。\n\n## 平行光\n当一个光源处于很远的地方时，来自光源的每条光线就会近似于互相平行。不论物体和/或者观察者的位置，看起来好像所有的光都来自于同一个方向。当我们使用一个假设光源处于无限远处的模型时，它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的。\n\n定向光非常好的一个例子就是太阳。太阳距离我们并不是无限远，但它已经远到在光照计算中可以把它视为无限远了。所以来自太阳的所有光线将被模拟为平行光线，我们可以在下图看到：\n\n![2024-03-23T161923](2024-03-23T161923.png)\n\n因为平行光假定是跟距离没有关系的，所以平行光唯一的一个常量就是方向。\n\n```glsl\nstruct Light {\n    // vec3 position; // 使用定向光就不再需要了\n    vec3 direction;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n...\nvoid main()\n{\n  vec3 lightDir = normalize(-light.direction);\n  ...\n}\n```\n同样的，我们的平行光也是一种光，所以也有三种分量：环境分量，漫反射分量，以及镜面反射分量。\n这里需要注意，我们定义Light中的 direction，一般是光发散出去的方向。但是我们计算各个分量的时候，需要用到由物体到光的方向，所以我们这里需要对光方向取反.\n\n这里，如果我们在场景中尝试渲染多个不同的立方体，那么我们会看到冲着光方向的那面会变的更亮，反之更暗：\n![2024-03-23T163256](2024-03-23T163256.png)\n\n## 点光源\n我们之前介绍光源的额时候，使用的都是一个模拟的点光源，我们平时生活中的灯泡也可而已算作点光源。点光源对一个物体照亮的程度是不一样的，离点光源越近的地方会更亮一些：\n![2024-03-23T165605](2024-03-23T165605.png)\n在之前的教程中，我们一直都在使用一个（简化的）点光源。我们在给定位置有一个光源，它会从它的光源位置开始朝着所有方向散射光线。然而，我们定义的光源模拟的是永远不会衰减的光线，这看起来像是光源亮度非常的强。在大部分的3D模拟中，我们都希望模拟的光源仅照亮光源附近的区域而不是整个场景。\n\n如果你将10个箱子加入到上一节光照场景中，你会注意到在最后面的箱子和在灯面前的箱子都以相同的强度被照亮，并没有定义一个公式来将光随距离衰减。我们希望在后排的箱子与前排的箱子相比仅仅是被轻微地照亮。\n\n### 衰减\n随着光线传播距离的增长逐渐削减光的强度通常叫做衰减(Attenuation)。随距离减少光强度的一种方式是使用一个线性方程。这样的方程能够随着距离的增长线性地减少光的强度，从而让远处的物体更暗。然而，这样的线性方程通常会看起来比较假。在现实世界中，灯在近处通常会非常亮，但随着距离的增加光源的亮度一开始会下降非常快，但在远处时剩余的光强度就会下降的非常缓慢了。所以，我们需要一个不同的公式来减少光的强度。\n\n幸运的是一些聪明的人已经帮我们解决了这个问题。下面这个公式根据片段距光源的距离计算了衰减值，之后我们会将它乘以光的强度向量：\n![2024-03-23T165733](2024-03-23T165733.png)\n![2024-03-23T165742](2024-03-23T165742.png)\n![2024-03-23T165745](2024-03-23T165745.png)\n你可以看到光在近距离的时候有着最高的强度，但随着距离增长，它的强度明显减弱，并缓慢地在距离大约100的时候强度接近0。这正是我们想要的。\n\n**选择正确的值**\n但是，该对这三个项设置什么值呢？正确地设定它们的值取决于很多因素：环境、希望光覆盖的距离、光的类型等。在大多数情况下，这都是经验的问题，以及适量的调整。下面这个表格显示了模拟一个（大概）真实的，覆盖特定半径（距离）的光源时，这些项可能取的一些值。第一列指定的是在给定的三项时光所能覆盖的距离。这些值是大多数光源很好的起始点，它们由Ogre3D的Wiki所提供：\n![2024-03-23T170103](2024-03-23T170103.png)\n\n这里建议直接参考这个表抄数值即可。\n接下来在glsl中定义一个点光源类型：\n```glsl\nstruct Light {\n    vec3 position;  \n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n```\nc++中需要把对应的属性赋值:\n\n```c++\nlightingShader.setFloat(\"light.constant\",  1.0f);\nlightingShader.setFloat(\"light.linear\",    0.09f);\nlightingShader.setFloat(\"light.quadratic\", 0.032f);\n```\nglsl中添加计算衰减的方法：\n```glsl\nfloat distance    = length(light.position - FragPos);\nfloat attenuation = 1.0 / (light.constant + light.linear * distance +  light.quadratic * (distance * distance));\n```\n\n最后把结果的三个分量乘这个强度:\n```glsl\nambient  *= attenuation; \ndiffuse  *= attenuation;\nspecular *= attenuation;\n```\n现在，我们的点光源就完成了\n\n## 聚光\n我们要讨论的最后一种类型的光是聚光(Spotlight)。聚光是位于环境中某个位置的光源，它只朝一个特定方向而不是所有方向照射光线。这样的结果就是只有在聚光方向的特定半径内的物体才会被照亮，其它的物体都会保持黑暗。聚光很好的例子就是路灯或手电筒。\n\nOpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(Cutoff Angle)来表示的，切光角指定了聚光的半径（译注：是圆锥的半径不是距光源距离那个半径）。对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。下面这张图会让你明白聚光是如何工作的：\n![2024-03-23T170859](2024-03-23T170859.png)\n\n我们这里需要比较两个角度，一个是\n\n手电筒就是一个典型的聚光灯\n\n### 手电筒\n手电筒(Flashlight)是一个位于观察者位置的聚光，通常它都会瞄准玩家视角的正前方。基本上说，手电筒就是普通的聚光，但它的位置和方向会随着玩家的位置和朝向不断更新。\n\n所以，在片段着色器中我们需要的值有聚光的位置向量（来计算光的方向向量）、聚光的方向向量和一个切光角。我们可以将它们储存在Light结构体中：\n\n```glsl\nstruct Light {\n    vec3  position;\n    vec3  direction;\n    float cutOff;\n    ...\n};\n```\n接下来我们将合适的值传到着色器中：\n```c++\nlightingShader.setVec3(\"light.position\",  camera.Position);\nlightingShader.setVec3(\"light.direction\", camera.Front);\nlightingShader.setFloat(\"light.cutOff\",   glm::cos(glm::radians(12.5f)));\n```\n需要注意，我们这里传入的并不是角度，而是角度的cos。因为我们上面可以看到，我们需要比较片段-光源与光源方向指夹角。但是在glsl中，我们有dot叉乘向量的操作，这个操作得到的就是向量间的cos。所以我们这里传入cos的话可以直接放在glsl中比较叉乘结果即可。\n\n逻辑如下:\n```glsl\nfloat theta = dot(lightDir, normalize(-light.direction));\n\nif(theta > light.cutOff) \n{       \n  // 执行光照计算\n}\nelse  // 否则，使用环境光，让场景在聚光之外时不至于完全黑暗\n  color = vec4(light.ambient * vec3(texture(material.diffuse, TexCoords)), 1.0);\n```\n由于我们使用的是cos比较，而cos在0-90°区间是递减的，所以我们应当保证当前片段大于光源的cutOff时，来渲染光效。\n\n### 平滑/软化边缘\n如果我们上面成功的写出了一个聚光，那么我们会看到聚光的周围有些不真实：\n![2024-03-23T172606](2024-03-23T172606.png)\n因为我们真实的聚光边缘肯定是要有一定的平滑过渡的。\n所以我们要渐进式的对光渲染,除了outoff外，我们还需要一个outcusoff来表示光外围的角度，我们需要对角度进行判断段，如果角度cos大于cutoff，那么全量渲染，如果角度落在了cutoff与outcutoff之间，则需要根据之间的比例来确定不同的光亮强度.\n\n![2024-03-23T172927](2024-03-23T172927.png)\n\n```glsl\nfloat theta     = dot(lightDir, normalize(-light.direction));\nfloat epsilon   = light.cutOff - light.outerCutOff;\nfloat intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);    \n...\n// 将不对环境光做出影响，让它总是能有一点光\ndiffuse  *= intensity;\nspecular *= intensity;\n...\n```\n\n# 多光源\n多光源就是假设场景中有多个光源，我们要做的就是把他们的光照影响叠加输出。\n需要注意，每一种光都同时具有三个分量：环境，漫反射，镜面反射。所以我们可以尝试抽象出来三个方法来分别对其计算。\n这里直接贴出我自己写的代码:\n片段着色器:\n```glsl\n#version 330 core\nin vec3 FragPos;  \nin vec3 Normal;\nin vec2 texCoord;\n\nout vec4 FragColor;\n\nstruct Material{\n    sampler2D diffuse;\n    sampler2D specular;\n    float shininess;\n};\n\nstruct DirectionalLight{\n    vec3 direction;\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nstruct PointLight{\n    vec3 position;\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n\nstruct PotLight {\n    vec3  position;\n    vec3  direction;\n    float cutOff;\n    float outerCutOff;\n\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n\n#define NR_POINT_LIGHTS 4\n\nuniform Material material;\nuniform vec3 viewPos;\n\nuniform DirectionalLight dirLight;\nuniform PointLight pointLights[NR_POINT_LIGHTS];\nuniform PotLight potLight ;\n\n\n\nvec3 ambientCalc (vec3 textureVec3, vec3 ambient) {\n    return textureVec3 * ambient;\n}\n\nvec3 diffuseCalc(vec3 textureVec3, vec3 diffuse, vec3 norm, vec3 lightDir){\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    return  diffuse *(diff * textureVec3); // 点乘结果跟灯光相乘\n}\n\nvec3 specularCalc(vec3 textureVec3, vec3 specular, vec3 viewDir, vec3 reflectDir){\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n    return specular * (spec *  textureVec3 );\n}\n\nvec3 dirLightCalc(DirectionalLight dirLight, vec3 basicDiffuse , vec3 basicSpecular,vec3 norm, vec3 viewDir){\n    vec3 lightDir = normalize(-dirLight.direction);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n\n    vec3 ambient = ambientCalc(basicDiffuse, dirLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, dirLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, dirLight.specular,viewDir, reflectDir);\n\n    ambient*=dirLight.color;\n        diffuse*=dirLight.color;\n\n    specular*=dirLight.color;\n\n    return ambient + diffuse + specular;\n}\n\nvec3 pointLightCalc(PointLight pointLight, vec3 basicDiffuse , vec3 basicSpecular, vec3 fragPos, vec3 norm, vec3 viewDir ){\n    vec3 lightDir = normalize(pointLight.position - fragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n    float distance    = length(pointLight.position - FragPos);\n    float attenuation = 1.0 / (pointLight.constant + pointLight.linear * distance + \n                pointLight.quadratic * (distance * distance));\n\n    vec3 ambient = ambientCalc(basicDiffuse, pointLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, pointLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, pointLight.specular,viewDir, reflectDir);\n\n    ambient*=pointLight.color;\n        diffuse*=pointLight.color;\n\n    specular*=pointLight.color;\n\n    ambient *= attenuation;\n    diffuse *= attenuation;\n    specular *= attenuation;\n\n    return ambient + diffuse + specular;\n}\n\nvec3 potLightCalc(PotLight potLight, vec3 basicDiffuse , vec3 basicSpecular,vec3 fragPos, vec3 norm, vec3 viewDir ){\n    vec3 lightDir = normalize(potLight.position - fragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n\n    float distance    = length(potLight.position - FragPos);\n    float attenuation = 1.0 / (potLight.constant + potLight.linear * distance + \n                potLight.quadratic * (distance * distance));\n\n\n\n    vec3 ambient = ambientCalc(basicDiffuse, potLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, potLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, potLight.specular,viewDir, reflectDir);\n\n    // spotlight (soft edges)\n    float theta = dot(lightDir, normalize(-potLight.direction)); \n    float epsilon = (potLight.cutOff - potLight.outerCutOff);\n    float intensity = clamp((theta - potLight.outerCutOff) / epsilon, 0.0, 1.0);\n    diffuse  *= intensity;\n    specular *= intensity;\n\n    ambient*=potLight.color;\n        diffuse*=potLight.color;\n\n    specular*=potLight.color;\n\n    ambient *= attenuation;\n    diffuse *= attenuation;\n    specular *= attenuation;\n\n    return ambient + diffuse + specular;\n}\n\n\nvoid main()\n{\n    vec3 basicDiffuse = vec3(texture(material.diffuse,texCoord)); \n    vec3 basicSpecular = vec3(texture(material.specular,texCoord));\n\n    vec3 norm = normalize(Normal); // 标准化法向量\n    vec3 viewDir = normalize(viewPos - FragPos);\n\n    vec3 result = vec3(0);\n    result = dirLightCalc(dirLight, basicDiffuse, basicSpecular, norm, viewDir);\n\n    for(int i = 0; i < 1; i++)\n        result += pointLightCalc(pointLights[i], basicDiffuse, basicSpecular, FragPos,norm, viewDir );\n    \n    result += potLightCalc(potLight, basicDiffuse, basicSpecular, FragPos,norm, viewDir );\n\n    FragColor = vec4(result,1.0);\n}\n```\n顶点着色器:\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aNormal;\nlayout (location = 2) in vec2 aTexCoord;\n\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\nuniform mat3 reverseModel;\n\nout vec3 FragPos;  \nout vec3 Normal;\nout vec2 texCoord;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    FragPos = vec3(model * vec4(aPos, 1.0));\n    Normal = reverseModel * aNormal;\n    texCoord = aTexCoord;\n}\n```\n\nc++代码:\n```c++\n#include \"my_glfw.h\"\n#include \"MyPerspectCamera.h\"\n#include \"MyShader.h\"\n#include \"myTexture.h\"\n#include \"my_camera_input_procecssor.h\"\n#include \"DirectLight.h\"\n#include \"PointLight.h\"\n#include \"SpotLight.h\"\n#include \"MyMaterial.h\"\n\nextern MyPerspectCamera myPerspectCamera;\nextern GLFWwindow* window;\n\nvoid debug(int x) {\n\tif (x % 1000 == 0) {\n\t\tstd::cout << \"========= x ========= start ==========\" << std::endl;\n\t\tglCheckError();\n\t\tstd::cout << \"========= x ========= end ==========\" << std::endl;\n\n\t}\n}\n\nint test0318() {\n\t// D:\\files\\doc\\shaders\\colortest\n\tinitGlfw();\n\tconst char* vertexPath = \"D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\vertex.glsl\";\n\tconst char* fragPath = \"D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\frag.glsl\";\n\n\tconst char* diffuseTexturePath = \"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2.png\";\n\tconst char* specularTexturePath = \"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2_specular.png\";\n\n\twindow = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"hello 0314\", NULL, NULL);\n\n\tstd::cout << window << std::endl;\n\tglfwMakeContextCurrent(window);\n\tglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\tint f = gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);\n\n\tglfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n\n\tmyPerspectCamera = MyPerspectCamera(VEC3(1, 1, -3.f), VEC3(1, 1, 0), VEC3(0, 1, 0));\n\tregist_my_camera();\n\n\tfloat vertex[] = {\n\t\t// positions          // normals           // texture coords\n\t\t-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,\n\t\t 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,\n\n\t\t-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,\n\t\t-0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,\n\t\t-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,\n\n\t\t-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\n\t\t 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\n\t\t-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,\n\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f\n\t};\n\tGLuint indices[] = {\n\t\t1,\n\t};\n\n\tglm::vec3 cubePositions[] = {\n\tglm::vec3(0.0f,  0.0f,  0.0f),\n\tglm::vec3(2.0f,  5.0f, -15.0f),\n\tglm::vec3(-1.5f, -2.2f, -2.5f),\n\tglm::vec3(-3.8f, -2.0f, -12.3f),\n\tglm::vec3(2.4f, -0.4f, -3.5f),\n\tglm::vec3(-1.7f,  3.0f, -7.5f),\n\tglm::vec3(1.3f, -2.0f, -2.5f),\n\tglm::vec3(1.5f,  2.0f, -2.5f),\n\tglm::vec3(1.5f,  0.2f, -1.5f),\n\tglm::vec3(-1.3f,  1.0f, -1.5f)\n\t};\n\n\t// VAO;\n\tGLuint objVAO, VBO;\n\tglGenVertexArrays(1,&objVAO);\n\tglBindVertexArray(objVAO);\n\n\tglGenBuffers(1,&VBO);\n\tglBindBuffer(GL_ARRAY_BUFFER,VBO);\n\tglBufferData(GL_ARRAY_BUFFER,sizeof(vertex),vertex,GL_STATIC_DRAW);\n\n\t// ATTRIBUTE\n\tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);\n\tglEnableVertexAttribArray(0);\n\tglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));\n\tglEnableVertexAttribArray(1);\n\tglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));\n\tglEnableVertexAttribArray(2);\n\n\tGLuint lightVAO;\n\tglGenVertexArrays(1,&lightVAO);\n\tglBindVertexArray(lightVAO);\n\tglBindBuffer(GL_ARRAY_BUFFER, VBO);\n\tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);\n\tglEnableVertexAttribArray(0);\n\n\tglBindVertexArray(0);// unbind vao\n\n\t// shader\n\tMyShader objShader(vertexPath,fragPath);\n\t//MyShader lightShader(\"\", \"\");\n\n\tmyTexture objDiffuse(diffuseTexturePath, GL_RGBA, GL_RGBA);\n\tmyTexture objSpecular(specularTexturePath, GL_RGBA, GL_RGBA);\n\n\tLight baseLight1 = Light(glm::vec3(0.2f,0.5f,0.2f), glm::vec3(0.05f, 0.05f, 0.05f), glm::vec3(0.4f, 0.4f, 0.4f), glm::vec3(0.5f, 0.5f, 0.5f));\n\tLight baseLight2 = Light(glm::vec3(0.5f), glm::vec3(0.05f, 0.05f, 0.05f), glm::vec3(0.8f, 0.8f, 0.8f), glm::vec3(1.0f, 1.0f, 1.0f));\n\tLight baseLight3 = Light(glm::vec3(0.5f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(1.0f, 1.0f, 1.0f), glm::vec3(1.0f, 1.0f, 1.0f));\n\n\tDirectLight dirLight = DirectLight(baseLight1,glm::vec3(-0.2f, -1.0f, -0.3f));\n\n\tPointLight pointLights[] = {\n\t\tPointLight(0,baseLight1,glm::vec3(0.7f,  0.2f,  2.0f),1.0f,0.09f,0.032f),\n\t};\n\n\tSpotLight spotLight = SpotLight(baseLight3,\n\t\t&myPerspectCamera,\n\t\tglm::cos(glm::radians(12.5f)), glm::cos(glm::radians(15.f)),\n\t\t1,0.09f,0.032f);\n\n\tMyMaterial myMaterial(&objDiffuse, &objSpecular,32.f);\n\tint x = 0;\n\t\n\t//model = glm::scale(model,glm::vec3(5));\n\t_MAIN_LOOP{\n\t\tdebug(x);\n\t\tglClearColor(baseLight1.color[0], baseLight1.color[1], baseLight1.color[2], 1.0f);\n\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\tdebug(x);\n\t\tglEnable(GL_DEPTH_TEST);\n\t\tprocessInput(window);\n\t\t// render obj\n\t\tobjShader.use();\n\t\tdebug(x);\n\t\tglBindVertexArray(objVAO);\n\t\tobjShader.setMatrix4(\"view\",myPerspectCamera.vieMatrix());\n\t\tobjShader.setMatrix4(\"projection\",myPerspectCamera.projection());\n\t\tobjShader.setFloat3(\"viewPos\", myPerspectCamera.Position);\n\t\tdebug(x);\n\t\t// update model maybe\n\n\t\tdebug(x);\n\t\tdirLight.setToUniform(&objShader);\n\t\tdebug(x);\n\t\tfor (PointLight pt : pointLights) {\n\t\t\tpt.setToUniform(&objShader);\n\t\t}\n\t\tdebug(x);\n\t\tspotLight.setToUniform(&objShader);\n\t\tmyMaterial.setToUniform(&objShader);\n\n\t\tfor (int i = 0; i < sizeof(cubePositions)/(sizeof(glm::vec3));i++) {\n\t\t\tglm::mat4 model(1.f);\n\t\t\tmodel = glm::translate(model, cubePositions[i]);\n\t\t\tfloat angle = 20.0f * i;\n\t\t\tmodel = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));\n\t\t\tglm::mat3 reverseModel = glm::mat3(glm::transpose(glm::inverse(model)));\n\t\t\tobjShader.setMatrix4(\"model\", model);\n\t\t\tobjShader.setMatrix3(\"reverseModel\", reverseModel);\n\t\t\tglDrawArrays(GL_TRIANGLES, 0, 36);\n\t\t}\n\t\tdebug(x);\n\t\t// render light\n\n\t\tglfwSwapBuffers(window);\n\t\tglfwPollEvents();\n\t\tdebug(x);\n\t\tx++;\n\t}\n\n\treturn 0;\n}\n```\n光照类：\n```c++\n#include \"DirectLight.h\"\n\nvoid DirectLight::setToUniform(MyShader* shader) {\n\tstd::string prefix = \"dirLight.\";\n\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.color[0], this->myLight.color[1], this->myLight.color[2]);\n\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\n\ttmpPrefix = prefix + \"direction\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->direction[0], this->direction[1], this->direction[2]);\n\n}\n#include \"PointLight.h\"\n\nvoid PointLight::setToUniform(MyShader* shader)\n{\n\tstd::string prefix = \"pointLights[\" + std::to_string(this->indices) + \"].\";\n\t// color\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.color[0], this->myLight.color[1], this->myLight.color[2]);\n\t// ambient\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\t// diffuse\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\t// specular\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\t// position\n\ttmpPrefix = prefix + \"position\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->position[0], this->position[1], this->position[2]);\n\n\n\t//float constant;\n\ttmpPrefix = prefix + \"constant\";\n\tshader->setFloat(tmpPrefix.c_str(), this->constant);\n\t//float linear;\n\ttmpPrefix = prefix + \"linear\";\n\tshader->setFloat(tmpPrefix.c_str(), this->linear);\n\t//float quadratic;\n\ttmpPrefix = prefix + \"quadratic\";\n\tshader->setFloat(tmpPrefix.c_str(), this->quadratic);\n}\n\n\n#include \"SpotLight.h\"\n#include <string>\n\nvoid SpotLight::setToUniform  (MyShader* shader) {\n\tstd::string prefix = \"potLight.\";\n\t// color\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(),this->myLight.color[0], this->myLight.color[1], this->myLight.color[2] );\n\t// ambient\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\t// diffuse\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\t// specular\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\t// position\n\ttmpPrefix = prefix + \"position\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->pos->getPosition()[0], this->pos->getPosition()[1], this->pos->getPosition()[2]);\n\t// specular\n\ttmpPrefix = prefix + \"direction\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->pos->getDirection()[0], this->pos->getDirection()[1], this->pos->getDirection()[2]);\n\ttmpPrefix = prefix + \"cutOff\";\n\tshader->setFloat(tmpPrefix.c_str(), this->cutOff);\n\ttmpPrefix = prefix + \"outerCutOff\";\n\tshader->setFloat(tmpPrefix.c_str(), this->outerCutOff);\n\n\t//float constant;\n\ttmpPrefix = prefix + \"constant\";\n\tshader->setFloat(tmpPrefix.c_str(), this->constant);\n\t//float linear;\n\ttmpPrefix = prefix + \"linear\";\n\tshader->setFloat(tmpPrefix.c_str(), this->linear);\n\t//float quadratic;\n\ttmpPrefix = prefix + \"quadratic\";\n\tshader->setFloat(tmpPrefix.c_str(), this->quadratic);\n}\n```\n\n\n","source":"_posts/opengl_color_end.md","raw":"---\ntitle: opengl 光照(2)\ndate: 2024-03-23T16:16:40+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 投光物(光源)\n我们目前使用的光照都来自于空间中的一个点。它能给我们不错的效果，但现实世界中，我们有很多种类的光照，每种的表现都不同。将光投射(Cast)到物体的光源叫做投光物(Light Caster)。在这一节中，我们将会讨论几种不同类型的投光物。学会模拟不同种类的光源是又一个能够进一步丰富场景的工具。\n\n我们首先将会讨论定向光(Directional Light)，接下来是点光源(Point Light)，它是我们之前学习的光源的拓展，最后我们将会讨论聚光(Spotlight)。在下一节中我们将讨论如何将这些不同种类的光照类型整合到一个场景之中。\n\n## 平行光\n当一个光源处于很远的地方时，来自光源的每条光线就会近似于互相平行。不论物体和/或者观察者的位置，看起来好像所有的光都来自于同一个方向。当我们使用一个假设光源处于无限远处的模型时，它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的。\n\n定向光非常好的一个例子就是太阳。太阳距离我们并不是无限远，但它已经远到在光照计算中可以把它视为无限远了。所以来自太阳的所有光线将被模拟为平行光线，我们可以在下图看到：\n\n![2024-03-23T161923](2024-03-23T161923.png)\n\n因为平行光假定是跟距离没有关系的，所以平行光唯一的一个常量就是方向。\n\n```glsl\nstruct Light {\n    // vec3 position; // 使用定向光就不再需要了\n    vec3 direction;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n...\nvoid main()\n{\n  vec3 lightDir = normalize(-light.direction);\n  ...\n}\n```\n同样的，我们的平行光也是一种光，所以也有三种分量：环境分量，漫反射分量，以及镜面反射分量。\n这里需要注意，我们定义Light中的 direction，一般是光发散出去的方向。但是我们计算各个分量的时候，需要用到由物体到光的方向，所以我们这里需要对光方向取反.\n\n这里，如果我们在场景中尝试渲染多个不同的立方体，那么我们会看到冲着光方向的那面会变的更亮，反之更暗：\n![2024-03-23T163256](2024-03-23T163256.png)\n\n## 点光源\n我们之前介绍光源的额时候，使用的都是一个模拟的点光源，我们平时生活中的灯泡也可而已算作点光源。点光源对一个物体照亮的程度是不一样的，离点光源越近的地方会更亮一些：\n![2024-03-23T165605](2024-03-23T165605.png)\n在之前的教程中，我们一直都在使用一个（简化的）点光源。我们在给定位置有一个光源，它会从它的光源位置开始朝着所有方向散射光线。然而，我们定义的光源模拟的是永远不会衰减的光线，这看起来像是光源亮度非常的强。在大部分的3D模拟中，我们都希望模拟的光源仅照亮光源附近的区域而不是整个场景。\n\n如果你将10个箱子加入到上一节光照场景中，你会注意到在最后面的箱子和在灯面前的箱子都以相同的强度被照亮，并没有定义一个公式来将光随距离衰减。我们希望在后排的箱子与前排的箱子相比仅仅是被轻微地照亮。\n\n### 衰减\n随着光线传播距离的增长逐渐削减光的强度通常叫做衰减(Attenuation)。随距离减少光强度的一种方式是使用一个线性方程。这样的方程能够随着距离的增长线性地减少光的强度，从而让远处的物体更暗。然而，这样的线性方程通常会看起来比较假。在现实世界中，灯在近处通常会非常亮，但随着距离的增加光源的亮度一开始会下降非常快，但在远处时剩余的光强度就会下降的非常缓慢了。所以，我们需要一个不同的公式来减少光的强度。\n\n幸运的是一些聪明的人已经帮我们解决了这个问题。下面这个公式根据片段距光源的距离计算了衰减值，之后我们会将它乘以光的强度向量：\n![2024-03-23T165733](2024-03-23T165733.png)\n![2024-03-23T165742](2024-03-23T165742.png)\n![2024-03-23T165745](2024-03-23T165745.png)\n你可以看到光在近距离的时候有着最高的强度，但随着距离增长，它的强度明显减弱，并缓慢地在距离大约100的时候强度接近0。这正是我们想要的。\n\n**选择正确的值**\n但是，该对这三个项设置什么值呢？正确地设定它们的值取决于很多因素：环境、希望光覆盖的距离、光的类型等。在大多数情况下，这都是经验的问题，以及适量的调整。下面这个表格显示了模拟一个（大概）真实的，覆盖特定半径（距离）的光源时，这些项可能取的一些值。第一列指定的是在给定的三项时光所能覆盖的距离。这些值是大多数光源很好的起始点，它们由Ogre3D的Wiki所提供：\n![2024-03-23T170103](2024-03-23T170103.png)\n\n这里建议直接参考这个表抄数值即可。\n接下来在glsl中定义一个点光源类型：\n```glsl\nstruct Light {\n    vec3 position;  \n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n```\nc++中需要把对应的属性赋值:\n\n```c++\nlightingShader.setFloat(\"light.constant\",  1.0f);\nlightingShader.setFloat(\"light.linear\",    0.09f);\nlightingShader.setFloat(\"light.quadratic\", 0.032f);\n```\nglsl中添加计算衰减的方法：\n```glsl\nfloat distance    = length(light.position - FragPos);\nfloat attenuation = 1.0 / (light.constant + light.linear * distance +  light.quadratic * (distance * distance));\n```\n\n最后把结果的三个分量乘这个强度:\n```glsl\nambient  *= attenuation; \ndiffuse  *= attenuation;\nspecular *= attenuation;\n```\n现在，我们的点光源就完成了\n\n## 聚光\n我们要讨论的最后一种类型的光是聚光(Spotlight)。聚光是位于环境中某个位置的光源，它只朝一个特定方向而不是所有方向照射光线。这样的结果就是只有在聚光方向的特定半径内的物体才会被照亮，其它的物体都会保持黑暗。聚光很好的例子就是路灯或手电筒。\n\nOpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(Cutoff Angle)来表示的，切光角指定了聚光的半径（译注：是圆锥的半径不是距光源距离那个半径）。对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。下面这张图会让你明白聚光是如何工作的：\n![2024-03-23T170859](2024-03-23T170859.png)\n\n我们这里需要比较两个角度，一个是\n\n手电筒就是一个典型的聚光灯\n\n### 手电筒\n手电筒(Flashlight)是一个位于观察者位置的聚光，通常它都会瞄准玩家视角的正前方。基本上说，手电筒就是普通的聚光，但它的位置和方向会随着玩家的位置和朝向不断更新。\n\n所以，在片段着色器中我们需要的值有聚光的位置向量（来计算光的方向向量）、聚光的方向向量和一个切光角。我们可以将它们储存在Light结构体中：\n\n```glsl\nstruct Light {\n    vec3  position;\n    vec3  direction;\n    float cutOff;\n    ...\n};\n```\n接下来我们将合适的值传到着色器中：\n```c++\nlightingShader.setVec3(\"light.position\",  camera.Position);\nlightingShader.setVec3(\"light.direction\", camera.Front);\nlightingShader.setFloat(\"light.cutOff\",   glm::cos(glm::radians(12.5f)));\n```\n需要注意，我们这里传入的并不是角度，而是角度的cos。因为我们上面可以看到，我们需要比较片段-光源与光源方向指夹角。但是在glsl中，我们有dot叉乘向量的操作，这个操作得到的就是向量间的cos。所以我们这里传入cos的话可以直接放在glsl中比较叉乘结果即可。\n\n逻辑如下:\n```glsl\nfloat theta = dot(lightDir, normalize(-light.direction));\n\nif(theta > light.cutOff) \n{       \n  // 执行光照计算\n}\nelse  // 否则，使用环境光，让场景在聚光之外时不至于完全黑暗\n  color = vec4(light.ambient * vec3(texture(material.diffuse, TexCoords)), 1.0);\n```\n由于我们使用的是cos比较，而cos在0-90°区间是递减的，所以我们应当保证当前片段大于光源的cutOff时，来渲染光效。\n\n### 平滑/软化边缘\n如果我们上面成功的写出了一个聚光，那么我们会看到聚光的周围有些不真实：\n![2024-03-23T172606](2024-03-23T172606.png)\n因为我们真实的聚光边缘肯定是要有一定的平滑过渡的。\n所以我们要渐进式的对光渲染,除了outoff外，我们还需要一个outcusoff来表示光外围的角度，我们需要对角度进行判断段，如果角度cos大于cutoff，那么全量渲染，如果角度落在了cutoff与outcutoff之间，则需要根据之间的比例来确定不同的光亮强度.\n\n![2024-03-23T172927](2024-03-23T172927.png)\n\n```glsl\nfloat theta     = dot(lightDir, normalize(-light.direction));\nfloat epsilon   = light.cutOff - light.outerCutOff;\nfloat intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);    \n...\n// 将不对环境光做出影响，让它总是能有一点光\ndiffuse  *= intensity;\nspecular *= intensity;\n...\n```\n\n# 多光源\n多光源就是假设场景中有多个光源，我们要做的就是把他们的光照影响叠加输出。\n需要注意，每一种光都同时具有三个分量：环境，漫反射，镜面反射。所以我们可以尝试抽象出来三个方法来分别对其计算。\n这里直接贴出我自己写的代码:\n片段着色器:\n```glsl\n#version 330 core\nin vec3 FragPos;  \nin vec3 Normal;\nin vec2 texCoord;\n\nout vec4 FragColor;\n\nstruct Material{\n    sampler2D diffuse;\n    sampler2D specular;\n    float shininess;\n};\n\nstruct DirectionalLight{\n    vec3 direction;\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nstruct PointLight{\n    vec3 position;\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n\nstruct PotLight {\n    vec3  position;\n    vec3  direction;\n    float cutOff;\n    float outerCutOff;\n\n    vec3 color;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n\n    float constant;\n    float linear;\n    float quadratic;\n};\n\n#define NR_POINT_LIGHTS 4\n\nuniform Material material;\nuniform vec3 viewPos;\n\nuniform DirectionalLight dirLight;\nuniform PointLight pointLights[NR_POINT_LIGHTS];\nuniform PotLight potLight ;\n\n\n\nvec3 ambientCalc (vec3 textureVec3, vec3 ambient) {\n    return textureVec3 * ambient;\n}\n\nvec3 diffuseCalc(vec3 textureVec3, vec3 diffuse, vec3 norm, vec3 lightDir){\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    return  diffuse *(diff * textureVec3); // 点乘结果跟灯光相乘\n}\n\nvec3 specularCalc(vec3 textureVec3, vec3 specular, vec3 viewDir, vec3 reflectDir){\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n    return specular * (spec *  textureVec3 );\n}\n\nvec3 dirLightCalc(DirectionalLight dirLight, vec3 basicDiffuse , vec3 basicSpecular,vec3 norm, vec3 viewDir){\n    vec3 lightDir = normalize(-dirLight.direction);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n\n    vec3 ambient = ambientCalc(basicDiffuse, dirLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, dirLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, dirLight.specular,viewDir, reflectDir);\n\n    ambient*=dirLight.color;\n        diffuse*=dirLight.color;\n\n    specular*=dirLight.color;\n\n    return ambient + diffuse + specular;\n}\n\nvec3 pointLightCalc(PointLight pointLight, vec3 basicDiffuse , vec3 basicSpecular, vec3 fragPos, vec3 norm, vec3 viewDir ){\n    vec3 lightDir = normalize(pointLight.position - fragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n    float distance    = length(pointLight.position - FragPos);\n    float attenuation = 1.0 / (pointLight.constant + pointLight.linear * distance + \n                pointLight.quadratic * (distance * distance));\n\n    vec3 ambient = ambientCalc(basicDiffuse, pointLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, pointLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, pointLight.specular,viewDir, reflectDir);\n\n    ambient*=pointLight.color;\n        diffuse*=pointLight.color;\n\n    specular*=pointLight.color;\n\n    ambient *= attenuation;\n    diffuse *= attenuation;\n    specular *= attenuation;\n\n    return ambient + diffuse + specular;\n}\n\nvec3 potLightCalc(PotLight potLight, vec3 basicDiffuse , vec3 basicSpecular,vec3 fragPos, vec3 norm, vec3 viewDir ){\n    vec3 lightDir = normalize(potLight.position - fragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n\n    float distance    = length(potLight.position - FragPos);\n    float attenuation = 1.0 / (potLight.constant + potLight.linear * distance + \n                potLight.quadratic * (distance * distance));\n\n\n\n    vec3 ambient = ambientCalc(basicDiffuse, potLight.ambient);\n    vec3 diffuse =  diffuseCalc(basicDiffuse, potLight.diffuse,norm, lightDir);\n    vec3 specular = specularCalc(basicSpecular, potLight.specular,viewDir, reflectDir);\n\n    // spotlight (soft edges)\n    float theta = dot(lightDir, normalize(-potLight.direction)); \n    float epsilon = (potLight.cutOff - potLight.outerCutOff);\n    float intensity = clamp((theta - potLight.outerCutOff) / epsilon, 0.0, 1.0);\n    diffuse  *= intensity;\n    specular *= intensity;\n\n    ambient*=potLight.color;\n        diffuse*=potLight.color;\n\n    specular*=potLight.color;\n\n    ambient *= attenuation;\n    diffuse *= attenuation;\n    specular *= attenuation;\n\n    return ambient + diffuse + specular;\n}\n\n\nvoid main()\n{\n    vec3 basicDiffuse = vec3(texture(material.diffuse,texCoord)); \n    vec3 basicSpecular = vec3(texture(material.specular,texCoord));\n\n    vec3 norm = normalize(Normal); // 标准化法向量\n    vec3 viewDir = normalize(viewPos - FragPos);\n\n    vec3 result = vec3(0);\n    result = dirLightCalc(dirLight, basicDiffuse, basicSpecular, norm, viewDir);\n\n    for(int i = 0; i < 1; i++)\n        result += pointLightCalc(pointLights[i], basicDiffuse, basicSpecular, FragPos,norm, viewDir );\n    \n    result += potLightCalc(potLight, basicDiffuse, basicSpecular, FragPos,norm, viewDir );\n\n    FragColor = vec4(result,1.0);\n}\n```\n顶点着色器:\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aNormal;\nlayout (location = 2) in vec2 aTexCoord;\n\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\nuniform mat3 reverseModel;\n\nout vec3 FragPos;  \nout vec3 Normal;\nout vec2 texCoord;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    FragPos = vec3(model * vec4(aPos, 1.0));\n    Normal = reverseModel * aNormal;\n    texCoord = aTexCoord;\n}\n```\n\nc++代码:\n```c++\n#include \"my_glfw.h\"\n#include \"MyPerspectCamera.h\"\n#include \"MyShader.h\"\n#include \"myTexture.h\"\n#include \"my_camera_input_procecssor.h\"\n#include \"DirectLight.h\"\n#include \"PointLight.h\"\n#include \"SpotLight.h\"\n#include \"MyMaterial.h\"\n\nextern MyPerspectCamera myPerspectCamera;\nextern GLFWwindow* window;\n\nvoid debug(int x) {\n\tif (x % 1000 == 0) {\n\t\tstd::cout << \"========= x ========= start ==========\" << std::endl;\n\t\tglCheckError();\n\t\tstd::cout << \"========= x ========= end ==========\" << std::endl;\n\n\t}\n}\n\nint test0318() {\n\t// D:\\files\\doc\\shaders\\colortest\n\tinitGlfw();\n\tconst char* vertexPath = \"D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\vertex.glsl\";\n\tconst char* fragPath = \"D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\frag.glsl\";\n\n\tconst char* diffuseTexturePath = \"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2.png\";\n\tconst char* specularTexturePath = \"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2_specular.png\";\n\n\twindow = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGH, \"hello 0314\", NULL, NULL);\n\n\tstd::cout << window << std::endl;\n\tglfwMakeContextCurrent(window);\n\tglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\tint f = gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);\n\n\tglfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n\n\tmyPerspectCamera = MyPerspectCamera(VEC3(1, 1, -3.f), VEC3(1, 1, 0), VEC3(0, 1, 0));\n\tregist_my_camera();\n\n\tfloat vertex[] = {\n\t\t// positions          // normals           // texture coords\n\t\t-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,\n\t\t 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,\n\n\t\t-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,\n\t\t-0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,\n\t\t-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,\n\n\t\t-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\n\t\t 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,\n\n\t\t-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,\n\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,\n\t\t 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,\n\t\t 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,\n\t\t-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,\n\t\t-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f\n\t};\n\tGLuint indices[] = {\n\t\t1,\n\t};\n\n\tglm::vec3 cubePositions[] = {\n\tglm::vec3(0.0f,  0.0f,  0.0f),\n\tglm::vec3(2.0f,  5.0f, -15.0f),\n\tglm::vec3(-1.5f, -2.2f, -2.5f),\n\tglm::vec3(-3.8f, -2.0f, -12.3f),\n\tglm::vec3(2.4f, -0.4f, -3.5f),\n\tglm::vec3(-1.7f,  3.0f, -7.5f),\n\tglm::vec3(1.3f, -2.0f, -2.5f),\n\tglm::vec3(1.5f,  2.0f, -2.5f),\n\tglm::vec3(1.5f,  0.2f, -1.5f),\n\tglm::vec3(-1.3f,  1.0f, -1.5f)\n\t};\n\n\t// VAO;\n\tGLuint objVAO, VBO;\n\tglGenVertexArrays(1,&objVAO);\n\tglBindVertexArray(objVAO);\n\n\tglGenBuffers(1,&VBO);\n\tglBindBuffer(GL_ARRAY_BUFFER,VBO);\n\tglBufferData(GL_ARRAY_BUFFER,sizeof(vertex),vertex,GL_STATIC_DRAW);\n\n\t// ATTRIBUTE\n\tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);\n\tglEnableVertexAttribArray(0);\n\tglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));\n\tglEnableVertexAttribArray(1);\n\tglVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));\n\tglEnableVertexAttribArray(2);\n\n\tGLuint lightVAO;\n\tglGenVertexArrays(1,&lightVAO);\n\tglBindVertexArray(lightVAO);\n\tglBindBuffer(GL_ARRAY_BUFFER, VBO);\n\tglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);\n\tglEnableVertexAttribArray(0);\n\n\tglBindVertexArray(0);// unbind vao\n\n\t// shader\n\tMyShader objShader(vertexPath,fragPath);\n\t//MyShader lightShader(\"\", \"\");\n\n\tmyTexture objDiffuse(diffuseTexturePath, GL_RGBA, GL_RGBA);\n\tmyTexture objSpecular(specularTexturePath, GL_RGBA, GL_RGBA);\n\n\tLight baseLight1 = Light(glm::vec3(0.2f,0.5f,0.2f), glm::vec3(0.05f, 0.05f, 0.05f), glm::vec3(0.4f, 0.4f, 0.4f), glm::vec3(0.5f, 0.5f, 0.5f));\n\tLight baseLight2 = Light(glm::vec3(0.5f), glm::vec3(0.05f, 0.05f, 0.05f), glm::vec3(0.8f, 0.8f, 0.8f), glm::vec3(1.0f, 1.0f, 1.0f));\n\tLight baseLight3 = Light(glm::vec3(0.5f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(1.0f, 1.0f, 1.0f), glm::vec3(1.0f, 1.0f, 1.0f));\n\n\tDirectLight dirLight = DirectLight(baseLight1,glm::vec3(-0.2f, -1.0f, -0.3f));\n\n\tPointLight pointLights[] = {\n\t\tPointLight(0,baseLight1,glm::vec3(0.7f,  0.2f,  2.0f),1.0f,0.09f,0.032f),\n\t};\n\n\tSpotLight spotLight = SpotLight(baseLight3,\n\t\t&myPerspectCamera,\n\t\tglm::cos(glm::radians(12.5f)), glm::cos(glm::radians(15.f)),\n\t\t1,0.09f,0.032f);\n\n\tMyMaterial myMaterial(&objDiffuse, &objSpecular,32.f);\n\tint x = 0;\n\t\n\t//model = glm::scale(model,glm::vec3(5));\n\t_MAIN_LOOP{\n\t\tdebug(x);\n\t\tglClearColor(baseLight1.color[0], baseLight1.color[1], baseLight1.color[2], 1.0f);\n\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\tdebug(x);\n\t\tglEnable(GL_DEPTH_TEST);\n\t\tprocessInput(window);\n\t\t// render obj\n\t\tobjShader.use();\n\t\tdebug(x);\n\t\tglBindVertexArray(objVAO);\n\t\tobjShader.setMatrix4(\"view\",myPerspectCamera.vieMatrix());\n\t\tobjShader.setMatrix4(\"projection\",myPerspectCamera.projection());\n\t\tobjShader.setFloat3(\"viewPos\", myPerspectCamera.Position);\n\t\tdebug(x);\n\t\t// update model maybe\n\n\t\tdebug(x);\n\t\tdirLight.setToUniform(&objShader);\n\t\tdebug(x);\n\t\tfor (PointLight pt : pointLights) {\n\t\t\tpt.setToUniform(&objShader);\n\t\t}\n\t\tdebug(x);\n\t\tspotLight.setToUniform(&objShader);\n\t\tmyMaterial.setToUniform(&objShader);\n\n\t\tfor (int i = 0; i < sizeof(cubePositions)/(sizeof(glm::vec3));i++) {\n\t\t\tglm::mat4 model(1.f);\n\t\t\tmodel = glm::translate(model, cubePositions[i]);\n\t\t\tfloat angle = 20.0f * i;\n\t\t\tmodel = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));\n\t\t\tglm::mat3 reverseModel = glm::mat3(glm::transpose(glm::inverse(model)));\n\t\t\tobjShader.setMatrix4(\"model\", model);\n\t\t\tobjShader.setMatrix3(\"reverseModel\", reverseModel);\n\t\t\tglDrawArrays(GL_TRIANGLES, 0, 36);\n\t\t}\n\t\tdebug(x);\n\t\t// render light\n\n\t\tglfwSwapBuffers(window);\n\t\tglfwPollEvents();\n\t\tdebug(x);\n\t\tx++;\n\t}\n\n\treturn 0;\n}\n```\n光照类：\n```c++\n#include \"DirectLight.h\"\n\nvoid DirectLight::setToUniform(MyShader* shader) {\n\tstd::string prefix = \"dirLight.\";\n\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.color[0], this->myLight.color[1], this->myLight.color[2]);\n\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\n\ttmpPrefix = prefix + \"direction\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->direction[0], this->direction[1], this->direction[2]);\n\n}\n#include \"PointLight.h\"\n\nvoid PointLight::setToUniform(MyShader* shader)\n{\n\tstd::string prefix = \"pointLights[\" + std::to_string(this->indices) + \"].\";\n\t// color\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.color[0], this->myLight.color[1], this->myLight.color[2]);\n\t// ambient\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\t// diffuse\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\t// specular\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\t// position\n\ttmpPrefix = prefix + \"position\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->position[0], this->position[1], this->position[2]);\n\n\n\t//float constant;\n\ttmpPrefix = prefix + \"constant\";\n\tshader->setFloat(tmpPrefix.c_str(), this->constant);\n\t//float linear;\n\ttmpPrefix = prefix + \"linear\";\n\tshader->setFloat(tmpPrefix.c_str(), this->linear);\n\t//float quadratic;\n\ttmpPrefix = prefix + \"quadratic\";\n\tshader->setFloat(tmpPrefix.c_str(), this->quadratic);\n}\n\n\n#include \"SpotLight.h\"\n#include <string>\n\nvoid SpotLight::setToUniform  (MyShader* shader) {\n\tstd::string prefix = \"potLight.\";\n\t// color\n\tstd::string tmpPrefix = prefix + \"color\";\n\tshader->setFloat3(tmpPrefix.c_str(),this->myLight.color[0], this->myLight.color[1], this->myLight.color[2] );\n\t// ambient\n\ttmpPrefix = prefix + \"ambient\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.ambient[0], this->myLight.ambient[1], this->myLight.ambient[2]);\n\t// diffuse\n\ttmpPrefix = prefix + \"diffuse\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.diffuse[0], this->myLight.diffuse[1], this->myLight.diffuse[2]);\n\t// specular\n\ttmpPrefix = prefix + \"specular\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->myLight.specular[0], this->myLight.specular[1], this->myLight.specular[2]);\n\t// position\n\ttmpPrefix = prefix + \"position\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->pos->getPosition()[0], this->pos->getPosition()[1], this->pos->getPosition()[2]);\n\t// specular\n\ttmpPrefix = prefix + \"direction\";\n\tshader->setFloat3(tmpPrefix.c_str(), this->pos->getDirection()[0], this->pos->getDirection()[1], this->pos->getDirection()[2]);\n\ttmpPrefix = prefix + \"cutOff\";\n\tshader->setFloat(tmpPrefix.c_str(), this->cutOff);\n\ttmpPrefix = prefix + \"outerCutOff\";\n\tshader->setFloat(tmpPrefix.c_str(), this->outerCutOff);\n\n\t//float constant;\n\ttmpPrefix = prefix + \"constant\";\n\tshader->setFloat(tmpPrefix.c_str(), this->constant);\n\t//float linear;\n\ttmpPrefix = prefix + \"linear\";\n\tshader->setFloat(tmpPrefix.c_str(), this->linear);\n\t//float quadratic;\n\ttmpPrefix = prefix + \"quadratic\";\n\tshader->setFloat(tmpPrefix.c_str(), this->quadratic);\n}\n```\n\n\n","slug":"opengl_color_end","published":1,"updated":"2025-03-28T02:05:16.286Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7s002i1wu1bith4ovl","content":"<p><img src=\"/2024/03/23/opengl_color_end/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"投光物-光源\"><a href=\"#投光物-光源\" class=\"headerlink\" title=\"投光物(光源)\"></a>投光物(光源)</h1><p>我们目前使用的光照都来自于空间中的一个点。它能给我们不错的效果，但现实世界中，我们有很多种类的光照，每种的表现都不同。将光投射(Cast)到物体的光源叫做投光物(Light Caster)。在这一节中，我们将会讨论几种不同类型的投光物。学会模拟不同种类的光源是又一个能够进一步丰富场景的工具。</p>\n<p>我们首先将会讨论定向光(Directional Light)，接下来是点光源(Point Light)，它是我们之前学习的光源的拓展，最后我们将会讨论聚光(Spotlight)。在下一节中我们将讨论如何将这些不同种类的光照类型整合到一个场景之中。</p>\n<h2 id=\"平行光\"><a href=\"#平行光\" class=\"headerlink\" title=\"平行光\"></a>平行光</h2><p>当一个光源处于很远的地方时，来自光源的每条光线就会近似于互相平行。不论物体和&#x2F;或者观察者的位置，看起来好像所有的光都来自于同一个方向。当我们使用一个假设光源处于无限远处的模型时，它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的。</p>\n<p>定向光非常好的一个例子就是太阳。太阳距离我们并不是无限远，但它已经远到在光照计算中可以把它视为无限远了。所以来自太阳的所有光线将被模拟为平行光线，我们可以在下图看到：</p>\n<p><img src=\"/2024/03/23/opengl_color_end/2024-03-23T161923.png\" alt=\"2024-03-23T161923\"></p>\n<p>因为平行光假定是跟距离没有关系的，所以平行光唯一的一个常量就是方向。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"comment\">// vec3 position; // 使用定向光就不再需要了</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(-light.direction);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，我们的平行光也是一种光，所以也有三种分量：环境分量，漫反射分量，以及镜面反射分量。<br>这里需要注意，我们定义Light中的 direction，一般是光发散出去的方向。但是我们计算各个分量的时候，需要用到由物体到光的方向，所以我们这里需要对光方向取反.</p>\n<p>这里，如果我们在场景中尝试渲染多个不同的立方体，那么我们会看到冲着光方向的那面会变的更亮，反之更暗：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T163256.png\" alt=\"2024-03-23T163256\"></p>\n<h2 id=\"点光源\"><a href=\"#点光源\" class=\"headerlink\" title=\"点光源\"></a>点光源</h2><p>我们之前介绍光源的额时候，使用的都是一个模拟的点光源，我们平时生活中的灯泡也可而已算作点光源。点光源对一个物体照亮的程度是不一样的，离点光源越近的地方会更亮一些：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165605.png\" alt=\"2024-03-23T165605\"><br>在之前的教程中，我们一直都在使用一个（简化的）点光源。我们在给定位置有一个光源，它会从它的光源位置开始朝着所有方向散射光线。然而，我们定义的光源模拟的是永远不会衰减的光线，这看起来像是光源亮度非常的强。在大部分的3D模拟中，我们都希望模拟的光源仅照亮光源附近的区域而不是整个场景。</p>\n<p>如果你将10个箱子加入到上一节光照场景中，你会注意到在最后面的箱子和在灯面前的箱子都以相同的强度被照亮，并没有定义一个公式来将光随距离衰减。我们希望在后排的箱子与前排的箱子相比仅仅是被轻微地照亮。</p>\n<h3 id=\"衰减\"><a href=\"#衰减\" class=\"headerlink\" title=\"衰减\"></a>衰减</h3><p>随着光线传播距离的增长逐渐削减光的强度通常叫做衰减(Attenuation)。随距离减少光强度的一种方式是使用一个线性方程。这样的方程能够随着距离的增长线性地减少光的强度，从而让远处的物体更暗。然而，这样的线性方程通常会看起来比较假。在现实世界中，灯在近处通常会非常亮，但随着距离的增加光源的亮度一开始会下降非常快，但在远处时剩余的光强度就会下降的非常缓慢了。所以，我们需要一个不同的公式来减少光的强度。</p>\n<p>幸运的是一些聪明的人已经帮我们解决了这个问题。下面这个公式根据片段距光源的距离计算了衰减值，之后我们会将它乘以光的强度向量：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165733.png\" alt=\"2024-03-23T165733\"><br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165742.png\" alt=\"2024-03-23T165742\"><br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165745.png\" alt=\"2024-03-23T165745\"><br>你可以看到光在近距离的时候有着最高的强度，但随着距离增长，它的强度明显减弱，并缓慢地在距离大约100的时候强度接近0。这正是我们想要的。</p>\n<p><strong>选择正确的值</strong><br>但是，该对这三个项设置什么值呢？正确地设定它们的值取决于很多因素：环境、希望光覆盖的距离、光的类型等。在大多数情况下，这都是经验的问题，以及适量的调整。下面这个表格显示了模拟一个（大概）真实的，覆盖特定半径（距离）的光源时，这些项可能取的一些值。第一列指定的是在给定的三项时光所能覆盖的距离。这些值是大多数光源很好的起始点，它们由Ogre3D的Wiki所提供：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T170103.png\" alt=\"2024-03-23T170103\"></p>\n<p>这里建议直接参考这个表抄数值即可。<br>接下来在glsl中定义一个点光源类型：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>c++中需要把对应的属性赋值:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.constant&quot;</span>,  <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.linear&quot;</span>,    <span class=\"number\">0.09f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.quadratic&quot;</span>, <span class=\"number\">0.032f</span>);</span><br></pre></td></tr></table></figure>\n<p>glsl中添加计算衰减的方法：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(light.position - FragPos);</span><br><span class=\"line\"><span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (light.constant + light.linear * <span class=\"built_in\">distance</span> +  light.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br></pre></td></tr></table></figure>\n\n<p>最后把结果的三个分量乘这个强度:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ambient  *= attenuation; </span><br><span class=\"line\">diffuse  *= attenuation;</span><br><span class=\"line\">specular *= attenuation;</span><br></pre></td></tr></table></figure>\n<p>现在，我们的点光源就完成了</p>\n<h2 id=\"聚光\"><a href=\"#聚光\" class=\"headerlink\" title=\"聚光\"></a>聚光</h2><p>我们要讨论的最后一种类型的光是聚光(Spotlight)。聚光是位于环境中某个位置的光源，它只朝一个特定方向而不是所有方向照射光线。这样的结果就是只有在聚光方向的特定半径内的物体才会被照亮，其它的物体都会保持黑暗。聚光很好的例子就是路灯或手电筒。</p>\n<p>OpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(Cutoff Angle)来表示的，切光角指定了聚光的半径（译注：是圆锥的半径不是距光源距离那个半径）。对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。下面这张图会让你明白聚光是如何工作的：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T170859.png\" alt=\"2024-03-23T170859\"></p>\n<p>我们这里需要比较两个角度，一个是</p>\n<p>手电筒就是一个典型的聚光灯</p>\n<h3 id=\"手电筒\"><a href=\"#手电筒\" class=\"headerlink\" title=\"手电筒\"></a>手电筒</h3><p>手电筒(Flashlight)是一个位于观察者位置的聚光，通常它都会瞄准玩家视角的正前方。基本上说，手电筒就是普通的聚光，但它的位置和方向会随着玩家的位置和朝向不断更新。</p>\n<p>所以，在片段着色器中我们需要的值有聚光的位置向量（来计算光的方向向量）、聚光的方向向量和一个切光角。我们可以将它们储存在Light结构体中：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  direction;</span><br><span class=\"line\">    <span class=\"type\">float</span> cutOff;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来我们将合适的值传到着色器中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.position&quot;</span>,  camera.Position);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.direction&quot;</span>, camera.Front);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.cutOff&quot;</span>,   glm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">12.5f</span>)));</span><br></pre></td></tr></table></figure>\n<p>需要注意，我们这里传入的并不是角度，而是角度的cos。因为我们上面可以看到，我们需要比较片段-光源与光源方向指夹角。但是在glsl中，我们有dot叉乘向量的操作，这个操作得到的就是向量间的cos。所以我们这里传入cos的话可以直接放在glsl中比较叉乘结果即可。</p>\n<p>逻辑如下:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> theta = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-light.direction));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(theta &gt; light.cutOff) </span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">  <span class=\"comment\">// 执行光照计算</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>  <span class=\"comment\">// 否则，使用环境光，让场景在聚光之外时不至于完全黑暗</span></span><br><span class=\"line\">  color = <span class=\"type\">vec4</span>(light.ambient * <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.diffuse, TexCoords)), <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>由于我们使用的是cos比较，而cos在0-90°区间是递减的，所以我们应当保证当前片段大于光源的cutOff时，来渲染光效。</p>\n<h3 id=\"平滑-软化边缘\"><a href=\"#平滑-软化边缘\" class=\"headerlink\" title=\"平滑&#x2F;软化边缘\"></a>平滑&#x2F;软化边缘</h3><p>如果我们上面成功的写出了一个聚光，那么我们会看到聚光的周围有些不真实：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T172606.png\" alt=\"2024-03-23T172606\"><br>因为我们真实的聚光边缘肯定是要有一定的平滑过渡的。<br>所以我们要渐进式的对光渲染,除了outoff外，我们还需要一个outcusoff来表示光外围的角度，我们需要对角度进行判断段，如果角度cos大于cutoff，那么全量渲染，如果角度落在了cutoff与outcutoff之间，则需要根据之间的比例来确定不同的光亮强度.</p>\n<p><img src=\"/2024/03/23/opengl_color_end/2024-03-23T172927.png\" alt=\"2024-03-23T172927\"></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> theta     = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-light.direction));</span><br><span class=\"line\"><span class=\"type\">float</span> epsilon   = light.cutOff - light.outerCutOff;</span><br><span class=\"line\"><span class=\"type\">float</span> intensity = <span class=\"built_in\">clamp</span>((theta - light.outerCutOff) / epsilon, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);    </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 将不对环境光做出影响，让它总是能有一点光</span></span><br><span class=\"line\">diffuse  *= intensity;</span><br><span class=\"line\">specular *= intensity;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多光源\"><a href=\"#多光源\" class=\"headerlink\" title=\"多光源\"></a>多光源</h1><p>多光源就是假设场景中有多个光源，我们要做的就是把他们的光照影响叠加输出。<br>需要注意，每一种光都同时具有三个分量：环境，漫反射，镜面反射。所以我们可以尝试抽象出来三个方法来分别对其计算。<br>这里直接贴出我自己写的代码:<br>片段着色器:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Material&#123;</span><br><span class=\"line\">    <span class=\"type\">sampler2D</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">sampler2D</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct DirectionalLight&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> direction;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct PointLight&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct PotLight &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  direction;</span><br><span class=\"line\">    <span class=\"type\">float</span> cutOff;</span><br><span class=\"line\">    <span class=\"type\">float</span> outerCutOff;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define NR_POINT_LIGHTS 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> DirectionalLight dirLight;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> PointLight pointLights[NR_POINT_LIGHTS];</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> PotLight potLight ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> ambientCalc (<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> ambient) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> textureVec3 * ambient;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuseCalc(<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> diffuse, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> lightDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  diffuse *(diff * textureVec3); <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> specularCalc(<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> specular, <span class=\"type\">vec3</span> viewDir, <span class=\"type\">vec3</span> reflectDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), material.shininess);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> specular * (spec *  textureVec3 );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> dirLightCalc(DirectionalLight dirLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular,<span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(-dirLight.direction);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, dirLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, dirLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, dirLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=dirLight.color;</span><br><span class=\"line\">        diffuse*=dirLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=dirLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> pointLightCalc(PointLight pointLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular, <span class=\"type\">vec3</span> fragPos, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir )&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(pointLight.position - fragPos);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(pointLight.position - FragPos);</span><br><span class=\"line\">    <span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (pointLight.constant + pointLight.linear * <span class=\"built_in\">distance</span> + </span><br><span class=\"line\">                pointLight.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, pointLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, pointLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, pointLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=pointLight.color;</span><br><span class=\"line\">        diffuse*=pointLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=pointLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient *= attenuation;</span><br><span class=\"line\">    diffuse *= attenuation;</span><br><span class=\"line\">    specular *= attenuation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> potLightCalc(PotLight potLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular,<span class=\"type\">vec3</span> fragPos, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir )&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(potLight.position - fragPos);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(potLight.position - FragPos);</span><br><span class=\"line\">    <span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (potLight.constant + potLight.linear * <span class=\"built_in\">distance</span> + </span><br><span class=\"line\">                potLight.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, potLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, potLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, potLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// spotlight (soft edges)</span></span><br><span class=\"line\">    <span class=\"type\">float</span> theta = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-potLight.direction)); </span><br><span class=\"line\">    <span class=\"type\">float</span> epsilon = (potLight.cutOff - potLight.outerCutOff);</span><br><span class=\"line\">    <span class=\"type\">float</span> intensity = <span class=\"built_in\">clamp</span>((theta - potLight.outerCutOff) / epsilon, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    diffuse  *= intensity;</span><br><span class=\"line\">    specular *= intensity;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=potLight.color;</span><br><span class=\"line\">        diffuse*=potLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=potLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient *= attenuation;</span><br><span class=\"line\">    diffuse *= attenuation;</span><br><span class=\"line\">    specular *= attenuation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> basicDiffuse = <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.diffuse,texCoord)); </span><br><span class=\"line\">    <span class=\"type\">vec3</span> basicSpecular = <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.specular,texCoord));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = <span class=\"type\">vec3</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    result = dirLightCalc(dirLight, basicDiffuse, basicSpecular, norm, viewDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        result += pointLightCalc(pointLights[i], basicDiffuse, basicSpecular, FragPos,norm, viewDir );</span><br><span class=\"line\">    </span><br><span class=\"line\">    result += potLightCalc(potLight, basicDiffuse, basicSpecular, FragPos,norm, viewDir );</span><br><span class=\"line\"></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>顶点着色器:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aNormal;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">2</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> model;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> view;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> projection;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat3</span> reverseModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    FragPos = <span class=\"type\">vec3</span>(model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    Normal = reverseModel * aNormal;</span><br><span class=\"line\">    texCoord = aTexCoord;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>c++代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;my_glfw.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyPerspectCamera.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;myTexture.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;my_camera_input_procecssor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;DirectLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;PointLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SpotLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyMaterial.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> MyPerspectCamera myPerspectCamera;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> GLFWwindow* window;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">debug</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x % <span class=\"number\">1000</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;========= x ========= start ==========&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">glCheckError</span>();</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;========= x ========= end ==========&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test0318</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// D:\\files\\doc\\shaders\\colortest</span></span><br><span class=\"line\">\t<span class=\"built_in\">initGlfw</span>();</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath = <span class=\"string\">&quot;D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\vertex.glsl&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* fragPath = <span class=\"string\">&quot;D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\frag.glsl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* diffuseTexturePath = <span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2.png&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* specularTexturePath = <span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2_specular.png&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\twindow = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;hello 0314&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::cout &lt;&lt; window &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">\t<span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\">\t<span class=\"type\">int</span> f = <span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glfwSetInputMode</span>(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmyPerspectCamera = <span class=\"built_in\">MyPerspectCamera</span>(<span class=\"built_in\">VEC3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">-3.f</span>), <span class=\"built_in\">VEC3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">regist_my_camera</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// positions          // normals           // texture coords</span></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tGLuint indices[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">1</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglm::vec3 cubePositions[] = &#123;</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">2.0f</span>,  <span class=\"number\">5.0f</span>, <span class=\"number\">-15.0f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.5f</span>, <span class=\"number\">-2.2f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-3.8f</span>, <span class=\"number\">-2.0f</span>, <span class=\"number\">-12.3f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">2.4f</span>, <span class=\"number\">-0.4f</span>, <span class=\"number\">-3.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.7f</span>,  <span class=\"number\">3.0f</span>, <span class=\"number\">-7.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.3f</span>, <span class=\"number\">-2.0f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.5f</span>,  <span class=\"number\">2.0f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.5f</span>,  <span class=\"number\">0.2f</span>, <span class=\"number\">-1.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.3f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">-1.5f</span>)</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// VAO;</span></span><br><span class=\"line\">\tGLuint objVAO, VBO;</span><br><span class=\"line\">\t<span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;objVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(objVAO);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>,&amp;VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER,<span class=\"built_in\">sizeof</span>(vertex),vertex,GL_STATIC_DRAW);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ATTRIBUTE</span></span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLuint lightVAO;</span><br><span class=\"line\">\t<span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;lightVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);<span class=\"comment\">// unbind vao</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// shader</span></span><br><span class=\"line\">\t<span class=\"function\">MyShader <span class=\"title\">objShader</span><span class=\"params\">(vertexPath,fragPath)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//MyShader lightShader(&quot;&quot;, &quot;&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">myTexture <span class=\"title\">objDiffuse</span><span class=\"params\">(diffuseTexturePath, GL_RGBA, GL_RGBA)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">myTexture <span class=\"title\">objSpecular</span><span class=\"params\">(specularTexturePath, GL_RGBA, GL_RGBA)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLight baseLight1 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.2f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.2f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.4f</span>, <span class=\"number\">0.4f</span>, <span class=\"number\">0.4f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>));</span><br><span class=\"line\">\tLight baseLight2 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.8f</span>, <span class=\"number\">0.8f</span>, <span class=\"number\">0.8f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>));</span><br><span class=\"line\">\tLight baseLight3 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tDirectLight dirLight = <span class=\"built_in\">DirectLight</span>(baseLight1,glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-0.2f</span>, <span class=\"number\">-1.0f</span>, <span class=\"number\">-0.3f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tPointLight pointLights[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PointLight</span>(<span class=\"number\">0</span>,baseLight1,glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.7f</span>,  <span class=\"number\">0.2f</span>,  <span class=\"number\">2.0f</span>),<span class=\"number\">1.0f</span>,<span class=\"number\">0.09f</span>,<span class=\"number\">0.032f</span>),</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpotLight spotLight = <span class=\"built_in\">SpotLight</span>(baseLight3,</span><br><span class=\"line\">\t\t&amp;myPerspectCamera,</span><br><span class=\"line\">\t\tglm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">12.5f</span>)), glm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">15.f</span>)),</span><br><span class=\"line\">\t\t<span class=\"number\">1</span>,<span class=\"number\">0.09f</span>,<span class=\"number\">0.032f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">MyMaterial <span class=\"title\">myMaterial</span><span class=\"params\">(&amp;objDiffuse, &amp;objSpecular,<span class=\"number\">32.f</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//model = glm::scale(model,glm::vec3(5));</span></span><br><span class=\"line\">\t_MAIN_LOOP&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glClearColor</span>(baseLight1.color[<span class=\"number\">0</span>], baseLight1.color[<span class=\"number\">1</span>], baseLight1.color[<span class=\"number\">2</span>], <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glEnable</span>(GL_DEPTH_TEST);</span><br><span class=\"line\">\t\t<span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">\t\t<span class=\"comment\">// render obj</span></span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glBindVertexArray</span>(objVAO);</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;view&quot;</span>,myPerspectCamera.<span class=\"built_in\">vieMatrix</span>());</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;projection&quot;</span>,myPerspectCamera.<span class=\"built_in\">projection</span>());</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setFloat3</span>(<span class=\"string\">&quot;viewPos&quot;</span>, myPerspectCamera.Position);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"comment\">// update model maybe</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tdirLight.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (PointLight pt : pointLights) &#123;</span><br><span class=\"line\">\t\t\tpt.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tspotLight.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\tmyMaterial.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">sizeof</span>(cubePositions)/(<span class=\"built_in\">sizeof</span>(glm::vec3));i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">glm::mat4 <span class=\"title\">model</span><span class=\"params\">(<span class=\"number\">1.f</span>)</span></span>;</span><br><span class=\"line\">\t\t\tmodel = glm::<span class=\"built_in\">translate</span>(model, cubePositions[i]);</span><br><span class=\"line\">\t\t\t<span class=\"type\">float</span> angle = <span class=\"number\">20.0f</span> * i;</span><br><span class=\"line\">\t\t\tmodel = glm::<span class=\"built_in\">rotate</span>(model, glm::<span class=\"built_in\">radians</span>(angle), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.5f</span>));</span><br><span class=\"line\">\t\t\tglm::mat3 reverseModel = glm::<span class=\"built_in\">mat3</span>(glm::<span class=\"built_in\">transpose</span>(glm::<span class=\"built_in\">inverse</span>(model)));</span><br><span class=\"line\">\t\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;model&quot;</span>, model);</span><br><span class=\"line\">\t\t\tobjShader.<span class=\"built_in\">setMatrix3</span>(<span class=\"string\">&quot;reverseModel&quot;</span>, reverseModel);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"comment\">// render light</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tx++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>光照类：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;DirectLight.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DirectLight::setToUniform</span><span class=\"params\">(MyShader* shader)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;dirLight.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;direction&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;PointLight.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PointLight::setToUniform</span><span class=\"params\">(MyShader* shader)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;pointLights[&quot;</span> + std::<span class=\"built_in\">to_string</span>(<span class=\"keyword\">this</span>-&gt;indices) + <span class=\"string\">&quot;].&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// color</span></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// ambient</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// diffuse</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// position</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;position&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//float constant;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;constant&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;constant);</span><br><span class=\"line\">\t<span class=\"comment\">//float linear;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;linear&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;linear);</span><br><span class=\"line\">\t<span class=\"comment\">//float quadratic;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;quadratic&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;quadratic);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SpotLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SpotLight::setToUniform</span>  <span class=\"params\">(MyShader* shader)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;potLight.&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// color</span></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(),<span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>] );</span><br><span class=\"line\">\t<span class=\"comment\">// ambient</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// diffuse</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// position</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;position&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;direction&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;cutOff&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;cutOff);</span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;outerCutOff&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;outerCutOff);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//float constant;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;constant&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;constant);</span><br><span class=\"line\">\t<span class=\"comment\">//float linear;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;linear&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;linear);</span><br><span class=\"line\">\t<span class=\"comment\">//float quadratic;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;quadratic&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;quadratic);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","length":4255,"excerpt":"<p><img src=\"/2024/03/23/opengl_color_end/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>","more":"<h1 id=\"投光物-光源\"><a href=\"#投光物-光源\" class=\"headerlink\" title=\"投光物(光源)\"></a>投光物(光源)</h1><p>我们目前使用的光照都来自于空间中的一个点。它能给我们不错的效果，但现实世界中，我们有很多种类的光照，每种的表现都不同。将光投射(Cast)到物体的光源叫做投光物(Light Caster)。在这一节中，我们将会讨论几种不同类型的投光物。学会模拟不同种类的光源是又一个能够进一步丰富场景的工具。</p>\n<p>我们首先将会讨论定向光(Directional Light)，接下来是点光源(Point Light)，它是我们之前学习的光源的拓展，最后我们将会讨论聚光(Spotlight)。在下一节中我们将讨论如何将这些不同种类的光照类型整合到一个场景之中。</p>\n<h2 id=\"平行光\"><a href=\"#平行光\" class=\"headerlink\" title=\"平行光\"></a>平行光</h2><p>当一个光源处于很远的地方时，来自光源的每条光线就会近似于互相平行。不论物体和&#x2F;或者观察者的位置，看起来好像所有的光都来自于同一个方向。当我们使用一个假设光源处于无限远处的模型时，它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的。</p>\n<p>定向光非常好的一个例子就是太阳。太阳距离我们并不是无限远，但它已经远到在光照计算中可以把它视为无限远了。所以来自太阳的所有光线将被模拟为平行光线，我们可以在下图看到：</p>\n<p><img src=\"/2024/03/23/opengl_color_end/2024-03-23T161923.png\" alt=\"2024-03-23T161923\"></p>\n<p>因为平行光假定是跟距离没有关系的，所以平行光唯一的一个常量就是方向。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"comment\">// vec3 position; // 使用定向光就不再需要了</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(-light.direction);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，我们的平行光也是一种光，所以也有三种分量：环境分量，漫反射分量，以及镜面反射分量。<br>这里需要注意，我们定义Light中的 direction，一般是光发散出去的方向。但是我们计算各个分量的时候，需要用到由物体到光的方向，所以我们这里需要对光方向取反.</p>\n<p>这里，如果我们在场景中尝试渲染多个不同的立方体，那么我们会看到冲着光方向的那面会变的更亮，反之更暗：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T163256.png\" alt=\"2024-03-23T163256\"></p>\n<h2 id=\"点光源\"><a href=\"#点光源\" class=\"headerlink\" title=\"点光源\"></a>点光源</h2><p>我们之前介绍光源的额时候，使用的都是一个模拟的点光源，我们平时生活中的灯泡也可而已算作点光源。点光源对一个物体照亮的程度是不一样的，离点光源越近的地方会更亮一些：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165605.png\" alt=\"2024-03-23T165605\"><br>在之前的教程中，我们一直都在使用一个（简化的）点光源。我们在给定位置有一个光源，它会从它的光源位置开始朝着所有方向散射光线。然而，我们定义的光源模拟的是永远不会衰减的光线，这看起来像是光源亮度非常的强。在大部分的3D模拟中，我们都希望模拟的光源仅照亮光源附近的区域而不是整个场景。</p>\n<p>如果你将10个箱子加入到上一节光照场景中，你会注意到在最后面的箱子和在灯面前的箱子都以相同的强度被照亮，并没有定义一个公式来将光随距离衰减。我们希望在后排的箱子与前排的箱子相比仅仅是被轻微地照亮。</p>\n<h3 id=\"衰减\"><a href=\"#衰减\" class=\"headerlink\" title=\"衰减\"></a>衰减</h3><p>随着光线传播距离的增长逐渐削减光的强度通常叫做衰减(Attenuation)。随距离减少光强度的一种方式是使用一个线性方程。这样的方程能够随着距离的增长线性地减少光的强度，从而让远处的物体更暗。然而，这样的线性方程通常会看起来比较假。在现实世界中，灯在近处通常会非常亮，但随着距离的增加光源的亮度一开始会下降非常快，但在远处时剩余的光强度就会下降的非常缓慢了。所以，我们需要一个不同的公式来减少光的强度。</p>\n<p>幸运的是一些聪明的人已经帮我们解决了这个问题。下面这个公式根据片段距光源的距离计算了衰减值，之后我们会将它乘以光的强度向量：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165733.png\" alt=\"2024-03-23T165733\"><br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165742.png\" alt=\"2024-03-23T165742\"><br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T165745.png\" alt=\"2024-03-23T165745\"><br>你可以看到光在近距离的时候有着最高的强度，但随着距离增长，它的强度明显减弱，并缓慢地在距离大约100的时候强度接近0。这正是我们想要的。</p>\n<p><strong>选择正确的值</strong><br>但是，该对这三个项设置什么值呢？正确地设定它们的值取决于很多因素：环境、希望光覆盖的距离、光的类型等。在大多数情况下，这都是经验的问题，以及适量的调整。下面这个表格显示了模拟一个（大概）真实的，覆盖特定半径（距离）的光源时，这些项可能取的一些值。第一列指定的是在给定的三项时光所能覆盖的距离。这些值是大多数光源很好的起始点，它们由Ogre3D的Wiki所提供：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T170103.png\" alt=\"2024-03-23T170103\"></p>\n<p>这里建议直接参考这个表抄数值即可。<br>接下来在glsl中定义一个点光源类型：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>c++中需要把对应的属性赋值:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.constant&quot;</span>,  <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.linear&quot;</span>,    <span class=\"number\">0.09f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.quadratic&quot;</span>, <span class=\"number\">0.032f</span>);</span><br></pre></td></tr></table></figure>\n<p>glsl中添加计算衰减的方法：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(light.position - FragPos);</span><br><span class=\"line\"><span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (light.constant + light.linear * <span class=\"built_in\">distance</span> +  light.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br></pre></td></tr></table></figure>\n\n<p>最后把结果的三个分量乘这个强度:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ambient  *= attenuation; </span><br><span class=\"line\">diffuse  *= attenuation;</span><br><span class=\"line\">specular *= attenuation;</span><br></pre></td></tr></table></figure>\n<p>现在，我们的点光源就完成了</p>\n<h2 id=\"聚光\"><a href=\"#聚光\" class=\"headerlink\" title=\"聚光\"></a>聚光</h2><p>我们要讨论的最后一种类型的光是聚光(Spotlight)。聚光是位于环境中某个位置的光源，它只朝一个特定方向而不是所有方向照射光线。这样的结果就是只有在聚光方向的特定半径内的物体才会被照亮，其它的物体都会保持黑暗。聚光很好的例子就是路灯或手电筒。</p>\n<p>OpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(Cutoff Angle)来表示的，切光角指定了聚光的半径（译注：是圆锥的半径不是距光源距离那个半径）。对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。下面这张图会让你明白聚光是如何工作的：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T170859.png\" alt=\"2024-03-23T170859\"></p>\n<p>我们这里需要比较两个角度，一个是</p>\n<p>手电筒就是一个典型的聚光灯</p>\n<h3 id=\"手电筒\"><a href=\"#手电筒\" class=\"headerlink\" title=\"手电筒\"></a>手电筒</h3><p>手电筒(Flashlight)是一个位于观察者位置的聚光，通常它都会瞄准玩家视角的正前方。基本上说，手电筒就是普通的聚光，但它的位置和方向会随着玩家的位置和朝向不断更新。</p>\n<p>所以，在片段着色器中我们需要的值有聚光的位置向量（来计算光的方向向量）、聚光的方向向量和一个切光角。我们可以将它们储存在Light结构体中：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  direction;</span><br><span class=\"line\">    <span class=\"type\">float</span> cutOff;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来我们将合适的值传到着色器中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.position&quot;</span>,  camera.Position);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.direction&quot;</span>, camera.Front);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;light.cutOff&quot;</span>,   glm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">12.5f</span>)));</span><br></pre></td></tr></table></figure>\n<p>需要注意，我们这里传入的并不是角度，而是角度的cos。因为我们上面可以看到，我们需要比较片段-光源与光源方向指夹角。但是在glsl中，我们有dot叉乘向量的操作，这个操作得到的就是向量间的cos。所以我们这里传入cos的话可以直接放在glsl中比较叉乘结果即可。</p>\n<p>逻辑如下:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> theta = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-light.direction));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(theta &gt; light.cutOff) </span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">  <span class=\"comment\">// 执行光照计算</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>  <span class=\"comment\">// 否则，使用环境光，让场景在聚光之外时不至于完全黑暗</span></span><br><span class=\"line\">  color = <span class=\"type\">vec4</span>(light.ambient * <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.diffuse, TexCoords)), <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n<p>由于我们使用的是cos比较，而cos在0-90°区间是递减的，所以我们应当保证当前片段大于光源的cutOff时，来渲染光效。</p>\n<h3 id=\"平滑-软化边缘\"><a href=\"#平滑-软化边缘\" class=\"headerlink\" title=\"平滑&#x2F;软化边缘\"></a>平滑&#x2F;软化边缘</h3><p>如果我们上面成功的写出了一个聚光，那么我们会看到聚光的周围有些不真实：<br><img src=\"/2024/03/23/opengl_color_end/2024-03-23T172606.png\" alt=\"2024-03-23T172606\"><br>因为我们真实的聚光边缘肯定是要有一定的平滑过渡的。<br>所以我们要渐进式的对光渲染,除了outoff外，我们还需要一个outcusoff来表示光外围的角度，我们需要对角度进行判断段，如果角度cos大于cutoff，那么全量渲染，如果角度落在了cutoff与outcutoff之间，则需要根据之间的比例来确定不同的光亮强度.</p>\n<p><img src=\"/2024/03/23/opengl_color_end/2024-03-23T172927.png\" alt=\"2024-03-23T172927\"></p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> theta     = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-light.direction));</span><br><span class=\"line\"><span class=\"type\">float</span> epsilon   = light.cutOff - light.outerCutOff;</span><br><span class=\"line\"><span class=\"type\">float</span> intensity = <span class=\"built_in\">clamp</span>((theta - light.outerCutOff) / epsilon, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);    </span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 将不对环境光做出影响，让它总是能有一点光</span></span><br><span class=\"line\">diffuse  *= intensity;</span><br><span class=\"line\">specular *= intensity;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多光源\"><a href=\"#多光源\" class=\"headerlink\" title=\"多光源\"></a>多光源</h1><p>多光源就是假设场景中有多个光源，我们要做的就是把他们的光照影响叠加输出。<br>需要注意，每一种光都同时具有三个分量：环境，漫反射，镜面反射。所以我们可以尝试抽象出来三个方法来分别对其计算。<br>这里直接贴出我自己写的代码:<br>片段着色器:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Material&#123;</span><br><span class=\"line\">    <span class=\"type\">sampler2D</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">sampler2D</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct DirectionalLight&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> direction;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct PointLight&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct PotLight &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  position;</span><br><span class=\"line\">    <span class=\"type\">vec3</span>  direction;</span><br><span class=\"line\">    <span class=\"type\">float</span> cutOff;</span><br><span class=\"line\">    <span class=\"type\">float</span> outerCutOff;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> color;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> constant;</span><br><span class=\"line\">    <span class=\"type\">float</span> linear;</span><br><span class=\"line\">    <span class=\"type\">float</span> quadratic;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define NR_POINT_LIGHTS 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> DirectionalLight dirLight;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> PointLight pointLights[NR_POINT_LIGHTS];</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> PotLight potLight ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> ambientCalc (<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> ambient) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> textureVec3 * ambient;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuseCalc(<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> diffuse, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> lightDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  diffuse *(diff * textureVec3); <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> specularCalc(<span class=\"type\">vec3</span> textureVec3, <span class=\"type\">vec3</span> specular, <span class=\"type\">vec3</span> viewDir, <span class=\"type\">vec3</span> reflectDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), material.shininess);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> specular * (spec *  textureVec3 );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> dirLightCalc(DirectionalLight dirLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular,<span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir)&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(-dirLight.direction);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, dirLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, dirLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, dirLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=dirLight.color;</span><br><span class=\"line\">        diffuse*=dirLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=dirLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> pointLightCalc(PointLight pointLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular, <span class=\"type\">vec3</span> fragPos, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir )&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(pointLight.position - fragPos);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(pointLight.position - FragPos);</span><br><span class=\"line\">    <span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (pointLight.constant + pointLight.linear * <span class=\"built_in\">distance</span> + </span><br><span class=\"line\">                pointLight.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, pointLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, pointLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, pointLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=pointLight.color;</span><br><span class=\"line\">        diffuse*=pointLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=pointLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient *= attenuation;</span><br><span class=\"line\">    diffuse *= attenuation;</span><br><span class=\"line\">    specular *= attenuation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">vec3</span> potLightCalc(PotLight potLight, <span class=\"type\">vec3</span> basicDiffuse , <span class=\"type\">vec3</span> basicSpecular,<span class=\"type\">vec3</span> fragPos, <span class=\"type\">vec3</span> norm, <span class=\"type\">vec3</span> viewDir )&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(potLight.position - fragPos);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">float</span> <span class=\"built_in\">distance</span>    = <span class=\"built_in\">length</span>(potLight.position - FragPos);</span><br><span class=\"line\">    <span class=\"type\">float</span> attenuation = <span class=\"number\">1.0</span> / (potLight.constant + potLight.linear * <span class=\"built_in\">distance</span> + </span><br><span class=\"line\">                potLight.quadratic * (<span class=\"built_in\">distance</span> * <span class=\"built_in\">distance</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientCalc(basicDiffuse, potLight.ambient);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse =  diffuseCalc(basicDiffuse, potLight.diffuse,norm, lightDir);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularCalc(basicSpecular, potLight.specular,viewDir, reflectDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// spotlight (soft edges)</span></span><br><span class=\"line\">    <span class=\"type\">float</span> theta = <span class=\"built_in\">dot</span>(lightDir, <span class=\"built_in\">normalize</span>(-potLight.direction)); </span><br><span class=\"line\">    <span class=\"type\">float</span> epsilon = (potLight.cutOff - potLight.outerCutOff);</span><br><span class=\"line\">    <span class=\"type\">float</span> intensity = <span class=\"built_in\">clamp</span>((theta - potLight.outerCutOff) / epsilon, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    diffuse  *= intensity;</span><br><span class=\"line\">    specular *= intensity;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient*=potLight.color;</span><br><span class=\"line\">        diffuse*=potLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    specular*=potLight.color;</span><br><span class=\"line\"></span><br><span class=\"line\">    ambient *= attenuation;</span><br><span class=\"line\">    diffuse *= attenuation;</span><br><span class=\"line\">    specular *= attenuation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ambient + diffuse + specular;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> basicDiffuse = <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.diffuse,texCoord)); </span><br><span class=\"line\">    <span class=\"type\">vec3</span> basicSpecular = <span class=\"type\">vec3</span>(<span class=\"built_in\">texture</span>(material.specular,texCoord));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = <span class=\"type\">vec3</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    result = dirLightCalc(dirLight, basicDiffuse, basicSpecular, norm, viewDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        result += pointLightCalc(pointLights[i], basicDiffuse, basicSpecular, FragPos,norm, viewDir );</span><br><span class=\"line\">    </span><br><span class=\"line\">    result += potLightCalc(potLight, basicDiffuse, basicSpecular, FragPos,norm, viewDir );</span><br><span class=\"line\"></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>顶点着色器:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aNormal;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">2</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> model;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> view;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> projection;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat3</span> reverseModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> texCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    FragPos = <span class=\"type\">vec3</span>(model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    Normal = reverseModel * aNormal;</span><br><span class=\"line\">    texCoord = aTexCoord;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>c++代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;my_glfw.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyPerspectCamera.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyShader.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;myTexture.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;my_camera_input_procecssor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;DirectLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;PointLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SpotLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;MyMaterial.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> MyPerspectCamera myPerspectCamera;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> GLFWwindow* window;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">debug</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x % <span class=\"number\">1000</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;========= x ========= start ==========&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">glCheckError</span>();</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;========= x ========= end ==========&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test0318</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// D:\\files\\doc\\shaders\\colortest</span></span><br><span class=\"line\">\t<span class=\"built_in\">initGlfw</span>();</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* vertexPath = <span class=\"string\">&quot;D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\vertex.glsl&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* fragPath = <span class=\"string\">&quot;D:\\\\files\\\\doc\\\\shaders\\\\colortest\\\\mix\\\\frag.glsl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* diffuseTexturePath = <span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2.png&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* specularTexturePath = <span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\test\\\\container2_specular.png&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\twindow = <span class=\"built_in\">glfwCreateWindow</span>(SCREEN_WIDTH, SCREEN_HEIGH, <span class=\"string\">&quot;hello 0314&quot;</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::cout &lt;&lt; window &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"built_in\">glfwMakeContextCurrent</span>(window);</span><br><span class=\"line\">\t<span class=\"built_in\">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class=\"line\">\t<span class=\"type\">int</span> f = <span class=\"built_in\">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glfwSetInputMode</span>(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmyPerspectCamera = <span class=\"built_in\">MyPerspectCamera</span>(<span class=\"built_in\">VEC3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">-3.f</span>), <span class=\"built_in\">VEC3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">VEC3</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">regist_my_camera</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">float</span> vertex[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// positions          // normals           // texture coords</span></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,   <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">-1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">-0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">1.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tGLuint indices[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">1</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tglm::vec3 cubePositions[] = &#123;</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>,  <span class=\"number\">0.0f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">2.0f</span>,  <span class=\"number\">5.0f</span>, <span class=\"number\">-15.0f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.5f</span>, <span class=\"number\">-2.2f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-3.8f</span>, <span class=\"number\">-2.0f</span>, <span class=\"number\">-12.3f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">2.4f</span>, <span class=\"number\">-0.4f</span>, <span class=\"number\">-3.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.7f</span>,  <span class=\"number\">3.0f</span>, <span class=\"number\">-7.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.3f</span>, <span class=\"number\">-2.0f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.5f</span>,  <span class=\"number\">2.0f</span>, <span class=\"number\">-2.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.5f</span>,  <span class=\"number\">0.2f</span>, <span class=\"number\">-1.5f</span>),</span><br><span class=\"line\">\tglm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-1.3f</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">-1.5f</span>)</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// VAO;</span></span><br><span class=\"line\">\tGLuint objVAO, VBO;</span><br><span class=\"line\">\t<span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;objVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(objVAO);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glGenBuffers</span>(<span class=\"number\">1</span>,&amp;VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBufferData</span>(GL_ARRAY_BUFFER,<span class=\"built_in\">sizeof</span>(vertex),vertex,GL_STATIC_DRAW);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ATTRIBUTE</span></span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)(<span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>)));</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tGLuint lightVAO;</span><br><span class=\"line\">\t<span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>,&amp;lightVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\">\t<span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">\t<span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">glBindVertexArray</span>(<span class=\"number\">0</span>);<span class=\"comment\">// unbind vao</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// shader</span></span><br><span class=\"line\">\t<span class=\"function\">MyShader <span class=\"title\">objShader</span><span class=\"params\">(vertexPath,fragPath)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//MyShader lightShader(&quot;&quot;, &quot;&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">myTexture <span class=\"title\">objDiffuse</span><span class=\"params\">(diffuseTexturePath, GL_RGBA, GL_RGBA)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">myTexture <span class=\"title\">objSpecular</span><span class=\"params\">(specularTexturePath, GL_RGBA, GL_RGBA)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLight baseLight1 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.2f</span>,<span class=\"number\">0.5f</span>,<span class=\"number\">0.2f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.4f</span>, <span class=\"number\">0.4f</span>, <span class=\"number\">0.4f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>));</span><br><span class=\"line\">\tLight baseLight2 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>, <span class=\"number\">0.05f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.8f</span>, <span class=\"number\">0.8f</span>, <span class=\"number\">0.8f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>));</span><br><span class=\"line\">\tLight baseLight3 = <span class=\"built_in\">Light</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tDirectLight dirLight = <span class=\"built_in\">DirectLight</span>(baseLight1,glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">-0.2f</span>, <span class=\"number\">-1.0f</span>, <span class=\"number\">-0.3f</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tPointLight pointLights[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PointLight</span>(<span class=\"number\">0</span>,baseLight1,glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.7f</span>,  <span class=\"number\">0.2f</span>,  <span class=\"number\">2.0f</span>),<span class=\"number\">1.0f</span>,<span class=\"number\">0.09f</span>,<span class=\"number\">0.032f</span>),</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpotLight spotLight = <span class=\"built_in\">SpotLight</span>(baseLight3,</span><br><span class=\"line\">\t\t&amp;myPerspectCamera,</span><br><span class=\"line\">\t\tglm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">12.5f</span>)), glm::<span class=\"built_in\">cos</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">15.f</span>)),</span><br><span class=\"line\">\t\t<span class=\"number\">1</span>,<span class=\"number\">0.09f</span>,<span class=\"number\">0.032f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">MyMaterial <span class=\"title\">myMaterial</span><span class=\"params\">(&amp;objDiffuse, &amp;objSpecular,<span class=\"number\">32.f</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//model = glm::scale(model,glm::vec3(5));</span></span><br><span class=\"line\">\t_MAIN_LOOP&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glClearColor</span>(baseLight1.color[<span class=\"number\">0</span>], baseLight1.color[<span class=\"number\">1</span>], baseLight1.color[<span class=\"number\">2</span>], <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glEnable</span>(GL_DEPTH_TEST);</span><br><span class=\"line\">\t\t<span class=\"built_in\">processInput</span>(window);</span><br><span class=\"line\">\t\t<span class=\"comment\">// render obj</span></span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glBindVertexArray</span>(objVAO);</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;view&quot;</span>,myPerspectCamera.<span class=\"built_in\">vieMatrix</span>());</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;projection&quot;</span>,myPerspectCamera.<span class=\"built_in\">projection</span>());</span><br><span class=\"line\">\t\tobjShader.<span class=\"built_in\">setFloat3</span>(<span class=\"string\">&quot;viewPos&quot;</span>, myPerspectCamera.Position);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"comment\">// update model maybe</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tdirLight.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (PointLight pt : pointLights) &#123;</span><br><span class=\"line\">\t\t\tpt.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tspotLight.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\">\t\tmyMaterial.<span class=\"built_in\">setToUniform</span>(&amp;objShader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">sizeof</span>(cubePositions)/(<span class=\"built_in\">sizeof</span>(glm::vec3));i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">glm::mat4 <span class=\"title\">model</span><span class=\"params\">(<span class=\"number\">1.f</span>)</span></span>;</span><br><span class=\"line\">\t\t\tmodel = glm::<span class=\"built_in\">translate</span>(model, cubePositions[i]);</span><br><span class=\"line\">\t\t\t<span class=\"type\">float</span> angle = <span class=\"number\">20.0f</span> * i;</span><br><span class=\"line\">\t\t\tmodel = glm::<span class=\"built_in\">rotate</span>(model, glm::<span class=\"built_in\">radians</span>(angle), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.5f</span>));</span><br><span class=\"line\">\t\t\tglm::mat3 reverseModel = glm::<span class=\"built_in\">mat3</span>(glm::<span class=\"built_in\">transpose</span>(glm::<span class=\"built_in\">inverse</span>(model)));</span><br><span class=\"line\">\t\t\tobjShader.<span class=\"built_in\">setMatrix4</span>(<span class=\"string\">&quot;model&quot;</span>, model);</span><br><span class=\"line\">\t\t\tobjShader.<span class=\"built_in\">setMatrix3</span>(<span class=\"string\">&quot;reverseModel&quot;</span>, reverseModel);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\t<span class=\"comment\">// render light</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">glfwSwapBuffers</span>(window);</span><br><span class=\"line\">\t\t<span class=\"built_in\">glfwPollEvents</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">debug</span>(x);</span><br><span class=\"line\">\t\tx++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>光照类：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;DirectLight.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DirectLight::setToUniform</span><span class=\"params\">(MyShader* shader)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;dirLight.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;direction&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;direction[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;PointLight.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PointLight::setToUniform</span><span class=\"params\">(MyShader* shader)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;pointLights[&quot;</span> + std::<span class=\"built_in\">to_string</span>(<span class=\"keyword\">this</span>-&gt;indices) + <span class=\"string\">&quot;].&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// color</span></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// ambient</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// diffuse</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// position</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;position&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;position[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//float constant;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;constant&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;constant);</span><br><span class=\"line\">\t<span class=\"comment\">//float linear;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;linear&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;linear);</span><br><span class=\"line\">\t<span class=\"comment\">//float quadratic;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;quadratic&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;quadratic);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SpotLight.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SpotLight::setToUniform</span>  <span class=\"params\">(MyShader* shader)</span> </span>&#123;</span><br><span class=\"line\">\tstd::string prefix = <span class=\"string\">&quot;potLight.&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// color</span></span><br><span class=\"line\">\tstd::string tmpPrefix = prefix + <span class=\"string\">&quot;color&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(),<span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.color[<span class=\"number\">2</span>] );</span><br><span class=\"line\">\t<span class=\"comment\">// ambient</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;ambient&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.ambient[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// diffuse</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;diffuse&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.diffuse[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;specular&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;myLight.specular[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// position</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;position&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getPosition</span>()[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">// specular</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;direction&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat3</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">0</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">1</span>], <span class=\"keyword\">this</span>-&gt;pos-&gt;<span class=\"built_in\">getDirection</span>()[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;cutOff&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;cutOff);</span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;outerCutOff&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;outerCutOff);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//float constant;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;constant&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;constant);</span><br><span class=\"line\">\t<span class=\"comment\">//float linear;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;linear&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;linear);</span><br><span class=\"line\">\t<span class=\"comment\">//float quadratic;</span></span><br><span class=\"line\">\ttmpPrefix = prefix + <span class=\"string\">&quot;quadratic&quot;</span>;</span><br><span class=\"line\">\tshader-&gt;<span class=\"built_in\">setFloat</span>(tmpPrefix.<span class=\"built_in\">c_str</span>(), <span class=\"keyword\">this</span>-&gt;quadratic);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"opengl 颜色","date":"2024-03-09T18:12:10.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 颜色\n在前面的教程中我们已经简要提到过该如何在OpenGL中使用颜色(Color)，但是我们至今所接触到的都是很浅层的知识。本节我们将会更深入地讨论什么是颜色，并且还会为接下来的光照(Lighting)教程创建一个场景。\n\n现实世界中有无数种颜色，每一个物体都有它们自己的颜色。我们需要使用（有限的）数值来模拟真实世界中（无限）的颜色，所以并不是所有现实世界中的颜色都可以用数值来表示的。然而我们仍能通过数值来表现出非常多的颜色，甚至你可能都不会注意到与现实的颜色有任何的差异。颜色可以数字化的由红色(Red)、绿色(Green)和蓝色(Blue)三个分量组成，它们通常被缩写为RGB。仅仅用这三个值就可以组合出任意一种颜色。例如，要获取一个珊瑚红(Coral)色的话，我们可以定义这样的一个颜色向量：\n```c++\nglm::vec3 coral(1.0f, 0.5f, 0.31f);\n```\n我们在现实生活中看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它所反射的(Reflected)颜色。换句话说，那些不能被物体所吸收(Absorb)的颜色（被拒绝的颜色）就是我们能够感知到的物体的颜色。例如，太阳光能被看见的白光其实是由许多不同的颜色组合而成的（如下图所示）。如果我们将白光照在一个蓝色的玩具上，这个蓝色的玩具会吸收白光中除了蓝色以外的所有子颜色，不被吸收的蓝色光被反射到我们的眼中，让这个玩具看起来是蓝色的。下图显示的是一个珊瑚红的玩具，它以不同强度反射了多个颜色。\n![2024-03-10T145637](2024-03-10T145637.png)\n你可以看到，白色的阳光实际上是所有可见颜色的集合，物体吸收了其中的大部分颜色。它仅反射了代表物体颜色的部分，被反射颜色的组合就是我们所感知到的颜色（此例中为珊瑚红）。\n\n这些颜色反射的定律被直接地运用在图形领域。当我们在OpenGL中创建一个光源时，我们希望给光源一个颜色。在上一段中我们有一个白色的太阳，所以我们也将光源设置为白色。当我们把光源的颜色与物体的颜色值相乘，所得到的就是这个物体所反射的颜色（也就是我们所感知到的颜色）。让我们再次审视我们的玩具（这一次它还是珊瑚红），看看如何在图形学中计算出它的反射颜色。`我们将这两个颜色向量作分量相乘`，结果就是最终的颜色向量了：\n```c++\nglm::vec3 lightColor(1.0f, 1.0f, 1.0f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (1.0f, 0.5f, 0.31f);\n```\n\n我们可以看到玩具的颜色吸收了白色光源中很大一部分的颜色，但它根据自身的颜色值对红、绿、蓝三个分量都做出了一定的反射。这也表现了现实中颜色的工作原理。由此，我们可以定义物体的颜色为物体从一个光源反射各个颜色分量的大小。现在，如果我们使用绿色的光源又会发生什么呢？\n```c++\nglm::vec3 lightColor(0.0f, 1.0f, 0.0f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (0.0f, 0.5f, 0.0f);\n```\n\n可以看到，并没有红色和蓝色的光让我们的玩具来吸收或反射。这个玩具吸收了光线中一半的绿色值，但仍然也反射了一半的绿色值。玩具现在看上去是深绿色(Dark-greenish)的。我们可以看到，如果我们用绿色光源来照射玩具，那么只有绿色分量能被反射和感知到，红色和蓝色都不能被我们所感知到。这样做的结果是，一个珊瑚红的玩具突然变成了深绿色物体。现在我们来看另一个例子，使用深橄榄绿色(Dark olive-green)的光源：\n\n```c++\nglm::vec3 lightColor(0.33f, 0.42f, 0.18f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (0.33f, 0.21f, 0.06f);\n```\n可以看到，我们可以使用不同的光源颜色来让物体显现出意想不到的颜色。有创意地利用颜色其实并不难。\n\n这些颜色的理论已经足够了，下面我们来构造一个实验用的场景吧。\n\n# 创建一个光照场景\n在接下来的教程中，我们将会广泛地使用颜色来模拟现实世界中的光照效果，创造出一些有趣的视觉效果。由于我们现在将会使用光源了，我们希望将它们显示为可见的物体，并在场景中至少加入一个物体来测试模拟光照的效果。\n\n首先我们需要一个物体来作为被投光(Cast the light)的对象，我们将使用前面教程中的那个著名的立方体箱子。我们还需要一个物体来代表光源在3D场景中的位置。简单起见，我们依然使用一个立方体来代表光源（我们已拥有立方体的顶点数据是吧？）。\n\n填一个顶点缓冲对象(VBO)，设定一下顶点属性指针和其它一些乱七八糟的东西现在对你来说应该很容易了，所以我们就不再赘述那些步骤了。如果你仍然觉得这很困难，我建议你复习之前的教程，并且在继续学习之前先把练习过一遍。\n\n我们首先需要一个顶点着色器来绘制箱子。与之前的顶点着色器相比，容器的顶点位置是保持不变的（虽然这一次我们不需要纹理坐标了），因此顶点着色器中没有新的代码。我们将会使用之前教程顶点着色器的精简版：\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n}\n```\n\n记得更新你的顶点数据和属性指针使其与新的顶点着色器保持一致（当然你可以继续留着纹理数据和属性指针。在这一节中我们将不会用到它们，但有一个全新的开始也不是什么坏主意）。\n\n因为我们还要创建一个表示灯（光源）的立方体，所以我们还要为这个灯创建一个专门的VAO。当然我们也可以让这个灯和其它物体使用同一个VAO，简单地对它的model（模型）矩阵做一些变换就好了，然而接下来的教程中我们会频繁地对顶点数据和属性指针做出修改，我们并不想让这些修改影响到灯（我们只关心灯的顶点位置），因此我们有必要为灯创建一个新的VAO。\n\n```c++\nunsigned int lightVAO;\nglGenVertexArrays(1, &lightVAO);\nglBindVertexArray(lightVAO);\n// 只需要绑定VBO不用再次设置VBO的数据，因为箱子的VBO数据中已经包含了正确的立方体顶点数据\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\n// 设置灯立方体的顶点属性（对我们的灯来说仅仅只有位置数据）\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n这段代码对你来说应该非常直观。现在我们已经创建了表示灯和被照物体箱子，我们只需要再定义一个片段着色器就行了：\n\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\n\nvoid main()\n{\n    FragColor = vec4(lightColor * objectColor, 1.0);\n}\n```\n\n这个片段着色器从uniform变量中接受物体的颜色和光源的颜色。正如本节一开始所讨论的那样，我们将光源的颜色和物体（反射的）颜色相乘。这个着色器理解起来应该很容易。我们把物体的颜色设置为之前提到的珊瑚红色，并把光源设置为白色。\n```c++\n// 在此之前不要忘记首先 use 对应的着色器程序（来设定uniform）\nlightingShader.use();\nlightingShader.setVec3(\"objectColor\", 1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"lightColor\",  1.0f, 1.0f, 1.0f);\n```\n\n要注意的是，当我们修改顶点或者片段着色器后，灯的位置或颜色也会随之改变，这并不是我们想要的效果。我们不希望灯的颜色在接下来的教程中因光照计算的结果而受到影响，而是希望它能够与其它的计算分离。我们希望灯一直保持明亮，不受其它颜色变化的影响（这样它才更像是一个真实的光源）。\n\n为了实现这个目标，我们需要为灯的绘制创建另外的一套着色器，从而能保证它能够在其它光照着色器发生改变的时候不受影响。顶点着色器与我们当前的顶点着色器是一样的，所以你可以直接把现在的顶点着色器用在灯上。灯的片段着色器给灯定义了一个不变的常量白色，保证了灯的颜色一直是亮的：\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0); // 将向量的四个分量全部设置为1.0\n}\n```\n\n当我们想要绘制我们的物体的时候，我们需要使用刚刚定义的光照着色器来绘制箱子（或者可能是其它的物体）。当我们想要绘制灯的时候，我们会使用灯的着色器。在之后的教程里我们会逐步更新这个光照着色器，从而能够慢慢地实现更真实的效果。\n\n使用这个灯立方体的主要目的是为了让我们知道光源在场景中的具体位置。我们通常在场景中定义一个光源的位置，但这只是一个位置，它并没有视觉意义。为了显示真正的灯，我们将表示光源的立方体绘制在与光源相同的位置。我们将使用我们为它新建的片段着色器来绘制它，让它一直处于白色的状态，不受场景中的光照影响。\n\n我们声明一个全局vec3变量来表示光源在场景的世界空间坐标中的位置：\n\n```c++\nglm::vec3 lightPos(1.2f, 1.0f, 2.0f);\n```\n然后我们把灯位移到这里，然后将它缩小一点，让它不那么明显：\n```c++\nmodel = glm::mat4(1.f);\nmodel = glm::translate(model, lightPos);\nmodel = glm::scale(model, glm::vec3(0.2f));\n```\n绘制灯立方体的代码应该与下面的类似：\n```c++\nlampShader.use();\n// 设置模型、视图和投影矩阵uniform\n...\n// 绘制灯立方体对象\nglBindVertexArray(lightVAO);\nglDrawArrays(GL_TRIANGLES, 0, 36);\n```\n","source":"_posts/opengl_color_light01.md","raw":"---\ntitle: opengl 颜色\ndate: 2024-03-10T10:12:10+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 颜色\n在前面的教程中我们已经简要提到过该如何在OpenGL中使用颜色(Color)，但是我们至今所接触到的都是很浅层的知识。本节我们将会更深入地讨论什么是颜色，并且还会为接下来的光照(Lighting)教程创建一个场景。\n\n现实世界中有无数种颜色，每一个物体都有它们自己的颜色。我们需要使用（有限的）数值来模拟真实世界中（无限）的颜色，所以并不是所有现实世界中的颜色都可以用数值来表示的。然而我们仍能通过数值来表现出非常多的颜色，甚至你可能都不会注意到与现实的颜色有任何的差异。颜色可以数字化的由红色(Red)、绿色(Green)和蓝色(Blue)三个分量组成，它们通常被缩写为RGB。仅仅用这三个值就可以组合出任意一种颜色。例如，要获取一个珊瑚红(Coral)色的话，我们可以定义这样的一个颜色向量：\n```c++\nglm::vec3 coral(1.0f, 0.5f, 0.31f);\n```\n我们在现实生活中看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它所反射的(Reflected)颜色。换句话说，那些不能被物体所吸收(Absorb)的颜色（被拒绝的颜色）就是我们能够感知到的物体的颜色。例如，太阳光能被看见的白光其实是由许多不同的颜色组合而成的（如下图所示）。如果我们将白光照在一个蓝色的玩具上，这个蓝色的玩具会吸收白光中除了蓝色以外的所有子颜色，不被吸收的蓝色光被反射到我们的眼中，让这个玩具看起来是蓝色的。下图显示的是一个珊瑚红的玩具，它以不同强度反射了多个颜色。\n![2024-03-10T145637](2024-03-10T145637.png)\n你可以看到，白色的阳光实际上是所有可见颜色的集合，物体吸收了其中的大部分颜色。它仅反射了代表物体颜色的部分，被反射颜色的组合就是我们所感知到的颜色（此例中为珊瑚红）。\n\n这些颜色反射的定律被直接地运用在图形领域。当我们在OpenGL中创建一个光源时，我们希望给光源一个颜色。在上一段中我们有一个白色的太阳，所以我们也将光源设置为白色。当我们把光源的颜色与物体的颜色值相乘，所得到的就是这个物体所反射的颜色（也就是我们所感知到的颜色）。让我们再次审视我们的玩具（这一次它还是珊瑚红），看看如何在图形学中计算出它的反射颜色。`我们将这两个颜色向量作分量相乘`，结果就是最终的颜色向量了：\n```c++\nglm::vec3 lightColor(1.0f, 1.0f, 1.0f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (1.0f, 0.5f, 0.31f);\n```\n\n我们可以看到玩具的颜色吸收了白色光源中很大一部分的颜色，但它根据自身的颜色值对红、绿、蓝三个分量都做出了一定的反射。这也表现了现实中颜色的工作原理。由此，我们可以定义物体的颜色为物体从一个光源反射各个颜色分量的大小。现在，如果我们使用绿色的光源又会发生什么呢？\n```c++\nglm::vec3 lightColor(0.0f, 1.0f, 0.0f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (0.0f, 0.5f, 0.0f);\n```\n\n可以看到，并没有红色和蓝色的光让我们的玩具来吸收或反射。这个玩具吸收了光线中一半的绿色值，但仍然也反射了一半的绿色值。玩具现在看上去是深绿色(Dark-greenish)的。我们可以看到，如果我们用绿色光源来照射玩具，那么只有绿色分量能被反射和感知到，红色和蓝色都不能被我们所感知到。这样做的结果是，一个珊瑚红的玩具突然变成了深绿色物体。现在我们来看另一个例子，使用深橄榄绿色(Dark olive-green)的光源：\n\n```c++\nglm::vec3 lightColor(0.33f, 0.42f, 0.18f);\nglm::vec3 toyColor(1.0f, 0.5f, 0.31f);\nglm::vec3 result = lightColor * toyColor; // = (0.33f, 0.21f, 0.06f);\n```\n可以看到，我们可以使用不同的光源颜色来让物体显现出意想不到的颜色。有创意地利用颜色其实并不难。\n\n这些颜色的理论已经足够了，下面我们来构造一个实验用的场景吧。\n\n# 创建一个光照场景\n在接下来的教程中，我们将会广泛地使用颜色来模拟现实世界中的光照效果，创造出一些有趣的视觉效果。由于我们现在将会使用光源了，我们希望将它们显示为可见的物体，并在场景中至少加入一个物体来测试模拟光照的效果。\n\n首先我们需要一个物体来作为被投光(Cast the light)的对象，我们将使用前面教程中的那个著名的立方体箱子。我们还需要一个物体来代表光源在3D场景中的位置。简单起见，我们依然使用一个立方体来代表光源（我们已拥有立方体的顶点数据是吧？）。\n\n填一个顶点缓冲对象(VBO)，设定一下顶点属性指针和其它一些乱七八糟的东西现在对你来说应该很容易了，所以我们就不再赘述那些步骤了。如果你仍然觉得这很困难，我建议你复习之前的教程，并且在继续学习之前先把练习过一遍。\n\n我们首先需要一个顶点着色器来绘制箱子。与之前的顶点着色器相比，容器的顶点位置是保持不变的（虽然这一次我们不需要纹理坐标了），因此顶点着色器中没有新的代码。我们将会使用之前教程顶点着色器的精简版：\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n}\n```\n\n记得更新你的顶点数据和属性指针使其与新的顶点着色器保持一致（当然你可以继续留着纹理数据和属性指针。在这一节中我们将不会用到它们，但有一个全新的开始也不是什么坏主意）。\n\n因为我们还要创建一个表示灯（光源）的立方体，所以我们还要为这个灯创建一个专门的VAO。当然我们也可以让这个灯和其它物体使用同一个VAO，简单地对它的model（模型）矩阵做一些变换就好了，然而接下来的教程中我们会频繁地对顶点数据和属性指针做出修改，我们并不想让这些修改影响到灯（我们只关心灯的顶点位置），因此我们有必要为灯创建一个新的VAO。\n\n```c++\nunsigned int lightVAO;\nglGenVertexArrays(1, &lightVAO);\nglBindVertexArray(lightVAO);\n// 只需要绑定VBO不用再次设置VBO的数据，因为箱子的VBO数据中已经包含了正确的立方体顶点数据\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\n// 设置灯立方体的顶点属性（对我们的灯来说仅仅只有位置数据）\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n这段代码对你来说应该非常直观。现在我们已经创建了表示灯和被照物体箱子，我们只需要再定义一个片段着色器就行了：\n\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\n\nvoid main()\n{\n    FragColor = vec4(lightColor * objectColor, 1.0);\n}\n```\n\n这个片段着色器从uniform变量中接受物体的颜色和光源的颜色。正如本节一开始所讨论的那样，我们将光源的颜色和物体（反射的）颜色相乘。这个着色器理解起来应该很容易。我们把物体的颜色设置为之前提到的珊瑚红色，并把光源设置为白色。\n```c++\n// 在此之前不要忘记首先 use 对应的着色器程序（来设定uniform）\nlightingShader.use();\nlightingShader.setVec3(\"objectColor\", 1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"lightColor\",  1.0f, 1.0f, 1.0f);\n```\n\n要注意的是，当我们修改顶点或者片段着色器后，灯的位置或颜色也会随之改变，这并不是我们想要的效果。我们不希望灯的颜色在接下来的教程中因光照计算的结果而受到影响，而是希望它能够与其它的计算分离。我们希望灯一直保持明亮，不受其它颜色变化的影响（这样它才更像是一个真实的光源）。\n\n为了实现这个目标，我们需要为灯的绘制创建另外的一套着色器，从而能保证它能够在其它光照着色器发生改变的时候不受影响。顶点着色器与我们当前的顶点着色器是一样的，所以你可以直接把现在的顶点着色器用在灯上。灯的片段着色器给灯定义了一个不变的常量白色，保证了灯的颜色一直是亮的：\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0); // 将向量的四个分量全部设置为1.0\n}\n```\n\n当我们想要绘制我们的物体的时候，我们需要使用刚刚定义的光照着色器来绘制箱子（或者可能是其它的物体）。当我们想要绘制灯的时候，我们会使用灯的着色器。在之后的教程里我们会逐步更新这个光照着色器，从而能够慢慢地实现更真实的效果。\n\n使用这个灯立方体的主要目的是为了让我们知道光源在场景中的具体位置。我们通常在场景中定义一个光源的位置，但这只是一个位置，它并没有视觉意义。为了显示真正的灯，我们将表示光源的立方体绘制在与光源相同的位置。我们将使用我们为它新建的片段着色器来绘制它，让它一直处于白色的状态，不受场景中的光照影响。\n\n我们声明一个全局vec3变量来表示光源在场景的世界空间坐标中的位置：\n\n```c++\nglm::vec3 lightPos(1.2f, 1.0f, 2.0f);\n```\n然后我们把灯位移到这里，然后将它缩小一点，让它不那么明显：\n```c++\nmodel = glm::mat4(1.f);\nmodel = glm::translate(model, lightPos);\nmodel = glm::scale(model, glm::vec3(0.2f));\n```\n绘制灯立方体的代码应该与下面的类似：\n```c++\nlampShader.use();\n// 设置模型、视图和投影矩阵uniform\n...\n// 绘制灯立方体对象\nglBindVertexArray(lightVAO);\nglDrawArrays(GL_TRIANGLES, 0, 36);\n```\n","slug":"opengl_color_light01","published":1,"updated":"2025-03-28T02:05:16.323Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7t002k1wu12fu9d3sd","content":"<p><img src=\"/2024/03/10/opengl_color_light01/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h1><p>在前面的教程中我们已经简要提到过该如何在OpenGL中使用颜色(Color)，但是我们至今所接触到的都是很浅层的知识。本节我们将会更深入地讨论什么是颜色，并且还会为接下来的光照(Lighting)教程创建一个场景。</p>\n<p>现实世界中有无数种颜色，每一个物体都有它们自己的颜色。我们需要使用（有限的）数值来模拟真实世界中（无限）的颜色，所以并不是所有现实世界中的颜色都可以用数值来表示的。然而我们仍能通过数值来表现出非常多的颜色，甚至你可能都不会注意到与现实的颜色有任何的差异。颜色可以数字化的由红色(Red)、绿色(Green)和蓝色(Blue)三个分量组成，它们通常被缩写为RGB。仅仅用这三个值就可以组合出任意一种颜色。例如，要获取一个珊瑚红(Coral)色的话，我们可以定义这样的一个颜色向量：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">coral</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>我们在现实生活中看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它所反射的(Reflected)颜色。换句话说，那些不能被物体所吸收(Absorb)的颜色（被拒绝的颜色）就是我们能够感知到的物体的颜色。例如，太阳光能被看见的白光其实是由许多不同的颜色组合而成的（如下图所示）。如果我们将白光照在一个蓝色的玩具上，这个蓝色的玩具会吸收白光中除了蓝色以外的所有子颜色，不被吸收的蓝色光被反射到我们的眼中，让这个玩具看起来是蓝色的。下图显示的是一个珊瑚红的玩具，它以不同强度反射了多个颜色。<br><img src=\"/2024/03/10/opengl_color_light01/2024-03-10T145637.png\" alt=\"2024-03-10T145637\"><br>你可以看到，白色的阳光实际上是所有可见颜色的集合，物体吸收了其中的大部分颜色。它仅反射了代表物体颜色的部分，被反射颜色的组合就是我们所感知到的颜色（此例中为珊瑚红）。</p>\n<p>这些颜色反射的定律被直接地运用在图形领域。当我们在OpenGL中创建一个光源时，我们希望给光源一个颜色。在上一段中我们有一个白色的太阳，所以我们也将光源设置为白色。当我们把光源的颜色与物体的颜色值相乘，所得到的就是这个物体所反射的颜色（也就是我们所感知到的颜色）。让我们再次审视我们的玩具（这一次它还是珊瑚红），看看如何在图形学中计算出它的反射颜色。<code>我们将这两个颜色向量作分量相乘</code>，结果就是最终的颜色向量了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (1.0f, 0.5f, 0.31f);</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到玩具的颜色吸收了白色光源中很大一部分的颜色，但它根据自身的颜色值对红、绿、蓝三个分量都做出了一定的反射。这也表现了现实中颜色的工作原理。由此，我们可以定义物体的颜色为物体从一个光源反射各个颜色分量的大小。现在，如果我们使用绿色的光源又会发生什么呢？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (0.0f, 0.5f, 0.0f);</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，并没有红色和蓝色的光让我们的玩具来吸收或反射。这个玩具吸收了光线中一半的绿色值，但仍然也反射了一半的绿色值。玩具现在看上去是深绿色(Dark-greenish)的。我们可以看到，如果我们用绿色光源来照射玩具，那么只有绿色分量能被反射和感知到，红色和蓝色都不能被我们所感知到。这样做的结果是，一个珊瑚红的玩具突然变成了深绿色物体。现在我们来看另一个例子，使用深橄榄绿色(Dark olive-green)的光源：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">0.33f</span>, <span class=\"number\">0.42f</span>, <span class=\"number\">0.18f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (0.33f, 0.21f, 0.06f);</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，我们可以使用不同的光源颜色来让物体显现出意想不到的颜色。有创意地利用颜色其实并不难。</p>\n<p>这些颜色的理论已经足够了，下面我们来构造一个实验用的场景吧。</p>\n<h1 id=\"创建一个光照场景\"><a href=\"#创建一个光照场景\" class=\"headerlink\" title=\"创建一个光照场景\"></a>创建一个光照场景</h1><p>在接下来的教程中，我们将会广泛地使用颜色来模拟现实世界中的光照效果，创造出一些有趣的视觉效果。由于我们现在将会使用光源了，我们希望将它们显示为可见的物体，并在场景中至少加入一个物体来测试模拟光照的效果。</p>\n<p>首先我们需要一个物体来作为被投光(Cast the light)的对象，我们将使用前面教程中的那个著名的立方体箱子。我们还需要一个物体来代表光源在3D场景中的位置。简单起见，我们依然使用一个立方体来代表光源（我们已拥有立方体的顶点数据是吧？）。</p>\n<p>填一个顶点缓冲对象(VBO)，设定一下顶点属性指针和其它一些乱七八糟的东西现在对你来说应该很容易了，所以我们就不再赘述那些步骤了。如果你仍然觉得这很困难，我建议你复习之前的教程，并且在继续学习之前先把练习过一遍。</p>\n<p>我们首先需要一个顶点着色器来绘制箱子。与之前的顶点着色器相比，容器的顶点位置是保持不变的（虽然这一次我们不需要纹理坐标了），因此顶点着色器中没有新的代码。我们将会使用之前教程顶点着色器的精简版：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> model;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> view;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> projection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记得更新你的顶点数据和属性指针使其与新的顶点着色器保持一致（当然你可以继续留着纹理数据和属性指针。在这一节中我们将不会用到它们，但有一个全新的开始也不是什么坏主意）。</p>\n<p>因为我们还要创建一个表示灯（光源）的立方体，所以我们还要为这个灯创建一个专门的VAO。当然我们也可以让这个灯和其它物体使用同一个VAO，简单地对它的model（模型）矩阵做一些变换就好了，然而接下来的教程中我们会频繁地对顶点数据和属性指针做出修改，我们并不想让这些修改影响到灯（我们只关心灯的顶点位置），因此我们有必要为灯创建一个新的VAO。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> lightVAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;lightVAO);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\"><span class=\"comment\">// 只需要绑定VBO不用再次设置VBO的数据，因为箱子的VBO数据中已经包含了正确的立方体顶点数据</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"comment\">// 设置灯立方体的顶点属性（对我们的灯来说仅仅只有位置数据）</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这段代码对你来说应该非常直观。现在我们已经创建了表示灯和被照物体箱子，我们只需要再定义一个片段着色器就行了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(lightColor * objectColor, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个片段着色器从uniform变量中接受物体的颜色和光源的颜色。正如本节一开始所讨论的那样，我们将光源的颜色和物体（反射的）颜色相乘。这个着色器理解起来应该很容易。我们把物体的颜色设置为之前提到的珊瑚红色，并把光源设置为白色。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在此之前不要忘记首先 use 对应的着色器程序（来设定uniform）</span></span><br><span class=\"line\">lightingShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;objectColor&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;lightColor&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，当我们修改顶点或者片段着色器后，灯的位置或颜色也会随之改变，这并不是我们想要的效果。我们不希望灯的颜色在接下来的教程中因光照计算的结果而受到影响，而是希望它能够与其它的计算分离。我们希望灯一直保持明亮，不受其它颜色变化的影响（这样它才更像是一个真实的光源）。</p>\n<p>为了实现这个目标，我们需要为灯的绘制创建另外的一套着色器，从而能保证它能够在其它光照着色器发生改变的时候不受影响。顶点着色器与我们当前的顶点着色器是一样的，所以你可以直接把现在的顶点着色器用在灯上。灯的片段着色器给灯定义了一个不变的常量白色，保证了灯的颜色一直是亮的：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(<span class=\"number\">1.0</span>); <span class=\"comment\">// 将向量的四个分量全部设置为1.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们想要绘制我们的物体的时候，我们需要使用刚刚定义的光照着色器来绘制箱子（或者可能是其它的物体）。当我们想要绘制灯的时候，我们会使用灯的着色器。在之后的教程里我们会逐步更新这个光照着色器，从而能够慢慢地实现更真实的效果。</p>\n<p>使用这个灯立方体的主要目的是为了让我们知道光源在场景中的具体位置。我们通常在场景中定义一个光源的位置，但这只是一个位置，它并没有视觉意义。为了显示真正的灯，我们将表示光源的立方体绘制在与光源相同的位置。我们将使用我们为它新建的片段着色器来绘制它，让它一直处于白色的状态，不受场景中的光照影响。</p>\n<p>我们声明一个全局vec3变量来表示光源在场景的世界空间坐标中的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightPos</span><span class=\"params\">(<span class=\"number\">1.2f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">2.0f</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>然后我们把灯位移到这里，然后将它缩小一点，让它不那么明显：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = glm::<span class=\"built_in\">mat4</span>(<span class=\"number\">1.f</span>);</span><br><span class=\"line\">model = glm::<span class=\"built_in\">translate</span>(model, lightPos);</span><br><span class=\"line\">model = glm::<span class=\"built_in\">scale</span>(model, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.2f</span>));</span><br></pre></td></tr></table></figure>\n<p>绘制灯立方体的代码应该与下面的类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lampShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置模型、视图和投影矩阵uniform</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 绘制灯立方体对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br></pre></td></tr></table></figure>\n","length":2783,"excerpt":"<p><img src=\"/2024/03/10/opengl_color_light01/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>","more":"<h1 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h1><p>在前面的教程中我们已经简要提到过该如何在OpenGL中使用颜色(Color)，但是我们至今所接触到的都是很浅层的知识。本节我们将会更深入地讨论什么是颜色，并且还会为接下来的光照(Lighting)教程创建一个场景。</p>\n<p>现实世界中有无数种颜色，每一个物体都有它们自己的颜色。我们需要使用（有限的）数值来模拟真实世界中（无限）的颜色，所以并不是所有现实世界中的颜色都可以用数值来表示的。然而我们仍能通过数值来表现出非常多的颜色，甚至你可能都不会注意到与现实的颜色有任何的差异。颜色可以数字化的由红色(Red)、绿色(Green)和蓝色(Blue)三个分量组成，它们通常被缩写为RGB。仅仅用这三个值就可以组合出任意一种颜色。例如，要获取一个珊瑚红(Coral)色的话，我们可以定义这样的一个颜色向量：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">coral</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>我们在现实生活中看到某一物体的颜色并不是这个物体真正拥有的颜色，而是它所反射的(Reflected)颜色。换句话说，那些不能被物体所吸收(Absorb)的颜色（被拒绝的颜色）就是我们能够感知到的物体的颜色。例如，太阳光能被看见的白光其实是由许多不同的颜色组合而成的（如下图所示）。如果我们将白光照在一个蓝色的玩具上，这个蓝色的玩具会吸收白光中除了蓝色以外的所有子颜色，不被吸收的蓝色光被反射到我们的眼中，让这个玩具看起来是蓝色的。下图显示的是一个珊瑚红的玩具，它以不同强度反射了多个颜色。<br><img src=\"/2024/03/10/opengl_color_light01/2024-03-10T145637.png\" alt=\"2024-03-10T145637\"><br>你可以看到，白色的阳光实际上是所有可见颜色的集合，物体吸收了其中的大部分颜色。它仅反射了代表物体颜色的部分，被反射颜色的组合就是我们所感知到的颜色（此例中为珊瑚红）。</p>\n<p>这些颜色反射的定律被直接地运用在图形领域。当我们在OpenGL中创建一个光源时，我们希望给光源一个颜色。在上一段中我们有一个白色的太阳，所以我们也将光源设置为白色。当我们把光源的颜色与物体的颜色值相乘，所得到的就是这个物体所反射的颜色（也就是我们所感知到的颜色）。让我们再次审视我们的玩具（这一次它还是珊瑚红），看看如何在图形学中计算出它的反射颜色。<code>我们将这两个颜色向量作分量相乘</code>，结果就是最终的颜色向量了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (1.0f, 0.5f, 0.31f);</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到玩具的颜色吸收了白色光源中很大一部分的颜色，但它根据自身的颜色值对红、绿、蓝三个分量都做出了一定的反射。这也表现了现实中颜色的工作原理。由此，我们可以定义物体的颜色为物体从一个光源反射各个颜色分量的大小。现在，如果我们使用绿色的光源又会发生什么呢？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (0.0f, 0.5f, 0.0f);</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，并没有红色和蓝色的光让我们的玩具来吸收或反射。这个玩具吸收了光线中一半的绿色值，但仍然也反射了一半的绿色值。玩具现在看上去是深绿色(Dark-greenish)的。我们可以看到，如果我们用绿色光源来照射玩具，那么只有绿色分量能被反射和感知到，红色和蓝色都不能被我们所感知到。这样做的结果是，一个珊瑚红的玩具突然变成了深绿色物体。现在我们来看另一个例子，使用深橄榄绿色(Dark olive-green)的光源：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightColor</span><span class=\"params\">(<span class=\"number\">0.33f</span>, <span class=\"number\">0.42f</span>, <span class=\"number\">0.18f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">toyColor</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>)</span></span>;</span><br><span class=\"line\">glm::vec3 result = lightColor * toyColor; <span class=\"comment\">// = (0.33f, 0.21f, 0.06f);</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，我们可以使用不同的光源颜色来让物体显现出意想不到的颜色。有创意地利用颜色其实并不难。</p>\n<p>这些颜色的理论已经足够了，下面我们来构造一个实验用的场景吧。</p>\n<h1 id=\"创建一个光照场景\"><a href=\"#创建一个光照场景\" class=\"headerlink\" title=\"创建一个光照场景\"></a>创建一个光照场景</h1><p>在接下来的教程中，我们将会广泛地使用颜色来模拟现实世界中的光照效果，创造出一些有趣的视觉效果。由于我们现在将会使用光源了，我们希望将它们显示为可见的物体，并在场景中至少加入一个物体来测试模拟光照的效果。</p>\n<p>首先我们需要一个物体来作为被投光(Cast the light)的对象，我们将使用前面教程中的那个著名的立方体箱子。我们还需要一个物体来代表光源在3D场景中的位置。简单起见，我们依然使用一个立方体来代表光源（我们已拥有立方体的顶点数据是吧？）。</p>\n<p>填一个顶点缓冲对象(VBO)，设定一下顶点属性指针和其它一些乱七八糟的东西现在对你来说应该很容易了，所以我们就不再赘述那些步骤了。如果你仍然觉得这很困难，我建议你复习之前的教程，并且在继续学习之前先把练习过一遍。</p>\n<p>我们首先需要一个顶点着色器来绘制箱子。与之前的顶点着色器相比，容器的顶点位置是保持不变的（虽然这一次我们不需要纹理坐标了），因此顶点着色器中没有新的代码。我们将会使用之前教程顶点着色器的精简版：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> model;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> view;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> projection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记得更新你的顶点数据和属性指针使其与新的顶点着色器保持一致（当然你可以继续留着纹理数据和属性指针。在这一节中我们将不会用到它们，但有一个全新的开始也不是什么坏主意）。</p>\n<p>因为我们还要创建一个表示灯（光源）的立方体，所以我们还要为这个灯创建一个专门的VAO。当然我们也可以让这个灯和其它物体使用同一个VAO，简单地对它的model（模型）矩阵做一些变换就好了，然而接下来的教程中我们会频繁地对顶点数据和属性指针做出修改，我们并不想让这些修改影响到灯（我们只关心灯的顶点位置），因此我们有必要为灯创建一个新的VAO。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> lightVAO;</span><br><span class=\"line\"><span class=\"built_in\">glGenVertexArrays</span>(<span class=\"number\">1</span>, &amp;lightVAO);</span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\"><span class=\"comment\">// 只需要绑定VBO不用再次设置VBO的数据，因为箱子的VBO数据中已经包含了正确的立方体顶点数据</span></span><br><span class=\"line\"><span class=\"built_in\">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\"><span class=\"comment\">// 设置灯立方体的顶点属性（对我们的灯来说仅仅只有位置数据）</span></span><br><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>这段代码对你来说应该非常直观。现在我们已经创建了表示灯和被照物体箱子，我们只需要再定义一个片段着色器就行了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(lightColor * objectColor, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个片段着色器从uniform变量中接受物体的颜色和光源的颜色。正如本节一开始所讨论的那样，我们将光源的颜色和物体（反射的）颜色相乘。这个着色器理解起来应该很容易。我们把物体的颜色设置为之前提到的珊瑚红色，并把光源设置为白色。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在此之前不要忘记首先 use 对应的着色器程序（来设定uniform）</span></span><br><span class=\"line\">lightingShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;objectColor&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;lightColor&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，当我们修改顶点或者片段着色器后，灯的位置或颜色也会随之改变，这并不是我们想要的效果。我们不希望灯的颜色在接下来的教程中因光照计算的结果而受到影响，而是希望它能够与其它的计算分离。我们希望灯一直保持明亮，不受其它颜色变化的影响（这样它才更像是一个真实的光源）。</p>\n<p>为了实现这个目标，我们需要为灯的绘制创建另外的一套着色器，从而能保证它能够在其它光照着色器发生改变的时候不受影响。顶点着色器与我们当前的顶点着色器是一样的，所以你可以直接把现在的顶点着色器用在灯上。灯的片段着色器给灯定义了一个不变的常量白色，保证了灯的颜色一直是亮的：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(<span class=\"number\">1.0</span>); <span class=\"comment\">// 将向量的四个分量全部设置为1.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们想要绘制我们的物体的时候，我们需要使用刚刚定义的光照着色器来绘制箱子（或者可能是其它的物体）。当我们想要绘制灯的时候，我们会使用灯的着色器。在之后的教程里我们会逐步更新这个光照着色器，从而能够慢慢地实现更真实的效果。</p>\n<p>使用这个灯立方体的主要目的是为了让我们知道光源在场景中的具体位置。我们通常在场景中定义一个光源的位置，但这只是一个位置，它并没有视觉意义。为了显示真正的灯，我们将表示光源的立方体绘制在与光源相同的位置。我们将使用我们为它新建的片段着色器来绘制它，让它一直处于白色的状态，不受场景中的光照影响。</p>\n<p>我们声明一个全局vec3变量来表示光源在场景的世界空间坐标中的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec3 <span class=\"title\">lightPos</span><span class=\"params\">(<span class=\"number\">1.2f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">2.0f</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>然后我们把灯位移到这里，然后将它缩小一点，让它不那么明显：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = glm::<span class=\"built_in\">mat4</span>(<span class=\"number\">1.f</span>);</span><br><span class=\"line\">model = glm::<span class=\"built_in\">translate</span>(model, lightPos);</span><br><span class=\"line\">model = glm::<span class=\"built_in\">scale</span>(model, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.2f</span>));</span><br></pre></td></tr></table></figure>\n<p>绘制灯立方体的代码应该与下面的类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lampShader.<span class=\"built_in\">use</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置模型、视图和投影矩阵uniform</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 绘制灯立方体对象</span></span><br><span class=\"line\"><span class=\"built_in\">glBindVertexArray</span>(lightVAO);</span><br><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br></pre></td></tr></table></figure>"},{"title":"opengl 光照","date":"2024-03-11T06:27:54.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 基础光照\n现实世界的光照是极其复杂的，而且会受到诸多因素的影响，这是我们有限的计算能力所无法模拟的。因此OpenGL的光照使用的是简化的模型，对现实的情况进行近似，这样处理起来会更容易一些，而且看起来也差不多一样。这些光照模型都是基于我们对光的物理特性的理解。其中一个模型被称为冯氏光照模型(Phong Lighting Model)。冯氏光照模型的主要结构由3个分量组成：**环境(Ambient)**、**漫反射(Diffuse)**和**镜面(Specular)**光照。下面这张图展示了这些光照分量看起来的样子：\n![2024-03-11T222920](2024-03-11T222920.png)\n\n- **环境光照(Ambient Lighting)**：即使在黑暗的情况下，世界上通常也仍然有一些光亮（月亮、远处的光），所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。\n- **漫反射光照(Diffuse Lighting)**：模拟光源对物体的方向性影响(Directional Impact)。它是冯氏光照模型中视觉上最显著的分量。物体的某一部分越是正对着光源，它就会越亮。\n- **镜面光照(Specular Lighting)**：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。\n\n为了创建有趣的视觉场景，我们希望模拟至少这三种光照分量。我们将以最简单的一个开始：**环境光照。**\n\n## 环境光照\n\n光通常都不是来自于同一个光源，而是来自于我们周围分散的很多光源，即使它们可能并不是那么显而易见。光的一个属性是，它可以向很多方向发散并反弹，从而能够到达不是非常直接临近的点。所以，光能够在其它的表面上反射，对一个物体产生间接的影响。考虑到这种情况的算法叫做全局照明(Global Illumination)算法，但是这种算法既开销高昂又极其复杂。\n\n由于我们现在对那种又复杂又开销高昂的算法不是很感兴趣，所以我们将会先使用一个简化的全局照明模型，即环境光照。正如你在上一节所学到的，我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。\n\n把环境光照添加到场景里非常简单。我们用光的颜色乘以一个很小的常量环境因子，再乘以物体的颜色，然后将最终结果作为片段的颜色：\n\n```glsl\nvoid main()\n{\n    float ambientStrength = 0.1;\n    vec3 ambient = ambientStrength * lightColor;\n\n    vec3 result = ambient * objectColor;\n    FragColor = vec4(result, 1.0);\n}\n```\n\n## 漫反射光照\n环境光照本身不能提供最有趣的结果，但是漫反射光照就能开始对物体产生显著的视觉影响了。漫反射光照使物体上与光线方向越接近的片段能从光源处获得更多的亮度。为了能够更好的理解漫反射光照，请看下图：\n\n![2024-03-11T230323](2024-03-11T230323.png)\n\n图左上方有一个光源，它所发出的光线落在物体的一个片段上。我们需要测量这个光线是以什么角度接触到这个片段的。如果光线垂直于物体表面，这束光对物体的影响会最大化（译注：更亮）。为了测量光线和片段的角度，我们使用一个叫做`法向量(Normal Vector)`的东西，它是垂直于片段表面的一个向量（这里以黄色箭头表示），我们在后面再讲这个东西。这两个向量之间的角度很容易就能够通过点乘计算出来。\n\n你可能记得在变换那一节教程里，我们知道两个单位向量的夹角越小，它们点乘的结果越倾向于1。当两个向量的夹角为90度的时候，点乘会变为0。这同样适用于θ，θ越大，光对片段颜色的影响就应该越小。\n<div class=\"note default\">注意，为了（只）得到两个向量夹角的余弦值，我们使用的是单位向量（长度为1的向量），所以我们需要确保所有的向量都是标准化的，否则点乘返回的就不仅仅是余弦值了（见变换）。</div>\n\n点乘返回一个标量，我们可以用它计算光线对片段颜色的影响。不同片段朝向光源的方向的不同，这些片段被照亮的情况也不同。\n所以，计算漫反射光照需要什么？\n\n- **法向量**：一个垂直于顶点表面的向量。\n- **定向的光线**：作为光源的位置与片段的位置之间向量差的方向向量。为了计算这个光线，我们需要光的位置向量和片段的位置向量。\n\n### 法向量\n法向量是一个垂直于顶点表面的（单位）向量。由于顶点本身并没有表面（它只是空间中一个独立的点），我们利用它周围的顶点来计算出这个顶点的表面。我们能够使用一个小技巧，使用叉乘对立方体所有的顶点计算法向量，但是由于3D立方体不是一个复杂的形状，所以我们可以简单地把法线数据手工添加到顶点数据中。更新后的顶点数据数组可以在[这里](https://learnopengl.com/code_viewer.php?code=lighting/basic_lighting_vertex_data)找到。试着去想象一下，这些法向量真的是垂直于立方体各个平面的表面的（一个立方体由6个平面组成）。\n\n由于我们向顶点数组添加了额外的数据，所以我们应该更新光照的顶点着色器：\n```glsl\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n现在我们已经向每个顶点添加了一个法向量并更新了顶点着色器，我们还要更新顶点属性指针。注意，灯使用同样的顶点数组作为它的顶点数据，然而灯的着色器并没有使用新添加的法向量。我们不需要更新灯的着色器或者是属性的配置，但是我们必须至少修改一下顶点属性指针来适应新的顶点数组的大小：\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n所有光照的计算都是在片段着色器里进行，所以我们需要将法向量由顶点着色器传递到片段着色器。我们这么做：\n```glsl\nout vec3 Normal;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    Normal = aNormal;\n}\n```\n接下来，在片段着色器中定义相应的输入变量：\n```glsl\nin vec3 Normal;\n```\n### 计算漫反射光照\n我们现在对每个顶点都有了法向量，但是我们仍然需要光源的位置向量和片段的位置向量。由于光源的位置是一个静态变量，我们可以简单地在片段着色器中把它声明为uniform：\n```glsl\nuniform vec3 lightPos;\n```\n\n然后在渲染循环中（渲染循环的外面也可以，因为它不会改变）更新uniform。我们使用在前面声明的lightPos向量作为光源位置\n\n```glsl\nlightingShader.setVec3(\"lightPos\", lightPos);\n```\n在片段着色器中，我们需要把经过model矩阵变换的物体坐标传入片段着色器，这样的话片段着色器才能根据光源位置以及物体面上的坐标来确定光照亮度\n\n```glsl\nout vec3 FragPos;  \nout vec3 Normal;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    FragPos = vec3(model * vec4(aPos, 1.0));\n    Normal = aNormal;\n}\n```\n最后，在片段着色器中添加相应的输入变量。\n```glsl\nin vec3 FragPos;\n```\n\n现在，所有需要的变量都设置好了，我们可以在片段着色器中添加光照计算了。\n\n我们需要做的第一件事是计算光源和片段位置之间的方向向量。前面提到，光的方向向量是光源位置向量与片段位置向量之间的向量差。你可能记得在变换教程中，我们能够简单地通过让两个向量相减的方式计算向量差。我们同样希望确保所有相关向量最后都转换为单位向量，所以我们把法线和最终的方向向量都进行标准化：\n\n```glsl\nvec3 norm = normalize(Normal);\nvec3 lightDir = normalize(lightPos - FragPos);\n```\n {% note danger no-icon %}\n 切记，计算光照信息数据的时候，一定要把所有的方向向量全部标准化\n {% endnote %}\n\n 如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。\n\n现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。\n\n如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。\n\n现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。\n\n```c++\nvec3 result = (ambient + diffuse) * objectColor;\nFragColor = vec4(result, 1.0);\n```\n\n### 最后一件事\n现在我们已经把法向量从顶点着色器传到了片段着色器。可是，目前片段着色器里的计算都是在世界空间坐标中进行的。所以，我们是不是应该把法向量也转换为世界空间坐标？基本正确，但是这不是简单地把它乘以一个模型矩阵就能搞定的。\n\n首先，法向量只是一个方向向量，不能表达空间中的特定位置。同时，法向量没有齐次坐标（顶点位置中的w分量）。这意味着，位移不应该影响到法向量。因此，如果我们打算把法向量乘以一个模型矩阵，我们就要从矩阵中移除位移部分，只选用模型矩阵左上角3×3的矩阵（注意，我们也可以把法向量的w分量设置为0，再乘以4×4矩阵；这同样可以移除位移）。对于法向量，我们只希望对它实施缩放和旋转变换。\n\n其次，如果模型矩阵执行了不等比缩放，顶点的改变会导致法向量不再垂直于表面了。因此，我们不能用这样的模型矩阵来变换法向量。下面的图展示了应用了不等比缩放的模型矩阵对法向量的影响：\n![2024-03-12T210216](2024-03-12T210216.png)\n\n每当我们应用一个不等比缩放时（注意：等比缩放不会破坏法线，因为法线的方向没被改变，仅仅改变了法线的长度，而这很容易通过标准化来修复），法向量就不会再垂直于对应的表面了，这样光照就会被破坏。\n\n修复这个行为的诀窍是使用一个为法向量专门定制的模型矩阵。这个矩阵称之为法线矩阵(Normal Matrix)，它使用了一些线性代数的操作来移除对法向量错误缩放的影响。如果你想知道这个矩阵是如何计算出来的，建议去阅读这个文章。\n\n法线矩阵被定义为「模型矩阵左上角3x3部分的逆矩阵的转置矩阵」。真是拗口，如果你不明白这是什么意思，别担心，我们还没有讨论逆矩阵(Inverse Matrix)和转置矩阵(Transpose Matrix)。注意，大部分的资源都会将法线矩阵定义为应用到模型-观察矩阵(Model-view Matrix)上的操作，但是由于我们只在世界空间中进行操作（不是在观察空间），我们只使用模型矩阵。\n\n在顶点着色器中，我们可以使用inverse和transpose函数自己生成这个法线矩阵，这两个函数对所有类型矩阵都有效。注意我们还要把被处理过的矩阵强制转换为3×3矩阵，来保证它失去了位移属性以及能够乘以vec3的法向量。\n```c++\nNormal = mat3(transpose(inverse(model))) * aNormal;\n```\n\n{% note danger no-icon %}\n矩阵求逆是一项对于着色器开销很大的运算，因为它必须在场景中的每一个顶点上进行，所以应该尽可能地避免在着色器中进行求逆运算。以学习为目的的话这样做还好，但是对于一个高效的应用来说，你最好先在CPU上计算出法线矩阵，再通过uniform把它传递给着色器（就像模型矩阵一样）。\n{% endnote %}\n\n## 镜面光照\n如果你还没被这些光照计算搞得精疲力尽，我们就再把镜面高光(Specular Highlight)加进来，这样冯氏光照才算完整。\n\n和漫反射光照一样，镜面光照也决定于光的方向向量和物体的法向量，但是它也决定于观察方向，例如玩家是从什么方向看向这个片段的。镜面光照决定于表面的反射特性。如果我们把物体表面设想为一面镜子，那么镜面光照最强的地方就是我们看到表面上反射光的地方。你可以在下图中看到效果：\n![2024-03-12T211234](2024-03-12T211234.png)\n\n我们通过根据法向量翻折入射光的方向来计算反射向量。然后我们计算反射向量与观察方向的角度差，它们之间夹角越小，镜面光的作用就越大。由此产生的效果就是，我们看向在入射光在表面的反射方向时，会看到一点高光。\n\n观察向量是我们计算镜面光照时需要的一个额外变量，我们可以使用观察者的世界空间位置和片段的位置来计算它。之后我们计算出镜面光照强度，用它乘以光源的颜色，并将它与环境光照和漫反射光照部分加和。\n\n<div class=\"note info\">我们选择在世界空间进行光照计算，但是大多数人趋向于更偏向在观察空间进行光照计算。在观察空间计算的优势是，观察者的位置总是在(0, 0, 0)，所以你已经零成本地拿到了观察者的位置。然而，若以学习为目的，我认为在世界空间中计算光照更符合直觉。如果你仍然希望在观察空间计算光照的话，你需要将所有相关的向量也用观察矩阵进行变换（不要忘记也修改法线矩阵）。</div>\n\n要得到观察者的世界空间坐标，我们直接使用摄像机的位置向量即可（它当然就是那个观察者）。那么让我们把另一个uniform添加到片段着色器中，并把摄像机的位置向量传给着色器：\n\n```glsl\nuniform vec3 viewPos;\n```\n```c++\nlightingShader.setVec3(\"viewPos\", camera.Position);\n\n```\n\n现在我们已经获得所有需要的变量，可以计算高光强度了。首先，我们定义一个镜面强度(Specular Intensity)变量，给镜面高光一个中等亮度颜色，让它不要产生过度的影响。\n```c++\nfloat specularStrength = 0.5;\n```\n\n如果我们把它设置为1.0f，我们会得到一个非常亮的镜面光分量，这对于一个珊瑚色的立方体来说有点太多了。下一节教程中我们会讨论如何合理设置这些光照强度，以及它们是如何影响物体的。下一步，我们计算视线方向向量，和对应的沿着法线轴的反射向量：\n\n```glsl\nvec3 viewDir = normalize(viewPos - FragPos);\nvec3 reflectDir = reflect(-lightDir, norm);\n```\n需要注意的是我们对lightDir向量进行了取反。reflect函数要求第一个向量是从光源指向片段位置的向量，但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。为了保证我们得到正确的reflect向量，我们通过对lightDir向量取反来获得相反的方向。第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。\n\n剩下要做的是计算镜面分量。下面的代码完成了这件事：\n```glsl\nfloat spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);\nvec3 specular = specularStrength * spec * lightColor;\n```\n我们先计算视线方向与反射方向的点乘（并确保它不是负值），然后取它的32次幂。这个32是高光的反光度(Shininess)。一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。在下面的图片里，你会看到不同反光度的视觉效果影响：\n![2024-03-12T214239](2024-03-12T214239.png)\n\n我们不希望镜面成分过于显眼，所以我们把指数保持为32。剩下的最后一件事情是把它加到环境光分量和漫反射分量里，再用结果乘以物体的颜色：\n\n```glsl\nvec3 result = (ambient + diffuse + specular) * objectColor;\nFragColor = vec4(result, 1.0);\n```\n\n我们现在为冯氏光照计算了全部的光照分量。根据你的视角，你可以看到类似下面的画面：\n![2024-03-12T214334](2024-03-12T214334.png)\n\n","source":"_posts/opengl_color_light02.md","raw":"---\ntitle: opengl 光照\ndate: 2024-03-11T22:27:54+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\nopengl 颜色，光照学习\n<!-- more -->\n\n# 基础光照\n现实世界的光照是极其复杂的，而且会受到诸多因素的影响，这是我们有限的计算能力所无法模拟的。因此OpenGL的光照使用的是简化的模型，对现实的情况进行近似，这样处理起来会更容易一些，而且看起来也差不多一样。这些光照模型都是基于我们对光的物理特性的理解。其中一个模型被称为冯氏光照模型(Phong Lighting Model)。冯氏光照模型的主要结构由3个分量组成：**环境(Ambient)**、**漫反射(Diffuse)**和**镜面(Specular)**光照。下面这张图展示了这些光照分量看起来的样子：\n![2024-03-11T222920](2024-03-11T222920.png)\n\n- **环境光照(Ambient Lighting)**：即使在黑暗的情况下，世界上通常也仍然有一些光亮（月亮、远处的光），所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。\n- **漫反射光照(Diffuse Lighting)**：模拟光源对物体的方向性影响(Directional Impact)。它是冯氏光照模型中视觉上最显著的分量。物体的某一部分越是正对着光源，它就会越亮。\n- **镜面光照(Specular Lighting)**：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。\n\n为了创建有趣的视觉场景，我们希望模拟至少这三种光照分量。我们将以最简单的一个开始：**环境光照。**\n\n## 环境光照\n\n光通常都不是来自于同一个光源，而是来自于我们周围分散的很多光源，即使它们可能并不是那么显而易见。光的一个属性是，它可以向很多方向发散并反弹，从而能够到达不是非常直接临近的点。所以，光能够在其它的表面上反射，对一个物体产生间接的影响。考虑到这种情况的算法叫做全局照明(Global Illumination)算法，但是这种算法既开销高昂又极其复杂。\n\n由于我们现在对那种又复杂又开销高昂的算法不是很感兴趣，所以我们将会先使用一个简化的全局照明模型，即环境光照。正如你在上一节所学到的，我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。\n\n把环境光照添加到场景里非常简单。我们用光的颜色乘以一个很小的常量环境因子，再乘以物体的颜色，然后将最终结果作为片段的颜色：\n\n```glsl\nvoid main()\n{\n    float ambientStrength = 0.1;\n    vec3 ambient = ambientStrength * lightColor;\n\n    vec3 result = ambient * objectColor;\n    FragColor = vec4(result, 1.0);\n}\n```\n\n## 漫反射光照\n环境光照本身不能提供最有趣的结果，但是漫反射光照就能开始对物体产生显著的视觉影响了。漫反射光照使物体上与光线方向越接近的片段能从光源处获得更多的亮度。为了能够更好的理解漫反射光照，请看下图：\n\n![2024-03-11T230323](2024-03-11T230323.png)\n\n图左上方有一个光源，它所发出的光线落在物体的一个片段上。我们需要测量这个光线是以什么角度接触到这个片段的。如果光线垂直于物体表面，这束光对物体的影响会最大化（译注：更亮）。为了测量光线和片段的角度，我们使用一个叫做`法向量(Normal Vector)`的东西，它是垂直于片段表面的一个向量（这里以黄色箭头表示），我们在后面再讲这个东西。这两个向量之间的角度很容易就能够通过点乘计算出来。\n\n你可能记得在变换那一节教程里，我们知道两个单位向量的夹角越小，它们点乘的结果越倾向于1。当两个向量的夹角为90度的时候，点乘会变为0。这同样适用于θ，θ越大，光对片段颜色的影响就应该越小。\n<div class=\"note default\">注意，为了（只）得到两个向量夹角的余弦值，我们使用的是单位向量（长度为1的向量），所以我们需要确保所有的向量都是标准化的，否则点乘返回的就不仅仅是余弦值了（见变换）。</div>\n\n点乘返回一个标量，我们可以用它计算光线对片段颜色的影响。不同片段朝向光源的方向的不同，这些片段被照亮的情况也不同。\n所以，计算漫反射光照需要什么？\n\n- **法向量**：一个垂直于顶点表面的向量。\n- **定向的光线**：作为光源的位置与片段的位置之间向量差的方向向量。为了计算这个光线，我们需要光的位置向量和片段的位置向量。\n\n### 法向量\n法向量是一个垂直于顶点表面的（单位）向量。由于顶点本身并没有表面（它只是空间中一个独立的点），我们利用它周围的顶点来计算出这个顶点的表面。我们能够使用一个小技巧，使用叉乘对立方体所有的顶点计算法向量，但是由于3D立方体不是一个复杂的形状，所以我们可以简单地把法线数据手工添加到顶点数据中。更新后的顶点数据数组可以在[这里](https://learnopengl.com/code_viewer.php?code=lighting/basic_lighting_vertex_data)找到。试着去想象一下，这些法向量真的是垂直于立方体各个平面的表面的（一个立方体由6个平面组成）。\n\n由于我们向顶点数组添加了额外的数据，所以我们应该更新光照的顶点着色器：\n```glsl\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n现在我们已经向每个顶点添加了一个法向量并更新了顶点着色器，我们还要更新顶点属性指针。注意，灯使用同样的顶点数组作为它的顶点数据，然而灯的着色器并没有使用新添加的法向量。我们不需要更新灯的着色器或者是属性的配置，但是我们必须至少修改一下顶点属性指针来适应新的顶点数组的大小：\n```c++\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n```\n\n所有光照的计算都是在片段着色器里进行，所以我们需要将法向量由顶点着色器传递到片段着色器。我们这么做：\n```glsl\nout vec3 Normal;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    Normal = aNormal;\n}\n```\n接下来，在片段着色器中定义相应的输入变量：\n```glsl\nin vec3 Normal;\n```\n### 计算漫反射光照\n我们现在对每个顶点都有了法向量，但是我们仍然需要光源的位置向量和片段的位置向量。由于光源的位置是一个静态变量，我们可以简单地在片段着色器中把它声明为uniform：\n```glsl\nuniform vec3 lightPos;\n```\n\n然后在渲染循环中（渲染循环的外面也可以，因为它不会改变）更新uniform。我们使用在前面声明的lightPos向量作为光源位置\n\n```glsl\nlightingShader.setVec3(\"lightPos\", lightPos);\n```\n在片段着色器中，我们需要把经过model矩阵变换的物体坐标传入片段着色器，这样的话片段着色器才能根据光源位置以及物体面上的坐标来确定光照亮度\n\n```glsl\nout vec3 FragPos;  \nout vec3 Normal;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    FragPos = vec3(model * vec4(aPos, 1.0));\n    Normal = aNormal;\n}\n```\n最后，在片段着色器中添加相应的输入变量。\n```glsl\nin vec3 FragPos;\n```\n\n现在，所有需要的变量都设置好了，我们可以在片段着色器中添加光照计算了。\n\n我们需要做的第一件事是计算光源和片段位置之间的方向向量。前面提到，光的方向向量是光源位置向量与片段位置向量之间的向量差。你可能记得在变换教程中，我们能够简单地通过让两个向量相减的方式计算向量差。我们同样希望确保所有相关向量最后都转换为单位向量，所以我们把法线和最终的方向向量都进行标准化：\n\n```glsl\nvec3 norm = normalize(Normal);\nvec3 lightDir = normalize(lightPos - FragPos);\n```\n {% note danger no-icon %}\n 切记，计算光照信息数据的时候，一定要把所有的方向向量全部标准化\n {% endnote %}\n\n 如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。\n\n现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。\n\n如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。\n\n现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。\n\n```c++\nvec3 result = (ambient + diffuse) * objectColor;\nFragColor = vec4(result, 1.0);\n```\n\n### 最后一件事\n现在我们已经把法向量从顶点着色器传到了片段着色器。可是，目前片段着色器里的计算都是在世界空间坐标中进行的。所以，我们是不是应该把法向量也转换为世界空间坐标？基本正确，但是这不是简单地把它乘以一个模型矩阵就能搞定的。\n\n首先，法向量只是一个方向向量，不能表达空间中的特定位置。同时，法向量没有齐次坐标（顶点位置中的w分量）。这意味着，位移不应该影响到法向量。因此，如果我们打算把法向量乘以一个模型矩阵，我们就要从矩阵中移除位移部分，只选用模型矩阵左上角3×3的矩阵（注意，我们也可以把法向量的w分量设置为0，再乘以4×4矩阵；这同样可以移除位移）。对于法向量，我们只希望对它实施缩放和旋转变换。\n\n其次，如果模型矩阵执行了不等比缩放，顶点的改变会导致法向量不再垂直于表面了。因此，我们不能用这样的模型矩阵来变换法向量。下面的图展示了应用了不等比缩放的模型矩阵对法向量的影响：\n![2024-03-12T210216](2024-03-12T210216.png)\n\n每当我们应用一个不等比缩放时（注意：等比缩放不会破坏法线，因为法线的方向没被改变，仅仅改变了法线的长度，而这很容易通过标准化来修复），法向量就不会再垂直于对应的表面了，这样光照就会被破坏。\n\n修复这个行为的诀窍是使用一个为法向量专门定制的模型矩阵。这个矩阵称之为法线矩阵(Normal Matrix)，它使用了一些线性代数的操作来移除对法向量错误缩放的影响。如果你想知道这个矩阵是如何计算出来的，建议去阅读这个文章。\n\n法线矩阵被定义为「模型矩阵左上角3x3部分的逆矩阵的转置矩阵」。真是拗口，如果你不明白这是什么意思，别担心，我们还没有讨论逆矩阵(Inverse Matrix)和转置矩阵(Transpose Matrix)。注意，大部分的资源都会将法线矩阵定义为应用到模型-观察矩阵(Model-view Matrix)上的操作，但是由于我们只在世界空间中进行操作（不是在观察空间），我们只使用模型矩阵。\n\n在顶点着色器中，我们可以使用inverse和transpose函数自己生成这个法线矩阵，这两个函数对所有类型矩阵都有效。注意我们还要把被处理过的矩阵强制转换为3×3矩阵，来保证它失去了位移属性以及能够乘以vec3的法向量。\n```c++\nNormal = mat3(transpose(inverse(model))) * aNormal;\n```\n\n{% note danger no-icon %}\n矩阵求逆是一项对于着色器开销很大的运算，因为它必须在场景中的每一个顶点上进行，所以应该尽可能地避免在着色器中进行求逆运算。以学习为目的的话这样做还好，但是对于一个高效的应用来说，你最好先在CPU上计算出法线矩阵，再通过uniform把它传递给着色器（就像模型矩阵一样）。\n{% endnote %}\n\n## 镜面光照\n如果你还没被这些光照计算搞得精疲力尽，我们就再把镜面高光(Specular Highlight)加进来，这样冯氏光照才算完整。\n\n和漫反射光照一样，镜面光照也决定于光的方向向量和物体的法向量，但是它也决定于观察方向，例如玩家是从什么方向看向这个片段的。镜面光照决定于表面的反射特性。如果我们把物体表面设想为一面镜子，那么镜面光照最强的地方就是我们看到表面上反射光的地方。你可以在下图中看到效果：\n![2024-03-12T211234](2024-03-12T211234.png)\n\n我们通过根据法向量翻折入射光的方向来计算反射向量。然后我们计算反射向量与观察方向的角度差，它们之间夹角越小，镜面光的作用就越大。由此产生的效果就是，我们看向在入射光在表面的反射方向时，会看到一点高光。\n\n观察向量是我们计算镜面光照时需要的一个额外变量，我们可以使用观察者的世界空间位置和片段的位置来计算它。之后我们计算出镜面光照强度，用它乘以光源的颜色，并将它与环境光照和漫反射光照部分加和。\n\n<div class=\"note info\">我们选择在世界空间进行光照计算，但是大多数人趋向于更偏向在观察空间进行光照计算。在观察空间计算的优势是，观察者的位置总是在(0, 0, 0)，所以你已经零成本地拿到了观察者的位置。然而，若以学习为目的，我认为在世界空间中计算光照更符合直觉。如果你仍然希望在观察空间计算光照的话，你需要将所有相关的向量也用观察矩阵进行变换（不要忘记也修改法线矩阵）。</div>\n\n要得到观察者的世界空间坐标，我们直接使用摄像机的位置向量即可（它当然就是那个观察者）。那么让我们把另一个uniform添加到片段着色器中，并把摄像机的位置向量传给着色器：\n\n```glsl\nuniform vec3 viewPos;\n```\n```c++\nlightingShader.setVec3(\"viewPos\", camera.Position);\n\n```\n\n现在我们已经获得所有需要的变量，可以计算高光强度了。首先，我们定义一个镜面强度(Specular Intensity)变量，给镜面高光一个中等亮度颜色，让它不要产生过度的影响。\n```c++\nfloat specularStrength = 0.5;\n```\n\n如果我们把它设置为1.0f，我们会得到一个非常亮的镜面光分量，这对于一个珊瑚色的立方体来说有点太多了。下一节教程中我们会讨论如何合理设置这些光照强度，以及它们是如何影响物体的。下一步，我们计算视线方向向量，和对应的沿着法线轴的反射向量：\n\n```glsl\nvec3 viewDir = normalize(viewPos - FragPos);\nvec3 reflectDir = reflect(-lightDir, norm);\n```\n需要注意的是我们对lightDir向量进行了取反。reflect函数要求第一个向量是从光源指向片段位置的向量，但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。为了保证我们得到正确的reflect向量，我们通过对lightDir向量取反来获得相反的方向。第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。\n\n剩下要做的是计算镜面分量。下面的代码完成了这件事：\n```glsl\nfloat spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);\nvec3 specular = specularStrength * spec * lightColor;\n```\n我们先计算视线方向与反射方向的点乘（并确保它不是负值），然后取它的32次幂。这个32是高光的反光度(Shininess)。一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。在下面的图片里，你会看到不同反光度的视觉效果影响：\n![2024-03-12T214239](2024-03-12T214239.png)\n\n我们不希望镜面成分过于显眼，所以我们把指数保持为32。剩下的最后一件事情是把它加到环境光分量和漫反射分量里，再用结果乘以物体的颜色：\n\n```glsl\nvec3 result = (ambient + diffuse + specular) * objectColor;\nFragColor = vec4(result, 1.0);\n```\n\n我们现在为冯氏光照计算了全部的光照分量。根据你的视角，你可以看到类似下面的画面：\n![2024-03-12T214334](2024-03-12T214334.png)\n\n","slug":"opengl_color_light02","published":1,"updated":"2025-03-28T02:05:16.329Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7t002o1wu1diiv9pif","content":"<p><img src=\"/2024/03/11/opengl_color_light02/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"基础光照\"><a href=\"#基础光照\" class=\"headerlink\" title=\"基础光照\"></a>基础光照</h1><p>现实世界的光照是极其复杂的，而且会受到诸多因素的影响，这是我们有限的计算能力所无法模拟的。因此OpenGL的光照使用的是简化的模型，对现实的情况进行近似，这样处理起来会更容易一些，而且看起来也差不多一样。这些光照模型都是基于我们对光的物理特性的理解。其中一个模型被称为冯氏光照模型(Phong Lighting Model)。冯氏光照模型的主要结构由3个分量组成：<strong>环境(Ambient)</strong>、**漫反射(Diffuse)<strong>和</strong>镜面(Specular)**光照。下面这张图展示了这些光照分量看起来的样子：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-11T222920.png\" alt=\"2024-03-11T222920\"></p>\n<ul>\n<li><strong>环境光照(Ambient Lighting)</strong>：即使在黑暗的情况下，世界上通常也仍然有一些光亮（月亮、远处的光），所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。</li>\n<li><strong>漫反射光照(Diffuse Lighting)</strong>：模拟光源对物体的方向性影响(Directional Impact)。它是冯氏光照模型中视觉上最显著的分量。物体的某一部分越是正对着光源，它就会越亮。</li>\n<li><strong>镜面光照(Specular Lighting)</strong>：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。</li>\n</ul>\n<p>为了创建有趣的视觉场景，我们希望模拟至少这三种光照分量。我们将以最简单的一个开始：<strong>环境光照。</strong></p>\n<h2 id=\"环境光照\"><a href=\"#环境光照\" class=\"headerlink\" title=\"环境光照\"></a>环境光照</h2><p>光通常都不是来自于同一个光源，而是来自于我们周围分散的很多光源，即使它们可能并不是那么显而易见。光的一个属性是，它可以向很多方向发散并反弹，从而能够到达不是非常直接临近的点。所以，光能够在其它的表面上反射，对一个物体产生间接的影响。考虑到这种情况的算法叫做全局照明(Global Illumination)算法，但是这种算法既开销高昂又极其复杂。</p>\n<p>由于我们现在对那种又复杂又开销高昂的算法不是很感兴趣，所以我们将会先使用一个简化的全局照明模型，即环境光照。正如你在上一节所学到的，我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。</p>\n<p>把环境光照添加到场景里非常简单。我们用光的颜色乘以一个很小的常量环境因子，再乘以物体的颜色，然后将最终结果作为片段的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> ambientStrength = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientStrength * lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = ambient * objectColor;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"漫反射光照\"><a href=\"#漫反射光照\" class=\"headerlink\" title=\"漫反射光照\"></a>漫反射光照</h2><p>环境光照本身不能提供最有趣的结果，但是漫反射光照就能开始对物体产生显著的视觉影响了。漫反射光照使物体上与光线方向越接近的片段能从光源处获得更多的亮度。为了能够更好的理解漫反射光照，请看下图：</p>\n<p><img src=\"/2024/03/11/opengl_color_light02/2024-03-11T230323.png\" alt=\"2024-03-11T230323\"></p>\n<p>图左上方有一个光源，它所发出的光线落在物体的一个片段上。我们需要测量这个光线是以什么角度接触到这个片段的。如果光线垂直于物体表面，这束光对物体的影响会最大化（译注：更亮）。为了测量光线和片段的角度，我们使用一个叫做<code>法向量(Normal Vector)</code>的东西，它是垂直于片段表面的一个向量（这里以黄色箭头表示），我们在后面再讲这个东西。这两个向量之间的角度很容易就能够通过点乘计算出来。</p>\n<p>你可能记得在变换那一节教程里，我们知道两个单位向量的夹角越小，它们点乘的结果越倾向于1。当两个向量的夹角为90度的时候，点乘会变为0。这同样适用于θ，θ越大，光对片段颜色的影响就应该越小。</p>\n<div class=\"note default\">注意，为了（只）得到两个向量夹角的余弦值，我们使用的是单位向量（长度为1的向量），所以我们需要确保所有的向量都是标准化的，否则点乘返回的就不仅仅是余弦值了（见变换）。</div>\n\n<p>点乘返回一个标量，我们可以用它计算光线对片段颜色的影响。不同片段朝向光源的方向的不同，这些片段被照亮的情况也不同。<br>所以，计算漫反射光照需要什么？</p>\n<ul>\n<li><strong>法向量</strong>：一个垂直于顶点表面的向量。</li>\n<li><strong>定向的光线</strong>：作为光源的位置与片段的位置之间向量差的方向向量。为了计算这个光线，我们需要光的位置向量和片段的位置向量。</li>\n</ul>\n<h3 id=\"法向量\"><a href=\"#法向量\" class=\"headerlink\" title=\"法向量\"></a>法向量</h3><p>法向量是一个垂直于顶点表面的（单位）向量。由于顶点本身并没有表面（它只是空间中一个独立的点），我们利用它周围的顶点来计算出这个顶点的表面。我们能够使用一个小技巧，使用叉乘对立方体所有的顶点计算法向量，但是由于3D立方体不是一个复杂的形状，所以我们可以简单地把法线数据手工添加到顶点数据中。更新后的顶点数据数组可以在<a href=\"https://learnopengl.com/code_viewer.php?code=lighting/basic_lighting_vertex_data\">这里</a>找到。试着去想象一下，这些法向量真的是垂直于立方体各个平面的表面的（一个立方体由6个平面组成）。</p>\n<p>由于我们向顶点数组添加了额外的数据，所以我们应该更新光照的顶点着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * sizeof(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经向每个顶点添加了一个法向量并更新了顶点着色器，我们还要更新顶点属性指针。注意，灯使用同样的顶点数组作为它的顶点数据，然而灯的着色器并没有使用新添加的法向量。我们不需要更新灯的着色器或者是属性的配置，但是我们必须至少修改一下顶点属性指针来适应新的顶点数组的大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所有光照的计算都是在片段着色器里进行，所以我们需要将法向量由顶点着色器传递到片段着色器。我们这么做：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Normal = aNormal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，在片段着色器中定义相应的输入变量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算漫反射光照\"><a href=\"#计算漫反射光照\" class=\"headerlink\" title=\"计算漫反射光照\"></a>计算漫反射光照</h3><p>我们现在对每个顶点都有了法向量，但是我们仍然需要光源的位置向量和片段的位置向量。由于光源的位置是一个静态变量，我们可以简单地在片段着色器中把它声明为uniform：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br></pre></td></tr></table></figure>\n\n<p>然后在渲染循环中（渲染循环的外面也可以，因为它不会改变）更新uniform。我们使用在前面声明的lightPos向量作为光源位置</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.setVec3(&quot;lightPos&quot;, lightPos);</span><br></pre></td></tr></table></figure>\n<p>在片段着色器中，我们需要把经过model矩阵变换的物体坐标传入片段着色器，这样的话片段着色器才能根据光源位置以及物体面上的坐标来确定光照亮度</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    FragPos = <span class=\"type\">vec3</span>(model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    Normal = aNormal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，在片段着色器中添加相应的输入变量。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有需要的变量都设置好了，我们可以在片段着色器中添加光照计算了。</p>\n<p>我们需要做的第一件事是计算光源和片段位置之间的方向向量。前面提到，光的方向向量是光源位置向量与片段位置向量之间的向量差。你可能记得在变换教程中，我们能够简单地通过让两个向量相减的方式计算向量差。我们同样希望确保所有相关向量最后都转换为单位向量，所以我们把法线和最终的方向向量都进行标准化：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal);</span><br><span class=\"line\"><span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos);</span><br></pre></td></tr></table></figure>\n <div class=\"note danger no-icon\"><p>切记，计算光照信息数据的时候，一定要把所有的方向向量全部标准化</p>\n</div>\n\n<p> 如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。</p>\n<p>现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。</p>\n<p>如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。</p>\n<p>现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 result = (ambient + diffuse) * objectColor;</span><br><span class=\"line\">FragColor = <span class=\"built_in\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最后一件事\"><a href=\"#最后一件事\" class=\"headerlink\" title=\"最后一件事\"></a>最后一件事</h3><p>现在我们已经把法向量从顶点着色器传到了片段着色器。可是，目前片段着色器里的计算都是在世界空间坐标中进行的。所以，我们是不是应该把法向量也转换为世界空间坐标？基本正确，但是这不是简单地把它乘以一个模型矩阵就能搞定的。</p>\n<p>首先，法向量只是一个方向向量，不能表达空间中的特定位置。同时，法向量没有齐次坐标（顶点位置中的w分量）。这意味着，位移不应该影响到法向量。因此，如果我们打算把法向量乘以一个模型矩阵，我们就要从矩阵中移除位移部分，只选用模型矩阵左上角3×3的矩阵（注意，我们也可以把法向量的w分量设置为0，再乘以4×4矩阵；这同样可以移除位移）。对于法向量，我们只希望对它实施缩放和旋转变换。</p>\n<p>其次，如果模型矩阵执行了不等比缩放，顶点的改变会导致法向量不再垂直于表面了。因此，我们不能用这样的模型矩阵来变换法向量。下面的图展示了应用了不等比缩放的模型矩阵对法向量的影响：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T210216.png\" alt=\"2024-03-12T210216\"></p>\n<p>每当我们应用一个不等比缩放时（注意：等比缩放不会破坏法线，因为法线的方向没被改变，仅仅改变了法线的长度，而这很容易通过标准化来修复），法向量就不会再垂直于对应的表面了，这样光照就会被破坏。</p>\n<p>修复这个行为的诀窍是使用一个为法向量专门定制的模型矩阵。这个矩阵称之为法线矩阵(Normal Matrix)，它使用了一些线性代数的操作来移除对法向量错误缩放的影响。如果你想知道这个矩阵是如何计算出来的，建议去阅读这个文章。</p>\n<p>法线矩阵被定义为「模型矩阵左上角3x3部分的逆矩阵的转置矩阵」。真是拗口，如果你不明白这是什么意思，别担心，我们还没有讨论逆矩阵(Inverse Matrix)和转置矩阵(Transpose Matrix)。注意，大部分的资源都会将法线矩阵定义为应用到模型-观察矩阵(Model-view Matrix)上的操作，但是由于我们只在世界空间中进行操作（不是在观察空间），我们只使用模型矩阵。</p>\n<p>在顶点着色器中，我们可以使用inverse和transpose函数自己生成这个法线矩阵，这两个函数对所有类型矩阵都有效。注意我们还要把被处理过的矩阵强制转换为3×3矩阵，来保证它失去了位移属性以及能够乘以vec3的法向量。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Normal = <span class=\"built_in\">mat3</span>(<span class=\"built_in\">transpose</span>(<span class=\"built_in\">inverse</span>(model))) * aNormal;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger no-icon\"><p>矩阵求逆是一项对于着色器开销很大的运算，因为它必须在场景中的每一个顶点上进行，所以应该尽可能地避免在着色器中进行求逆运算。以学习为目的的话这样做还好，但是对于一个高效的应用来说，你最好先在CPU上计算出法线矩阵，再通过uniform把它传递给着色器（就像模型矩阵一样）。</p>\n</div>\n\n<h2 id=\"镜面光照\"><a href=\"#镜面光照\" class=\"headerlink\" title=\"镜面光照\"></a>镜面光照</h2><p>如果你还没被这些光照计算搞得精疲力尽，我们就再把镜面高光(Specular Highlight)加进来，这样冯氏光照才算完整。</p>\n<p>和漫反射光照一样，镜面光照也决定于光的方向向量和物体的法向量，但是它也决定于观察方向，例如玩家是从什么方向看向这个片段的。镜面光照决定于表面的反射特性。如果我们把物体表面设想为一面镜子，那么镜面光照最强的地方就是我们看到表面上反射光的地方。你可以在下图中看到效果：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T211234.png\" alt=\"2024-03-12T211234\"></p>\n<p>我们通过根据法向量翻折入射光的方向来计算反射向量。然后我们计算反射向量与观察方向的角度差，它们之间夹角越小，镜面光的作用就越大。由此产生的效果就是，我们看向在入射光在表面的反射方向时，会看到一点高光。</p>\n<p>观察向量是我们计算镜面光照时需要的一个额外变量，我们可以使用观察者的世界空间位置和片段的位置来计算它。之后我们计算出镜面光照强度，用它乘以光源的颜色，并将它与环境光照和漫反射光照部分加和。</p>\n<div class=\"note info\">我们选择在世界空间进行光照计算，但是大多数人趋向于更偏向在观察空间进行光照计算。在观察空间计算的优势是，观察者的位置总是在(0, 0, 0)，所以你已经零成本地拿到了观察者的位置。然而，若以学习为目的，我认为在世界空间中计算光照更符合直觉。如果你仍然希望在观察空间计算光照的话，你需要将所有相关的向量也用观察矩阵进行变换（不要忘记也修改法线矩阵）。</div>\n\n<p>要得到观察者的世界空间坐标，我们直接使用摄像机的位置向量即可（它当然就是那个观察者）。那么让我们把另一个uniform添加到片段着色器中，并把摄像机的位置向量传给着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;viewPos&quot;</span>, camera.Position);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经获得所有需要的变量，可以计算高光强度了。首先，我们定义一个镜面强度(Specular Intensity)变量，给镜面高光一个中等亮度颜色，让它不要产生过度的影响。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> specularStrength = <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们把它设置为1.0f，我们会得到一个非常亮的镜面光分量，这对于一个珊瑚色的立方体来说有点太多了。下一节教程中我们会讨论如何合理设置这些光照强度，以及它们是如何影响物体的。下一步，我们计算视线方向向量，和对应的沿着法线轴的反射向量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos);</span><br><span class=\"line\"><span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是我们对lightDir向量进行了取反。reflect函数要求第一个向量是从光源指向片段位置的向量，但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。为了保证我们得到正确的reflect向量，我们通过对lightDir向量取反来获得相反的方向。第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。</p>\n<p>剩下要做的是计算镜面分量。下面的代码完成了这件事：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), <span class=\"number\">32</span>);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = specularStrength * spec * lightColor;</span><br></pre></td></tr></table></figure>\n<p>我们先计算视线方向与反射方向的点乘（并确保它不是负值），然后取它的32次幂。这个32是高光的反光度(Shininess)。一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。在下面的图片里，你会看到不同反光度的视觉效果影响：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T214239.png\" alt=\"2024-03-12T214239\"></p>\n<p>我们不希望镜面成分过于显眼，所以我们把指数保持为32。剩下的最后一件事情是把它加到环境光分量和漫反射分量里，再用结果乘以物体的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> result = (ambient + diffuse + specular) * objectColor;</span><br><span class=\"line\">FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们现在为冯氏光照计算了全部的光照分量。根据你的视角，你可以看到类似下面的画面：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T214334.png\" alt=\"2024-03-12T214334\"></p>\n","length":4626,"excerpt":"<p><img src=\"/2024/03/11/opengl_color_light02/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>opengl 颜色，光照学习</p>","more":"<h1 id=\"基础光照\"><a href=\"#基础光照\" class=\"headerlink\" title=\"基础光照\"></a>基础光照</h1><p>现实世界的光照是极其复杂的，而且会受到诸多因素的影响，这是我们有限的计算能力所无法模拟的。因此OpenGL的光照使用的是简化的模型，对现实的情况进行近似，这样处理起来会更容易一些，而且看起来也差不多一样。这些光照模型都是基于我们对光的物理特性的理解。其中一个模型被称为冯氏光照模型(Phong Lighting Model)。冯氏光照模型的主要结构由3个分量组成：<strong>环境(Ambient)</strong>、**漫反射(Diffuse)<strong>和</strong>镜面(Specular)**光照。下面这张图展示了这些光照分量看起来的样子：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-11T222920.png\" alt=\"2024-03-11T222920\"></p>\n<ul>\n<li><strong>环境光照(Ambient Lighting)</strong>：即使在黑暗的情况下，世界上通常也仍然有一些光亮（月亮、远处的光），所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。</li>\n<li><strong>漫反射光照(Diffuse Lighting)</strong>：模拟光源对物体的方向性影响(Directional Impact)。它是冯氏光照模型中视觉上最显著的分量。物体的某一部分越是正对着光源，它就会越亮。</li>\n<li><strong>镜面光照(Specular Lighting)</strong>：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。</li>\n</ul>\n<p>为了创建有趣的视觉场景，我们希望模拟至少这三种光照分量。我们将以最简单的一个开始：<strong>环境光照。</strong></p>\n<h2 id=\"环境光照\"><a href=\"#环境光照\" class=\"headerlink\" title=\"环境光照\"></a>环境光照</h2><p>光通常都不是来自于同一个光源，而是来自于我们周围分散的很多光源，即使它们可能并不是那么显而易见。光的一个属性是，它可以向很多方向发散并反弹，从而能够到达不是非常直接临近的点。所以，光能够在其它的表面上反射，对一个物体产生间接的影响。考虑到这种情况的算法叫做全局照明(Global Illumination)算法，但是这种算法既开销高昂又极其复杂。</p>\n<p>由于我们现在对那种又复杂又开销高昂的算法不是很感兴趣，所以我们将会先使用一个简化的全局照明模型，即环境光照。正如你在上一节所学到的，我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。</p>\n<p>把环境光照添加到场景里非常简单。我们用光的颜色乘以一个很小的常量环境因子，再乘以物体的颜色，然后将最终结果作为片段的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> ambientStrength = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientStrength * lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = ambient * objectColor;</span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"漫反射光照\"><a href=\"#漫反射光照\" class=\"headerlink\" title=\"漫反射光照\"></a>漫反射光照</h2><p>环境光照本身不能提供最有趣的结果，但是漫反射光照就能开始对物体产生显著的视觉影响了。漫反射光照使物体上与光线方向越接近的片段能从光源处获得更多的亮度。为了能够更好的理解漫反射光照，请看下图：</p>\n<p><img src=\"/2024/03/11/opengl_color_light02/2024-03-11T230323.png\" alt=\"2024-03-11T230323\"></p>\n<p>图左上方有一个光源，它所发出的光线落在物体的一个片段上。我们需要测量这个光线是以什么角度接触到这个片段的。如果光线垂直于物体表面，这束光对物体的影响会最大化（译注：更亮）。为了测量光线和片段的角度，我们使用一个叫做<code>法向量(Normal Vector)</code>的东西，它是垂直于片段表面的一个向量（这里以黄色箭头表示），我们在后面再讲这个东西。这两个向量之间的角度很容易就能够通过点乘计算出来。</p>\n<p>你可能记得在变换那一节教程里，我们知道两个单位向量的夹角越小，它们点乘的结果越倾向于1。当两个向量的夹角为90度的时候，点乘会变为0。这同样适用于θ，θ越大，光对片段颜色的影响就应该越小。</p>\n<div class=\"note default\">注意，为了（只）得到两个向量夹角的余弦值，我们使用的是单位向量（长度为1的向量），所以我们需要确保所有的向量都是标准化的，否则点乘返回的就不仅仅是余弦值了（见变换）。</div>\n\n<p>点乘返回一个标量，我们可以用它计算光线对片段颜色的影响。不同片段朝向光源的方向的不同，这些片段被照亮的情况也不同。<br>所以，计算漫反射光照需要什么？</p>\n<ul>\n<li><strong>法向量</strong>：一个垂直于顶点表面的向量。</li>\n<li><strong>定向的光线</strong>：作为光源的位置与片段的位置之间向量差的方向向量。为了计算这个光线，我们需要光的位置向量和片段的位置向量。</li>\n</ul>\n<h3 id=\"法向量\"><a href=\"#法向量\" class=\"headerlink\" title=\"法向量\"></a>法向量</h3><p>法向量是一个垂直于顶点表面的（单位）向量。由于顶点本身并没有表面（它只是空间中一个独立的点），我们利用它周围的顶点来计算出这个顶点的表面。我们能够使用一个小技巧，使用叉乘对立方体所有的顶点计算法向量，但是由于3D立方体不是一个复杂的形状，所以我们可以简单地把法线数据手工添加到顶点数据中。更新后的顶点数据数组可以在<a href=\"https://learnopengl.com/code_viewer.php?code=lighting/basic_lighting_vertex_data\">这里</a>找到。试着去想象一下，这些法向量真的是垂直于立方体各个平面的表面的（一个立方体由6个平面组成）。</p>\n<p>由于我们向顶点数组添加了额外的数据，所以我们应该更新光照的顶点着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * sizeof(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经向每个顶点添加了一个法向量并更新了顶点着色器，我们还要更新顶点属性指针。注意，灯使用同样的顶点数组作为它的顶点数据，然而灯的着色器并没有使用新添加的法向量。我们不需要更新灯的着色器或者是属性的配置，但是我们必须至少修改一下顶点属性指针来适应新的顶点数组的大小：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glVertexAttribPointer</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">6</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>), (<span class=\"type\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">glEnableVertexAttribArray</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所有光照的计算都是在片段着色器里进行，所以我们需要将法向量由顶点着色器传递到片段着色器。我们这么做：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    Normal = aNormal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，在片段着色器中定义相应的输入变量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算漫反射光照\"><a href=\"#计算漫反射光照\" class=\"headerlink\" title=\"计算漫反射光照\"></a>计算漫反射光照</h3><p>我们现在对每个顶点都有了法向量，但是我们仍然需要光源的位置向量和片段的位置向量。由于光源的位置是一个静态变量，我们可以简单地在片段着色器中把它声明为uniform：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br></pre></td></tr></table></figure>\n\n<p>然后在渲染循环中（渲染循环的外面也可以，因为它不会改变）更新uniform。我们使用在前面声明的lightPos向量作为光源位置</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.setVec3(&quot;lightPos&quot;, lightPos);</span><br></pre></td></tr></table></figure>\n<p>在片段着色器中，我们需要把经过model矩阵变换的物体坐标传入片段着色器，这样的话片段着色器才能根据光源位置以及物体面上的坐标来确定光照亮度</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> FragPos;  </span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = projection * view * model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    FragPos = <span class=\"type\">vec3</span>(model * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    Normal = aNormal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，在片段着色器中添加相应的输入变量。</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有需要的变量都设置好了，我们可以在片段着色器中添加光照计算了。</p>\n<p>我们需要做的第一件事是计算光源和片段位置之间的方向向量。前面提到，光的方向向量是光源位置向量与片段位置向量之间的向量差。你可能记得在变换教程中，我们能够简单地通过让两个向量相减的方式计算向量差。我们同样希望确保所有相关向量最后都转换为单位向量，所以我们把法线和最终的方向向量都进行标准化：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal);</span><br><span class=\"line\"><span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos);</span><br></pre></td></tr></table></figure>\n <div class=\"note danger no-icon\"><p>切记，计算光照信息数据的时候，一定要把所有的方向向量全部标准化</p>\n</div>\n\n<p> 如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。</p>\n<p>现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。</p>\n<p>如果两个向量之间的角度大于90度，点乘的结果就会变成负数，这样会导致漫反射分量变为负数。为此，我们使用max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。负数颜色的光照是没有定义的，所以最好避免它，除非你是那种古怪的艺术家。</p>\n<p>现在我们有了环境光分量和漫反射分量，我们把它们相加，然后把结果乘以物体的颜色，来获得片段最后的输出颜色。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 result = (ambient + diffuse) * objectColor;</span><br><span class=\"line\">FragColor = <span class=\"built_in\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最后一件事\"><a href=\"#最后一件事\" class=\"headerlink\" title=\"最后一件事\"></a>最后一件事</h3><p>现在我们已经把法向量从顶点着色器传到了片段着色器。可是，目前片段着色器里的计算都是在世界空间坐标中进行的。所以，我们是不是应该把法向量也转换为世界空间坐标？基本正确，但是这不是简单地把它乘以一个模型矩阵就能搞定的。</p>\n<p>首先，法向量只是一个方向向量，不能表达空间中的特定位置。同时，法向量没有齐次坐标（顶点位置中的w分量）。这意味着，位移不应该影响到法向量。因此，如果我们打算把法向量乘以一个模型矩阵，我们就要从矩阵中移除位移部分，只选用模型矩阵左上角3×3的矩阵（注意，我们也可以把法向量的w分量设置为0，再乘以4×4矩阵；这同样可以移除位移）。对于法向量，我们只希望对它实施缩放和旋转变换。</p>\n<p>其次，如果模型矩阵执行了不等比缩放，顶点的改变会导致法向量不再垂直于表面了。因此，我们不能用这样的模型矩阵来变换法向量。下面的图展示了应用了不等比缩放的模型矩阵对法向量的影响：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T210216.png\" alt=\"2024-03-12T210216\"></p>\n<p>每当我们应用一个不等比缩放时（注意：等比缩放不会破坏法线，因为法线的方向没被改变，仅仅改变了法线的长度，而这很容易通过标准化来修复），法向量就不会再垂直于对应的表面了，这样光照就会被破坏。</p>\n<p>修复这个行为的诀窍是使用一个为法向量专门定制的模型矩阵。这个矩阵称之为法线矩阵(Normal Matrix)，它使用了一些线性代数的操作来移除对法向量错误缩放的影响。如果你想知道这个矩阵是如何计算出来的，建议去阅读这个文章。</p>\n<p>法线矩阵被定义为「模型矩阵左上角3x3部分的逆矩阵的转置矩阵」。真是拗口，如果你不明白这是什么意思，别担心，我们还没有讨论逆矩阵(Inverse Matrix)和转置矩阵(Transpose Matrix)。注意，大部分的资源都会将法线矩阵定义为应用到模型-观察矩阵(Model-view Matrix)上的操作，但是由于我们只在世界空间中进行操作（不是在观察空间），我们只使用模型矩阵。</p>\n<p>在顶点着色器中，我们可以使用inverse和transpose函数自己生成这个法线矩阵，这两个函数对所有类型矩阵都有效。注意我们还要把被处理过的矩阵强制转换为3×3矩阵，来保证它失去了位移属性以及能够乘以vec3的法向量。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Normal = <span class=\"built_in\">mat3</span>(<span class=\"built_in\">transpose</span>(<span class=\"built_in\">inverse</span>(model))) * aNormal;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger no-icon\"><p>矩阵求逆是一项对于着色器开销很大的运算，因为它必须在场景中的每一个顶点上进行，所以应该尽可能地避免在着色器中进行求逆运算。以学习为目的的话这样做还好，但是对于一个高效的应用来说，你最好先在CPU上计算出法线矩阵，再通过uniform把它传递给着色器（就像模型矩阵一样）。</p>\n</div>\n\n<h2 id=\"镜面光照\"><a href=\"#镜面光照\" class=\"headerlink\" title=\"镜面光照\"></a>镜面光照</h2><p>如果你还没被这些光照计算搞得精疲力尽，我们就再把镜面高光(Specular Highlight)加进来，这样冯氏光照才算完整。</p>\n<p>和漫反射光照一样，镜面光照也决定于光的方向向量和物体的法向量，但是它也决定于观察方向，例如玩家是从什么方向看向这个片段的。镜面光照决定于表面的反射特性。如果我们把物体表面设想为一面镜子，那么镜面光照最强的地方就是我们看到表面上反射光的地方。你可以在下图中看到效果：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T211234.png\" alt=\"2024-03-12T211234\"></p>\n<p>我们通过根据法向量翻折入射光的方向来计算反射向量。然后我们计算反射向量与观察方向的角度差，它们之间夹角越小，镜面光的作用就越大。由此产生的效果就是，我们看向在入射光在表面的反射方向时，会看到一点高光。</p>\n<p>观察向量是我们计算镜面光照时需要的一个额外变量，我们可以使用观察者的世界空间位置和片段的位置来计算它。之后我们计算出镜面光照强度，用它乘以光源的颜色，并将它与环境光照和漫反射光照部分加和。</p>\n<div class=\"note info\">我们选择在世界空间进行光照计算，但是大多数人趋向于更偏向在观察空间进行光照计算。在观察空间计算的优势是，观察者的位置总是在(0, 0, 0)，所以你已经零成本地拿到了观察者的位置。然而，若以学习为目的，我认为在世界空间中计算光照更符合直觉。如果你仍然希望在观察空间计算光照的话，你需要将所有相关的向量也用观察矩阵进行变换（不要忘记也修改法线矩阵）。</div>\n\n<p>要得到观察者的世界空间坐标，我们直接使用摄像机的位置向量即可（它当然就是那个观察者）。那么让我们把另一个uniform添加到片段着色器中，并把摄像机的位置向量传给着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;viewPos&quot;</span>, camera.Position);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经获得所有需要的变量，可以计算高光强度了。首先，我们定义一个镜面强度(Specular Intensity)变量，给镜面高光一个中等亮度颜色，让它不要产生过度的影响。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> specularStrength = <span class=\"number\">0.5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们把它设置为1.0f，我们会得到一个非常亮的镜面光分量，这对于一个珊瑚色的立方体来说有点太多了。下一节教程中我们会讨论如何合理设置这些光照强度，以及它们是如何影响物体的。下一步，我们计算视线方向向量，和对应的沿着法线轴的反射向量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos);</span><br><span class=\"line\"><span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br></pre></td></tr></table></figure>\n<p>需要注意的是我们对lightDir向量进行了取反。reflect函数要求第一个向量是从光源指向片段位置的向量，但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。为了保证我们得到正确的reflect向量，我们通过对lightDir向量取反来获得相反的方向。第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。</p>\n<p>剩下要做的是计算镜面分量。下面的代码完成了这件事：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), <span class=\"number\">32</span>);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = specularStrength * spec * lightColor;</span><br></pre></td></tr></table></figure>\n<p>我们先计算视线方向与反射方向的点乘（并确保它不是负值），然后取它的32次幂。这个32是高光的反光度(Shininess)。一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。在下面的图片里，你会看到不同反光度的视觉效果影响：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T214239.png\" alt=\"2024-03-12T214239\"></p>\n<p>我们不希望镜面成分过于显眼，所以我们把指数保持为32。剩下的最后一件事情是把它加到环境光分量和漫反射分量里，再用结果乘以物体的颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> result = (ambient + diffuse + specular) * objectColor;</span><br><span class=\"line\">FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们现在为冯氏光照计算了全部的光照分量。根据你的视角，你可以看到类似下面的画面：<br><img src=\"/2024/03/11/opengl_color_light02/2024-03-12T214334.png\" alt=\"2024-03-12T214334\"></p>"},{"title":"opengl 坐标","date":"2024-03-07T02:52:03.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\nopenGL 坐标系统.重点： 注意矩阵运算的顺序是相反的\n<!-- more -->\n- [坐标系统](#坐标系统)\n  - [概述](#概述)\n  - [局部空间](#局部空间)\n  - [世界空间](#世界空间)\n  - [观察空间](#观察空间)\n  - [裁剪空间](#裁剪空间)\n    - [正射投影](#正射投影)\n    - [透视投影](#透视投影)\n  - [把它们都组合到一起](#把它们都组合到一起)\n  - [进入3D](#进入3d)\n  - [更加 3D](#更加-3d)\n    - [Z缓冲](#z缓冲)\n  - [总结：](#总结)\n- [摄像机](#摄像机)\n  - [摄像机/观察空间](#摄像机观察空间)\n    - [摄像机位置](#摄像机位置)\n    - [摄像机方向](#摄像机方向)\n    - [右轴](#右轴)\n    - [上轴](#上轴)\n  - [Look At](#look-at)\n  - [是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。](#是摄像机位置向量注意位置向量是相反的因为我们最终希望把世界平移到与我们自身移动的相反方向把这个lookat矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间lookat矩阵就像它的名字表达的那样它会创建一个看着look-at给定目标的观察矩阵)\n\n# 坐标系统\n在上一个教程中，我们学习了如何有效地利用矩阵的变换来对所有顶点进行变换。OpenGL希望在每次顶点着色器运行后，我们可见的所有顶点都为标准化设备坐标(Normalized Device Coordinate, NDC)。**也就是说，每个顶点的x，y，z坐标都应该在-1.0到1.0之间**，超出这个坐标范围的顶点都将不可见。我们通常会自己设定一个坐标的范围，之后再在顶点着色器中将这些坐标变换为标准化设备坐标。然后将这些标准化设备坐标传入光栅器(Rasterizer)，将它们变换为屏幕上的二维坐标或像素。\n\n将坐标变换为标准化设备坐标，接着再转化为屏幕坐标的过程通常是分步进行的，也就是类似于流水线那样子。在流水线中，物体的顶点在最终转化为屏幕坐标之前还会被变换到多个坐标系统(Coordinate System)。将物体的坐标变换到几个过渡坐标系(Intermediate Coordinate System)的优点在于，在这些特定的坐标系统中，一些操作或运算更加方便和容易，这一点很快就会变得很明显。对我们来说比较重要的总共有5个不同的坐标系统：\n\n- **局部空间**(Local Space，或者称为物体空间(Object Space))\n- **世界空间**(World Space)\n- **观察空间**(View Space，或者称为视觉空间(Eye Space))\n- **裁剪空间**(Clip Space)\n- **屏幕空间**(Screen Space)\n\n这就是一个顶点在最终被转化为片段之前需要经历的所有不同状态。\n\n你现在可能会对什么是坐标空间，什么是坐标系统感到非常困惑，所以我们将用一种更加通俗的方式来解释它们。下面，我们将显示一个整体的图片，之后我们会讲解每个空间的具体功能。\n\n## 概述\n为了将坐标从一个坐标系变换到另一个坐标系，我们需要用到几个变换矩阵，最重要的几个分别是**模型(Model)**、**观察(View)**、**投影(Projection)**三个矩阵。我们的顶点坐标起始于**局部空间**(Local Space)，在这里它称为**局部坐标**(Local Coordinate)，它在之后会变为**世界坐标**(World Coordinate)，**观察坐标**(View Coordinate)，**裁剪坐标**(Clip Coordinate)，并最后以**屏幕坐标**(Screen Coordinate)的形式结束。下面的这张图展示了整个流程以及各个变换过程做了什么：\n![2024-03-07T185800](2024-03-07T185800.png)\n\n- 局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标。\n- 下一步是将局部坐标变换为世界空间坐标，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。\n- 接下来我们将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的。\n- 坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上。\n- 最后，我们将裁剪坐标变换为屏幕坐标，我们将使用一个叫做视口变换(Viewport Transform)的过程。视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。\n\n你可能已经大致了解了每个坐标空间的作用。我们之所以将顶点变换到各个不同的空间的原因是有些操作在特定的坐标系统中才有意义且更方便。例如，当需要对物体进行修改的时候，在局部空间中来操作会更说得通；如果要对一个物体做出一个相对于其它物体位置的操作时，在世界坐标系中来做这个才更说得通，等等。如果我们愿意，我们也可以定义一个直接从局部空间变换到裁剪空间的变换矩阵，但那样会失去很多灵活性。\n\n{% note info no-icon %}\n个人理解： 这几个坐标转换的方式，我们可以用拍照片来更形象的理解。\n局部坐标，就是你要拍什么东西，拍的东西长什么样子。在我们之前的学习中，这个局部坐标就是我们定义的vertex，目前我们渲染的都是正方形。\n世界坐标，就是这个东西现在在世界中是个什么状态，比如被拉伸，正在旋转，或者正在移动。\n观察坐标，就是拍下的这个东西在相机中的一个状态。比如在相机前面，上面，或者是下面。\n裁剪坐标，就是拍下的这个物体是怎么映射成图片的，一般有两种方式，一种是正交投影（没有远近，所有物体的大小固定），还有一种是透视投影，所能看到的的东西都是近大远小。\n屏幕空间, 可以理解为，我们拍出来的照片，该怎么摆在我们眼前。比如，我可以把它挂在墙上，可以放在桌子上，甚至可以投影到墙上。这样每一种摆放方式，我们都能看到不同的效果.\n{% endnote %}\n\n接下来我们将要更仔细地讨论各个坐标系统。\n## 局部空间\n局部空间是指物体所在的坐标空间，即对象最开始所在的地方。想象你在一个建模软件（比如说Blender）中创建了一个立方体。你创建的立方体的原点有可能位于(0, 0, 0)，即便它有可能最后在程序中处于完全不同的位置。甚至有可能你创建的所有模型都以(0, 0, 0)为初始位置（译注：然而它们会最终出现在世界的不同位置）。所以，你的模型的所有顶点都是在局部空间中：它们相对于你的物体来说都是局部的。\n\n我们一直使用的那个箱子的顶点是被设定在-0.5到0.5的坐标范围中，(0, 0)是它的原点。这些都是局部坐标。\n\n## 世界空间\n如果我们将我们所有的物体导入到程序当中，它们有可能会全挤在世界的原点(0, 0, 0)上，这并不是我们想要的结果。我们想为每一个物体定义一个位置，从而能在更大的世界当中放置它们。世界空间中的坐标正如其名：是指顶点相对于（游戏）世界的坐标。如果你希望将物体分散在世界上摆放（特别是非常真实的那样），这就是你希望物体变换到的空间。物体的坐标将会从局部变换到世界空间；该变换是由模型矩阵(Model Matrix)实现的。\n\n模型矩阵是一种变换矩阵，它能通过对物体进行位移、缩放、旋转来将它置于它本应该在的位置或朝向。你可以将它想像为变换一个房子，你需要先将它缩小（它在局部空间中太大了），并将其位移至郊区的一个小镇，然后在y轴上往左旋转一点以搭配附近的房子。你也可以把上一节将箱子到处摆放在场景中用的那个矩阵大致看作一个模型矩阵；我们将箱子的局部坐标变换到场景/世界中的不同位置。\n\n## 观察空间\n观察空间经常被人们称之OpenGL的摄像机(Camera)（所以有时也称为摄像机空间(Camera Space)或视觉空间(Eye Space)）。观察空间是将世界空间坐标转化为用户视野前方的坐标而产生的结果。因此观察空间就是从摄像机的视角所观察到的空间。而这通常是由一系列的位移和旋转的组合来完成，平移/旋转场景从而使得特定的对象被变换到摄像机的前方。这些组合在一起的变换通常存储在一个观察矩阵(View Matrix)里，它被用来将世界坐标变换到观察空间。在下一节中我们将深入讨论如何创建一个这样的观察矩阵来模拟一个摄像机。\n\n## 裁剪空间\n在一个顶点着色器运行的最后，OpenGL期望所有的坐标都能落在一个特定的范围内，且任何在这个范围之外的点都应该被裁剪掉(Clipped)。被裁剪掉的坐标就会被忽略，所以剩下的坐标就将变为屏幕上可见的片段。这也就是裁剪空间(Clip Space)名字的由来。\n\n因为将所有可见的坐标都指定在-1.0到1.0的范围内不是很直观，所以我们会指定自己的坐标集(Coordinate Set)并将它变换回标准化设备坐标系，就像OpenGL期望的那样。\n\n为了将顶点坐标从观察变换到裁剪空间，我们需要定义一个投影矩阵(Projection Matrix)，它指定了一个范围的坐标，比如在每个维度上的-1000到1000。投影矩阵接着会将在这个指定的范围内的坐标变换为标准化设备坐标的范围(-1.0, 1.0)。所有在范围外的坐标不会被映射到在-1.0到1.0的范围之间，所以会被裁剪掉。在上面这个投影矩阵所指定的范围内，坐标(1250, 500, 750)将是不可见的，这是由于它的x坐标超出了范围，它被转化为一个大于1.0的标准化设备坐标，所以被裁剪掉了。\n\n<div class=\"note info\">如果只是图元(Primitive)，例如三角形，的一部分超出了裁剪体积(Clipping Volume)，则OpenGL会重新构建这个三角形为一个或多个三角形让其能够适合这个裁剪范围。</div>\n\n由投影矩阵创建的观察箱(Viewing Box)被称为平截头体(Frustum)，每个出现在平截头体范围内的坐标都会最终出现在用户的屏幕上。将特定范围内的坐标转化到标准化设备坐标系的过程（而且它很容易被映射到2D观察空间坐标）被称之为投影(Projection)，因为使用投影矩阵能将3D坐标投影(Project)到很容易映射到2D的标准化设备坐标系中。\n\n一旦所有顶点被变换到裁剪空间，最终的操作——透视除法(Perspective Division)将会执行，在这个过程中我们将位置向量的x，y，z分量分别除以向量的齐次w分量；透视除法是将4D裁剪空间坐标变换为3D标准化设备坐标的过程。这一步会在每一个顶点着色器运行的最后被自动执行。\n\n在这一阶段之后，最终的坐标将会被映射到屏幕空间中（使用glViewport中的设定），并被变换成片段。\n\n将观察坐标变换为裁剪坐标的投影矩阵可以为两种不同的形式，每种形式都定义了不同的平截头体。我们可以选择创建一个正射投影矩阵(Orthographic Projection Matrix)或一个透视投影矩阵(Perspective Projection Matrix)。\n\n### 正射投影\n正射投影矩阵定义了一个类似立方体的平截头箱，它定义了一个裁剪空间，在这空间之外的顶点都会被裁剪掉。创建一个正射投影矩阵需要指定可见平截头体的宽、高和长度。在使用正射投影矩阵变换至裁剪空间之后处于这个平截头体内的所有坐标将不会被裁剪掉。它的平截头体看起来像一个容器\n![2024-03-07T190956](2024-03-07T190956.png)\n\n上面的平截头体定义了可见的坐标，它由由宽、高、近(Near)平面和远(Far)平面所指定。任何出现在近平面之前或远平面之后的坐标都会被裁剪掉。正射平截头体直接将平截头体内部的所有坐标映射为标准化设备坐标，因为每个向量的w分量都没有进行改变；如果w分量等于1.0，透视除法则不会改变这个坐标。\n\n要创建一个正射投影矩阵，我们可以使用GLM的内置函数glm::ortho：\n```c++\nglm::ortho(0.0f, 800.0f, 0.0f, 600.0f, 0.1f, 100.0f);\n```\n\n前两个参数指定了平截头体的左右坐标，第三和第四参数指定了平截头体的底部和顶部。通过这四个参数我们定义了近平面和远平面的大小，然后第五和第六个参数则定义了近平面和远平面的距离。这个投影矩阵会将处于这些x，y，z值范围内的坐标变换为标准化设备坐标。\n\n正射投影矩阵直接将坐标映射到2D平面中，即你的屏幕，但实际上一个直接的投影矩阵会产生不真实的结果，因为这个投影没有将透视(Perspective)考虑进去。所以我们需要透视投影矩阵来解决这个问题。\n\n### 透视投影\n如果你曾经体验过实际生活给你带来的景象，你就会注意到离你越远的东西看起来更小。这个奇怪的效果称之为透视(Perspective)。透视的效果在我们看一条无限长的高速公路或铁路时尤其明显，正如下面图片显示的那样：\n\n![2024-03-07T191126](2024-03-07T191126.png)\n\n正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：\n\n![2024-03-07T191136](2024-03-07T191136.png)\n顶点坐标的每个分量都会除以它的w分量，距离观察者越远顶点坐标就会越小。这是也是w分量非常重要的另一个原因，它能够帮助我们进行透视投影。最后的结果坐标就是处于标准化设备空间中的。如果你对正射投影矩阵和透视投影矩阵是如何计算的很感兴趣（且不会对数学感到恐惧的话）我推荐这篇由Songho写的文章。\n\n在GLM中可以这样创建一个透视投影矩阵：\n```c++\nglm::mat4 proj = glm::perspective(glm::radians(45.0f), (float)width/(float)height, 0.1f, 100.0f);\n```\n同样，glm::perspective所做的其实就是创建了一个定义了可视空间的大平截头体，任何在这个平截头体以外的东西最后都不会出现在裁剪空间体积内，并且将会受到裁剪。一个透视平截头体可以被看作一个不均匀形状的箱子，在这个箱子内部的每个坐标都会被映射到裁剪空间上的一个点。下面是一张透视平截头体的图片：\n![2024-03-07T191213](2024-03-07T191213.png)\n\n它的第一个参数定义了fov的值，它表示的是视野(Field of View)，并且设置了观察空间的大小。如果想要一个真实的观察效果，它的值通常设置为45.0f，但想要一个末日风格的结果你可以将其设置一个更大的值。第二个参数设置了宽高比，由视口的宽除以高所得。第三和第四个参数设置了平截头体的近和远平面。我们通常设置近距离为0.1f，而远距离设为100.0f。所有在近平面和远平面内且处于平截头体内的顶点都会被渲染。\n\n当你把透视矩阵的 near 值设置太大时（如10.0f），OpenGL会将靠近摄像机的坐标（在0.0f和10.0f之间）都裁剪掉，这会导致一个你在游戏中很熟悉的视觉效果：在太过靠近一个物体的时候你的视线会直接穿过去。\n\n当使用正射投影时，每一个顶点坐标都会直接映射到裁剪空间中而不经过任何精细的透视除法（它仍然会进行透视除法，只是w分量没有被改变（它保持为1），因此没有起作用）。因为正射投影没有使用透视，远处的物体不会显得更小，所以产生奇怪的视觉效果。由于这个原因，正射投影主要用于二维渲染以及一些建筑或工程的程序，在这些场景中我们更希望顶点不会被透视所干扰。某些如 Blender 等进行三维建模的软件有时在建模时也会使用正射投影，因为它在各个维度下都更准确地描绘了每个物体。下面你能够看到在Blender里面使用两种投影方式的对比：\n\n你可以看到，使用透视投影的话，远处的顶点看起来比较小，而在正射投影中每个顶点距离观察者的距离都是一样的。\n\n## 把它们都组合到一起\n我们为上述的每一个步骤都创建了一个变换矩阵：模型矩阵、观察矩阵和投影矩阵。一个顶点坐标将会根据以下过程被变换到裁剪坐标：\n\n![2024-03-07T191439](2024-03-07T191439.png)\n\n**注意矩阵运算的顺序是相反的**（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。\n\n<div class=\"note info\">然后呢？\n\n顶点着色器的输出要求所有的顶点都在裁剪空间内，这正是我们刚才使用变换矩阵所做的。OpenGL然后对裁剪坐标执行透视除法从而将它们变换到标准化设备坐标。OpenGL会使用glViewPort内部的参数来将标准化设备坐标映射到屏幕坐标，每个坐标都关联了一个屏幕上的点（在我们的例子中是一个800x600的屏幕）。这个过程称为视口变换。</div>\n\n## 进入3D\n既然我们知道了如何将3D坐标变换为2D坐标，我们可以开始使用真正的3D物体，而不是枯燥的2D平面了。\n\n在开始进行3D绘图时，我们首先创建一个模型矩阵。这个模型矩阵包含了位移、缩放与旋转操作，它们会被应用到所有物体的顶点上，以变换它们到全局的世界空间。让我们变换一下我们的平面，将其绕着x轴旋转，使它看起来像放在地上一样。这个模型矩阵看起来是这样的：\n```c++\nglm::mat4 model;\nmodel = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));\n```\n通过将顶点坐标乘以这个模型矩阵，我们将该顶点坐标变换到世界坐标。我们的平面看起来就是在地板上，代表全局世界里的平面。\n\n接下来我们需要创建一个观察矩阵。我们想要在场景里面稍微往后移动，以使得物体变成可见的（当在世界空间时，我们位于原点(0,0,0)）。要想在场景里面移动，先仔细想一想下面这个句子：\n\n**将摄像机向后移动，和将整个场景向前移动是一样的。**\n\n这正是观察矩阵所做的，我们以相反于摄像机移动的方向移动整个场景。因为我们想要往后移动，并且OpenGL是一个右手坐标系(Right-handed System)，所以我们需要沿着z轴的正方向移动。我们会通过将场景沿着z轴负方向平移来实现。它会给我们一种我们在往后移动的感觉。\n\n![2024-03-07T191847](2024-03-07T191847.png)\n\n在下一个教程中我们将会详细讨论如何在场景中移动。就目前来说，观察矩阵是这样的：\n\n```c++\nglm::mat4 view;\n// 注意，我们将矩阵向我们要进行移动场景的反方向移动。\nview = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));\n```\n\n最后我们需要做的是定义一个投影矩阵。我们希望在场景中使用透视投影，所以像这样声明一个投影矩阵：\n```c++\nglm::mat4 projection;\nprojection = glm::perspective(glm::radians(45.0f), screenWidth / screenHeight, 0.1f, 100.0f);\n```\n\n既然我们已经创建了变换矩阵，我们应该将它们传入着色器。首先，让我们在顶点着色器中声明一个uniform变换矩阵然后将它乘以顶点坐标：\n```c++\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n...\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    // 注意乘法要从右向左读\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    ...\n}\n```\n我们还应该将矩阵传入着色器（这通常在每次的渲染迭代中进行，因为变换矩阵会经常变动）：\n```c++\nint modelLoc = glGetUniformLocation(ourShader.ID, \"model\"));\nglUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));\n... // 观察矩阵和投影矩阵与之类似\n```\n我们的顶点坐标已经使用模型、观察和投影矩阵进行变换了，最终的物体应该会：\n- 稍微向后倾斜至地板方向。\n- 离我们有一些距离。\n- 有透视效果（顶点越远，变得越小）。\n\n让我们检查一下结果是否满足这些要求：\n![2024-03-07T192913](2024-03-07T192913.png)\n\n## 更加 3D\n到目前为止，我们一直都在使用一个2D平面，而且甚至是在3D空间里！所以，让我们大胆地拓展我们的2D平面为一个3D立方体。要想渲染一个立方体，我们一共需要36个顶点（6个面 x 每个面有2个三角形组成 x 每个三角形有3个顶点），这36个顶点的位置你可以从[这里](https://learnopengl.com/code_viewer.php?code=getting-started/cube_vertices)获取。\n\n为了有趣一点，我们将让立方体随着时间旋转：\n```c++\nmodel = glm::rotate(model, (float)glfwGetTime() * glm::radians(50.0f), glm::vec3(0.5f, 1.0f, 0.0f));\n\n```\n然后我们使用glDrawArrays来绘制立方体，但这一次总共有36个顶点。\n```c++\nglDrawArrays(GL_TRIANGLES, 0, 36);\n```\n\n### Z缓冲\nOpenGL存储它的所有深度信息于一个Z缓冲(Z-buffer)中，也被称为深度缓冲(Depth Buffer)。GLFW会自动为你生成这样一个缓冲（就像它也有一个颜色缓冲来存储输出图像的颜色）。深度值存储在每个片段里面（作为片段的z值），当片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。这个过程称为深度测试(Depth Testing)，它是由OpenGL自动完成的。\n\n然而，如果我们想要确定OpenGL真的执行了深度测试，首先我们要告诉OpenGL我们想要启用深度测试；它默认是关闭的。我们可以通过glEnable函数来开启深度测试。glEnable和glDisable函数允许我们启用或禁用某个OpenGL功能。这个功能会一直保持启用/禁用状态，直到另一个调用来禁用/启用它。现在我们想启用深度测试，需要开启GL_DEPTH_TEST：\n```c++\nglEnable(GL_DEPTH_TEST);\n```\n因为我们使用了深度测试，我们也想要在每次渲染迭代之前清除深度缓冲（否则前一帧的深度信息仍然保存在缓冲中）。就像清除颜色缓冲一样，我们可以通过在glClear函数中指定DEPTH_BUFFER_BIT位来清除深度缓冲：\n```c++\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n```\n\n## 总结：\n**简单的讲，整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。**\n\n# 摄像机\n前面的教程中我们讨论了观察矩阵以及如何使用观察矩阵移动场景（我们向后移动了一点）。OpenGL本身没有摄像机(Camera)的概念，但我们可以通过把场景中的所有物体往相反方向移动的方式来模拟出摄像机，产生一种我们在移动的感觉，而不是场景在移动。\n\n本节我们将会讨论如何在OpenGL中配置一个摄像机，并且将会讨论FPS风格的摄像机，让你能够在3D场景中自由移动。我们也会讨论键盘和鼠标输入，最终完成一个自定义的摄像机类。\n\n我们之前总结过，**整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。**，我们所谓的相机，其实就是为了完成后面两个矩阵的。即： view 观察空间，projection 裁剪空间。\n\n## 摄像机/观察空间\n当我们讨论摄像机/观察空间(Camera/View Space)的时候，是在讨论以摄像机的视角作为场景原点时场景中所有的顶点坐标：观察矩阵把所有的世界坐标变换为相对于摄像机位置与方向的观察坐标。要定义一个摄像机，我们需要它在世界空间中的位置、观察的方向、一个指向它右侧的向量以及一个指向它上方的向量。细心的读者可能已经注意到我们实际上创建了一个三个单位轴相互垂直的、以摄像机的位置为原点的坐标系。\n\n![2024-03-07T194034](2024-03-07T194034.png)\n\n### 摄像机位置\n获取摄像机位置很简单。摄像机位置简单来说就是世界空间中一个指向摄像机位置的向量。我们把摄像机位置设置为上一节中的那个相同的位置：\n```c++\nglm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);\n```\n\n### 摄像机方向\n下一个需要的向量是摄像机的方向，这里指的是摄像机指向哪个方向。现在我们让摄像机指向场景原点：(0, 0, 0)。还记得如果将两个矢量相减，我们就能得到这两个矢量的差吗？用场景原点向量减去摄像机位置向量的结果就是摄像机的指向向量。由于我们知道摄像机指向z轴负方向，但我们希望方向向量(Direction Vector)指向摄像机的z轴正方向。如果我们交换相减的顺序，我们就会获得一个指向摄像机正z轴方向的向量：\n```c++\nglm::vec3 cameraTarget = glm::vec3(0.0f, 0.0f, 0.0f);\nglm::vec3 cameraDirection = glm::normalize(cameraPos - cameraTarget);\n\n```\n ### 右轴\n 我们需要的另一个向量是一个右向量(Right Vector)，它代表摄像机空间的x轴的正方向。为获取右向量我们需要先使用一个小技巧：先定义一个上向量(Up Vector)。接下来把上向量和第二步得到的方向向量进行叉乘。两个向量叉乘的结果会同时垂直于两向量，因此我们会得到指向x轴正方向的那个向量（如果我们交换两个向量叉乘的顺序就会得到相反的指向x轴负方向的向量）：\n ```c++\n glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f); \nglm::vec3 cameraRight = glm::normalize(glm::cross(up, cameraDirection));\n\n```\n\n### 上轴\n现在我们已经有了x轴向量和z轴向量，获取一个指向摄像机的正y轴向量就相对简单了：我们把右向量和方向向量进行叉乘：\n```c++\nglm::vec3 cameraUp = glm::cross(cameraDirection, cameraRight);\n```\n\n## Look At\n使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：\n![2024-03-07T194404](2024-03-07T194404.png)\n其中R\n是右向量，U\n是上向量，D\n是方向向量P\n是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。\n--- \n幸运的是，GLM已经提供了这些支持。我们要做的只是定义一个摄像机位置，一个目标位置和一个表示世界空间中的上向量的向量（我们计算右向量使用的那个上向量）。接着GLM就会创建一个LookAt矩阵，我们可以把它当作我们的观察矩阵：\n```c++\nglm::mat4 view;\nview = glm::lookAt(glm::vec3(0.0f, 0.0f, 3.0f), \n           glm::vec3(0.0f, 0.0f, 0.0f), \n           glm::vec3(0.0f, 1.0f, 0.0f));\n```\n\n`glm::LookAt`函数需要一个位置、目标和上向量。它会创建一个和在上一节使用的一样的观察矩阵。\n\n在讨论用户输入之前，我们先来做些有意思的事，把我们的摄像机在场景中旋转。我们会将摄像机的注视点保持在(0, 0, 0)。\n\n我们需要用到一点三角学的知识来在每一帧创建一个x和z坐标，它会代表圆上的一点，我们将会使用它作为摄像机的位置。通过重新计算x和y坐标，我们会遍历圆上的所有点，这样摄像机就会绕着场景旋转了。我们预先定义这个圆的半径radius，在每次渲染迭代中使用GLFW的glfwGetTime函数重新创建观察矩阵，来扩大这个圆。\n\n```c++\nfloat radius = 10.0f;\nfloat camX = sin(glfwGetTime()) * radius;\nfloat camZ = cos(glfwGetTime()) * radius;\nglm::mat4 view;\nview = glm::lookAt(glm::vec3(camX, 0.0, camZ), glm::vec3(0.0, 0.0, 0.0), glm::vec3(0.0, 1.0, 0.0)); \n\n```\n","source":"_posts/opengl_coordinate.md","raw":"---\ntitle: opengl 坐标\ndate: 2024-03-07T18:52:03+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\nopenGL 坐标系统.重点： 注意矩阵运算的顺序是相反的\n<!-- more -->\n- [坐标系统](#坐标系统)\n  - [概述](#概述)\n  - [局部空间](#局部空间)\n  - [世界空间](#世界空间)\n  - [观察空间](#观察空间)\n  - [裁剪空间](#裁剪空间)\n    - [正射投影](#正射投影)\n    - [透视投影](#透视投影)\n  - [把它们都组合到一起](#把它们都组合到一起)\n  - [进入3D](#进入3d)\n  - [更加 3D](#更加-3d)\n    - [Z缓冲](#z缓冲)\n  - [总结：](#总结)\n- [摄像机](#摄像机)\n  - [摄像机/观察空间](#摄像机观察空间)\n    - [摄像机位置](#摄像机位置)\n    - [摄像机方向](#摄像机方向)\n    - [右轴](#右轴)\n    - [上轴](#上轴)\n  - [Look At](#look-at)\n  - [是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。](#是摄像机位置向量注意位置向量是相反的因为我们最终希望把世界平移到与我们自身移动的相反方向把这个lookat矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间lookat矩阵就像它的名字表达的那样它会创建一个看着look-at给定目标的观察矩阵)\n\n# 坐标系统\n在上一个教程中，我们学习了如何有效地利用矩阵的变换来对所有顶点进行变换。OpenGL希望在每次顶点着色器运行后，我们可见的所有顶点都为标准化设备坐标(Normalized Device Coordinate, NDC)。**也就是说，每个顶点的x，y，z坐标都应该在-1.0到1.0之间**，超出这个坐标范围的顶点都将不可见。我们通常会自己设定一个坐标的范围，之后再在顶点着色器中将这些坐标变换为标准化设备坐标。然后将这些标准化设备坐标传入光栅器(Rasterizer)，将它们变换为屏幕上的二维坐标或像素。\n\n将坐标变换为标准化设备坐标，接着再转化为屏幕坐标的过程通常是分步进行的，也就是类似于流水线那样子。在流水线中，物体的顶点在最终转化为屏幕坐标之前还会被变换到多个坐标系统(Coordinate System)。将物体的坐标变换到几个过渡坐标系(Intermediate Coordinate System)的优点在于，在这些特定的坐标系统中，一些操作或运算更加方便和容易，这一点很快就会变得很明显。对我们来说比较重要的总共有5个不同的坐标系统：\n\n- **局部空间**(Local Space，或者称为物体空间(Object Space))\n- **世界空间**(World Space)\n- **观察空间**(View Space，或者称为视觉空间(Eye Space))\n- **裁剪空间**(Clip Space)\n- **屏幕空间**(Screen Space)\n\n这就是一个顶点在最终被转化为片段之前需要经历的所有不同状态。\n\n你现在可能会对什么是坐标空间，什么是坐标系统感到非常困惑，所以我们将用一种更加通俗的方式来解释它们。下面，我们将显示一个整体的图片，之后我们会讲解每个空间的具体功能。\n\n## 概述\n为了将坐标从一个坐标系变换到另一个坐标系，我们需要用到几个变换矩阵，最重要的几个分别是**模型(Model)**、**观察(View)**、**投影(Projection)**三个矩阵。我们的顶点坐标起始于**局部空间**(Local Space)，在这里它称为**局部坐标**(Local Coordinate)，它在之后会变为**世界坐标**(World Coordinate)，**观察坐标**(View Coordinate)，**裁剪坐标**(Clip Coordinate)，并最后以**屏幕坐标**(Screen Coordinate)的形式结束。下面的这张图展示了整个流程以及各个变换过程做了什么：\n![2024-03-07T185800](2024-03-07T185800.png)\n\n- 局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标。\n- 下一步是将局部坐标变换为世界空间坐标，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。\n- 接下来我们将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的。\n- 坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上。\n- 最后，我们将裁剪坐标变换为屏幕坐标，我们将使用一个叫做视口变换(Viewport Transform)的过程。视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。\n\n你可能已经大致了解了每个坐标空间的作用。我们之所以将顶点变换到各个不同的空间的原因是有些操作在特定的坐标系统中才有意义且更方便。例如，当需要对物体进行修改的时候，在局部空间中来操作会更说得通；如果要对一个物体做出一个相对于其它物体位置的操作时，在世界坐标系中来做这个才更说得通，等等。如果我们愿意，我们也可以定义一个直接从局部空间变换到裁剪空间的变换矩阵，但那样会失去很多灵活性。\n\n{% note info no-icon %}\n个人理解： 这几个坐标转换的方式，我们可以用拍照片来更形象的理解。\n局部坐标，就是你要拍什么东西，拍的东西长什么样子。在我们之前的学习中，这个局部坐标就是我们定义的vertex，目前我们渲染的都是正方形。\n世界坐标，就是这个东西现在在世界中是个什么状态，比如被拉伸，正在旋转，或者正在移动。\n观察坐标，就是拍下的这个东西在相机中的一个状态。比如在相机前面，上面，或者是下面。\n裁剪坐标，就是拍下的这个物体是怎么映射成图片的，一般有两种方式，一种是正交投影（没有远近，所有物体的大小固定），还有一种是透视投影，所能看到的的东西都是近大远小。\n屏幕空间, 可以理解为，我们拍出来的照片，该怎么摆在我们眼前。比如，我可以把它挂在墙上，可以放在桌子上，甚至可以投影到墙上。这样每一种摆放方式，我们都能看到不同的效果.\n{% endnote %}\n\n接下来我们将要更仔细地讨论各个坐标系统。\n## 局部空间\n局部空间是指物体所在的坐标空间，即对象最开始所在的地方。想象你在一个建模软件（比如说Blender）中创建了一个立方体。你创建的立方体的原点有可能位于(0, 0, 0)，即便它有可能最后在程序中处于完全不同的位置。甚至有可能你创建的所有模型都以(0, 0, 0)为初始位置（译注：然而它们会最终出现在世界的不同位置）。所以，你的模型的所有顶点都是在局部空间中：它们相对于你的物体来说都是局部的。\n\n我们一直使用的那个箱子的顶点是被设定在-0.5到0.5的坐标范围中，(0, 0)是它的原点。这些都是局部坐标。\n\n## 世界空间\n如果我们将我们所有的物体导入到程序当中，它们有可能会全挤在世界的原点(0, 0, 0)上，这并不是我们想要的结果。我们想为每一个物体定义一个位置，从而能在更大的世界当中放置它们。世界空间中的坐标正如其名：是指顶点相对于（游戏）世界的坐标。如果你希望将物体分散在世界上摆放（特别是非常真实的那样），这就是你希望物体变换到的空间。物体的坐标将会从局部变换到世界空间；该变换是由模型矩阵(Model Matrix)实现的。\n\n模型矩阵是一种变换矩阵，它能通过对物体进行位移、缩放、旋转来将它置于它本应该在的位置或朝向。你可以将它想像为变换一个房子，你需要先将它缩小（它在局部空间中太大了），并将其位移至郊区的一个小镇，然后在y轴上往左旋转一点以搭配附近的房子。你也可以把上一节将箱子到处摆放在场景中用的那个矩阵大致看作一个模型矩阵；我们将箱子的局部坐标变换到场景/世界中的不同位置。\n\n## 观察空间\n观察空间经常被人们称之OpenGL的摄像机(Camera)（所以有时也称为摄像机空间(Camera Space)或视觉空间(Eye Space)）。观察空间是将世界空间坐标转化为用户视野前方的坐标而产生的结果。因此观察空间就是从摄像机的视角所观察到的空间。而这通常是由一系列的位移和旋转的组合来完成，平移/旋转场景从而使得特定的对象被变换到摄像机的前方。这些组合在一起的变换通常存储在一个观察矩阵(View Matrix)里，它被用来将世界坐标变换到观察空间。在下一节中我们将深入讨论如何创建一个这样的观察矩阵来模拟一个摄像机。\n\n## 裁剪空间\n在一个顶点着色器运行的最后，OpenGL期望所有的坐标都能落在一个特定的范围内，且任何在这个范围之外的点都应该被裁剪掉(Clipped)。被裁剪掉的坐标就会被忽略，所以剩下的坐标就将变为屏幕上可见的片段。这也就是裁剪空间(Clip Space)名字的由来。\n\n因为将所有可见的坐标都指定在-1.0到1.0的范围内不是很直观，所以我们会指定自己的坐标集(Coordinate Set)并将它变换回标准化设备坐标系，就像OpenGL期望的那样。\n\n为了将顶点坐标从观察变换到裁剪空间，我们需要定义一个投影矩阵(Projection Matrix)，它指定了一个范围的坐标，比如在每个维度上的-1000到1000。投影矩阵接着会将在这个指定的范围内的坐标变换为标准化设备坐标的范围(-1.0, 1.0)。所有在范围外的坐标不会被映射到在-1.0到1.0的范围之间，所以会被裁剪掉。在上面这个投影矩阵所指定的范围内，坐标(1250, 500, 750)将是不可见的，这是由于它的x坐标超出了范围，它被转化为一个大于1.0的标准化设备坐标，所以被裁剪掉了。\n\n<div class=\"note info\">如果只是图元(Primitive)，例如三角形，的一部分超出了裁剪体积(Clipping Volume)，则OpenGL会重新构建这个三角形为一个或多个三角形让其能够适合这个裁剪范围。</div>\n\n由投影矩阵创建的观察箱(Viewing Box)被称为平截头体(Frustum)，每个出现在平截头体范围内的坐标都会最终出现在用户的屏幕上。将特定范围内的坐标转化到标准化设备坐标系的过程（而且它很容易被映射到2D观察空间坐标）被称之为投影(Projection)，因为使用投影矩阵能将3D坐标投影(Project)到很容易映射到2D的标准化设备坐标系中。\n\n一旦所有顶点被变换到裁剪空间，最终的操作——透视除法(Perspective Division)将会执行，在这个过程中我们将位置向量的x，y，z分量分别除以向量的齐次w分量；透视除法是将4D裁剪空间坐标变换为3D标准化设备坐标的过程。这一步会在每一个顶点着色器运行的最后被自动执行。\n\n在这一阶段之后，最终的坐标将会被映射到屏幕空间中（使用glViewport中的设定），并被变换成片段。\n\n将观察坐标变换为裁剪坐标的投影矩阵可以为两种不同的形式，每种形式都定义了不同的平截头体。我们可以选择创建一个正射投影矩阵(Orthographic Projection Matrix)或一个透视投影矩阵(Perspective Projection Matrix)。\n\n### 正射投影\n正射投影矩阵定义了一个类似立方体的平截头箱，它定义了一个裁剪空间，在这空间之外的顶点都会被裁剪掉。创建一个正射投影矩阵需要指定可见平截头体的宽、高和长度。在使用正射投影矩阵变换至裁剪空间之后处于这个平截头体内的所有坐标将不会被裁剪掉。它的平截头体看起来像一个容器\n![2024-03-07T190956](2024-03-07T190956.png)\n\n上面的平截头体定义了可见的坐标，它由由宽、高、近(Near)平面和远(Far)平面所指定。任何出现在近平面之前或远平面之后的坐标都会被裁剪掉。正射平截头体直接将平截头体内部的所有坐标映射为标准化设备坐标，因为每个向量的w分量都没有进行改变；如果w分量等于1.0，透视除法则不会改变这个坐标。\n\n要创建一个正射投影矩阵，我们可以使用GLM的内置函数glm::ortho：\n```c++\nglm::ortho(0.0f, 800.0f, 0.0f, 600.0f, 0.1f, 100.0f);\n```\n\n前两个参数指定了平截头体的左右坐标，第三和第四参数指定了平截头体的底部和顶部。通过这四个参数我们定义了近平面和远平面的大小，然后第五和第六个参数则定义了近平面和远平面的距离。这个投影矩阵会将处于这些x，y，z值范围内的坐标变换为标准化设备坐标。\n\n正射投影矩阵直接将坐标映射到2D平面中，即你的屏幕，但实际上一个直接的投影矩阵会产生不真实的结果，因为这个投影没有将透视(Perspective)考虑进去。所以我们需要透视投影矩阵来解决这个问题。\n\n### 透视投影\n如果你曾经体验过实际生活给你带来的景象，你就会注意到离你越远的东西看起来更小。这个奇怪的效果称之为透视(Perspective)。透视的效果在我们看一条无限长的高速公路或铁路时尤其明显，正如下面图片显示的那样：\n\n![2024-03-07T191126](2024-03-07T191126.png)\n\n正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：\n\n![2024-03-07T191136](2024-03-07T191136.png)\n顶点坐标的每个分量都会除以它的w分量，距离观察者越远顶点坐标就会越小。这是也是w分量非常重要的另一个原因，它能够帮助我们进行透视投影。最后的结果坐标就是处于标准化设备空间中的。如果你对正射投影矩阵和透视投影矩阵是如何计算的很感兴趣（且不会对数学感到恐惧的话）我推荐这篇由Songho写的文章。\n\n在GLM中可以这样创建一个透视投影矩阵：\n```c++\nglm::mat4 proj = glm::perspective(glm::radians(45.0f), (float)width/(float)height, 0.1f, 100.0f);\n```\n同样，glm::perspective所做的其实就是创建了一个定义了可视空间的大平截头体，任何在这个平截头体以外的东西最后都不会出现在裁剪空间体积内，并且将会受到裁剪。一个透视平截头体可以被看作一个不均匀形状的箱子，在这个箱子内部的每个坐标都会被映射到裁剪空间上的一个点。下面是一张透视平截头体的图片：\n![2024-03-07T191213](2024-03-07T191213.png)\n\n它的第一个参数定义了fov的值，它表示的是视野(Field of View)，并且设置了观察空间的大小。如果想要一个真实的观察效果，它的值通常设置为45.0f，但想要一个末日风格的结果你可以将其设置一个更大的值。第二个参数设置了宽高比，由视口的宽除以高所得。第三和第四个参数设置了平截头体的近和远平面。我们通常设置近距离为0.1f，而远距离设为100.0f。所有在近平面和远平面内且处于平截头体内的顶点都会被渲染。\n\n当你把透视矩阵的 near 值设置太大时（如10.0f），OpenGL会将靠近摄像机的坐标（在0.0f和10.0f之间）都裁剪掉，这会导致一个你在游戏中很熟悉的视觉效果：在太过靠近一个物体的时候你的视线会直接穿过去。\n\n当使用正射投影时，每一个顶点坐标都会直接映射到裁剪空间中而不经过任何精细的透视除法（它仍然会进行透视除法，只是w分量没有被改变（它保持为1），因此没有起作用）。因为正射投影没有使用透视，远处的物体不会显得更小，所以产生奇怪的视觉效果。由于这个原因，正射投影主要用于二维渲染以及一些建筑或工程的程序，在这些场景中我们更希望顶点不会被透视所干扰。某些如 Blender 等进行三维建模的软件有时在建模时也会使用正射投影，因为它在各个维度下都更准确地描绘了每个物体。下面你能够看到在Blender里面使用两种投影方式的对比：\n\n你可以看到，使用透视投影的话，远处的顶点看起来比较小，而在正射投影中每个顶点距离观察者的距离都是一样的。\n\n## 把它们都组合到一起\n我们为上述的每一个步骤都创建了一个变换矩阵：模型矩阵、观察矩阵和投影矩阵。一个顶点坐标将会根据以下过程被变换到裁剪坐标：\n\n![2024-03-07T191439](2024-03-07T191439.png)\n\n**注意矩阵运算的顺序是相反的**（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。\n\n<div class=\"note info\">然后呢？\n\n顶点着色器的输出要求所有的顶点都在裁剪空间内，这正是我们刚才使用变换矩阵所做的。OpenGL然后对裁剪坐标执行透视除法从而将它们变换到标准化设备坐标。OpenGL会使用glViewPort内部的参数来将标准化设备坐标映射到屏幕坐标，每个坐标都关联了一个屏幕上的点（在我们的例子中是一个800x600的屏幕）。这个过程称为视口变换。</div>\n\n## 进入3D\n既然我们知道了如何将3D坐标变换为2D坐标，我们可以开始使用真正的3D物体，而不是枯燥的2D平面了。\n\n在开始进行3D绘图时，我们首先创建一个模型矩阵。这个模型矩阵包含了位移、缩放与旋转操作，它们会被应用到所有物体的顶点上，以变换它们到全局的世界空间。让我们变换一下我们的平面，将其绕着x轴旋转，使它看起来像放在地上一样。这个模型矩阵看起来是这样的：\n```c++\nglm::mat4 model;\nmodel = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));\n```\n通过将顶点坐标乘以这个模型矩阵，我们将该顶点坐标变换到世界坐标。我们的平面看起来就是在地板上，代表全局世界里的平面。\n\n接下来我们需要创建一个观察矩阵。我们想要在场景里面稍微往后移动，以使得物体变成可见的（当在世界空间时，我们位于原点(0,0,0)）。要想在场景里面移动，先仔细想一想下面这个句子：\n\n**将摄像机向后移动，和将整个场景向前移动是一样的。**\n\n这正是观察矩阵所做的，我们以相反于摄像机移动的方向移动整个场景。因为我们想要往后移动，并且OpenGL是一个右手坐标系(Right-handed System)，所以我们需要沿着z轴的正方向移动。我们会通过将场景沿着z轴负方向平移来实现。它会给我们一种我们在往后移动的感觉。\n\n![2024-03-07T191847](2024-03-07T191847.png)\n\n在下一个教程中我们将会详细讨论如何在场景中移动。就目前来说，观察矩阵是这样的：\n\n```c++\nglm::mat4 view;\n// 注意，我们将矩阵向我们要进行移动场景的反方向移动。\nview = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));\n```\n\n最后我们需要做的是定义一个投影矩阵。我们希望在场景中使用透视投影，所以像这样声明一个投影矩阵：\n```c++\nglm::mat4 projection;\nprojection = glm::perspective(glm::radians(45.0f), screenWidth / screenHeight, 0.1f, 100.0f);\n```\n\n既然我们已经创建了变换矩阵，我们应该将它们传入着色器。首先，让我们在顶点着色器中声明一个uniform变换矩阵然后将它乘以顶点坐标：\n```c++\n#version 330 core\nlayout (location = 0) in vec3 aPos;\n...\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    // 注意乘法要从右向左读\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n    ...\n}\n```\n我们还应该将矩阵传入着色器（这通常在每次的渲染迭代中进行，因为变换矩阵会经常变动）：\n```c++\nint modelLoc = glGetUniformLocation(ourShader.ID, \"model\"));\nglUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));\n... // 观察矩阵和投影矩阵与之类似\n```\n我们的顶点坐标已经使用模型、观察和投影矩阵进行变换了，最终的物体应该会：\n- 稍微向后倾斜至地板方向。\n- 离我们有一些距离。\n- 有透视效果（顶点越远，变得越小）。\n\n让我们检查一下结果是否满足这些要求：\n![2024-03-07T192913](2024-03-07T192913.png)\n\n## 更加 3D\n到目前为止，我们一直都在使用一个2D平面，而且甚至是在3D空间里！所以，让我们大胆地拓展我们的2D平面为一个3D立方体。要想渲染一个立方体，我们一共需要36个顶点（6个面 x 每个面有2个三角形组成 x 每个三角形有3个顶点），这36个顶点的位置你可以从[这里](https://learnopengl.com/code_viewer.php?code=getting-started/cube_vertices)获取。\n\n为了有趣一点，我们将让立方体随着时间旋转：\n```c++\nmodel = glm::rotate(model, (float)glfwGetTime() * glm::radians(50.0f), glm::vec3(0.5f, 1.0f, 0.0f));\n\n```\n然后我们使用glDrawArrays来绘制立方体，但这一次总共有36个顶点。\n```c++\nglDrawArrays(GL_TRIANGLES, 0, 36);\n```\n\n### Z缓冲\nOpenGL存储它的所有深度信息于一个Z缓冲(Z-buffer)中，也被称为深度缓冲(Depth Buffer)。GLFW会自动为你生成这样一个缓冲（就像它也有一个颜色缓冲来存储输出图像的颜色）。深度值存储在每个片段里面（作为片段的z值），当片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。这个过程称为深度测试(Depth Testing)，它是由OpenGL自动完成的。\n\n然而，如果我们想要确定OpenGL真的执行了深度测试，首先我们要告诉OpenGL我们想要启用深度测试；它默认是关闭的。我们可以通过glEnable函数来开启深度测试。glEnable和glDisable函数允许我们启用或禁用某个OpenGL功能。这个功能会一直保持启用/禁用状态，直到另一个调用来禁用/启用它。现在我们想启用深度测试，需要开启GL_DEPTH_TEST：\n```c++\nglEnable(GL_DEPTH_TEST);\n```\n因为我们使用了深度测试，我们也想要在每次渲染迭代之前清除深度缓冲（否则前一帧的深度信息仍然保存在缓冲中）。就像清除颜色缓冲一样，我们可以通过在glClear函数中指定DEPTH_BUFFER_BIT位来清除深度缓冲：\n```c++\nglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n```\n\n## 总结：\n**简单的讲，整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。**\n\n# 摄像机\n前面的教程中我们讨论了观察矩阵以及如何使用观察矩阵移动场景（我们向后移动了一点）。OpenGL本身没有摄像机(Camera)的概念，但我们可以通过把场景中的所有物体往相反方向移动的方式来模拟出摄像机，产生一种我们在移动的感觉，而不是场景在移动。\n\n本节我们将会讨论如何在OpenGL中配置一个摄像机，并且将会讨论FPS风格的摄像机，让你能够在3D场景中自由移动。我们也会讨论键盘和鼠标输入，最终完成一个自定义的摄像机类。\n\n我们之前总结过，**整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。**，我们所谓的相机，其实就是为了完成后面两个矩阵的。即： view 观察空间，projection 裁剪空间。\n\n## 摄像机/观察空间\n当我们讨论摄像机/观察空间(Camera/View Space)的时候，是在讨论以摄像机的视角作为场景原点时场景中所有的顶点坐标：观察矩阵把所有的世界坐标变换为相对于摄像机位置与方向的观察坐标。要定义一个摄像机，我们需要它在世界空间中的位置、观察的方向、一个指向它右侧的向量以及一个指向它上方的向量。细心的读者可能已经注意到我们实际上创建了一个三个单位轴相互垂直的、以摄像机的位置为原点的坐标系。\n\n![2024-03-07T194034](2024-03-07T194034.png)\n\n### 摄像机位置\n获取摄像机位置很简单。摄像机位置简单来说就是世界空间中一个指向摄像机位置的向量。我们把摄像机位置设置为上一节中的那个相同的位置：\n```c++\nglm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);\n```\n\n### 摄像机方向\n下一个需要的向量是摄像机的方向，这里指的是摄像机指向哪个方向。现在我们让摄像机指向场景原点：(0, 0, 0)。还记得如果将两个矢量相减，我们就能得到这两个矢量的差吗？用场景原点向量减去摄像机位置向量的结果就是摄像机的指向向量。由于我们知道摄像机指向z轴负方向，但我们希望方向向量(Direction Vector)指向摄像机的z轴正方向。如果我们交换相减的顺序，我们就会获得一个指向摄像机正z轴方向的向量：\n```c++\nglm::vec3 cameraTarget = glm::vec3(0.0f, 0.0f, 0.0f);\nglm::vec3 cameraDirection = glm::normalize(cameraPos - cameraTarget);\n\n```\n ### 右轴\n 我们需要的另一个向量是一个右向量(Right Vector)，它代表摄像机空间的x轴的正方向。为获取右向量我们需要先使用一个小技巧：先定义一个上向量(Up Vector)。接下来把上向量和第二步得到的方向向量进行叉乘。两个向量叉乘的结果会同时垂直于两向量，因此我们会得到指向x轴正方向的那个向量（如果我们交换两个向量叉乘的顺序就会得到相反的指向x轴负方向的向量）：\n ```c++\n glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f); \nglm::vec3 cameraRight = glm::normalize(glm::cross(up, cameraDirection));\n\n```\n\n### 上轴\n现在我们已经有了x轴向量和z轴向量，获取一个指向摄像机的正y轴向量就相对简单了：我们把右向量和方向向量进行叉乘：\n```c++\nglm::vec3 cameraUp = glm::cross(cameraDirection, cameraRight);\n```\n\n## Look At\n使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：\n![2024-03-07T194404](2024-03-07T194404.png)\n其中R\n是右向量，U\n是上向量，D\n是方向向量P\n是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。\n--- \n幸运的是，GLM已经提供了这些支持。我们要做的只是定义一个摄像机位置，一个目标位置和一个表示世界空间中的上向量的向量（我们计算右向量使用的那个上向量）。接着GLM就会创建一个LookAt矩阵，我们可以把它当作我们的观察矩阵：\n```c++\nglm::mat4 view;\nview = glm::lookAt(glm::vec3(0.0f, 0.0f, 3.0f), \n           glm::vec3(0.0f, 0.0f, 0.0f), \n           glm::vec3(0.0f, 1.0f, 0.0f));\n```\n\n`glm::LookAt`函数需要一个位置、目标和上向量。它会创建一个和在上一节使用的一样的观察矩阵。\n\n在讨论用户输入之前，我们先来做些有意思的事，把我们的摄像机在场景中旋转。我们会将摄像机的注视点保持在(0, 0, 0)。\n\n我们需要用到一点三角学的知识来在每一帧创建一个x和z坐标，它会代表圆上的一点，我们将会使用它作为摄像机的位置。通过重新计算x和y坐标，我们会遍历圆上的所有点，这样摄像机就会绕着场景旋转了。我们预先定义这个圆的半径radius，在每次渲染迭代中使用GLFW的glfwGetTime函数重新创建观察矩阵，来扩大这个圆。\n\n```c++\nfloat radius = 10.0f;\nfloat camX = sin(glfwGetTime()) * radius;\nfloat camZ = cos(glfwGetTime()) * radius;\nglm::mat4 view;\nview = glm::lookAt(glm::vec3(camX, 0.0, camZ), glm::vec3(0.0, 0.0, 0.0), glm::vec3(0.0, 1.0, 0.0)); \n\n```\n","slug":"opengl_coordinate","published":1,"updated":"2025-03-28T02:05:16.352Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7u002q1wu1fl897g44","content":"<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>openGL 坐标系统.重点： 注意矩阵运算的顺序是相反的</p>\n<span id=\"more\"></span>\n<ul>\n<li><a href=\"#%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F\">坐标系统</a><ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%B1%80%E9%83%A8%E7%A9%BA%E9%97%B4\">局部空间</a></li>\n<li><a href=\"#%E4%B8%96%E7%95%8C%E7%A9%BA%E9%97%B4\">世界空间</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4\">观察空间</a></li>\n<li><a href=\"#%E8%A3%81%E5%89%AA%E7%A9%BA%E9%97%B4\">裁剪空间</a><ul>\n<li><a href=\"#%E6%AD%A3%E5%B0%84%E6%8A%95%E5%BD%B1\">正射投影</a></li>\n<li><a href=\"#%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1\">透视投影</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8A%8A%E5%AE%83%E4%BB%AC%E9%83%BD%E7%BB%84%E5%90%88%E5%88%B0%E4%B8%80%E8%B5%B7\">把它们都组合到一起</a></li>\n<li><a href=\"#%E8%BF%9B%E5%85%A53d\">进入3D</a></li>\n<li><a href=\"#%E6%9B%B4%E5%8A%A0-3d\">更加 3D</a><ul>\n<li><a href=\"#z%E7%BC%93%E5%86%B2\">Z缓冲</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结：</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA\">摄像机</a><ul>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4\">摄像机&#x2F;观察空间</a><ul>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E4%BD%8D%E7%BD%AE\">摄像机位置</a></li>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91\">摄像机方向</a></li>\n<li><a href=\"#%E5%8F%B3%E8%BD%B4\">右轴</a></li>\n<li><a href=\"#%E4%B8%8A%E8%BD%B4\">上轴</a></li>\n</ul>\n</li>\n<li><a href=\"#look-at\">Look At</a></li>\n<li><a href=\"#%E6%98%AF%E6%91%84%E5%83%8F%E6%9C%BA%E4%BD%8D%E7%BD%AE%E5%90%91%E9%87%8F%E6%B3%A8%E6%84%8F%E4%BD%8D%E7%BD%AE%E5%90%91%E9%87%8F%E6%98%AF%E7%9B%B8%E5%8F%8D%E7%9A%84%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E6%9C%80%E7%BB%88%E5%B8%8C%E6%9C%9B%E6%8A%8A%E4%B8%96%E7%95%8C%E5%B9%B3%E7%A7%BB%E5%88%B0%E4%B8%8E%E6%88%91%E4%BB%AC%E8%87%AA%E8%BA%AB%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%9B%B8%E5%8F%8D%E6%96%B9%E5%90%91%E6%8A%8A%E8%BF%99%E4%B8%AAlookat%E7%9F%A9%E9%98%B5%E4%BD%9C%E4%B8%BA%E8%A7%82%E5%AF%9F%E7%9F%A9%E9%98%B5%E5%8F%AF%E4%BB%A5%E5%BE%88%E9%AB%98%E6%95%88%E5%9C%B0%E6%8A%8A%E6%89%80%E6%9C%89%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%88%B0%E5%88%9A%E5%88%9A%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4lookat%E7%9F%A9%E9%98%B5%E5%B0%B1%E5%83%8F%E5%AE%83%E7%9A%84%E5%90%8D%E5%AD%97%E8%A1%A8%E8%BE%BE%E7%9A%84%E9%82%A3%E6%A0%B7%E5%AE%83%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9C%8B%E7%9D%80look-at%E7%BB%99%E5%AE%9A%E7%9B%AE%E6%A0%87%E7%9A%84%E8%A7%82%E5%AF%9F%E7%9F%A9%E9%98%B5\">是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"坐标系统\"><a href=\"#坐标系统\" class=\"headerlink\" title=\"坐标系统\"></a>坐标系统</h1><p>在上一个教程中，我们学习了如何有效地利用矩阵的变换来对所有顶点进行变换。OpenGL希望在每次顶点着色器运行后，我们可见的所有顶点都为标准化设备坐标(Normalized Device Coordinate, NDC)。<strong>也就是说，每个顶点的x，y，z坐标都应该在-1.0到1.0之间</strong>，超出这个坐标范围的顶点都将不可见。我们通常会自己设定一个坐标的范围，之后再在顶点着色器中将这些坐标变换为标准化设备坐标。然后将这些标准化设备坐标传入光栅器(Rasterizer)，将它们变换为屏幕上的二维坐标或像素。</p>\n<p>将坐标变换为标准化设备坐标，接着再转化为屏幕坐标的过程通常是分步进行的，也就是类似于流水线那样子。在流水线中，物体的顶点在最终转化为屏幕坐标之前还会被变换到多个坐标系统(Coordinate System)。将物体的坐标变换到几个过渡坐标系(Intermediate Coordinate System)的优点在于，在这些特定的坐标系统中，一些操作或运算更加方便和容易，这一点很快就会变得很明显。对我们来说比较重要的总共有5个不同的坐标系统：</p>\n<ul>\n<li><strong>局部空间</strong>(Local Space，或者称为物体空间(Object Space))</li>\n<li><strong>世界空间</strong>(World Space)</li>\n<li><strong>观察空间</strong>(View Space，或者称为视觉空间(Eye Space))</li>\n<li><strong>裁剪空间</strong>(Clip Space)</li>\n<li><strong>屏幕空间</strong>(Screen Space)</li>\n</ul>\n<p>这就是一个顶点在最终被转化为片段之前需要经历的所有不同状态。</p>\n<p>你现在可能会对什么是坐标空间，什么是坐标系统感到非常困惑，所以我们将用一种更加通俗的方式来解释它们。下面，我们将显示一个整体的图片，之后我们会讲解每个空间的具体功能。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>为了将坐标从一个坐标系变换到另一个坐标系，我们需要用到几个变换矩阵，最重要的几个分别是<strong>模型(Model)</strong>、<strong>观察(View)</strong>、<strong>投影(Projection)<strong>三个矩阵。我们的顶点坐标起始于</strong>局部空间</strong>(Local Space)，在这里它称为<strong>局部坐标</strong>(Local Coordinate)，它在之后会变为<strong>世界坐标</strong>(World Coordinate)，<strong>观察坐标</strong>(View Coordinate)，<strong>裁剪坐标</strong>(Clip Coordinate)，并最后以<strong>屏幕坐标</strong>(Screen Coordinate)的形式结束。下面的这张图展示了整个流程以及各个变换过程做了什么：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T185800.png\" alt=\"2024-03-07T185800\"></p>\n<ul>\n<li>局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标。</li>\n<li>下一步是将局部坐标变换为世界空间坐标，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。</li>\n<li>接下来我们将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的。</li>\n<li>坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上。</li>\n<li>最后，我们将裁剪坐标变换为屏幕坐标，我们将使用一个叫做视口变换(Viewport Transform)的过程。视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。</li>\n</ul>\n<p>你可能已经大致了解了每个坐标空间的作用。我们之所以将顶点变换到各个不同的空间的原因是有些操作在特定的坐标系统中才有意义且更方便。例如，当需要对物体进行修改的时候，在局部空间中来操作会更说得通；如果要对一个物体做出一个相对于其它物体位置的操作时，在世界坐标系中来做这个才更说得通，等等。如果我们愿意，我们也可以定义一个直接从局部空间变换到裁剪空间的变换矩阵，但那样会失去很多灵活性。</p>\n<div class=\"note info no-icon\"><p>个人理解： 这几个坐标转换的方式，我们可以用拍照片来更形象的理解。<br>局部坐标，就是你要拍什么东西，拍的东西长什么样子。在我们之前的学习中，这个局部坐标就是我们定义的vertex，目前我们渲染的都是正方形。<br>世界坐标，就是这个东西现在在世界中是个什么状态，比如被拉伸，正在旋转，或者正在移动。<br>观察坐标，就是拍下的这个东西在相机中的一个状态。比如在相机前面，上面，或者是下面。<br>裁剪坐标，就是拍下的这个物体是怎么映射成图片的，一般有两种方式，一种是正交投影（没有远近，所有物体的大小固定），还有一种是透视投影，所能看到的的东西都是近大远小。<br>屏幕空间, 可以理解为，我们拍出来的照片，该怎么摆在我们眼前。比如，我可以把它挂在墙上，可以放在桌子上，甚至可以投影到墙上。这样每一种摆放方式，我们都能看到不同的效果.</p>\n</div>\n\n<p>接下来我们将要更仔细地讨论各个坐标系统。</p>\n<h2 id=\"局部空间\"><a href=\"#局部空间\" class=\"headerlink\" title=\"局部空间\"></a>局部空间</h2><p>局部空间是指物体所在的坐标空间，即对象最开始所在的地方。想象你在一个建模软件（比如说Blender）中创建了一个立方体。你创建的立方体的原点有可能位于(0, 0, 0)，即便它有可能最后在程序中处于完全不同的位置。甚至有可能你创建的所有模型都以(0, 0, 0)为初始位置（译注：然而它们会最终出现在世界的不同位置）。所以，你的模型的所有顶点都是在局部空间中：它们相对于你的物体来说都是局部的。</p>\n<p>我们一直使用的那个箱子的顶点是被设定在-0.5到0.5的坐标范围中，(0, 0)是它的原点。这些都是局部坐标。</p>\n<h2 id=\"世界空间\"><a href=\"#世界空间\" class=\"headerlink\" title=\"世界空间\"></a>世界空间</h2><p>如果我们将我们所有的物体导入到程序当中，它们有可能会全挤在世界的原点(0, 0, 0)上，这并不是我们想要的结果。我们想为每一个物体定义一个位置，从而能在更大的世界当中放置它们。世界空间中的坐标正如其名：是指顶点相对于（游戏）世界的坐标。如果你希望将物体分散在世界上摆放（特别是非常真实的那样），这就是你希望物体变换到的空间。物体的坐标将会从局部变换到世界空间；该变换是由模型矩阵(Model Matrix)实现的。</p>\n<p>模型矩阵是一种变换矩阵，它能通过对物体进行位移、缩放、旋转来将它置于它本应该在的位置或朝向。你可以将它想像为变换一个房子，你需要先将它缩小（它在局部空间中太大了），并将其位移至郊区的一个小镇，然后在y轴上往左旋转一点以搭配附近的房子。你也可以把上一节将箱子到处摆放在场景中用的那个矩阵大致看作一个模型矩阵；我们将箱子的局部坐标变换到场景&#x2F;世界中的不同位置。</p>\n<h2 id=\"观察空间\"><a href=\"#观察空间\" class=\"headerlink\" title=\"观察空间\"></a>观察空间</h2><p>观察空间经常被人们称之OpenGL的摄像机(Camera)（所以有时也称为摄像机空间(Camera Space)或视觉空间(Eye Space)）。观察空间是将世界空间坐标转化为用户视野前方的坐标而产生的结果。因此观察空间就是从摄像机的视角所观察到的空间。而这通常是由一系列的位移和旋转的组合来完成，平移&#x2F;旋转场景从而使得特定的对象被变换到摄像机的前方。这些组合在一起的变换通常存储在一个观察矩阵(View Matrix)里，它被用来将世界坐标变换到观察空间。在下一节中我们将深入讨论如何创建一个这样的观察矩阵来模拟一个摄像机。</p>\n<h2 id=\"裁剪空间\"><a href=\"#裁剪空间\" class=\"headerlink\" title=\"裁剪空间\"></a>裁剪空间</h2><p>在一个顶点着色器运行的最后，OpenGL期望所有的坐标都能落在一个特定的范围内，且任何在这个范围之外的点都应该被裁剪掉(Clipped)。被裁剪掉的坐标就会被忽略，所以剩下的坐标就将变为屏幕上可见的片段。这也就是裁剪空间(Clip Space)名字的由来。</p>\n<p>因为将所有可见的坐标都指定在-1.0到1.0的范围内不是很直观，所以我们会指定自己的坐标集(Coordinate Set)并将它变换回标准化设备坐标系，就像OpenGL期望的那样。</p>\n<p>为了将顶点坐标从观察变换到裁剪空间，我们需要定义一个投影矩阵(Projection Matrix)，它指定了一个范围的坐标，比如在每个维度上的-1000到1000。投影矩阵接着会将在这个指定的范围内的坐标变换为标准化设备坐标的范围(-1.0, 1.0)。所有在范围外的坐标不会被映射到在-1.0到1.0的范围之间，所以会被裁剪掉。在上面这个投影矩阵所指定的范围内，坐标(1250, 500, 750)将是不可见的，这是由于它的x坐标超出了范围，它被转化为一个大于1.0的标准化设备坐标，所以被裁剪掉了。</p>\n<div class=\"note info\">如果只是图元(Primitive)，例如三角形，的一部分超出了裁剪体积(Clipping Volume)，则OpenGL会重新构建这个三角形为一个或多个三角形让其能够适合这个裁剪范围。</div>\n\n<p>由投影矩阵创建的观察箱(Viewing Box)被称为平截头体(Frustum)，每个出现在平截头体范围内的坐标都会最终出现在用户的屏幕上。将特定范围内的坐标转化到标准化设备坐标系的过程（而且它很容易被映射到2D观察空间坐标）被称之为投影(Projection)，因为使用投影矩阵能将3D坐标投影(Project)到很容易映射到2D的标准化设备坐标系中。</p>\n<p>一旦所有顶点被变换到裁剪空间，最终的操作——透视除法(Perspective Division)将会执行，在这个过程中我们将位置向量的x，y，z分量分别除以向量的齐次w分量；透视除法是将4D裁剪空间坐标变换为3D标准化设备坐标的过程。这一步会在每一个顶点着色器运行的最后被自动执行。</p>\n<p>在这一阶段之后，最终的坐标将会被映射到屏幕空间中（使用glViewport中的设定），并被变换成片段。</p>\n<p>将观察坐标变换为裁剪坐标的投影矩阵可以为两种不同的形式，每种形式都定义了不同的平截头体。我们可以选择创建一个正射投影矩阵(Orthographic Projection Matrix)或一个透视投影矩阵(Perspective Projection Matrix)。</p>\n<h3 id=\"正射投影\"><a href=\"#正射投影\" class=\"headerlink\" title=\"正射投影\"></a>正射投影</h3><p>正射投影矩阵定义了一个类似立方体的平截头箱，它定义了一个裁剪空间，在这空间之外的顶点都会被裁剪掉。创建一个正射投影矩阵需要指定可见平截头体的宽、高和长度。在使用正射投影矩阵变换至裁剪空间之后处于这个平截头体内的所有坐标将不会被裁剪掉。它的平截头体看起来像一个容器<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T190956.png\" alt=\"2024-03-07T190956\"></p>\n<p>上面的平截头体定义了可见的坐标，它由由宽、高、近(Near)平面和远(Far)平面所指定。任何出现在近平面之前或远平面之后的坐标都会被裁剪掉。正射平截头体直接将平截头体内部的所有坐标映射为标准化设备坐标，因为每个向量的w分量都没有进行改变；如果w分量等于1.0，透视除法则不会改变这个坐标。</p>\n<p>要创建一个正射投影矩阵，我们可以使用GLM的内置函数glm::ortho：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::<span class=\"built_in\">ortho</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">800.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">600.0f</span>, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>前两个参数指定了平截头体的左右坐标，第三和第四参数指定了平截头体的底部和顶部。通过这四个参数我们定义了近平面和远平面的大小，然后第五和第六个参数则定义了近平面和远平面的距离。这个投影矩阵会将处于这些x，y，z值范围内的坐标变换为标准化设备坐标。</p>\n<p>正射投影矩阵直接将坐标映射到2D平面中，即你的屏幕，但实际上一个直接的投影矩阵会产生不真实的结果，因为这个投影没有将透视(Perspective)考虑进去。所以我们需要透视投影矩阵来解决这个问题。</p>\n<h3 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h3><p>如果你曾经体验过实际生活给你带来的景象，你就会注意到离你越远的东西看起来更小。这个奇怪的效果称之为透视(Perspective)。透视的效果在我们看一条无限长的高速公路或铁路时尤其明显，正如下面图片显示的那样：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191126.png\" alt=\"2024-03-07T191126\"></p>\n<p>正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191136.png\" alt=\"2024-03-07T191136\"><br>顶点坐标的每个分量都会除以它的w分量，距离观察者越远顶点坐标就会越小。这是也是w分量非常重要的另一个原因，它能够帮助我们进行透视投影。最后的结果坐标就是处于标准化设备空间中的。如果你对正射投影矩阵和透视投影矩阵是如何计算的很感兴趣（且不会对数学感到恐惧的话）我推荐这篇由Songho写的文章。</p>\n<p>在GLM中可以这样创建一个透视投影矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 proj = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">45.0f</span>), (<span class=\"type\">float</span>)width/(<span class=\"type\">float</span>)height, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n<p>同样，glm::perspective所做的其实就是创建了一个定义了可视空间的大平截头体，任何在这个平截头体以外的东西最后都不会出现在裁剪空间体积内，并且将会受到裁剪。一个透视平截头体可以被看作一个不均匀形状的箱子，在这个箱子内部的每个坐标都会被映射到裁剪空间上的一个点。下面是一张透视平截头体的图片：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191213.png\" alt=\"2024-03-07T191213\"></p>\n<p>它的第一个参数定义了fov的值，它表示的是视野(Field of View)，并且设置了观察空间的大小。如果想要一个真实的观察效果，它的值通常设置为45.0f，但想要一个末日风格的结果你可以将其设置一个更大的值。第二个参数设置了宽高比，由视口的宽除以高所得。第三和第四个参数设置了平截头体的近和远平面。我们通常设置近距离为0.1f，而远距离设为100.0f。所有在近平面和远平面内且处于平截头体内的顶点都会被渲染。</p>\n<p>当你把透视矩阵的 near 值设置太大时（如10.0f），OpenGL会将靠近摄像机的坐标（在0.0f和10.0f之间）都裁剪掉，这会导致一个你在游戏中很熟悉的视觉效果：在太过靠近一个物体的时候你的视线会直接穿过去。</p>\n<p>当使用正射投影时，每一个顶点坐标都会直接映射到裁剪空间中而不经过任何精细的透视除法（它仍然会进行透视除法，只是w分量没有被改变（它保持为1），因此没有起作用）。因为正射投影没有使用透视，远处的物体不会显得更小，所以产生奇怪的视觉效果。由于这个原因，正射投影主要用于二维渲染以及一些建筑或工程的程序，在这些场景中我们更希望顶点不会被透视所干扰。某些如 Blender 等进行三维建模的软件有时在建模时也会使用正射投影，因为它在各个维度下都更准确地描绘了每个物体。下面你能够看到在Blender里面使用两种投影方式的对比：</p>\n<p>你可以看到，使用透视投影的话，远处的顶点看起来比较小，而在正射投影中每个顶点距离观察者的距离都是一样的。</p>\n<h2 id=\"把它们都组合到一起\"><a href=\"#把它们都组合到一起\" class=\"headerlink\" title=\"把它们都组合到一起\"></a>把它们都组合到一起</h2><p>我们为上述的每一个步骤都创建了一个变换矩阵：模型矩阵、观察矩阵和投影矩阵。一个顶点坐标将会根据以下过程被变换到裁剪坐标：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191439.png\" alt=\"2024-03-07T191439\"></p>\n<p><strong>注意矩阵运算的顺序是相反的</strong>（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。</p>\n<div class=\"note info\">然后呢？\n\n<p>顶点着色器的输出要求所有的顶点都在裁剪空间内，这正是我们刚才使用变换矩阵所做的。OpenGL然后对裁剪坐标执行透视除法从而将它们变换到标准化设备坐标。OpenGL会使用glViewPort内部的参数来将标准化设备坐标映射到屏幕坐标，每个坐标都关联了一个屏幕上的点（在我们的例子中是一个800x600的屏幕）。这个过程称为视口变换。</div></p>\n<h2 id=\"进入3D\"><a href=\"#进入3D\" class=\"headerlink\" title=\"进入3D\"></a>进入3D</h2><p>既然我们知道了如何将3D坐标变换为2D坐标，我们可以开始使用真正的3D物体，而不是枯燥的2D平面了。</p>\n<p>在开始进行3D绘图时，我们首先创建一个模型矩阵。这个模型矩阵包含了位移、缩放与旋转操作，它们会被应用到所有物体的顶点上，以变换它们到全局的世界空间。让我们变换一下我们的平面，将其绕着x轴旋转，使它看起来像放在地上一样。这个模型矩阵看起来是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 model;</span><br><span class=\"line\">model = glm::<span class=\"built_in\">rotate</span>(model, glm::<span class=\"built_in\">radians</span>(<span class=\"number\">-55.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>));</span><br></pre></td></tr></table></figure>\n<p>通过将顶点坐标乘以这个模型矩阵，我们将该顶点坐标变换到世界坐标。我们的平面看起来就是在地板上，代表全局世界里的平面。</p>\n<p>接下来我们需要创建一个观察矩阵。我们想要在场景里面稍微往后移动，以使得物体变成可见的（当在世界空间时，我们位于原点(0,0,0)）。要想在场景里面移动，先仔细想一想下面这个句子：</p>\n<p><strong>将摄像机向后移动，和将整个场景向前移动是一样的。</strong></p>\n<p>这正是观察矩阵所做的，我们以相反于摄像机移动的方向移动整个场景。因为我们想要往后移动，并且OpenGL是一个右手坐标系(Right-handed System)，所以我们需要沿着z轴的正方向移动。我们会通过将场景沿着z轴负方向平移来实现。它会给我们一种我们在往后移动的感觉。</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191847.png\" alt=\"2024-03-07T191847\"></p>\n<p>在下一个教程中我们将会详细讨论如何在场景中移动。就目前来说，观察矩阵是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\"><span class=\"comment\">// 注意，我们将矩阵向我们要进行移动场景的反方向移动。</span></span><br><span class=\"line\">view = glm::<span class=\"built_in\">translate</span>(view, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">-3.0f</span>));</span><br></pre></td></tr></table></figure>\n\n<p>最后我们需要做的是定义一个投影矩阵。我们希望在场景中使用透视投影，所以像这样声明一个投影矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 projection;</span><br><span class=\"line\">projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">45.0f</span>), screenWidth / screenHeight, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>既然我们已经创建了变换矩阵，我们应该将它们传入着色器。首先，让我们在顶点着色器中声明一个uniform变换矩阵然后将它乘以顶点坐标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"built_in\">layout</span> (location = <span class=\"number\">0</span>) in vec3 aPos;</span><br><span class=\"line\">...</span><br><span class=\"line\">uniform mat4 model;</span><br><span class=\"line\">uniform mat4 view;</span><br><span class=\"line\">uniform mat4 projection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意乘法要从右向左读</span></span><br><span class=\"line\">    gl_Position = projection * view * model * <span class=\"built_in\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还应该将矩阵传入着色器（这通常在每次的渲染迭代中进行，因为变换矩阵会经常变动）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> modelLoc = <span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;model&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">glUniformMatrix4fv</span>(modelLoc, <span class=\"number\">1</span>, GL_FALSE, glm::<span class=\"built_in\">value_ptr</span>(model));</span><br><span class=\"line\">... <span class=\"comment\">// 观察矩阵和投影矩阵与之类似</span></span><br></pre></td></tr></table></figure>\n<p>我们的顶点坐标已经使用模型、观察和投影矩阵进行变换了，最终的物体应该会：</p>\n<ul>\n<li>稍微向后倾斜至地板方向。</li>\n<li>离我们有一些距离。</li>\n<li>有透视效果（顶点越远，变得越小）。</li>\n</ul>\n<p>让我们检查一下结果是否满足这些要求：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T192913.png\" alt=\"2024-03-07T192913\"></p>\n<h2 id=\"更加-3D\"><a href=\"#更加-3D\" class=\"headerlink\" title=\"更加 3D\"></a>更加 3D</h2><p>到目前为止，我们一直都在使用一个2D平面，而且甚至是在3D空间里！所以，让我们大胆地拓展我们的2D平面为一个3D立方体。要想渲染一个立方体，我们一共需要36个顶点（6个面 x 每个面有2个三角形组成 x 每个三角形有3个顶点），这36个顶点的位置你可以从<a href=\"https://learnopengl.com/code_viewer.php?code=getting-started/cube_vertices\">这里</a>获取。</p>\n<p>为了有趣一点，我们将让立方体随着时间旋转：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = glm::<span class=\"built_in\">rotate</span>(model, (<span class=\"type\">float</span>)<span class=\"built_in\">glfwGetTime</span>() * glm::<span class=\"built_in\">radians</span>(<span class=\"number\">50.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们使用glDrawArrays来绘制立方体，但这一次总共有36个顶点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Z缓冲\"><a href=\"#Z缓冲\" class=\"headerlink\" title=\"Z缓冲\"></a>Z缓冲</h3><p>OpenGL存储它的所有深度信息于一个Z缓冲(Z-buffer)中，也被称为深度缓冲(Depth Buffer)。GLFW会自动为你生成这样一个缓冲（就像它也有一个颜色缓冲来存储输出图像的颜色）。深度值存储在每个片段里面（作为片段的z值），当片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。这个过程称为深度测试(Depth Testing)，它是由OpenGL自动完成的。</p>\n<p>然而，如果我们想要确定OpenGL真的执行了深度测试，首先我们要告诉OpenGL我们想要启用深度测试；它默认是关闭的。我们可以通过glEnable函数来开启深度测试。glEnable和glDisable函数允许我们启用或禁用某个OpenGL功能。这个功能会一直保持启用&#x2F;禁用状态，直到另一个调用来禁用&#x2F;启用它。现在我们想启用深度测试，需要开启GL_DEPTH_TEST：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glEnable</span>(GL_DEPTH_TEST);</span><br></pre></td></tr></table></figure>\n<p>因为我们使用了深度测试，我们也想要在每次渲染迭代之前清除深度缓冲（否则前一帧的深度信息仍然保存在缓冲中）。就像清除颜色缓冲一样，我们可以通过在glClear函数中指定DEPTH_BUFFER_BIT位来清除深度缓冲：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p><strong>简单的讲，整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。</strong></p>\n<h1 id=\"摄像机\"><a href=\"#摄像机\" class=\"headerlink\" title=\"摄像机\"></a>摄像机</h1><p>前面的教程中我们讨论了观察矩阵以及如何使用观察矩阵移动场景（我们向后移动了一点）。OpenGL本身没有摄像机(Camera)的概念，但我们可以通过把场景中的所有物体往相反方向移动的方式来模拟出摄像机，产生一种我们在移动的感觉，而不是场景在移动。</p>\n<p>本节我们将会讨论如何在OpenGL中配置一个摄像机，并且将会讨论FPS风格的摄像机，让你能够在3D场景中自由移动。我们也会讨论键盘和鼠标输入，最终完成一个自定义的摄像机类。</p>\n<p>我们之前总结过，<strong>整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。</strong>，我们所谓的相机，其实就是为了完成后面两个矩阵的。即： view 观察空间，projection 裁剪空间。</p>\n<h2 id=\"摄像机-观察空间\"><a href=\"#摄像机-观察空间\" class=\"headerlink\" title=\"摄像机&#x2F;观察空间\"></a>摄像机&#x2F;观察空间</h2><p>当我们讨论摄像机&#x2F;观察空间(Camera&#x2F;View Space)的时候，是在讨论以摄像机的视角作为场景原点时场景中所有的顶点坐标：观察矩阵把所有的世界坐标变换为相对于摄像机位置与方向的观察坐标。要定义一个摄像机，我们需要它在世界空间中的位置、观察的方向、一个指向它右侧的向量以及一个指向它上方的向量。细心的读者可能已经注意到我们实际上创建了一个三个单位轴相互垂直的、以摄像机的位置为原点的坐标系。</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T194034.png\" alt=\"2024-03-07T194034\"></p>\n<h3 id=\"摄像机位置\"><a href=\"#摄像机位置\" class=\"headerlink\" title=\"摄像机位置\"></a>摄像机位置</h3><p>获取摄像机位置很简单。摄像机位置简单来说就是世界空间中一个指向摄像机位置的向量。我们把摄像机位置设置为上一节中的那个相同的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraPos = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">3.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"摄像机方向\"><a href=\"#摄像机方向\" class=\"headerlink\" title=\"摄像机方向\"></a>摄像机方向</h3><p>下一个需要的向量是摄像机的方向，这里指的是摄像机指向哪个方向。现在我们让摄像机指向场景原点：(0, 0, 0)。还记得如果将两个矢量相减，我们就能得到这两个矢量的差吗？用场景原点向量减去摄像机位置向量的结果就是摄像机的指向向量。由于我们知道摄像机指向z轴负方向，但我们希望方向向量(Direction Vector)指向摄像机的z轴正方向。如果我们交换相减的顺序，我们就会获得一个指向摄像机正z轴方向的向量：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraTarget = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">glm::vec3 cameraDirection = glm::<span class=\"built_in\">normalize</span>(cameraPos - cameraTarget);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"右轴\"><a href=\"#右轴\" class=\"headerlink\" title=\"右轴\"></a>右轴</h3><p> 我们需要的另一个向量是一个右向量(Right Vector)，它代表摄像机空间的x轴的正方向。为获取右向量我们需要先使用一个小技巧：先定义一个上向量(Up Vector)。接下来把上向量和第二步得到的方向向量进行叉乘。两个向量叉乘的结果会同时垂直于两向量，因此我们会得到指向x轴正方向的那个向量（如果我们交换两个向量叉乘的顺序就会得到相反的指向x轴负方向的向量）：<br> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> glm::vec3 up = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>); </span><br><span class=\"line\">glm::vec3 cameraRight = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(up, cameraDirection));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上轴\"><a href=\"#上轴\" class=\"headerlink\" title=\"上轴\"></a>上轴</h3><p>现在我们已经有了x轴向量和z轴向量，获取一个指向摄像机的正y轴向量就相对简单了：我们把右向量和方向向量进行叉乘：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraUp = glm::<span class=\"built_in\">cross</span>(cameraDirection, cameraRight);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Look-At\"><a href=\"#Look-At\" class=\"headerlink\" title=\"Look At\"></a>Look At</h2><h2 id=\"使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着-Look-at-给定目标的观察矩阵。\"><a href=\"#使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着-Look-at-给定目标的观察矩阵。\" class=\"headerlink\" title=\"使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。\"></a>使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T194404.png\" alt=\"2024-03-07T194404\"><br>其中R<br>是右向量，U<br>是上向量，D<br>是方向向量P<br>是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。</h2><p>幸运的是，GLM已经提供了这些支持。我们要做的只是定义一个摄像机位置，一个目标位置和一个表示世界空间中的上向量的向量（我们计算右向量使用的那个上向量）。接着GLM就会创建一个LookAt矩阵，我们可以把它当作我们的观察矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\">view = glm::<span class=\"built_in\">lookAt</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">3.0f</span>), </span><br><span class=\"line\">           glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>), </span><br><span class=\"line\">           glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>glm::LookAt</code>函数需要一个位置、目标和上向量。它会创建一个和在上一节使用的一样的观察矩阵。</p>\n<p>在讨论用户输入之前，我们先来做些有意思的事，把我们的摄像机在场景中旋转。我们会将摄像机的注视点保持在(0, 0, 0)。</p>\n<p>我们需要用到一点三角学的知识来在每一帧创建一个x和z坐标，它会代表圆上的一点，我们将会使用它作为摄像机的位置。通过重新计算x和y坐标，我们会遍历圆上的所有点，这样摄像机就会绕着场景旋转了。我们预先定义这个圆的半径radius，在每次渲染迭代中使用GLFW的glfwGetTime函数重新创建观察矩阵，来扩大这个圆。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> radius = <span class=\"number\">10.0f</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> camX = <span class=\"built_in\">sin</span>(<span class=\"built_in\">glfwGetTime</span>()) * radius;</span><br><span class=\"line\"><span class=\"type\">float</span> camZ = <span class=\"built_in\">cos</span>(<span class=\"built_in\">glfwGetTime</span>()) * radius;</span><br><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\">view = glm::<span class=\"built_in\">lookAt</span>(glm::<span class=\"built_in\">vec3</span>(camX, <span class=\"number\">0.0</span>, camZ), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>)); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","length":8085,"excerpt":"<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>openGL 坐标系统.重点： 注意矩阵运算的顺序是相反的</p>","more":"<ul>\n<li><a href=\"#%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F\">坐标系统</a><ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%B1%80%E9%83%A8%E7%A9%BA%E9%97%B4\">局部空间</a></li>\n<li><a href=\"#%E4%B8%96%E7%95%8C%E7%A9%BA%E9%97%B4\">世界空间</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4\">观察空间</a></li>\n<li><a href=\"#%E8%A3%81%E5%89%AA%E7%A9%BA%E9%97%B4\">裁剪空间</a><ul>\n<li><a href=\"#%E6%AD%A3%E5%B0%84%E6%8A%95%E5%BD%B1\">正射投影</a></li>\n<li><a href=\"#%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1\">透视投影</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8A%8A%E5%AE%83%E4%BB%AC%E9%83%BD%E7%BB%84%E5%90%88%E5%88%B0%E4%B8%80%E8%B5%B7\">把它们都组合到一起</a></li>\n<li><a href=\"#%E8%BF%9B%E5%85%A53d\">进入3D</a></li>\n<li><a href=\"#%E6%9B%B4%E5%8A%A0-3d\">更加 3D</a><ul>\n<li><a href=\"#z%E7%BC%93%E5%86%B2\">Z缓冲</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结：</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA\">摄像机</a><ul>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4\">摄像机&#x2F;观察空间</a><ul>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E4%BD%8D%E7%BD%AE\">摄像机位置</a></li>\n<li><a href=\"#%E6%91%84%E5%83%8F%E6%9C%BA%E6%96%B9%E5%90%91\">摄像机方向</a></li>\n<li><a href=\"#%E5%8F%B3%E8%BD%B4\">右轴</a></li>\n<li><a href=\"#%E4%B8%8A%E8%BD%B4\">上轴</a></li>\n</ul>\n</li>\n<li><a href=\"#look-at\">Look At</a></li>\n<li><a href=\"#%E6%98%AF%E6%91%84%E5%83%8F%E6%9C%BA%E4%BD%8D%E7%BD%AE%E5%90%91%E9%87%8F%E6%B3%A8%E6%84%8F%E4%BD%8D%E7%BD%AE%E5%90%91%E9%87%8F%E6%98%AF%E7%9B%B8%E5%8F%8D%E7%9A%84%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E6%9C%80%E7%BB%88%E5%B8%8C%E6%9C%9B%E6%8A%8A%E4%B8%96%E7%95%8C%E5%B9%B3%E7%A7%BB%E5%88%B0%E4%B8%8E%E6%88%91%E4%BB%AC%E8%87%AA%E8%BA%AB%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%9B%B8%E5%8F%8D%E6%96%B9%E5%90%91%E6%8A%8A%E8%BF%99%E4%B8%AAlookat%E7%9F%A9%E9%98%B5%E4%BD%9C%E4%B8%BA%E8%A7%82%E5%AF%9F%E7%9F%A9%E9%98%B5%E5%8F%AF%E4%BB%A5%E5%BE%88%E9%AB%98%E6%95%88%E5%9C%B0%E6%8A%8A%E6%89%80%E6%9C%89%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%88%B0%E5%88%9A%E5%88%9A%E5%AE%9A%E4%B9%89%E7%9A%84%E8%A7%82%E5%AF%9F%E7%A9%BA%E9%97%B4lookat%E7%9F%A9%E9%98%B5%E5%B0%B1%E5%83%8F%E5%AE%83%E7%9A%84%E5%90%8D%E5%AD%97%E8%A1%A8%E8%BE%BE%E7%9A%84%E9%82%A3%E6%A0%B7%E5%AE%83%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9C%8B%E7%9D%80look-at%E7%BB%99%E5%AE%9A%E7%9B%AE%E6%A0%87%E7%9A%84%E8%A7%82%E5%AF%9F%E7%9F%A9%E9%98%B5\">是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"坐标系统\"><a href=\"#坐标系统\" class=\"headerlink\" title=\"坐标系统\"></a>坐标系统</h1><p>在上一个教程中，我们学习了如何有效地利用矩阵的变换来对所有顶点进行变换。OpenGL希望在每次顶点着色器运行后，我们可见的所有顶点都为标准化设备坐标(Normalized Device Coordinate, NDC)。<strong>也就是说，每个顶点的x，y，z坐标都应该在-1.0到1.0之间</strong>，超出这个坐标范围的顶点都将不可见。我们通常会自己设定一个坐标的范围，之后再在顶点着色器中将这些坐标变换为标准化设备坐标。然后将这些标准化设备坐标传入光栅器(Rasterizer)，将它们变换为屏幕上的二维坐标或像素。</p>\n<p>将坐标变换为标准化设备坐标，接着再转化为屏幕坐标的过程通常是分步进行的，也就是类似于流水线那样子。在流水线中，物体的顶点在最终转化为屏幕坐标之前还会被变换到多个坐标系统(Coordinate System)。将物体的坐标变换到几个过渡坐标系(Intermediate Coordinate System)的优点在于，在这些特定的坐标系统中，一些操作或运算更加方便和容易，这一点很快就会变得很明显。对我们来说比较重要的总共有5个不同的坐标系统：</p>\n<ul>\n<li><strong>局部空间</strong>(Local Space，或者称为物体空间(Object Space))</li>\n<li><strong>世界空间</strong>(World Space)</li>\n<li><strong>观察空间</strong>(View Space，或者称为视觉空间(Eye Space))</li>\n<li><strong>裁剪空间</strong>(Clip Space)</li>\n<li><strong>屏幕空间</strong>(Screen Space)</li>\n</ul>\n<p>这就是一个顶点在最终被转化为片段之前需要经历的所有不同状态。</p>\n<p>你现在可能会对什么是坐标空间，什么是坐标系统感到非常困惑，所以我们将用一种更加通俗的方式来解释它们。下面，我们将显示一个整体的图片，之后我们会讲解每个空间的具体功能。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>为了将坐标从一个坐标系变换到另一个坐标系，我们需要用到几个变换矩阵，最重要的几个分别是<strong>模型(Model)</strong>、<strong>观察(View)</strong>、<strong>投影(Projection)<strong>三个矩阵。我们的顶点坐标起始于</strong>局部空间</strong>(Local Space)，在这里它称为<strong>局部坐标</strong>(Local Coordinate)，它在之后会变为<strong>世界坐标</strong>(World Coordinate)，<strong>观察坐标</strong>(View Coordinate)，<strong>裁剪坐标</strong>(Clip Coordinate)，并最后以<strong>屏幕坐标</strong>(Screen Coordinate)的形式结束。下面的这张图展示了整个流程以及各个变换过程做了什么：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T185800.png\" alt=\"2024-03-07T185800\"></p>\n<ul>\n<li>局部坐标是对象相对于局部原点的坐标，也是物体起始的坐标。</li>\n<li>下一步是将局部坐标变换为世界空间坐标，世界空间坐标是处于一个更大的空间范围的。这些坐标相对于世界的全局原点，它们会和其它物体一起相对于世界的原点进行摆放。</li>\n<li>接下来我们将世界坐标变换为观察空间坐标，使得每个坐标都是从摄像机或者说观察者的角度进行观察的。</li>\n<li>坐标到达观察空间之后，我们需要将其投影到裁剪坐标。裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上。</li>\n<li>最后，我们将裁剪坐标变换为屏幕坐标，我们将使用一个叫做视口变换(Viewport Transform)的过程。视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内。最后变换出来的坐标将会送到光栅器，将其转化为片段。</li>\n</ul>\n<p>你可能已经大致了解了每个坐标空间的作用。我们之所以将顶点变换到各个不同的空间的原因是有些操作在特定的坐标系统中才有意义且更方便。例如，当需要对物体进行修改的时候，在局部空间中来操作会更说得通；如果要对一个物体做出一个相对于其它物体位置的操作时，在世界坐标系中来做这个才更说得通，等等。如果我们愿意，我们也可以定义一个直接从局部空间变换到裁剪空间的变换矩阵，但那样会失去很多灵活性。</p>\n<div class=\"note info no-icon\"><p>个人理解： 这几个坐标转换的方式，我们可以用拍照片来更形象的理解。<br>局部坐标，就是你要拍什么东西，拍的东西长什么样子。在我们之前的学习中，这个局部坐标就是我们定义的vertex，目前我们渲染的都是正方形。<br>世界坐标，就是这个东西现在在世界中是个什么状态，比如被拉伸，正在旋转，或者正在移动。<br>观察坐标，就是拍下的这个东西在相机中的一个状态。比如在相机前面，上面，或者是下面。<br>裁剪坐标，就是拍下的这个物体是怎么映射成图片的，一般有两种方式，一种是正交投影（没有远近，所有物体的大小固定），还有一种是透视投影，所能看到的的东西都是近大远小。<br>屏幕空间, 可以理解为，我们拍出来的照片，该怎么摆在我们眼前。比如，我可以把它挂在墙上，可以放在桌子上，甚至可以投影到墙上。这样每一种摆放方式，我们都能看到不同的效果.</p>\n</div>\n\n<p>接下来我们将要更仔细地讨论各个坐标系统。</p>\n<h2 id=\"局部空间\"><a href=\"#局部空间\" class=\"headerlink\" title=\"局部空间\"></a>局部空间</h2><p>局部空间是指物体所在的坐标空间，即对象最开始所在的地方。想象你在一个建模软件（比如说Blender）中创建了一个立方体。你创建的立方体的原点有可能位于(0, 0, 0)，即便它有可能最后在程序中处于完全不同的位置。甚至有可能你创建的所有模型都以(0, 0, 0)为初始位置（译注：然而它们会最终出现在世界的不同位置）。所以，你的模型的所有顶点都是在局部空间中：它们相对于你的物体来说都是局部的。</p>\n<p>我们一直使用的那个箱子的顶点是被设定在-0.5到0.5的坐标范围中，(0, 0)是它的原点。这些都是局部坐标。</p>\n<h2 id=\"世界空间\"><a href=\"#世界空间\" class=\"headerlink\" title=\"世界空间\"></a>世界空间</h2><p>如果我们将我们所有的物体导入到程序当中，它们有可能会全挤在世界的原点(0, 0, 0)上，这并不是我们想要的结果。我们想为每一个物体定义一个位置，从而能在更大的世界当中放置它们。世界空间中的坐标正如其名：是指顶点相对于（游戏）世界的坐标。如果你希望将物体分散在世界上摆放（特别是非常真实的那样），这就是你希望物体变换到的空间。物体的坐标将会从局部变换到世界空间；该变换是由模型矩阵(Model Matrix)实现的。</p>\n<p>模型矩阵是一种变换矩阵，它能通过对物体进行位移、缩放、旋转来将它置于它本应该在的位置或朝向。你可以将它想像为变换一个房子，你需要先将它缩小（它在局部空间中太大了），并将其位移至郊区的一个小镇，然后在y轴上往左旋转一点以搭配附近的房子。你也可以把上一节将箱子到处摆放在场景中用的那个矩阵大致看作一个模型矩阵；我们将箱子的局部坐标变换到场景&#x2F;世界中的不同位置。</p>\n<h2 id=\"观察空间\"><a href=\"#观察空间\" class=\"headerlink\" title=\"观察空间\"></a>观察空间</h2><p>观察空间经常被人们称之OpenGL的摄像机(Camera)（所以有时也称为摄像机空间(Camera Space)或视觉空间(Eye Space)）。观察空间是将世界空间坐标转化为用户视野前方的坐标而产生的结果。因此观察空间就是从摄像机的视角所观察到的空间。而这通常是由一系列的位移和旋转的组合来完成，平移&#x2F;旋转场景从而使得特定的对象被变换到摄像机的前方。这些组合在一起的变换通常存储在一个观察矩阵(View Matrix)里，它被用来将世界坐标变换到观察空间。在下一节中我们将深入讨论如何创建一个这样的观察矩阵来模拟一个摄像机。</p>\n<h2 id=\"裁剪空间\"><a href=\"#裁剪空间\" class=\"headerlink\" title=\"裁剪空间\"></a>裁剪空间</h2><p>在一个顶点着色器运行的最后，OpenGL期望所有的坐标都能落在一个特定的范围内，且任何在这个范围之外的点都应该被裁剪掉(Clipped)。被裁剪掉的坐标就会被忽略，所以剩下的坐标就将变为屏幕上可见的片段。这也就是裁剪空间(Clip Space)名字的由来。</p>\n<p>因为将所有可见的坐标都指定在-1.0到1.0的范围内不是很直观，所以我们会指定自己的坐标集(Coordinate Set)并将它变换回标准化设备坐标系，就像OpenGL期望的那样。</p>\n<p>为了将顶点坐标从观察变换到裁剪空间，我们需要定义一个投影矩阵(Projection Matrix)，它指定了一个范围的坐标，比如在每个维度上的-1000到1000。投影矩阵接着会将在这个指定的范围内的坐标变换为标准化设备坐标的范围(-1.0, 1.0)。所有在范围外的坐标不会被映射到在-1.0到1.0的范围之间，所以会被裁剪掉。在上面这个投影矩阵所指定的范围内，坐标(1250, 500, 750)将是不可见的，这是由于它的x坐标超出了范围，它被转化为一个大于1.0的标准化设备坐标，所以被裁剪掉了。</p>\n<div class=\"note info\">如果只是图元(Primitive)，例如三角形，的一部分超出了裁剪体积(Clipping Volume)，则OpenGL会重新构建这个三角形为一个或多个三角形让其能够适合这个裁剪范围。</div>\n\n<p>由投影矩阵创建的观察箱(Viewing Box)被称为平截头体(Frustum)，每个出现在平截头体范围内的坐标都会最终出现在用户的屏幕上。将特定范围内的坐标转化到标准化设备坐标系的过程（而且它很容易被映射到2D观察空间坐标）被称之为投影(Projection)，因为使用投影矩阵能将3D坐标投影(Project)到很容易映射到2D的标准化设备坐标系中。</p>\n<p>一旦所有顶点被变换到裁剪空间，最终的操作——透视除法(Perspective Division)将会执行，在这个过程中我们将位置向量的x，y，z分量分别除以向量的齐次w分量；透视除法是将4D裁剪空间坐标变换为3D标准化设备坐标的过程。这一步会在每一个顶点着色器运行的最后被自动执行。</p>\n<p>在这一阶段之后，最终的坐标将会被映射到屏幕空间中（使用glViewport中的设定），并被变换成片段。</p>\n<p>将观察坐标变换为裁剪坐标的投影矩阵可以为两种不同的形式，每种形式都定义了不同的平截头体。我们可以选择创建一个正射投影矩阵(Orthographic Projection Matrix)或一个透视投影矩阵(Perspective Projection Matrix)。</p>\n<h3 id=\"正射投影\"><a href=\"#正射投影\" class=\"headerlink\" title=\"正射投影\"></a>正射投影</h3><p>正射投影矩阵定义了一个类似立方体的平截头箱，它定义了一个裁剪空间，在这空间之外的顶点都会被裁剪掉。创建一个正射投影矩阵需要指定可见平截头体的宽、高和长度。在使用正射投影矩阵变换至裁剪空间之后处于这个平截头体内的所有坐标将不会被裁剪掉。它的平截头体看起来像一个容器<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T190956.png\" alt=\"2024-03-07T190956\"></p>\n<p>上面的平截头体定义了可见的坐标，它由由宽、高、近(Near)平面和远(Far)平面所指定。任何出现在近平面之前或远平面之后的坐标都会被裁剪掉。正射平截头体直接将平截头体内部的所有坐标映射为标准化设备坐标，因为每个向量的w分量都没有进行改变；如果w分量等于1.0，透视除法则不会改变这个坐标。</p>\n<p>要创建一个正射投影矩阵，我们可以使用GLM的内置函数glm::ortho：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::<span class=\"built_in\">ortho</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">800.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">600.0f</span>, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>前两个参数指定了平截头体的左右坐标，第三和第四参数指定了平截头体的底部和顶部。通过这四个参数我们定义了近平面和远平面的大小，然后第五和第六个参数则定义了近平面和远平面的距离。这个投影矩阵会将处于这些x，y，z值范围内的坐标变换为标准化设备坐标。</p>\n<p>正射投影矩阵直接将坐标映射到2D平面中，即你的屏幕，但实际上一个直接的投影矩阵会产生不真实的结果，因为这个投影没有将透视(Perspective)考虑进去。所以我们需要透视投影矩阵来解决这个问题。</p>\n<h3 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h3><p>如果你曾经体验过实际生活给你带来的景象，你就会注意到离你越远的东西看起来更小。这个奇怪的效果称之为透视(Perspective)。透视的效果在我们看一条无限长的高速公路或铁路时尤其明显，正如下面图片显示的那样：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191126.png\" alt=\"2024-03-07T191126\"></p>\n<p>正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191136.png\" alt=\"2024-03-07T191136\"><br>顶点坐标的每个分量都会除以它的w分量，距离观察者越远顶点坐标就会越小。这是也是w分量非常重要的另一个原因，它能够帮助我们进行透视投影。最后的结果坐标就是处于标准化设备空间中的。如果你对正射投影矩阵和透视投影矩阵是如何计算的很感兴趣（且不会对数学感到恐惧的话）我推荐这篇由Songho写的文章。</p>\n<p>在GLM中可以这样创建一个透视投影矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 proj = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">45.0f</span>), (<span class=\"type\">float</span>)width/(<span class=\"type\">float</span>)height, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n<p>同样，glm::perspective所做的其实就是创建了一个定义了可视空间的大平截头体，任何在这个平截头体以外的东西最后都不会出现在裁剪空间体积内，并且将会受到裁剪。一个透视平截头体可以被看作一个不均匀形状的箱子，在这个箱子内部的每个坐标都会被映射到裁剪空间上的一个点。下面是一张透视平截头体的图片：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191213.png\" alt=\"2024-03-07T191213\"></p>\n<p>它的第一个参数定义了fov的值，它表示的是视野(Field of View)，并且设置了观察空间的大小。如果想要一个真实的观察效果，它的值通常设置为45.0f，但想要一个末日风格的结果你可以将其设置一个更大的值。第二个参数设置了宽高比，由视口的宽除以高所得。第三和第四个参数设置了平截头体的近和远平面。我们通常设置近距离为0.1f，而远距离设为100.0f。所有在近平面和远平面内且处于平截头体内的顶点都会被渲染。</p>\n<p>当你把透视矩阵的 near 值设置太大时（如10.0f），OpenGL会将靠近摄像机的坐标（在0.0f和10.0f之间）都裁剪掉，这会导致一个你在游戏中很熟悉的视觉效果：在太过靠近一个物体的时候你的视线会直接穿过去。</p>\n<p>当使用正射投影时，每一个顶点坐标都会直接映射到裁剪空间中而不经过任何精细的透视除法（它仍然会进行透视除法，只是w分量没有被改变（它保持为1），因此没有起作用）。因为正射投影没有使用透视，远处的物体不会显得更小，所以产生奇怪的视觉效果。由于这个原因，正射投影主要用于二维渲染以及一些建筑或工程的程序，在这些场景中我们更希望顶点不会被透视所干扰。某些如 Blender 等进行三维建模的软件有时在建模时也会使用正射投影，因为它在各个维度下都更准确地描绘了每个物体。下面你能够看到在Blender里面使用两种投影方式的对比：</p>\n<p>你可以看到，使用透视投影的话，远处的顶点看起来比较小，而在正射投影中每个顶点距离观察者的距离都是一样的。</p>\n<h2 id=\"把它们都组合到一起\"><a href=\"#把它们都组合到一起\" class=\"headerlink\" title=\"把它们都组合到一起\"></a>把它们都组合到一起</h2><p>我们为上述的每一个步骤都创建了一个变换矩阵：模型矩阵、观察矩阵和投影矩阵。一个顶点坐标将会根据以下过程被变换到裁剪坐标：</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191439.png\" alt=\"2024-03-07T191439\"></p>\n<p><strong>注意矩阵运算的顺序是相反的</strong>（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。</p>\n<div class=\"note info\">然后呢？\n\n<p>顶点着色器的输出要求所有的顶点都在裁剪空间内，这正是我们刚才使用变换矩阵所做的。OpenGL然后对裁剪坐标执行透视除法从而将它们变换到标准化设备坐标。OpenGL会使用glViewPort内部的参数来将标准化设备坐标映射到屏幕坐标，每个坐标都关联了一个屏幕上的点（在我们的例子中是一个800x600的屏幕）。这个过程称为视口变换。</div></p>\n<h2 id=\"进入3D\"><a href=\"#进入3D\" class=\"headerlink\" title=\"进入3D\"></a>进入3D</h2><p>既然我们知道了如何将3D坐标变换为2D坐标，我们可以开始使用真正的3D物体，而不是枯燥的2D平面了。</p>\n<p>在开始进行3D绘图时，我们首先创建一个模型矩阵。这个模型矩阵包含了位移、缩放与旋转操作，它们会被应用到所有物体的顶点上，以变换它们到全局的世界空间。让我们变换一下我们的平面，将其绕着x轴旋转，使它看起来像放在地上一样。这个模型矩阵看起来是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 model;</span><br><span class=\"line\">model = glm::<span class=\"built_in\">rotate</span>(model, glm::<span class=\"built_in\">radians</span>(<span class=\"number\">-55.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>));</span><br></pre></td></tr></table></figure>\n<p>通过将顶点坐标乘以这个模型矩阵，我们将该顶点坐标变换到世界坐标。我们的平面看起来就是在地板上，代表全局世界里的平面。</p>\n<p>接下来我们需要创建一个观察矩阵。我们想要在场景里面稍微往后移动，以使得物体变成可见的（当在世界空间时，我们位于原点(0,0,0)）。要想在场景里面移动，先仔细想一想下面这个句子：</p>\n<p><strong>将摄像机向后移动，和将整个场景向前移动是一样的。</strong></p>\n<p>这正是观察矩阵所做的，我们以相反于摄像机移动的方向移动整个场景。因为我们想要往后移动，并且OpenGL是一个右手坐标系(Right-handed System)，所以我们需要沿着z轴的正方向移动。我们会通过将场景沿着z轴负方向平移来实现。它会给我们一种我们在往后移动的感觉。</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T191847.png\" alt=\"2024-03-07T191847\"></p>\n<p>在下一个教程中我们将会详细讨论如何在场景中移动。就目前来说，观察矩阵是这样的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\"><span class=\"comment\">// 注意，我们将矩阵向我们要进行移动场景的反方向移动。</span></span><br><span class=\"line\">view = glm::<span class=\"built_in\">translate</span>(view, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">-3.0f</span>));</span><br></pre></td></tr></table></figure>\n\n<p>最后我们需要做的是定义一个投影矩阵。我们希望在场景中使用透视投影，所以像这样声明一个投影矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 projection;</span><br><span class=\"line\">projection = glm::<span class=\"built_in\">perspective</span>(glm::<span class=\"built_in\">radians</span>(<span class=\"number\">45.0f</span>), screenWidth / screenHeight, <span class=\"number\">0.1f</span>, <span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>既然我们已经创建了变换矩阵，我们应该将它们传入着色器。首先，让我们在顶点着色器中声明一个uniform变换矩阵然后将它乘以顶点坐标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"built_in\">layout</span> (location = <span class=\"number\">0</span>) in vec3 aPos;</span><br><span class=\"line\">...</span><br><span class=\"line\">uniform mat4 model;</span><br><span class=\"line\">uniform mat4 view;</span><br><span class=\"line\">uniform mat4 projection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意乘法要从右向左读</span></span><br><span class=\"line\">    gl_Position = projection * view * model * <span class=\"built_in\">vec4</span>(aPos, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还应该将矩阵传入着色器（这通常在每次的渲染迭代中进行，因为变换矩阵会经常变动）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> modelLoc = <span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;model&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">glUniformMatrix4fv</span>(modelLoc, <span class=\"number\">1</span>, GL_FALSE, glm::<span class=\"built_in\">value_ptr</span>(model));</span><br><span class=\"line\">... <span class=\"comment\">// 观察矩阵和投影矩阵与之类似</span></span><br></pre></td></tr></table></figure>\n<p>我们的顶点坐标已经使用模型、观察和投影矩阵进行变换了，最终的物体应该会：</p>\n<ul>\n<li>稍微向后倾斜至地板方向。</li>\n<li>离我们有一些距离。</li>\n<li>有透视效果（顶点越远，变得越小）。</li>\n</ul>\n<p>让我们检查一下结果是否满足这些要求：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T192913.png\" alt=\"2024-03-07T192913\"></p>\n<h2 id=\"更加-3D\"><a href=\"#更加-3D\" class=\"headerlink\" title=\"更加 3D\"></a>更加 3D</h2><p>到目前为止，我们一直都在使用一个2D平面，而且甚至是在3D空间里！所以，让我们大胆地拓展我们的2D平面为一个3D立方体。要想渲染一个立方体，我们一共需要36个顶点（6个面 x 每个面有2个三角形组成 x 每个三角形有3个顶点），这36个顶点的位置你可以从<a href=\"https://learnopengl.com/code_viewer.php?code=getting-started/cube_vertices\">这里</a>获取。</p>\n<p>为了有趣一点，我们将让立方体随着时间旋转：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = glm::<span class=\"built_in\">rotate</span>(model, (<span class=\"type\">float</span>)<span class=\"built_in\">glfwGetTime</span>() * glm::<span class=\"built_in\">radians</span>(<span class=\"number\">50.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们使用glDrawArrays来绘制立方体，但这一次总共有36个顶点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glDrawArrays</span>(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">36</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Z缓冲\"><a href=\"#Z缓冲\" class=\"headerlink\" title=\"Z缓冲\"></a>Z缓冲</h3><p>OpenGL存储它的所有深度信息于一个Z缓冲(Z-buffer)中，也被称为深度缓冲(Depth Buffer)。GLFW会自动为你生成这样一个缓冲（就像它也有一个颜色缓冲来存储输出图像的颜色）。深度值存储在每个片段里面（作为片段的z值），当片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。这个过程称为深度测试(Depth Testing)，它是由OpenGL自动完成的。</p>\n<p>然而，如果我们想要确定OpenGL真的执行了深度测试，首先我们要告诉OpenGL我们想要启用深度测试；它默认是关闭的。我们可以通过glEnable函数来开启深度测试。glEnable和glDisable函数允许我们启用或禁用某个OpenGL功能。这个功能会一直保持启用&#x2F;禁用状态，直到另一个调用来禁用&#x2F;启用它。现在我们想启用深度测试，需要开启GL_DEPTH_TEST：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glEnable</span>(GL_DEPTH_TEST);</span><br></pre></td></tr></table></figure>\n<p>因为我们使用了深度测试，我们也想要在每次渲染迭代之前清除深度缓冲（否则前一帧的深度信息仍然保存在缓冲中）。就像清除颜色缓冲一样，我们可以通过在glClear函数中指定DEPTH_BUFFER_BIT位来清除深度缓冲：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p><strong>简单的讲，整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。</strong></p>\n<h1 id=\"摄像机\"><a href=\"#摄像机\" class=\"headerlink\" title=\"摄像机\"></a>摄像机</h1><p>前面的教程中我们讨论了观察矩阵以及如何使用观察矩阵移动场景（我们向后移动了一点）。OpenGL本身没有摄像机(Camera)的概念，但我们可以通过把场景中的所有物体往相反方向移动的方式来模拟出摄像机，产生一种我们在移动的感觉，而不是场景在移动。</p>\n<p>本节我们将会讨论如何在OpenGL中配置一个摄像机，并且将会讨论FPS风格的摄像机，让你能够在3D场景中自由移动。我们也会讨论键盘和鼠标输入，最终完成一个自定义的摄像机类。</p>\n<p>我们之前总结过，<strong>整个坐标变换，我们要做的，其实就是按照顺序，把物体原本的vertex，依次与model，view，projection相乘即可。</strong>，我们所谓的相机，其实就是为了完成后面两个矩阵的。即： view 观察空间，projection 裁剪空间。</p>\n<h2 id=\"摄像机-观察空间\"><a href=\"#摄像机-观察空间\" class=\"headerlink\" title=\"摄像机&#x2F;观察空间\"></a>摄像机&#x2F;观察空间</h2><p>当我们讨论摄像机&#x2F;观察空间(Camera&#x2F;View Space)的时候，是在讨论以摄像机的视角作为场景原点时场景中所有的顶点坐标：观察矩阵把所有的世界坐标变换为相对于摄像机位置与方向的观察坐标。要定义一个摄像机，我们需要它在世界空间中的位置、观察的方向、一个指向它右侧的向量以及一个指向它上方的向量。细心的读者可能已经注意到我们实际上创建了一个三个单位轴相互垂直的、以摄像机的位置为原点的坐标系。</p>\n<p><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T194034.png\" alt=\"2024-03-07T194034\"></p>\n<h3 id=\"摄像机位置\"><a href=\"#摄像机位置\" class=\"headerlink\" title=\"摄像机位置\"></a>摄像机位置</h3><p>获取摄像机位置很简单。摄像机位置简单来说就是世界空间中一个指向摄像机位置的向量。我们把摄像机位置设置为上一节中的那个相同的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraPos = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">3.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"摄像机方向\"><a href=\"#摄像机方向\" class=\"headerlink\" title=\"摄像机方向\"></a>摄像机方向</h3><p>下一个需要的向量是摄像机的方向，这里指的是摄像机指向哪个方向。现在我们让摄像机指向场景原点：(0, 0, 0)。还记得如果将两个矢量相减，我们就能得到这两个矢量的差吗？用场景原点向量减去摄像机位置向量的结果就是摄像机的指向向量。由于我们知道摄像机指向z轴负方向，但我们希望方向向量(Direction Vector)指向摄像机的z轴正方向。如果我们交换相减的顺序，我们就会获得一个指向摄像机正z轴方向的向量：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraTarget = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">glm::vec3 cameraDirection = glm::<span class=\"built_in\">normalize</span>(cameraPos - cameraTarget);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"右轴\"><a href=\"#右轴\" class=\"headerlink\" title=\"右轴\"></a>右轴</h3><p> 我们需要的另一个向量是一个右向量(Right Vector)，它代表摄像机空间的x轴的正方向。为获取右向量我们需要先使用一个小技巧：先定义一个上向量(Up Vector)。接下来把上向量和第二步得到的方向向量进行叉乘。两个向量叉乘的结果会同时垂直于两向量，因此我们会得到指向x轴正方向的那个向量（如果我们交换两个向量叉乘的顺序就会得到相反的指向x轴负方向的向量）：<br> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> glm::vec3 up = glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>); </span><br><span class=\"line\">glm::vec3 cameraRight = glm::<span class=\"built_in\">normalize</span>(glm::<span class=\"built_in\">cross</span>(up, cameraDirection));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上轴\"><a href=\"#上轴\" class=\"headerlink\" title=\"上轴\"></a>上轴</h3><p>现在我们已经有了x轴向量和z轴向量，获取一个指向摄像机的正y轴向量就相对简单了：我们把右向量和方向向量进行叉乘：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::vec3 cameraUp = glm::<span class=\"built_in\">cross</span>(cameraDirection, cameraRight);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Look-At\"><a href=\"#Look-At\" class=\"headerlink\" title=\"Look At\"></a>Look At</h2><h2 id=\"使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着-Look-at-给定目标的观察矩阵。\"><a href=\"#使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着-Look-at-给定目标的观察矩阵。\" class=\"headerlink\" title=\"使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：其中R是右向量，U是上向量，D是方向向量P是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。\"></a>使用矩阵的好处之一是如果你使用3个相互垂直（或非线性）的轴定义了一个坐标空间，你可以用这3个轴外加一个平移向量来创建一个矩阵，并且你可以用这个矩阵乘以任何向量来将其变换到那个坐标空间。这正是LookAt矩阵所做的，现在我们有了3个相互垂直的轴和一个定义摄像机空间的位置坐标，我们可以创建我们自己的LookAt矩阵了：<br><img src=\"/2024/03/07/opengl_coordinate/2024-03-07T194404.png\" alt=\"2024-03-07T194404\"><br>其中R<br>是右向量，U<br>是上向量，D<br>是方向向量P<br>是摄像机位置向量。注意，位置向量是相反的，因为我们最终希望把世界平移到与我们自身移动的相反方向。把这个LookAt矩阵作为观察矩阵可以很高效地把所有世界坐标变换到刚刚定义的观察空间。LookAt矩阵就像它的名字表达的那样：它会创建一个看着(Look at)给定目标的观察矩阵。</h2><p>幸运的是，GLM已经提供了这些支持。我们要做的只是定义一个摄像机位置，一个目标位置和一个表示世界空间中的上向量的向量（我们计算右向量使用的那个上向量）。接着GLM就会创建一个LookAt矩阵，我们可以把它当作我们的观察矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\">view = glm::<span class=\"built_in\">lookAt</span>(glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">3.0f</span>), </span><br><span class=\"line\">           glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>), </span><br><span class=\"line\">           glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>glm::LookAt</code>函数需要一个位置、目标和上向量。它会创建一个和在上一节使用的一样的观察矩阵。</p>\n<p>在讨论用户输入之前，我们先来做些有意思的事，把我们的摄像机在场景中旋转。我们会将摄像机的注视点保持在(0, 0, 0)。</p>\n<p>我们需要用到一点三角学的知识来在每一帧创建一个x和z坐标，它会代表圆上的一点，我们将会使用它作为摄像机的位置。通过重新计算x和y坐标，我们会遍历圆上的所有点，这样摄像机就会绕着场景旋转了。我们预先定义这个圆的半径radius，在每次渲染迭代中使用GLFW的glfwGetTime函数重新创建观察矩阵，来扩大这个圆。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> radius = <span class=\"number\">10.0f</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> camX = <span class=\"built_in\">sin</span>(<span class=\"built_in\">glfwGetTime</span>()) * radius;</span><br><span class=\"line\"><span class=\"type\">float</span> camZ = <span class=\"built_in\">cos</span>(<span class=\"built_in\">glfwGetTime</span>()) * radius;</span><br><span class=\"line\">glm::mat4 view;</span><br><span class=\"line\">view = glm::<span class=\"built_in\">lookAt</span>(glm::<span class=\"built_in\">vec3</span>(camX, <span class=\"number\">0.0</span>, camZ), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>)); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"opengl 材质","date":"2024-03-13T05:20:12.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n# 材质\n在现实世界里，每个物体会对光产生不同的反应。比如，钢制物体看起来通常会比陶土花瓶更闪闪发光，一个木头箱子也不会与一个钢制箱子反射同样程度的光。有些物体反射光的时候不会有太多的散射(Scatter)，因而产生较小的高光点，而有些物体则会散射很多，产生一个有着更大半径的高光点。如果我们想要在OpenGL中模拟多种类型的物体，我们必须针对每种表面定义不同的材质(Material)属性。\n\n在上一节中，我们定义了一个物体和光的颜色，并结合环境光与镜面强度分量，来决定物体的视觉输出。当描述一个表面时，我们可以分别为三个光照分量定义一个材质颜色(Material Color)：环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)。通过为每个分量指定一个颜色，我们就能够对表面的颜色输出有细粒度的控制了。现在，我们再添加一个反光度(Shininess)分量，结合上述的三个颜色，我们就有了全部所需的材质属性了：\n```glsl\n#version 330 core\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}; \n\nuniform Material material;\n```\n在片段着色器中，我们创建一个结构体(Struct)来储存物体的材质属性。我们也可以把它们储存为独立的uniform值，但是作为一个结构体来储存会更有条理一些。我们首先定义结构体的布局(Layout)，然后简单地以刚创建的结构体作为类型声明一个uniform变量。\n\n如你所见，我们为冯氏光照模型的每个分量都定义一个颜色向量。ambient材质向量定义了在环境光照下这个表面反射的是什么颜色，通常与表面的颜色相同。diffuse材质向量定义了在漫反射光照下表面的颜色。漫反射颜色（和环境光照一样）也被设置为我们期望的物体颜色。specular材质向量设置的是表面上镜面高光的颜色（或者甚至可能反映一个特定表面的颜色）。最后，shininess影响镜面高光的散射/半径。\n\n有这4个元素定义一个物体的材质，我们能够模拟很多现实世界中的材质。devernay.free.fr中的一个表格展示了一系列材质属性，它们模拟了现实世界中的真实材质。下图展示了几组现实世界的材质参数值对我们的立方体的影响：\n![2024-03-13T213241](2024-03-13T213241.png)\n\n可以看到，通过正确地指定一个物体的材质属性，我们对这个物体的感知也就不同了。效果非常明显，但是要想获得更真实的效果，我们需要以更复杂的形状替换这个立方体。在模型加载章节中，我们会讨论更复杂的形状。\n\n搞清楚一个物体正确的材质设定是个困难的工程，这主要需要实验和丰富的经验。用了不合适的材质而毁了物体的视觉质量是件经常发生的事。\n\n让我们试着在着色器中实现这样的一个材质系统。\n\n## 设置材质\n首先，先看下我们现在当前的片段着色器是什么样子的:\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nin vec3 Normal;\nin vec3 FragPos;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main()\n{\n// ambient\n    float ambientStrength = 0.1;\n    vec3 ambient = ambientStrength * lightColor; // 环境光\n  \t\n    vec3 norm = normalize(Normal); // 标准化法向量\n\n    // diffuse \n    vec3 lightDir = normalize(lightPos - FragPos); // 计算物体冲着光的方向，并且标准化\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    vec3 diffuse = diff * lightColor; // 点乘结果跟灯光相乘\n\n    //specular 镜面光\n    float specularStrength = 1.0;//镜面强度\n    float shiness = 128; // 反光度\n    vec3 viewDir = normalize(viewPos - FragPos); // 物体冲着view的方向\n    vec3 reflectDir = reflect(-lightDir, norm);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shiness);\n    vec3 specular = specularStrength * spec * lightColor;\n\n    \n            \n    vec3 result = (specular+ ambient + diffuse) * objectColor; //混合环境光以及漫反射\n    FragColor = vec4(result, 1.0);\n}\n```\n可以看到，我们的环境光强度，镜面光强度以及镜面光反光度都是定义在方法的临时变量。我们可以把这些变量放在uniform中，类型就是我们定义的material:\n```glsl\n#version 330 core\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}; \n\nuniform Material material;\n\nout vec4 FragColor;\n\nin vec3 Normal;\nin vec3 FragPos;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main()\n{\n// ambient\n    \n    vec3 ambient = material.ambient * lightColor; // 环境光\n  \t\n    vec3 norm = normalize(Normal); // 标准化法向量\n\n    // diffuse \n    vec3 lightDir = normalize(lightPos - FragPos); // 计算物体冲着光的方向，并且标准化\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    vec3 diffuse = diff * lightColor * material.diffuse; // 点乘结果跟灯光相乘\n\n    //specular 镜面光\n//    float specularStrength = 1.0;//镜面强度\n//    float shiness = 128; // 反光度\n    vec3 viewDir = normalize(viewPos - FragPos); // 物体冲着view的方向\n    vec3 reflectDir = reflect(-lightDir, norm);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shiness);\n    vec3 specular = material.specular * (spec * lightColor);\n\n    \n            \n    vec3 result = (specular+ ambient + diffuse) * objectColor; //混合环境光以及漫反射\n    FragColor = vec4(result, 1.0);\n}\n```\n我们看到，把三种光的变量都使用材质(`material`)中对应的变量，这样我们就可以控制当前材质对各种光的敏感度。\n我们现在可以通过设置适当的uniform来设置应用中物体的材质了。GLSL中一个结构体在设置uniform时并无任何区别，结构体只是充当uniform变量们的一个命名空间。所以如果想填充这个结构体的话，我们必须设置每个单独的uniform，但要以结构体名为前缀：\n```c++\nlightingShader.setVec3(\"material.ambient\",  1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"material.diffuse\",  1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"material.specular\", 0.5f, 0.5f, 0.5f);\nlightingShader.setFloat(\"material.shininess\", 32.0f);\n```\n\n## 光的属性\n这个物体太亮了。物体过亮的原因是环境光、漫反射和镜面光这三个颜色对任何一个光源都全力反射。光源对环境光、漫反射和镜面光分量也分别具有不同的强度。前面的章节中，我们通过使用一个强度值改变环境光和镜面光强度的方式解决了这个问题。我们想做类似的事情，但是这次是要为每个光照分量分别指定一个强度向量。如果我们假设lightColor是vec3(1.0)，代码会看起来像这样：\n\n```glsl\nvec3 ambient  = vec3(1.0) * material.ambient;\nvec3 diffuse  = vec3(1.0) * (diff * material.diffuse);\nvec3 specular = vec3(1.0) * (spec * material.specular);\n```\n所以物体的每个材质属性对每一个光照分量都返回了最大的强度。对单个光源来说，这些vec3(1.0)值同样可以对每种光源分别改变，而这通常就是我们想要的。现在，物体的环境光分量完全地影响了立方体的颜色，可是环境光分量实际上不应该对最终的颜色有这么大的影响，所以我们会将光源的环境光强度设置为一个小一点的值，从而限制环境光颜色：\n```glsl\nvec3 ambient = vec3(0.1) * material.ambient;\n```\n\n我们可以用同样的方式影响光源的漫反射和镜面光强度。这和我们在上一节中所做的极为相似，你可以认为我们已经创建了一些光照属性来影响各个光照分量。我们希望为光照属性创建类似材质结构体的东西：\n```glsl\nstruct Light {\n    vec3 position;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nuniform Light light;\n```\n一个光源对它的ambient、diffuse和specular光照分量有着不同的强度。环境光照通常被设置为一个比较低的强度，因为我们不希望环境光颜色太过主导。光源的漫反射分量通常被设置为我们希望光所具有的那个颜色，通常是一个比较明亮的白色。镜面光分量通常会保持为vec3(1.0)，以最大强度发光。注意我们也将光源的位置向量加入了结构体。\n\n和材质uniform一样，我们需要更新片段着色器：\n```glsl\nvec3 ambient  = light.ambient * material.ambient;\nvec3 diffuse  = light.diffuse * (diff * material.diffuse);\nvec3 specular = light.specular * (spec * material.specular);\n```\n我们接下来在应用中设置光照强度：\n```c++\nlightingShader.setVec3(\"light.ambient\",  0.2f, 0.2f, 0.2f);\nlightingShader.setVec3(\"light.diffuse\",  0.5f, 0.5f, 0.5f); // 将光照调暗了一些以搭配场景\nlightingShader.setVec3(\"light.specular\", 1.0f, 1.0f, 1.0f); \n```\n\n简而言之，材质就是把之前我们渲染的纯粹的颜色，给加上了我们想要的外表。并且视频specular还会添加反光效果。\n实现原理就是specular是一张黑白图，越白的地方就表示反光越强，计算出的颜色也越白\n\n","source":"_posts/opengl_material.md","raw":"---\ntitle: opengl 材质\ndate: 2024-03-13T21:20:12+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n为了更好的自学游戏开发，所以自学OpenGL\n<!-- more -->\n\n# 材质\n在现实世界里，每个物体会对光产生不同的反应。比如，钢制物体看起来通常会比陶土花瓶更闪闪发光，一个木头箱子也不会与一个钢制箱子反射同样程度的光。有些物体反射光的时候不会有太多的散射(Scatter)，因而产生较小的高光点，而有些物体则会散射很多，产生一个有着更大半径的高光点。如果我们想要在OpenGL中模拟多种类型的物体，我们必须针对每种表面定义不同的材质(Material)属性。\n\n在上一节中，我们定义了一个物体和光的颜色，并结合环境光与镜面强度分量，来决定物体的视觉输出。当描述一个表面时，我们可以分别为三个光照分量定义一个材质颜色(Material Color)：环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)。通过为每个分量指定一个颜色，我们就能够对表面的颜色输出有细粒度的控制了。现在，我们再添加一个反光度(Shininess)分量，结合上述的三个颜色，我们就有了全部所需的材质属性了：\n```glsl\n#version 330 core\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}; \n\nuniform Material material;\n```\n在片段着色器中，我们创建一个结构体(Struct)来储存物体的材质属性。我们也可以把它们储存为独立的uniform值，但是作为一个结构体来储存会更有条理一些。我们首先定义结构体的布局(Layout)，然后简单地以刚创建的结构体作为类型声明一个uniform变量。\n\n如你所见，我们为冯氏光照模型的每个分量都定义一个颜色向量。ambient材质向量定义了在环境光照下这个表面反射的是什么颜色，通常与表面的颜色相同。diffuse材质向量定义了在漫反射光照下表面的颜色。漫反射颜色（和环境光照一样）也被设置为我们期望的物体颜色。specular材质向量设置的是表面上镜面高光的颜色（或者甚至可能反映一个特定表面的颜色）。最后，shininess影响镜面高光的散射/半径。\n\n有这4个元素定义一个物体的材质，我们能够模拟很多现实世界中的材质。devernay.free.fr中的一个表格展示了一系列材质属性，它们模拟了现实世界中的真实材质。下图展示了几组现实世界的材质参数值对我们的立方体的影响：\n![2024-03-13T213241](2024-03-13T213241.png)\n\n可以看到，通过正确地指定一个物体的材质属性，我们对这个物体的感知也就不同了。效果非常明显，但是要想获得更真实的效果，我们需要以更复杂的形状替换这个立方体。在模型加载章节中，我们会讨论更复杂的形状。\n\n搞清楚一个物体正确的材质设定是个困难的工程，这主要需要实验和丰富的经验。用了不合适的材质而毁了物体的视觉质量是件经常发生的事。\n\n让我们试着在着色器中实现这样的一个材质系统。\n\n## 设置材质\n首先，先看下我们现在当前的片段着色器是什么样子的:\n```glsl\n#version 330 core\nout vec4 FragColor;\n\nin vec3 Normal;\nin vec3 FragPos;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main()\n{\n// ambient\n    float ambientStrength = 0.1;\n    vec3 ambient = ambientStrength * lightColor; // 环境光\n  \t\n    vec3 norm = normalize(Normal); // 标准化法向量\n\n    // diffuse \n    vec3 lightDir = normalize(lightPos - FragPos); // 计算物体冲着光的方向，并且标准化\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    vec3 diffuse = diff * lightColor; // 点乘结果跟灯光相乘\n\n    //specular 镜面光\n    float specularStrength = 1.0;//镜面强度\n    float shiness = 128; // 反光度\n    vec3 viewDir = normalize(viewPos - FragPos); // 物体冲着view的方向\n    vec3 reflectDir = reflect(-lightDir, norm);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shiness);\n    vec3 specular = specularStrength * spec * lightColor;\n\n    \n            \n    vec3 result = (specular+ ambient + diffuse) * objectColor; //混合环境光以及漫反射\n    FragColor = vec4(result, 1.0);\n}\n```\n可以看到，我们的环境光强度，镜面光强度以及镜面光反光度都是定义在方法的临时变量。我们可以把这些变量放在uniform中，类型就是我们定义的material:\n```glsl\n#version 330 core\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}; \n\nuniform Material material;\n\nout vec4 FragColor;\n\nin vec3 Normal;\nin vec3 FragPos;\n\nuniform vec3 objectColor;\nuniform vec3 lightColor;\nuniform vec3 lightPos;\nuniform vec3 viewPos;\n\nvoid main()\n{\n// ambient\n    \n    vec3 ambient = material.ambient * lightColor; // 环境光\n  \t\n    vec3 norm = normalize(Normal); // 标准化法向量\n\n    // diffuse \n    vec3 lightDir = normalize(lightPos - FragPos); // 计算物体冲着光的方向，并且标准化\n    float diff = max(dot(norm, lightDir), 0.0);// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小\n    vec3 diffuse = diff * lightColor * material.diffuse; // 点乘结果跟灯光相乘\n\n    //specular 镜面光\n//    float specularStrength = 1.0;//镜面强度\n//    float shiness = 128; // 反光度\n    vec3 viewDir = normalize(viewPos - FragPos); // 物体冲着view的方向\n    vec3 reflectDir = reflect(-lightDir, norm);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shiness);\n    vec3 specular = material.specular * (spec * lightColor);\n\n    \n            \n    vec3 result = (specular+ ambient + diffuse) * objectColor; //混合环境光以及漫反射\n    FragColor = vec4(result, 1.0);\n}\n```\n我们看到，把三种光的变量都使用材质(`material`)中对应的变量，这样我们就可以控制当前材质对各种光的敏感度。\n我们现在可以通过设置适当的uniform来设置应用中物体的材质了。GLSL中一个结构体在设置uniform时并无任何区别，结构体只是充当uniform变量们的一个命名空间。所以如果想填充这个结构体的话，我们必须设置每个单独的uniform，但要以结构体名为前缀：\n```c++\nlightingShader.setVec3(\"material.ambient\",  1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"material.diffuse\",  1.0f, 0.5f, 0.31f);\nlightingShader.setVec3(\"material.specular\", 0.5f, 0.5f, 0.5f);\nlightingShader.setFloat(\"material.shininess\", 32.0f);\n```\n\n## 光的属性\n这个物体太亮了。物体过亮的原因是环境光、漫反射和镜面光这三个颜色对任何一个光源都全力反射。光源对环境光、漫反射和镜面光分量也分别具有不同的强度。前面的章节中，我们通过使用一个强度值改变环境光和镜面光强度的方式解决了这个问题。我们想做类似的事情，但是这次是要为每个光照分量分别指定一个强度向量。如果我们假设lightColor是vec3(1.0)，代码会看起来像这样：\n\n```glsl\nvec3 ambient  = vec3(1.0) * material.ambient;\nvec3 diffuse  = vec3(1.0) * (diff * material.diffuse);\nvec3 specular = vec3(1.0) * (spec * material.specular);\n```\n所以物体的每个材质属性对每一个光照分量都返回了最大的强度。对单个光源来说，这些vec3(1.0)值同样可以对每种光源分别改变，而这通常就是我们想要的。现在，物体的环境光分量完全地影响了立方体的颜色，可是环境光分量实际上不应该对最终的颜色有这么大的影响，所以我们会将光源的环境光强度设置为一个小一点的值，从而限制环境光颜色：\n```glsl\nvec3 ambient = vec3(0.1) * material.ambient;\n```\n\n我们可以用同样的方式影响光源的漫反射和镜面光强度。这和我们在上一节中所做的极为相似，你可以认为我们已经创建了一些光照属性来影响各个光照分量。我们希望为光照属性创建类似材质结构体的东西：\n```glsl\nstruct Light {\n    vec3 position;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nuniform Light light;\n```\n一个光源对它的ambient、diffuse和specular光照分量有着不同的强度。环境光照通常被设置为一个比较低的强度，因为我们不希望环境光颜色太过主导。光源的漫反射分量通常被设置为我们希望光所具有的那个颜色，通常是一个比较明亮的白色。镜面光分量通常会保持为vec3(1.0)，以最大强度发光。注意我们也将光源的位置向量加入了结构体。\n\n和材质uniform一样，我们需要更新片段着色器：\n```glsl\nvec3 ambient  = light.ambient * material.ambient;\nvec3 diffuse  = light.diffuse * (diff * material.diffuse);\nvec3 specular = light.specular * (spec * material.specular);\n```\n我们接下来在应用中设置光照强度：\n```c++\nlightingShader.setVec3(\"light.ambient\",  0.2f, 0.2f, 0.2f);\nlightingShader.setVec3(\"light.diffuse\",  0.5f, 0.5f, 0.5f); // 将光照调暗了一些以搭配场景\nlightingShader.setVec3(\"light.specular\", 1.0f, 1.0f, 1.0f); \n```\n\n简而言之，材质就是把之前我们渲染的纯粹的颜色，给加上了我们想要的外表。并且视频specular还会添加反光效果。\n实现原理就是specular是一张黑白图，越白的地方就表示反光越强，计算出的颜色也越白\n\n","slug":"opengl_material","published":1,"updated":"2025-03-28T02:05:16.396Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7u002v1wu1filke9my","content":"<p><img src=\"/2024/03/13/opengl_material/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>\n<span id=\"more\"></span>\n\n<h1 id=\"材质\"><a href=\"#材质\" class=\"headerlink\" title=\"材质\"></a>材质</h1><p>在现实世界里，每个物体会对光产生不同的反应。比如，钢制物体看起来通常会比陶土花瓶更闪闪发光，一个木头箱子也不会与一个钢制箱子反射同样程度的光。有些物体反射光的时候不会有太多的散射(Scatter)，因而产生较小的高光点，而有些物体则会散射很多，产生一个有着更大半径的高光点。如果我们想要在OpenGL中模拟多种类型的物体，我们必须针对每种表面定义不同的材质(Material)属性。</p>\n<p>在上一节中，我们定义了一个物体和光的颜色，并结合环境光与镜面强度分量，来决定物体的视觉输出。当描述一个表面时，我们可以分别为三个光照分量定义一个材质颜色(Material Color)：环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)。通过为每个分量指定一个颜色，我们就能够对表面的颜色输出有细粒度的控制了。现在，我们再添加一个反光度(Shininess)分量，结合上述的三个颜色，我们就有了全部所需的材质属性了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">struct Material &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br></pre></td></tr></table></figure>\n<p>在片段着色器中，我们创建一个结构体(Struct)来储存物体的材质属性。我们也可以把它们储存为独立的uniform值，但是作为一个结构体来储存会更有条理一些。我们首先定义结构体的布局(Layout)，然后简单地以刚创建的结构体作为类型声明一个uniform变量。</p>\n<p>如你所见，我们为冯氏光照模型的每个分量都定义一个颜色向量。ambient材质向量定义了在环境光照下这个表面反射的是什么颜色，通常与表面的颜色相同。diffuse材质向量定义了在漫反射光照下表面的颜色。漫反射颜色（和环境光照一样）也被设置为我们期望的物体颜色。specular材质向量设置的是表面上镜面高光的颜色（或者甚至可能反映一个特定表面的颜色）。最后，shininess影响镜面高光的散射&#x2F;半径。</p>\n<p>有这4个元素定义一个物体的材质，我们能够模拟很多现实世界中的材质。devernay.free.fr中的一个表格展示了一系列材质属性，它们模拟了现实世界中的真实材质。下图展示了几组现实世界的材质参数值对我们的立方体的影响：<br><img src=\"/2024/03/13/opengl_material/2024-03-13T213241.png\" alt=\"2024-03-13T213241\"></p>\n<p>可以看到，通过正确地指定一个物体的材质属性，我们对这个物体的感知也就不同了。效果非常明显，但是要想获得更真实的效果，我们需要以更复杂的形状替换这个立方体。在模型加载章节中，我们会讨论更复杂的形状。</p>\n<p>搞清楚一个物体正确的材质设定是个困难的工程，这主要需要实验和丰富的经验。用了不合适的材质而毁了物体的视觉质量是件经常发生的事。</p>\n<p>让我们试着在着色器中实现这样的一个材质系统。</p>\n<h2 id=\"设置材质\"><a href=\"#设置材质\" class=\"headerlink\" title=\"设置材质\"></a>设置材质</h2><p>首先，先看下我们现在当前的片段着色器是什么样子的:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// ambient</span></span><br><span class=\"line\">    <span class=\"type\">float</span> ambientStrength = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientStrength * lightColor; <span class=\"comment\">// 环境光</span></span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diffuse </span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos); <span class=\"comment\">// 计算物体冲着光的方向，并且标准化</span></span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse = diff * lightColor; <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//specular 镜面光</span></span><br><span class=\"line\">    <span class=\"type\">float</span> specularStrength = <span class=\"number\">1.0</span>;<span class=\"comment\">//镜面强度</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shiness = <span class=\"number\">128</span>; <span class=\"comment\">// 反光度</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos); <span class=\"comment\">// 物体冲着view的方向</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), shiness);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularStrength * spec * lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = (specular+ ambient + diffuse) * objectColor; <span class=\"comment\">//混合环境光以及漫反射</span></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们的环境光强度，镜面光强度以及镜面光反光度都是定义在方法的临时变量。我们可以把这些变量放在uniform中，类型就是我们定义的material:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">struct Material &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// ambient</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = material.ambient * lightColor; <span class=\"comment\">// 环境光</span></span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diffuse </span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos); <span class=\"comment\">// 计算物体冲着光的方向，并且标准化</span></span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse = diff * lightColor * material.diffuse; <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//specular 镜面光</span></span><br><span class=\"line\"><span class=\"comment\">//    float specularStrength = 1.0;//镜面强度</span></span><br><span class=\"line\"><span class=\"comment\">//    float shiness = 128; // 反光度</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos); <span class=\"comment\">// 物体冲着view的方向</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), material.shiness);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = material.specular * (spec * lightColor);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = (specular+ ambient + diffuse) * objectColor; <span class=\"comment\">//混合环境光以及漫反射</span></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，把三种光的变量都使用材质(<code>material</code>)中对应的变量，这样我们就可以控制当前材质对各种光的敏感度。<br>我们现在可以通过设置适当的uniform来设置应用中物体的材质了。GLSL中一个结构体在设置uniform时并无任何区别，结构体只是充当uniform变量们的一个命名空间。所以如果想填充这个结构体的话，我们必须设置每个单独的uniform，但要以结构体名为前缀：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.ambient&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.diffuse&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.specular&quot;</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;material.shininess&quot;</span>, <span class=\"number\">32.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光的属性\"><a href=\"#光的属性\" class=\"headerlink\" title=\"光的属性\"></a>光的属性</h2><p>这个物体太亮了。物体过亮的原因是环境光、漫反射和镜面光这三个颜色对任何一个光源都全力反射。光源对环境光、漫反射和镜面光分量也分别具有不同的强度。前面的章节中，我们通过使用一个强度值改变环境光和镜面光强度的方式解决了这个问题。我们想做类似的事情，但是这次是要为每个光照分量分别指定一个强度向量。如果我们假设lightColor是vec3(1.0)，代码会看起来像这样：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient  = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * material.ambient;</span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuse  = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * (diff * material.diffuse);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * (spec * material.specular);</span><br></pre></td></tr></table></figure>\n<p>所以物体的每个材质属性对每一个光照分量都返回了最大的强度。对单个光源来说，这些vec3(1.0)值同样可以对每种光源分别改变，而这通常就是我们想要的。现在，物体的环境光分量完全地影响了立方体的颜色，可是环境光分量实际上不应该对最终的颜色有这么大的影响，所以我们会将光源的环境光强度设置为一个小一点的值，从而限制环境光颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient = <span class=\"type\">vec3</span>(<span class=\"number\">0.1</span>) * material.ambient;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以用同样的方式影响光源的漫反射和镜面光强度。这和我们在上一节中所做的极为相似，你可以认为我们已经创建了一些光照属性来影响各个光照分量。我们希望为光照属性创建类似材质结构体的东西：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Light light;</span><br></pre></td></tr></table></figure>\n<p>一个光源对它的ambient、diffuse和specular光照分量有着不同的强度。环境光照通常被设置为一个比较低的强度，因为我们不希望环境光颜色太过主导。光源的漫反射分量通常被设置为我们希望光所具有的那个颜色，通常是一个比较明亮的白色。镜面光分量通常会保持为vec3(1.0)，以最大强度发光。注意我们也将光源的位置向量加入了结构体。</p>\n<p>和材质uniform一样，我们需要更新片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient  = light.ambient * material.ambient;</span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuse  = light.diffuse * (diff * material.diffuse);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = light.specular * (spec * material.specular);</span><br></pre></td></tr></table></figure>\n<p>我们接下来在应用中设置光照强度：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.ambient&quot;</span>,  <span class=\"number\">0.2f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">0.2f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.diffuse&quot;</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>); <span class=\"comment\">// 将光照调暗了一些以搭配场景</span></span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.specular&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>); </span><br></pre></td></tr></table></figure>\n\n<p>简而言之，材质就是把之前我们渲染的纯粹的颜色，给加上了我们想要的外表。并且视频specular还会添加反光效果。<br>实现原理就是specular是一张黑白图，越白的地方就表示反光越强，计算出的颜色也越白</p>\n","length":2224,"excerpt":"<p><img src=\"/2024/03/13/opengl_material/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>为了更好的自学游戏开发，所以自学OpenGL</p>","more":"<h1 id=\"材质\"><a href=\"#材质\" class=\"headerlink\" title=\"材质\"></a>材质</h1><p>在现实世界里，每个物体会对光产生不同的反应。比如，钢制物体看起来通常会比陶土花瓶更闪闪发光，一个木头箱子也不会与一个钢制箱子反射同样程度的光。有些物体反射光的时候不会有太多的散射(Scatter)，因而产生较小的高光点，而有些物体则会散射很多，产生一个有着更大半径的高光点。如果我们想要在OpenGL中模拟多种类型的物体，我们必须针对每种表面定义不同的材质(Material)属性。</p>\n<p>在上一节中，我们定义了一个物体和光的颜色，并结合环境光与镜面强度分量，来决定物体的视觉输出。当描述一个表面时，我们可以分别为三个光照分量定义一个材质颜色(Material Color)：环境光照(Ambient Lighting)、漫反射光照(Diffuse Lighting)和镜面光照(Specular Lighting)。通过为每个分量指定一个颜色，我们就能够对表面的颜色输出有细粒度的控制了。现在，我们再添加一个反光度(Shininess)分量，结合上述的三个颜色，我们就有了全部所需的材质属性了：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">struct Material &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br></pre></td></tr></table></figure>\n<p>在片段着色器中，我们创建一个结构体(Struct)来储存物体的材质属性。我们也可以把它们储存为独立的uniform值，但是作为一个结构体来储存会更有条理一些。我们首先定义结构体的布局(Layout)，然后简单地以刚创建的结构体作为类型声明一个uniform变量。</p>\n<p>如你所见，我们为冯氏光照模型的每个分量都定义一个颜色向量。ambient材质向量定义了在环境光照下这个表面反射的是什么颜色，通常与表面的颜色相同。diffuse材质向量定义了在漫反射光照下表面的颜色。漫反射颜色（和环境光照一样）也被设置为我们期望的物体颜色。specular材质向量设置的是表面上镜面高光的颜色（或者甚至可能反映一个特定表面的颜色）。最后，shininess影响镜面高光的散射&#x2F;半径。</p>\n<p>有这4个元素定义一个物体的材质，我们能够模拟很多现实世界中的材质。devernay.free.fr中的一个表格展示了一系列材质属性，它们模拟了现实世界中的真实材质。下图展示了几组现实世界的材质参数值对我们的立方体的影响：<br><img src=\"/2024/03/13/opengl_material/2024-03-13T213241.png\" alt=\"2024-03-13T213241\"></p>\n<p>可以看到，通过正确地指定一个物体的材质属性，我们对这个物体的感知也就不同了。效果非常明显，但是要想获得更真实的效果，我们需要以更复杂的形状替换这个立方体。在模型加载章节中，我们会讨论更复杂的形状。</p>\n<p>搞清楚一个物体正确的材质设定是个困难的工程，这主要需要实验和丰富的经验。用了不合适的材质而毁了物体的视觉质量是件经常发生的事。</p>\n<p>让我们试着在着色器中实现这样的一个材质系统。</p>\n<h2 id=\"设置材质\"><a href=\"#设置材质\" class=\"headerlink\" title=\"设置材质\"></a>设置材质</h2><p>首先，先看下我们现在当前的片段着色器是什么样子的:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// ambient</span></span><br><span class=\"line\">    <span class=\"type\">float</span> ambientStrength = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = ambientStrength * lightColor; <span class=\"comment\">// 环境光</span></span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diffuse </span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos); <span class=\"comment\">// 计算物体冲着光的方向，并且标准化</span></span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse = diff * lightColor; <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//specular 镜面光</span></span><br><span class=\"line\">    <span class=\"type\">float</span> specularStrength = <span class=\"number\">1.0</span>;<span class=\"comment\">//镜面强度</span></span><br><span class=\"line\">    <span class=\"type\">float</span> shiness = <span class=\"number\">128</span>; <span class=\"comment\">// 反光度</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos); <span class=\"comment\">// 物体冲着view的方向</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), shiness);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = specularStrength * spec * lightColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = (specular+ ambient + diffuse) * objectColor; <span class=\"comment\">//混合环境光以及漫反射</span></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们的环境光强度，镜面光强度以及镜面光反光度都是定义在方法的临时变量。我们可以把这些变量放在uniform中，类型就是我们定义的material:</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\">struct Material &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">    <span class=\"type\">float</span> shininess;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Material material;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> FragColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> Normal;</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"type\">vec3</span> FragPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> objectColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightColor;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> lightPos;</span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">vec3</span> viewPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// ambient</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient = material.ambient * lightColor; <span class=\"comment\">// 环境光</span></span><br><span class=\"line\">  \t</span><br><span class=\"line\">    <span class=\"type\">vec3</span> norm = <span class=\"built_in\">normalize</span>(Normal); <span class=\"comment\">// 标准化法向量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diffuse </span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> lightDir = <span class=\"built_in\">normalize</span>(lightPos - FragPos); <span class=\"comment\">// 计算物体冲着光的方向，并且标准化</span></span><br><span class=\"line\">    <span class=\"type\">float</span> diff = <span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(norm, lightDir), <span class=\"number\">0.0</span>);<span class=\"comment\">// 点乘，获取夹角的cos值，角度越大，cos越小，光亮效果越小</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse = diff * lightColor * material.diffuse; <span class=\"comment\">// 点乘结果跟灯光相乘</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//specular 镜面光</span></span><br><span class=\"line\"><span class=\"comment\">//    float specularStrength = 1.0;//镜面强度</span></span><br><span class=\"line\"><span class=\"comment\">//    float shiness = 128; // 反光度</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> viewDir = <span class=\"built_in\">normalize</span>(viewPos - FragPos); <span class=\"comment\">// 物体冲着view的方向</span></span><br><span class=\"line\">    <span class=\"type\">vec3</span> reflectDir = <span class=\"built_in\">reflect</span>(-lightDir, norm);</span><br><span class=\"line\">    <span class=\"type\">float</span> spec = <span class=\"built_in\">pow</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">dot</span>(viewDir, reflectDir), <span class=\"number\">0.0</span>), material.shiness);</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular = material.specular * (spec * lightColor);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"type\">vec3</span> result = (specular+ ambient + diffuse) * objectColor; <span class=\"comment\">//混合环境光以及漫反射</span></span><br><span class=\"line\">    FragColor = <span class=\"type\">vec4</span>(result, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，把三种光的变量都使用材质(<code>material</code>)中对应的变量，这样我们就可以控制当前材质对各种光的敏感度。<br>我们现在可以通过设置适当的uniform来设置应用中物体的材质了。GLSL中一个结构体在设置uniform时并无任何区别，结构体只是充当uniform变量们的一个命名空间。所以如果想填充这个结构体的话，我们必须设置每个单独的uniform，但要以结构体名为前缀：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.ambient&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.diffuse&quot;</span>,  <span class=\"number\">1.0f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.31f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;material.specular&quot;</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setFloat</span>(<span class=\"string\">&quot;material.shininess&quot;</span>, <span class=\"number\">32.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光的属性\"><a href=\"#光的属性\" class=\"headerlink\" title=\"光的属性\"></a>光的属性</h2><p>这个物体太亮了。物体过亮的原因是环境光、漫反射和镜面光这三个颜色对任何一个光源都全力反射。光源对环境光、漫反射和镜面光分量也分别具有不同的强度。前面的章节中，我们通过使用一个强度值改变环境光和镜面光强度的方式解决了这个问题。我们想做类似的事情，但是这次是要为每个光照分量分别指定一个强度向量。如果我们假设lightColor是vec3(1.0)，代码会看起来像这样：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient  = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * material.ambient;</span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuse  = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * (diff * material.diffuse);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = <span class=\"type\">vec3</span>(<span class=\"number\">1.0</span>) * (spec * material.specular);</span><br></pre></td></tr></table></figure>\n<p>所以物体的每个材质属性对每一个光照分量都返回了最大的强度。对单个光源来说，这些vec3(1.0)值同样可以对每种光源分别改变，而这通常就是我们想要的。现在，物体的环境光分量完全地影响了立方体的颜色，可是环境光分量实际上不应该对最终的颜色有这么大的影响，所以我们会将光源的环境光强度设置为一个小一点的值，从而限制环境光颜色：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient = <span class=\"type\">vec3</span>(<span class=\"number\">0.1</span>) * material.ambient;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以用同样的方式影响光源的漫反射和镜面光强度。这和我们在上一节中所做的极为相似，你可以认为我们已经创建了一些光照属性来影响各个光照分量。我们希望为光照属性创建类似材质结构体的东西：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Light &#123;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> position;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">vec3</span> ambient;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> diffuse;</span><br><span class=\"line\">    <span class=\"type\">vec3</span> specular;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> Light light;</span><br></pre></td></tr></table></figure>\n<p>一个光源对它的ambient、diffuse和specular光照分量有着不同的强度。环境光照通常被设置为一个比较低的强度，因为我们不希望环境光颜色太过主导。光源的漫反射分量通常被设置为我们希望光所具有的那个颜色，通常是一个比较明亮的白色。镜面光分量通常会保持为vec3(1.0)，以最大强度发光。注意我们也将光源的位置向量加入了结构体。</p>\n<p>和材质uniform一样，我们需要更新片段着色器：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> ambient  = light.ambient * material.ambient;</span><br><span class=\"line\"><span class=\"type\">vec3</span> diffuse  = light.diffuse * (diff * material.diffuse);</span><br><span class=\"line\"><span class=\"type\">vec3</span> specular = light.specular * (spec * material.specular);</span><br></pre></td></tr></table></figure>\n<p>我们接下来在应用中设置光照强度：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.ambient&quot;</span>,  <span class=\"number\">0.2f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">0.2f</span>);</span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.diffuse&quot;</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>); <span class=\"comment\">// 将光照调暗了一些以搭配场景</span></span><br><span class=\"line\">lightingShader.<span class=\"built_in\">setVec3</span>(<span class=\"string\">&quot;light.specular&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>); </span><br></pre></td></tr></table></figure>\n\n<p>简而言之，材质就是把之前我们渲染的纯粹的颜色，给加上了我们想要的外表。并且视频specular还会添加反光效果。<br>实现原理就是specular是一张黑白图，越白的地方就表示反光越强，计算出的颜色也越白</p>"},{"title":"libGDX 游戏引擎渲染3d","date":"2024-03-09T06:29:34.000Z","_content":"\n![logo](libgdx_logo.svg)\n作为一个java开发，还是java用得顺手\n按照前面的学习，试着学习用LibGDX封装好的API来渲染一个3d物体，同时分析libgdx封装的3d渲染源码\n<!-- more -->\n\n# Libgdx\nLibGDX游戏引擎的基本使用参考这里。\n引擎中，关于3d的渲染部分，全部在`com.badlogic.gdx.graphics.g3d`包中，把很多OpenGL底层操作全部封装了，所以，如果我们想要直接看到libGDX渲染3d的功能效果，还是很方便的.其中有几个概念，是libGDX封装便于操作的：\n\n# 代码\n```java\npackage com.voidvvv.test;\n\nimport com.badlogic.gdx.Game;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.graphics.*;\nimport com.badlogic.gdx.graphics.g3d.*;\nimport com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;\nimport com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;\nimport com.badlogic.gdx.graphics.g3d.model.MeshPart;\nimport com.badlogic.gdx.graphics.g3d.model.Node;\nimport com.badlogic.gdx.graphics.g3d.model.NodePart;\nimport com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;\nimport com.badlogic.gdx.graphics.g3d.utils.CameraInputController;\nimport com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;\nimport com.badlogic.gdx.graphics.glutils.IndexArray;\nimport com.badlogic.gdx.graphics.glutils.IndexData;\nimport com.badlogic.gdx.graphics.glutils.VertexArray;\nimport com.badlogic.gdx.graphics.glutils.VertexData;\nimport com.badlogic.gdx.math.Matrix4;\nimport com.badlogic.gdx.math.Vector3;\nimport com.badlogic.gdx.utils.Array;\nimport com.badlogic.gdx.utils.ScreenUtils;\n\npublic class MyGame extends Game {\n    Model model;\n    ModelBatch modelBatch;\n    ModelInstance demo;\n    PerspectiveCamera camera;\n    float[] vertex = {\n            // 第一个面\n            0.f, 0f, 0f, 0, 0,\n            0.f, 10f, 0f, 0, 1,\n            10.f, 10f, 0f, 1, 1,\n\n            10.f, 10f, 0f, 1, 1,\n            10.f, 0.f, 0f, 1, 0,\n            0.f, 0f, 0f, 0, 0,\n            // 第二个面\n            0, 10, 0, 0, 0,\n            0, 10, 10, 0, 1,\n            10, 10, 10, 1, 1,\n\n            10, 10, 10, 1, 1,\n            10, 10, 0, 1, 0,\n            0, 10, 0, 0, 0,\n            // 第三个面\n            10, 0, 10, 0, 0,\n            10, 10, 10, 0, 1,\n            0, 10, 10, 1, 1,\n\n            0, 10, 10, 1, 1,\n            0, 0, 10, 1, 0,\n            10, 0, 10, 0, 0,\n            // 第四个面\n            0.f, 0f, 0f, 0, 0,\n            10, 0, 0, 0, 1,\n            10, 0, 10, 1, 1,\n\n            10, 0, 10, 1, 1,\n            0, 0, 10, 1, 0,\n            0.f, 0f, 0f, 0, 0,\n            // 第五个面 需要注意，颜色渲染是在逆时针方向展示的，如果把这个面冲着立方体里面，那么外面看就是空白的\n            10, 10, 10, 1, 1,\n            10, 0, 10, 0, 1,\n            10, 0, 0, 0, 0,\n\n\n            10f, 0f, 0f, 0, 0,\n            10, 10, 0, 1, 0,\n            10, 10, 10, 1, 1,\n\n\n            // 第六个面\n            0, 0, 0, 0, 0,\n            0, 0, 10, 0, 1,\n            0, 10, 10, 1, 1,\n\n            0, 10, 10, 1, 1,\n            0, 10, 0, 1, 0,\n            0, 0f, 0f, 0, 0,\n    };\n\n    Color[] colors = {\n            Color.BLACK,\n            Color.WHITE,\n            Color.BLUE,\n            Color.CHARTREUSE,\n            Color.YELLOW,\n            Color.FIREBRICK,\n    };\n\n    CameraInputController cameraInputController;\n\n    @Override\n    public void create() {\n\n\n        System.out.println(vertex.length);\n        camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n        modelBatch = new ModelBatch();\n        VertexAttribute positionAtt = VertexAttribute.Position();\n//        VertexAttribute colorAtt = VertexAttribute.ColorUnpacked();\n        VertexAttribute texCorrAtt = VertexAttribute.TexCoords(0);\n\n        model = new Model();\n        Mesh mesh = new Mesh(true, 36, 0, positionAtt, texCorrAtt);\n        mesh.setVertices(vertex);\n//        mesh.setIndices();\n//        mesh.setInstanceData()\n\n        Node n1 = new Node();\n\n        TextureAttribute ta = TextureAttribute.createDiffuse(new Texture(\"badlogic.jpg\"));\n        TextureAttribute ta2 = TextureAttribute.createDiffuse(new Texture(Gdx.files.absolute(\"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\asset\\\\enhancer_profile.png\")));\n\n        for (int i = 0; i<6; i++){\n            NodePart nodePart = nodePart_(mesh, 6 * i, colors[i], ta ,ta2 );\n\n            n1.parts.add(nodePart);\n            System.out.println(\"i: \" + i);\n        }\n        model.meshes.add(mesh);\n        model.nodes.add(n1);\n\n        demo = new ModelInstance(model);\n//        demo.transform.scl(1.f).translate(0,0,0);\n\n        camera.position.set(5,6,-20);\n        camera.lookAt(5,5,5);\n        cameraInputController = new CameraInputController(camera);\n        Gdx.input.setInputProcessor(cameraInputController);\n    }\n\n    static NodePart nodePart_(Mesh mesh, int offset, Color color,  TextureAttribute ta , TextureAttribute ta2) {\n        MeshPart mp = new MeshPart();\n        mp.primitiveType = GL30.GL_TRIANGLES;\n        mp.mesh = mesh;\n        mp.offset = offset;\n        mp.size = 6;\n\n        NodePart np = new NodePart(mp, new Material(ColorAttribute.createDiffuse(color),ta , ta2));\n        np.meshPart = mp;\n        return np;\n    }\n    Vector3 tmp = new Vector3();\n    @Override\n    public void render() {\n        camera.update();\n        Gdx.gl.glClearColor(Color.GRAY.r,Color.GRAY.g,Color.GRAY.b,Color.GRAY.a);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);\n\n        Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n        cameraInputController.update();;\n        if (Gdx.input.isKeyPressed(Input.Keys.SPACE)){\n\n            camera.position.set(5,6,-20);\n            camera.lookAt(5,5,5);\n            camera.up.set(0,0,1);\n        }\n\n//        demo.transform.rotate(tmp.set(1,1,1),1.5f);\n\n        modelBatch.begin(camera);\n        Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);\n\n        modelBatch.render(demo);\n        modelBatch.end();\n    }\n}\n\n```\n\n代码使用libgdx内置的moedel类型构建了一个方块原型，设置了vertex顶点数组，给model添加了node，然后node下面添加了一个node part作为渲染对象。\n最后，使用model构建出modelinstatnce，使用model batch对modelInstance渲染。\n\n## Model\nopenGL中，若我们想渲染3d物体，需要一下计算公式：\n![2024-03-09T225319](2024-03-09T225319.png) 我们的Model类就是为了获取Local向量而来的。\n\nModel是一个3d物体的原型。用来表示物体本来的样子。\n我们这里的Model类，存储的是上面Local的内容，可以看到，本质是个向量。我们可以看下其源码:\n```java\npackage com.badlogic.gdx.graphics.g3d;\n\n\n/** A model represents a 3D assets. It stores a hierarchy of nodes. A node has a transform and optionally a graphical part in form\n * of a {@link MeshPart} and {@link Material}. Mesh parts reference subsets of vertices in one of the meshes of the model.\n * Animations can be applied to nodes, to modify their transform (translation, rotation, scale) over time.\n * </p>\n *\n * A model can be rendered by creating a {@link ModelInstance} from it. That instance has an additional transform to position the\n * model in the world, and allows modification of materials and nodes without destroying the original model. The original model is\n * the owner of any meshes and textures, all instances created from the model share these resources. Disposing the model will\n * automatically make all instances invalid!\n * </p>\n *\n * A model is created from {@link ModelData}, which in turn is loaded by a {@link ModelLoader}.\n *\n * @author badlogic, xoppa */\npublic class Model implements Disposable {\n\t/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows\n\t * modification of materials without having to traverse the nodes **/\n\tpublic final Array<Material> materials = new Array();\n\t/** root nodes of the model **/\n\tpublic final Array<Node> nodes = new Array();\n\t/** animations of the model, modifying node transformations **/\n\tpublic final Array<Animation> animations = new Array();\n\t/** the meshes of the model **/\n\tpublic final Array<Mesh> meshes = new Array();\n\t/** parts of meshes, used by nodes that have a graphical representation FIXME not sure if superfluous, stored in Nodes as well,\n\t * could be useful to create bullet meshes **/\n\tpublic final Array<MeshPart> meshParts = new Array();\n\t/** Array of disposable resources like textures or meshes the Model is responsible for disposing **/\n\tprotected final Array<Disposable> disposables = new Array();\n\n\t/** Constructs an empty model. Manual created models do not manage their resources by default. Use\n\t * {@link #manageDisposable(Disposable)} to add resources to be managed by this model. */\n\tpublic Model () {\n\t}\n\n\t/** Constructs a new Model based on the {@link ModelData}. Texture files will be loaded from the internal file storage via an\n\t * {@link FileTextureProvider}.\n\t * @param modelData the {@link ModelData} got from e.g. {@link ModelLoader} */\n\tpublic Model (ModelData modelData) {\n\t\tthis(modelData, new FileTextureProvider());\n\t}\n\n\t/** Constructs a new Model based on the {@link ModelData}.\n\t * @param modelData the {@link ModelData} got from e.g. {@link ModelLoader}\n\t * @param textureProvider the {@link TextureProvider} to use for loading the textures */\n\tpublic Model (ModelData modelData, TextureProvider textureProvider) {\n\t\tload(modelData, textureProvider);\n\t}\n...\n}\n```\n里面存储的内容有 materials（材质），nodes 节点（后面会介绍），Animation 变化动画，Mesh 网格节点。\n\nModel下面层级的关系有点类似：\n![2024-03-10T095248](2024-03-10T095248.png)\nnodepart 包含 mesh part\n\n### materials\n材质，可以理解为我们的3d物体外表是什么样子的，常见的设置比如颜色，图片等等。\n\n### node 节点\n我们的Model存储了很多的node节点，model本身没有local位置信息，只有一些物体原型数据。\n而我们的Node节点，就存储了我们物体的model矩阵信息。可以看源码：\n```java\n\npackage com.badlogic.gdx.graphics.g3d.model;\n\n\n/** A node is part of a hierarchy of Nodes in a {@link Model}. A Node encodes a transform relative to its parents. A Node can have\n * child nodes. Optionally a node can specify a {@link MeshPart} and a {@link Material} to be applied to the mesh part.\n * @author badlogic */\npublic class Node {\n\t/** the id, may be null, FIXME is this unique? **/\n\tpublic String id;\n\t/** Whether this node should inherit the transformation of its parent node, defaults to true. When this flag is false the value\n\t * of {@link #globalTransform} will be the same as the value of {@link #localTransform} causing the transform to be independent\n\t * of its parent transform. */\n\tpublic boolean inheritTransform = true;\n\t/** Whether this node is currently being animated, if so the translation, rotation and scale values are not used. */\n\tpublic boolean isAnimated;\n\t/** the translation, relative to the parent, not modified by animations **/\n\tpublic final Vector3 translation = new Vector3();\n\t/** the rotation, relative to the parent, not modified by animations **/\n\tpublic final Quaternion rotation = new Quaternion(0, 0, 0, 1);\n\t/** the scale, relative to the parent, not modified by animations **/\n\tpublic final Vector3 scale = new Vector3(1, 1, 1);\n\t/** the local transform, based on translation/rotation/scale ({@link #calculateLocalTransform()}) or any applied animation **/\n\tpublic final Matrix4 localTransform = new Matrix4();\n\t/** the global transform, product of local transform and transform of the parent node, calculated via\n\t * {@link #calculateWorldTransform()} **/\n\tpublic final Matrix4 globalTransform = new Matrix4();\n\n\tpublic Array<NodePart> parts = new Array<NodePart>(2);\n\n\tprotected Node parent;\n\tprivate final Array<Node> children = new Array<Node>(2);\n\n}\n```\n可以看到我们的node节点里的的确确定义了transition 位移，rotation 旋转，scale 缩放等矩阵信息。\n我们的model存储了一系列的node集合，每一个node都有自己的local矩阵，这样可以更好更方便的批量渲染我们的数据。\n<div class=\"note info\">类比的话，我个人觉得model就像一个人，而node就像人体上的四肢。每个人的四肢长短大小不一，这样就是model下面的node存在的意义。但在代码层面，我个人人为仅仅是方便我们使用而已</div>\n\n#### NodePart\nNodePart是Node下面更子一级的东西。我们已经知道，node节点已经存储了local矩阵信息，但是我们还需要知道我们物体原本的顶点数组，这样我们才能知道怎么渲染这个物体。\nNodepart就是node下面一系列包含顶点数组的类的集合。就好比我们的手是跟着胳膊动的，但是我们手上分别有五个手指，是各自的样子。\nNodePart下面包含 material材质，MeshPart 网格部分数据，\n材质比较好理解，我们node下面的每一个part都可能有不同的渲染需求，比如一个立方体，每一个面都想渲染不同颜色。\nMeshPart，顾名思义，是Mesh的一部分，这个类里面存放着的是Mesh网格数据，以及当前noded part所需要这个网格的区域，用offset和size标识。\n\n### Mesh\nMesh网格，这里面存放的就是我们的顶点数组，还有索引数组。一个model可以有许多mesh，可以分给不同的node（node part）来读取渲染。\n\n\n\n# render\n渲染这部分，底层就是OpenGL，使用shader，渲染顶点数组对象。但是Libgdx封装了很多实用的功能，所以我决定从源码开始看.\n## ModelBatch\nModelBatch 是libgdx为我们准备的渲染3d物体的一个批处理器。想要获取它的对象非常简单，我们可以直接new。\n我们可以看到这个类有一些render方法,render方法有非常多的重载，我只想来详细看下这个render方法：\n```java\n// 因为了解这个方法就足以了解别的render方法了\n\tpublic void render (final RenderableProvider renderableProvider) {\n\t\tfinal int offset = renderables.size;\n\t\trenderableProvider.getRenderables(renderables, renderablesPool);\n\t\tfor (int i = offset; i < renderables.size; i++) {\n\t\t\tRenderable renderable = renderables.get(i);\n\t\t\trenderable.shader = shaderProvider.getShader(renderable);\n\t\t}\n\t}\n```\n这个方法做了以下几件事：\n1. 方法需要传入一个RenderableProvider\n2. 使用传入的RenderableProvider，配合本身内部的renderablesPool对象池，生成renderable对象放在我们当前的batch类中\n3. 遍历所有renderable对象，为其设置shader\n\n其中，RenderableProvider是一个接口。接口中只有一个抽象方法:\n```java\n\tpublic void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool);\n```\n我们看一下它的其中一个实现类：ModelInstance的实现\n```java\n\tpublic void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {\n\t\tfor (Node node : nodes) {\n\t\t\tgetRenderables(node, renderables, pool);\n\t\t}\n\t}\n```\n这里可以看到就是把当前model实例中的node全部拿来遍历，然后为每个node生成renderable。再往下:\n```java\n\tprotected void getRenderables (Node node, Array<Renderable> renderables, Pool<Renderable> pool) {\n\t\tif (node.parts.size > 0) {\n\t\t\tfor (NodePart nodePart : node.parts) {\n\t\t\t\tif (nodePart.enabled) renderables.add(getRenderable(pool.obtain(), node, nodePart));\n\t\t\t}\n\t\t}\n\n\t\tfor (Node child : node.getChildren()) {\n\t\t\tgetRenderables(child, renderables, pool);\n\t\t}\n\t}\n```\n对于当前node下的每一个node part，都会从我们的rederable对象池中获取一个renderable，作为其真正的到渲染物。\n然后，每一个node part会把自身包含的material以及mesh part 绑定到这个renderable中，来进行渲染。\n\n最后真正的渲染方法，在:\n```java\nmodelBatch.end();\n```\nend方法就是结束一个批次，来将之前生成的所有renderable来用对应的shader进行渲染。\n\n嗯，就先这样把\n","source":"_posts/opengl_java_3d.md","raw":"---\ntitle: libGDX 游戏引擎渲染3d\ndate: 2024-03-09T22:29:34+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![logo](libgdx_logo.svg)\n作为一个java开发，还是java用得顺手\n按照前面的学习，试着学习用LibGDX封装好的API来渲染一个3d物体，同时分析libgdx封装的3d渲染源码\n<!-- more -->\n\n# Libgdx\nLibGDX游戏引擎的基本使用参考这里。\n引擎中，关于3d的渲染部分，全部在`com.badlogic.gdx.graphics.g3d`包中，把很多OpenGL底层操作全部封装了，所以，如果我们想要直接看到libGDX渲染3d的功能效果，还是很方便的.其中有几个概念，是libGDX封装便于操作的：\n\n# 代码\n```java\npackage com.voidvvv.test;\n\nimport com.badlogic.gdx.Game;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.graphics.*;\nimport com.badlogic.gdx.graphics.g3d.*;\nimport com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;\nimport com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;\nimport com.badlogic.gdx.graphics.g3d.model.MeshPart;\nimport com.badlogic.gdx.graphics.g3d.model.Node;\nimport com.badlogic.gdx.graphics.g3d.model.NodePart;\nimport com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;\nimport com.badlogic.gdx.graphics.g3d.utils.CameraInputController;\nimport com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;\nimport com.badlogic.gdx.graphics.glutils.IndexArray;\nimport com.badlogic.gdx.graphics.glutils.IndexData;\nimport com.badlogic.gdx.graphics.glutils.VertexArray;\nimport com.badlogic.gdx.graphics.glutils.VertexData;\nimport com.badlogic.gdx.math.Matrix4;\nimport com.badlogic.gdx.math.Vector3;\nimport com.badlogic.gdx.utils.Array;\nimport com.badlogic.gdx.utils.ScreenUtils;\n\npublic class MyGame extends Game {\n    Model model;\n    ModelBatch modelBatch;\n    ModelInstance demo;\n    PerspectiveCamera camera;\n    float[] vertex = {\n            // 第一个面\n            0.f, 0f, 0f, 0, 0,\n            0.f, 10f, 0f, 0, 1,\n            10.f, 10f, 0f, 1, 1,\n\n            10.f, 10f, 0f, 1, 1,\n            10.f, 0.f, 0f, 1, 0,\n            0.f, 0f, 0f, 0, 0,\n            // 第二个面\n            0, 10, 0, 0, 0,\n            0, 10, 10, 0, 1,\n            10, 10, 10, 1, 1,\n\n            10, 10, 10, 1, 1,\n            10, 10, 0, 1, 0,\n            0, 10, 0, 0, 0,\n            // 第三个面\n            10, 0, 10, 0, 0,\n            10, 10, 10, 0, 1,\n            0, 10, 10, 1, 1,\n\n            0, 10, 10, 1, 1,\n            0, 0, 10, 1, 0,\n            10, 0, 10, 0, 0,\n            // 第四个面\n            0.f, 0f, 0f, 0, 0,\n            10, 0, 0, 0, 1,\n            10, 0, 10, 1, 1,\n\n            10, 0, 10, 1, 1,\n            0, 0, 10, 1, 0,\n            0.f, 0f, 0f, 0, 0,\n            // 第五个面 需要注意，颜色渲染是在逆时针方向展示的，如果把这个面冲着立方体里面，那么外面看就是空白的\n            10, 10, 10, 1, 1,\n            10, 0, 10, 0, 1,\n            10, 0, 0, 0, 0,\n\n\n            10f, 0f, 0f, 0, 0,\n            10, 10, 0, 1, 0,\n            10, 10, 10, 1, 1,\n\n\n            // 第六个面\n            0, 0, 0, 0, 0,\n            0, 0, 10, 0, 1,\n            0, 10, 10, 1, 1,\n\n            0, 10, 10, 1, 1,\n            0, 10, 0, 1, 0,\n            0, 0f, 0f, 0, 0,\n    };\n\n    Color[] colors = {\n            Color.BLACK,\n            Color.WHITE,\n            Color.BLUE,\n            Color.CHARTREUSE,\n            Color.YELLOW,\n            Color.FIREBRICK,\n    };\n\n    CameraInputController cameraInputController;\n\n    @Override\n    public void create() {\n\n\n        System.out.println(vertex.length);\n        camera = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n        modelBatch = new ModelBatch();\n        VertexAttribute positionAtt = VertexAttribute.Position();\n//        VertexAttribute colorAtt = VertexAttribute.ColorUnpacked();\n        VertexAttribute texCorrAtt = VertexAttribute.TexCoords(0);\n\n        model = new Model();\n        Mesh mesh = new Mesh(true, 36, 0, positionAtt, texCorrAtt);\n        mesh.setVertices(vertex);\n//        mesh.setIndices();\n//        mesh.setInstanceData()\n\n        Node n1 = new Node();\n\n        TextureAttribute ta = TextureAttribute.createDiffuse(new Texture(\"badlogic.jpg\"));\n        TextureAttribute ta2 = TextureAttribute.createDiffuse(new Texture(Gdx.files.absolute(\"C:\\\\Users\\\\voidvvv\\\\Pictures\\\\asset\\\\enhancer_profile.png\")));\n\n        for (int i = 0; i<6; i++){\n            NodePart nodePart = nodePart_(mesh, 6 * i, colors[i], ta ,ta2 );\n\n            n1.parts.add(nodePart);\n            System.out.println(\"i: \" + i);\n        }\n        model.meshes.add(mesh);\n        model.nodes.add(n1);\n\n        demo = new ModelInstance(model);\n//        demo.transform.scl(1.f).translate(0,0,0);\n\n        camera.position.set(5,6,-20);\n        camera.lookAt(5,5,5);\n        cameraInputController = new CameraInputController(camera);\n        Gdx.input.setInputProcessor(cameraInputController);\n    }\n\n    static NodePart nodePart_(Mesh mesh, int offset, Color color,  TextureAttribute ta , TextureAttribute ta2) {\n        MeshPart mp = new MeshPart();\n        mp.primitiveType = GL30.GL_TRIANGLES;\n        mp.mesh = mesh;\n        mp.offset = offset;\n        mp.size = 6;\n\n        NodePart np = new NodePart(mp, new Material(ColorAttribute.createDiffuse(color),ta , ta2));\n        np.meshPart = mp;\n        return np;\n    }\n    Vector3 tmp = new Vector3();\n    @Override\n    public void render() {\n        camera.update();\n        Gdx.gl.glClearColor(Color.GRAY.r,Color.GRAY.g,Color.GRAY.b,Color.GRAY.a);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);\n\n        Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n        cameraInputController.update();;\n        if (Gdx.input.isKeyPressed(Input.Keys.SPACE)){\n\n            camera.position.set(5,6,-20);\n            camera.lookAt(5,5,5);\n            camera.up.set(0,0,1);\n        }\n\n//        demo.transform.rotate(tmp.set(1,1,1),1.5f);\n\n        modelBatch.begin(camera);\n        Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);\n\n        modelBatch.render(demo);\n        modelBatch.end();\n    }\n}\n\n```\n\n代码使用libgdx内置的moedel类型构建了一个方块原型，设置了vertex顶点数组，给model添加了node，然后node下面添加了一个node part作为渲染对象。\n最后，使用model构建出modelinstatnce，使用model batch对modelInstance渲染。\n\n## Model\nopenGL中，若我们想渲染3d物体，需要一下计算公式：\n![2024-03-09T225319](2024-03-09T225319.png) 我们的Model类就是为了获取Local向量而来的。\n\nModel是一个3d物体的原型。用来表示物体本来的样子。\n我们这里的Model类，存储的是上面Local的内容，可以看到，本质是个向量。我们可以看下其源码:\n```java\npackage com.badlogic.gdx.graphics.g3d;\n\n\n/** A model represents a 3D assets. It stores a hierarchy of nodes. A node has a transform and optionally a graphical part in form\n * of a {@link MeshPart} and {@link Material}. Mesh parts reference subsets of vertices in one of the meshes of the model.\n * Animations can be applied to nodes, to modify their transform (translation, rotation, scale) over time.\n * </p>\n *\n * A model can be rendered by creating a {@link ModelInstance} from it. That instance has an additional transform to position the\n * model in the world, and allows modification of materials and nodes without destroying the original model. The original model is\n * the owner of any meshes and textures, all instances created from the model share these resources. Disposing the model will\n * automatically make all instances invalid!\n * </p>\n *\n * A model is created from {@link ModelData}, which in turn is loaded by a {@link ModelLoader}.\n *\n * @author badlogic, xoppa */\npublic class Model implements Disposable {\n\t/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows\n\t * modification of materials without having to traverse the nodes **/\n\tpublic final Array<Material> materials = new Array();\n\t/** root nodes of the model **/\n\tpublic final Array<Node> nodes = new Array();\n\t/** animations of the model, modifying node transformations **/\n\tpublic final Array<Animation> animations = new Array();\n\t/** the meshes of the model **/\n\tpublic final Array<Mesh> meshes = new Array();\n\t/** parts of meshes, used by nodes that have a graphical representation FIXME not sure if superfluous, stored in Nodes as well,\n\t * could be useful to create bullet meshes **/\n\tpublic final Array<MeshPart> meshParts = new Array();\n\t/** Array of disposable resources like textures or meshes the Model is responsible for disposing **/\n\tprotected final Array<Disposable> disposables = new Array();\n\n\t/** Constructs an empty model. Manual created models do not manage their resources by default. Use\n\t * {@link #manageDisposable(Disposable)} to add resources to be managed by this model. */\n\tpublic Model () {\n\t}\n\n\t/** Constructs a new Model based on the {@link ModelData}. Texture files will be loaded from the internal file storage via an\n\t * {@link FileTextureProvider}.\n\t * @param modelData the {@link ModelData} got from e.g. {@link ModelLoader} */\n\tpublic Model (ModelData modelData) {\n\t\tthis(modelData, new FileTextureProvider());\n\t}\n\n\t/** Constructs a new Model based on the {@link ModelData}.\n\t * @param modelData the {@link ModelData} got from e.g. {@link ModelLoader}\n\t * @param textureProvider the {@link TextureProvider} to use for loading the textures */\n\tpublic Model (ModelData modelData, TextureProvider textureProvider) {\n\t\tload(modelData, textureProvider);\n\t}\n...\n}\n```\n里面存储的内容有 materials（材质），nodes 节点（后面会介绍），Animation 变化动画，Mesh 网格节点。\n\nModel下面层级的关系有点类似：\n![2024-03-10T095248](2024-03-10T095248.png)\nnodepart 包含 mesh part\n\n### materials\n材质，可以理解为我们的3d物体外表是什么样子的，常见的设置比如颜色，图片等等。\n\n### node 节点\n我们的Model存储了很多的node节点，model本身没有local位置信息，只有一些物体原型数据。\n而我们的Node节点，就存储了我们物体的model矩阵信息。可以看源码：\n```java\n\npackage com.badlogic.gdx.graphics.g3d.model;\n\n\n/** A node is part of a hierarchy of Nodes in a {@link Model}. A Node encodes a transform relative to its parents. A Node can have\n * child nodes. Optionally a node can specify a {@link MeshPart} and a {@link Material} to be applied to the mesh part.\n * @author badlogic */\npublic class Node {\n\t/** the id, may be null, FIXME is this unique? **/\n\tpublic String id;\n\t/** Whether this node should inherit the transformation of its parent node, defaults to true. When this flag is false the value\n\t * of {@link #globalTransform} will be the same as the value of {@link #localTransform} causing the transform to be independent\n\t * of its parent transform. */\n\tpublic boolean inheritTransform = true;\n\t/** Whether this node is currently being animated, if so the translation, rotation and scale values are not used. */\n\tpublic boolean isAnimated;\n\t/** the translation, relative to the parent, not modified by animations **/\n\tpublic final Vector3 translation = new Vector3();\n\t/** the rotation, relative to the parent, not modified by animations **/\n\tpublic final Quaternion rotation = new Quaternion(0, 0, 0, 1);\n\t/** the scale, relative to the parent, not modified by animations **/\n\tpublic final Vector3 scale = new Vector3(1, 1, 1);\n\t/** the local transform, based on translation/rotation/scale ({@link #calculateLocalTransform()}) or any applied animation **/\n\tpublic final Matrix4 localTransform = new Matrix4();\n\t/** the global transform, product of local transform and transform of the parent node, calculated via\n\t * {@link #calculateWorldTransform()} **/\n\tpublic final Matrix4 globalTransform = new Matrix4();\n\n\tpublic Array<NodePart> parts = new Array<NodePart>(2);\n\n\tprotected Node parent;\n\tprivate final Array<Node> children = new Array<Node>(2);\n\n}\n```\n可以看到我们的node节点里的的确确定义了transition 位移，rotation 旋转，scale 缩放等矩阵信息。\n我们的model存储了一系列的node集合，每一个node都有自己的local矩阵，这样可以更好更方便的批量渲染我们的数据。\n<div class=\"note info\">类比的话，我个人觉得model就像一个人，而node就像人体上的四肢。每个人的四肢长短大小不一，这样就是model下面的node存在的意义。但在代码层面，我个人人为仅仅是方便我们使用而已</div>\n\n#### NodePart\nNodePart是Node下面更子一级的东西。我们已经知道，node节点已经存储了local矩阵信息，但是我们还需要知道我们物体原本的顶点数组，这样我们才能知道怎么渲染这个物体。\nNodepart就是node下面一系列包含顶点数组的类的集合。就好比我们的手是跟着胳膊动的，但是我们手上分别有五个手指，是各自的样子。\nNodePart下面包含 material材质，MeshPart 网格部分数据，\n材质比较好理解，我们node下面的每一个part都可能有不同的渲染需求，比如一个立方体，每一个面都想渲染不同颜色。\nMeshPart，顾名思义，是Mesh的一部分，这个类里面存放着的是Mesh网格数据，以及当前noded part所需要这个网格的区域，用offset和size标识。\n\n### Mesh\nMesh网格，这里面存放的就是我们的顶点数组，还有索引数组。一个model可以有许多mesh，可以分给不同的node（node part）来读取渲染。\n\n\n\n# render\n渲染这部分，底层就是OpenGL，使用shader，渲染顶点数组对象。但是Libgdx封装了很多实用的功能，所以我决定从源码开始看.\n## ModelBatch\nModelBatch 是libgdx为我们准备的渲染3d物体的一个批处理器。想要获取它的对象非常简单，我们可以直接new。\n我们可以看到这个类有一些render方法,render方法有非常多的重载，我只想来详细看下这个render方法：\n```java\n// 因为了解这个方法就足以了解别的render方法了\n\tpublic void render (final RenderableProvider renderableProvider) {\n\t\tfinal int offset = renderables.size;\n\t\trenderableProvider.getRenderables(renderables, renderablesPool);\n\t\tfor (int i = offset; i < renderables.size; i++) {\n\t\t\tRenderable renderable = renderables.get(i);\n\t\t\trenderable.shader = shaderProvider.getShader(renderable);\n\t\t}\n\t}\n```\n这个方法做了以下几件事：\n1. 方法需要传入一个RenderableProvider\n2. 使用传入的RenderableProvider，配合本身内部的renderablesPool对象池，生成renderable对象放在我们当前的batch类中\n3. 遍历所有renderable对象，为其设置shader\n\n其中，RenderableProvider是一个接口。接口中只有一个抽象方法:\n```java\n\tpublic void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool);\n```\n我们看一下它的其中一个实现类：ModelInstance的实现\n```java\n\tpublic void getRenderables (Array<Renderable> renderables, Pool<Renderable> pool) {\n\t\tfor (Node node : nodes) {\n\t\t\tgetRenderables(node, renderables, pool);\n\t\t}\n\t}\n```\n这里可以看到就是把当前model实例中的node全部拿来遍历，然后为每个node生成renderable。再往下:\n```java\n\tprotected void getRenderables (Node node, Array<Renderable> renderables, Pool<Renderable> pool) {\n\t\tif (node.parts.size > 0) {\n\t\t\tfor (NodePart nodePart : node.parts) {\n\t\t\t\tif (nodePart.enabled) renderables.add(getRenderable(pool.obtain(), node, nodePart));\n\t\t\t}\n\t\t}\n\n\t\tfor (Node child : node.getChildren()) {\n\t\t\tgetRenderables(child, renderables, pool);\n\t\t}\n\t}\n```\n对于当前node下的每一个node part，都会从我们的rederable对象池中获取一个renderable，作为其真正的到渲染物。\n然后，每一个node part会把自身包含的material以及mesh part 绑定到这个renderable中，来进行渲染。\n\n最后真正的渲染方法，在:\n```java\nmodelBatch.end();\n```\nend方法就是结束一个批次，来将之前生成的所有renderable来用对应的shader进行渲染。\n\n嗯，就先这样把\n","slug":"opengl_java_3d","published":1,"updated":"2025-03-28T02:05:16.385Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7u002w1wu13obb07oy","content":"<p><img src=\"/2024/03/09/opengl_java_3d/libgdx_logo.svg\" alt=\"logo\"><br>作为一个java开发，还是java用得顺手<br>按照前面的学习，试着学习用LibGDX封装好的API来渲染一个3d物体，同时分析libgdx封装的3d渲染源码</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Libgdx\"><a href=\"#Libgdx\" class=\"headerlink\" title=\"Libgdx\"></a>Libgdx</h1><p>LibGDX游戏引擎的基本使用参考这里。<br>引擎中，关于3d的渲染部分，全部在<code>com.badlogic.gdx.graphics.g3d</code>包中，把很多OpenGL底层操作全部封装了，所以，如果我们想要直接看到libGDX渲染3d的功能效果，还是很方便的.其中有几个概念，是libGDX封装便于操作的：</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.voidvvv.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Game;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Gdx;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Input;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.MeshPart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.Node;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.NodePart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.utils.CameraInputController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.IndexArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.IndexData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.VertexArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.VertexData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.math.Matrix4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.math.Vector3;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.Array;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.ScreenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Game</span> &#123;</span><br><span class=\"line\">    Model model;</span><br><span class=\"line\">    ModelBatch modelBatch;</span><br><span class=\"line\">    ModelInstance demo;</span><br><span class=\"line\">    PerspectiveCamera camera;</span><br><span class=\"line\">    <span class=\"type\">float</span>[] vertex = &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一个面</span></span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第二个面</span></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第三个面</span></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第四个面</span></span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第五个面 需要注意，颜色渲染是在逆时针方向展示的，如果把这个面冲着立方体里面，那么外面看就是空白的</span></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 第六个面</span></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Color[] colors = &#123;</span><br><span class=\"line\">            Color.BLACK,</span><br><span class=\"line\">            Color.WHITE,</span><br><span class=\"line\">            Color.BLUE,</span><br><span class=\"line\">            Color.CHARTREUSE,</span><br><span class=\"line\">            Color.YELLOW,</span><br><span class=\"line\">            Color.FIREBRICK,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    CameraInputController cameraInputController;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(vertex.length);</span><br><span class=\"line\">        camera = <span class=\"keyword\">new</span> <span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">67</span>, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());</span><br><span class=\"line\">        modelBatch = <span class=\"keyword\">new</span> <span class=\"title class_\">ModelBatch</span>();</span><br><span class=\"line\">        <span class=\"type\">VertexAttribute</span> <span class=\"variable\">positionAtt</span> <span class=\"operator\">=</span> VertexAttribute.Position();</span><br><span class=\"line\"><span class=\"comment\">//        VertexAttribute colorAtt = VertexAttribute.ColorUnpacked();</span></span><br><span class=\"line\">        <span class=\"type\">VertexAttribute</span> <span class=\"variable\">texCorrAtt</span> <span class=\"operator\">=</span> VertexAttribute.TexCoords(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"title class_\">Model</span>();</span><br><span class=\"line\">        <span class=\"type\">Mesh</span> <span class=\"variable\">mesh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mesh</span>(<span class=\"literal\">true</span>, <span class=\"number\">36</span>, <span class=\"number\">0</span>, positionAtt, texCorrAtt);</span><br><span class=\"line\">        mesh.setVertices(vertex);</span><br><span class=\"line\"><span class=\"comment\">//        mesh.setIndices();</span></span><br><span class=\"line\"><span class=\"comment\">//        mesh.setInstanceData()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TextureAttribute</span> <span class=\"variable\">ta</span> <span class=\"operator\">=</span> TextureAttribute.createDiffuse(<span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">TextureAttribute</span> <span class=\"variable\">ta2</span> <span class=\"operator\">=</span> TextureAttribute.createDiffuse(<span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(Gdx.files.absolute(<span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\asset\\\\enhancer_profile.png&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i&lt;<span class=\"number\">6</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">NodePart</span> <span class=\"variable\">nodePart</span> <span class=\"operator\">=</span> nodePart_(mesh, <span class=\"number\">6</span> * i, colors[i], ta ,ta2 );</span><br><span class=\"line\"></span><br><span class=\"line\">            n1.parts.add(nodePart);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        model.meshes.add(mesh);</span><br><span class=\"line\">        model.nodes.add(n1);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo = <span class=\"keyword\">new</span> <span class=\"title class_\">ModelInstance</span>(model);</span><br><span class=\"line\"><span class=\"comment\">//        demo.transform.scl(1.f).translate(0,0,0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        camera.position.set(<span class=\"number\">5</span>,<span class=\"number\">6</span>,-<span class=\"number\">20</span>);</span><br><span class=\"line\">        camera.lookAt(<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">        cameraInputController = <span class=\"keyword\">new</span> <span class=\"title class_\">CameraInputController</span>(camera);</span><br><span class=\"line\">        Gdx.input.setInputProcessor(cameraInputController);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> NodePart <span class=\"title function_\">nodePart_</span><span class=\"params\">(Mesh mesh, <span class=\"type\">int</span> offset, Color color,  TextureAttribute ta , TextureAttribute ta2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MeshPart</span> <span class=\"variable\">mp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MeshPart</span>();</span><br><span class=\"line\">        mp.primitiveType = GL30.GL_TRIANGLES;</span><br><span class=\"line\">        mp.mesh = mesh;</span><br><span class=\"line\">        mp.offset = offset;</span><br><span class=\"line\">        mp.size = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NodePart</span> <span class=\"variable\">np</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NodePart</span>(mp, <span class=\"keyword\">new</span> <span class=\"title class_\">Material</span>(ColorAttribute.createDiffuse(color),ta , ta2));</span><br><span class=\"line\">        np.meshPart = mp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">Vector3</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        camera.update();</span><br><span class=\"line\">        Gdx.gl.glClearColor(Color.GRAY.r,Color.GRAY.g,Color.GRAY.b,Color.GRAY.a);</span><br><span class=\"line\">        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">        Gdx.gl.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());</span><br><span class=\"line\">        cameraInputController.update();;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Gdx.input.isKeyPressed(Input.Keys.SPACE))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            camera.position.set(<span class=\"number\">5</span>,<span class=\"number\">6</span>,-<span class=\"number\">20</span>);</span><br><span class=\"line\">            camera.lookAt(<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">            camera.up.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        demo.transform.rotate(tmp.set(1,1,1),1.5f);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        modelBatch.begin(camera);</span><br><span class=\"line\">        Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\">        modelBatch.render(demo);</span><br><span class=\"line\">        modelBatch.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>代码使用libgdx内置的moedel类型构建了一个方块原型，设置了vertex顶点数组，给model添加了node，然后node下面添加了一个node part作为渲染对象。<br>最后，使用model构建出modelinstatnce，使用model batch对modelInstance渲染。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>openGL中，若我们想渲染3d物体，需要一下计算公式：<br><img src=\"/2024/03/09/opengl_java_3d/2024-03-09T225319.png\" alt=\"2024-03-09T225319\"> 我们的Model类就是为了获取Local向量而来的。</p>\n<p>Model是一个3d物体的原型。用来表示物体本来的样子。<br>我们这里的Model类，存储的是上面Local的内容，可以看到，本质是个向量。我们可以看下其源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.badlogic.gdx.graphics.g3d;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A model represents a 3D assets. It stores a hierarchy of nodes. A node has a transform and optionally a graphical part in form</span></span><br><span class=\"line\"><span class=\"comment\"> * of a &#123;<span class=\"doctag\">@link</span> MeshPart&#125; and &#123;<span class=\"doctag\">@link</span> Material&#125;. Mesh parts reference subsets of vertices in one of the meshes of the model.</span></span><br><span class=\"line\"><span class=\"comment\"> * Animations can be applied to nodes, to modify their transform (translation, rotation, scale) over time.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A model can be rendered by creating a &#123;<span class=\"doctag\">@link</span> ModelInstance&#125; from it. That instance has an additional transform to position the</span></span><br><span class=\"line\"><span class=\"comment\"> * model in the world, and allows modification of materials and nodes without destroying the original model. The original model is</span></span><br><span class=\"line\"><span class=\"comment\"> * the owner of any meshes and textures, all instances created from the model share these resources. Disposing the model will</span></span><br><span class=\"line\"><span class=\"comment\"> * automatically make all instances invalid!</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A model is created from &#123;<span class=\"doctag\">@link</span> ModelData&#125;, which in turn is loaded by a &#123;<span class=\"doctag\">@link</span> ModelLoader&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> badlogic, xoppa */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Model</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Disposable</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows</span></span><br><span class=\"line\"><span class=\"comment\">\t * modification of materials without having to traverse the nodes **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Material&gt; materials = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** root nodes of the model **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Node&gt; nodes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** animations of the model, modifying node transformations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Animation&gt; animations = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the meshes of the model **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Mesh&gt; meshes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** parts of meshes, used by nodes that have a graphical representation FIXME not sure if superfluous, stored in Nodes as well,</span></span><br><span class=\"line\"><span class=\"comment\">\t * could be useful to create bullet meshes **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;MeshPart&gt; meshParts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** Array of disposable resources like textures or meshes the Model is responsible for disposing **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Array&lt;Disposable&gt; disposables = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs an empty model. Manual created models do not manage their resources by default. Use</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #manageDisposable(Disposable)&#125; to add resources to be managed by this model. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs a new Model based on the &#123;<span class=\"doctag\">@link</span> ModelData&#125;. Texture files will be loaded from the internal file storage via an</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> FileTextureProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> modelData the &#123;<span class=\"doctag\">@link</span> ModelData&#125; got from e.g. &#123;<span class=\"doctag\">@link</span> ModelLoader&#125; */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">(ModelData modelData)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(modelData, <span class=\"keyword\">new</span> <span class=\"title class_\">FileTextureProvider</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs a new Model based on the &#123;<span class=\"doctag\">@link</span> ModelData&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> modelData the &#123;<span class=\"doctag\">@link</span> ModelData&#125; got from e.g. &#123;<span class=\"doctag\">@link</span> ModelLoader&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> textureProvider the &#123;<span class=\"doctag\">@link</span> TextureProvider&#125; to use for loading the textures */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">(ModelData modelData, TextureProvider textureProvider)</span> &#123;</span><br><span class=\"line\">\t\tload(modelData, textureProvider);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>里面存储的内容有 materials（材质），nodes 节点（后面会介绍），Animation 变化动画，Mesh 网格节点。</p>\n<p>Model下面层级的关系有点类似：<br><img src=\"/2024/03/09/opengl_java_3d/2024-03-10T095248.png\" alt=\"2024-03-10T095248\"><br>nodepart 包含 mesh part</p>\n<h3 id=\"materials\"><a href=\"#materials\" class=\"headerlink\" title=\"materials\"></a>materials</h3><p>材质，可以理解为我们的3d物体外表是什么样子的，常见的设置比如颜色，图片等等。</p>\n<h3 id=\"node-节点\"><a href=\"#node-节点\" class=\"headerlink\" title=\"node 节点\"></a>node 节点</h3><p>我们的Model存储了很多的node节点，model本身没有local位置信息，只有一些物体原型数据。<br>而我们的Node节点，就存储了我们物体的model矩阵信息。可以看源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.badlogic.gdx.graphics.g3d.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A node is part of a hierarchy of Nodes in a &#123;<span class=\"doctag\">@link</span> Model&#125;. A Node encodes a transform relative to its parents. A Node can have</span></span><br><span class=\"line\"><span class=\"comment\"> * child nodes. Optionally a node can specify a &#123;<span class=\"doctag\">@link</span> MeshPart&#125; and a &#123;<span class=\"doctag\">@link</span> Material&#125; to be applied to the mesh part.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> badlogic */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** the id, may be null, FIXME is this unique? **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String id;</span><br><span class=\"line\">\t<span class=\"comment\">/** Whether this node should inherit the transformation of its parent node, defaults to true. When this flag is false the value</span></span><br><span class=\"line\"><span class=\"comment\">\t * of &#123;<span class=\"doctag\">@link</span> #globalTransform&#125; will be the same as the value of &#123;<span class=\"doctag\">@link</span> #localTransform&#125; causing the transform to be independent</span></span><br><span class=\"line\"><span class=\"comment\">\t * of its parent transform. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"variable\">inheritTransform</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/** Whether this node is currently being animated, if so the translation, rotation and scale values are not used. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isAnimated;</span><br><span class=\"line\">\t<span class=\"comment\">/** the translation, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Vector3</span> <span class=\"variable\">translation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the rotation, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Quaternion</span> <span class=\"variable\">rotation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Quaternion</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/** the scale, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Vector3</span> <span class=\"variable\">scale</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/** the local transform, based on translation/rotation/scale (&#123;<span class=\"doctag\">@link</span> #calculateLocalTransform()&#125;) or any applied animation **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Matrix4</span> <span class=\"variable\">localTransform</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix4</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the global transform, product of local transform and transform of the parent node, calculated via</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #calculateWorldTransform()&#125; **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Matrix4</span> <span class=\"variable\">globalTransform</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Array&lt;NodePart&gt; parts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>&lt;NodePart&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Node parent;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Array&lt;Node&gt; children = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>&lt;Node&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我们的node节点里的的确确定义了transition 位移，rotation 旋转，scale 缩放等矩阵信息。<br>我们的model存储了一系列的node集合，每一个node都有自己的local矩阵，这样可以更好更方便的批量渲染我们的数据。</p>\n<div class=\"note info\">类比的话，我个人觉得model就像一个人，而node就像人体上的四肢。每个人的四肢长短大小不一，这样就是model下面的node存在的意义。但在代码层面，我个人人为仅仅是方便我们使用而已</div>\n\n<h4 id=\"NodePart\"><a href=\"#NodePart\" class=\"headerlink\" title=\"NodePart\"></a>NodePart</h4><p>NodePart是Node下面更子一级的东西。我们已经知道，node节点已经存储了local矩阵信息，但是我们还需要知道我们物体原本的顶点数组，这样我们才能知道怎么渲染这个物体。<br>Nodepart就是node下面一系列包含顶点数组的类的集合。就好比我们的手是跟着胳膊动的，但是我们手上分别有五个手指，是各自的样子。<br>NodePart下面包含 material材质，MeshPart 网格部分数据，<br>材质比较好理解，我们node下面的每一个part都可能有不同的渲染需求，比如一个立方体，每一个面都想渲染不同颜色。<br>MeshPart，顾名思义，是Mesh的一部分，这个类里面存放着的是Mesh网格数据，以及当前noded part所需要这个网格的区域，用offset和size标识。</p>\n<h3 id=\"Mesh\"><a href=\"#Mesh\" class=\"headerlink\" title=\"Mesh\"></a>Mesh</h3><p>Mesh网格，这里面存放的就是我们的顶点数组，还有索引数组。一个model可以有许多mesh，可以分给不同的node（node part）来读取渲染。</p>\n<h1 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h1><p>渲染这部分，底层就是OpenGL，使用shader，渲染顶点数组对象。但是Libgdx封装了很多实用的功能，所以我决定从源码开始看.</p>\n<h2 id=\"ModelBatch\"><a href=\"#ModelBatch\" class=\"headerlink\" title=\"ModelBatch\"></a>ModelBatch</h2><p>ModelBatch 是libgdx为我们准备的渲染3d物体的一个批处理器。想要获取它的对象非常简单，我们可以直接new。<br>我们可以看到这个类有一些render方法,render方法有非常多的重载，我只想来详细看下这个render方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为了解这个方法就足以了解别的render方法了</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">(<span class=\"keyword\">final</span> RenderableProvider renderableProvider)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> renderables.size;</span><br><span class=\"line\">\t\trenderableProvider.getRenderables(renderables, renderablesPool);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> offset; i &lt; renderables.size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Renderable</span> <span class=\"variable\">renderable</span> <span class=\"operator\">=</span> renderables.get(i);</span><br><span class=\"line\">\t\t\trenderable.shader = shaderProvider.getShader(renderable);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法做了以下几件事：</p>\n<ol>\n<li>方法需要传入一个RenderableProvider</li>\n<li>使用传入的RenderableProvider，配合本身内部的renderablesPool对象池，生成renderable对象放在我们当前的batch类中</li>\n<li>遍历所有renderable对象，为其设置shader</li>\n</ol>\n<p>其中，RenderableProvider是一个接口。接口中只有一个抽象方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span>;</span><br></pre></td></tr></table></figure>\n<p>我们看一下它的其中一个实现类：ModelInstance的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node node : nodes) &#123;</span><br><span class=\"line\">\t\tgetRenderables(node, renderables, pool);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看到就是把当前model实例中的node全部拿来遍历，然后为每个node生成renderable。再往下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Node node, Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node.parts.size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (NodePart nodePart : node.parts) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodePart.enabled) renderables.add(getRenderable(pool.obtain(), node, nodePart));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node child : node.getChildren()) &#123;</span><br><span class=\"line\">\t\tgetRenderables(child, renderables, pool);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于当前node下的每一个node part，都会从我们的rederable对象池中获取一个renderable，作为其真正的到渲染物。<br>然后，每一个node part会把自身包含的material以及mesh part 绑定到这个renderable中，来进行渲染。</p>\n<p>最后真正的渲染方法，在:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modelBatch.end();</span><br></pre></td></tr></table></figure>\n<p>end方法就是结束一个批次，来将之前生成的所有renderable来用对应的shader进行渲染。</p>\n<p>嗯，就先这样把</p>\n","length":2552,"excerpt":"<p><img src=\"/2024/03/09/opengl_java_3d/libgdx_logo.svg\" alt=\"logo\"><br>作为一个java开发，还是java用得顺手<br>按照前面的学习，试着学习用LibGDX封装好的API来渲染一个3d物体，同时分析libgdx封装的3d渲染源码</p>","more":"<h1 id=\"Libgdx\"><a href=\"#Libgdx\" class=\"headerlink\" title=\"Libgdx\"></a>Libgdx</h1><p>LibGDX游戏引擎的基本使用参考这里。<br>引擎中，关于3d的渲染部分，全部在<code>com.badlogic.gdx.graphics.g3d</code>包中，把很多OpenGL底层操作全部封装了，所以，如果我们想要直接看到libGDX渲染3d的功能效果，还是很方便的.其中有几个概念，是libGDX封装便于操作的：</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.voidvvv.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Game;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Gdx;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.Input;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.MeshPart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.Node;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.NodePart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.utils.CameraInputController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.IndexArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.IndexData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.VertexArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.graphics.glutils.VertexData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.math.Matrix4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.math.Vector3;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.Array;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.badlogic.gdx.utils.ScreenUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Game</span> &#123;</span><br><span class=\"line\">    Model model;</span><br><span class=\"line\">    ModelBatch modelBatch;</span><br><span class=\"line\">    ModelInstance demo;</span><br><span class=\"line\">    PerspectiveCamera camera;</span><br><span class=\"line\">    <span class=\"type\">float</span>[] vertex = &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一个面</span></span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10.f</span>, <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第二个面</span></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第三个面</span></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第四个面</span></span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0.f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 第五个面 需要注意，颜色渲染是在逆时针方向展示的，如果把这个面冲着立方体里面，那么外面看就是空白的</span></span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">10f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 第六个面</span></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Color[] colors = &#123;</span><br><span class=\"line\">            Color.BLACK,</span><br><span class=\"line\">            Color.WHITE,</span><br><span class=\"line\">            Color.BLUE,</span><br><span class=\"line\">            Color.CHARTREUSE,</span><br><span class=\"line\">            Color.YELLOW,</span><br><span class=\"line\">            Color.FIREBRICK,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    CameraInputController cameraInputController;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(vertex.length);</span><br><span class=\"line\">        camera = <span class=\"keyword\">new</span> <span class=\"title class_\">PerspectiveCamera</span>(<span class=\"number\">67</span>, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());</span><br><span class=\"line\">        modelBatch = <span class=\"keyword\">new</span> <span class=\"title class_\">ModelBatch</span>();</span><br><span class=\"line\">        <span class=\"type\">VertexAttribute</span> <span class=\"variable\">positionAtt</span> <span class=\"operator\">=</span> VertexAttribute.Position();</span><br><span class=\"line\"><span class=\"comment\">//        VertexAttribute colorAtt = VertexAttribute.ColorUnpacked();</span></span><br><span class=\"line\">        <span class=\"type\">VertexAttribute</span> <span class=\"variable\">texCorrAtt</span> <span class=\"operator\">=</span> VertexAttribute.TexCoords(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        model = <span class=\"keyword\">new</span> <span class=\"title class_\">Model</span>();</span><br><span class=\"line\">        <span class=\"type\">Mesh</span> <span class=\"variable\">mesh</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mesh</span>(<span class=\"literal\">true</span>, <span class=\"number\">36</span>, <span class=\"number\">0</span>, positionAtt, texCorrAtt);</span><br><span class=\"line\">        mesh.setVertices(vertex);</span><br><span class=\"line\"><span class=\"comment\">//        mesh.setIndices();</span></span><br><span class=\"line\"><span class=\"comment\">//        mesh.setInstanceData()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TextureAttribute</span> <span class=\"variable\">ta</span> <span class=\"operator\">=</span> TextureAttribute.createDiffuse(<span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(<span class=\"string\">&quot;badlogic.jpg&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">TextureAttribute</span> <span class=\"variable\">ta2</span> <span class=\"operator\">=</span> TextureAttribute.createDiffuse(<span class=\"keyword\">new</span> <span class=\"title class_\">Texture</span>(Gdx.files.absolute(<span class=\"string\">&quot;C:\\\\Users\\\\voidvvv\\\\Pictures\\\\asset\\\\enhancer_profile.png&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i&lt;<span class=\"number\">6</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">NodePart</span> <span class=\"variable\">nodePart</span> <span class=\"operator\">=</span> nodePart_(mesh, <span class=\"number\">6</span> * i, colors[i], ta ,ta2 );</span><br><span class=\"line\"></span><br><span class=\"line\">            n1.parts.add(nodePart);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        model.meshes.add(mesh);</span><br><span class=\"line\">        model.nodes.add(n1);</span><br><span class=\"line\"></span><br><span class=\"line\">        demo = <span class=\"keyword\">new</span> <span class=\"title class_\">ModelInstance</span>(model);</span><br><span class=\"line\"><span class=\"comment\">//        demo.transform.scl(1.f).translate(0,0,0);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        camera.position.set(<span class=\"number\">5</span>,<span class=\"number\">6</span>,-<span class=\"number\">20</span>);</span><br><span class=\"line\">        camera.lookAt(<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">        cameraInputController = <span class=\"keyword\">new</span> <span class=\"title class_\">CameraInputController</span>(camera);</span><br><span class=\"line\">        Gdx.input.setInputProcessor(cameraInputController);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> NodePart <span class=\"title function_\">nodePart_</span><span class=\"params\">(Mesh mesh, <span class=\"type\">int</span> offset, Color color,  TextureAttribute ta , TextureAttribute ta2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MeshPart</span> <span class=\"variable\">mp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MeshPart</span>();</span><br><span class=\"line\">        mp.primitiveType = GL30.GL_TRIANGLES;</span><br><span class=\"line\">        mp.mesh = mesh;</span><br><span class=\"line\">        mp.offset = offset;</span><br><span class=\"line\">        mp.size = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NodePart</span> <span class=\"variable\">np</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NodePart</span>(mp, <span class=\"keyword\">new</span> <span class=\"title class_\">Material</span>(ColorAttribute.createDiffuse(color),ta , ta2));</span><br><span class=\"line\">        np.meshPart = mp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">Vector3</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        camera.update();</span><br><span class=\"line\">        Gdx.gl.glClearColor(Color.GRAY.r,Color.GRAY.g,Color.GRAY.b,Color.GRAY.a);</span><br><span class=\"line\">        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">        Gdx.gl.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());</span><br><span class=\"line\">        cameraInputController.update();;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Gdx.input.isKeyPressed(Input.Keys.SPACE))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            camera.position.set(<span class=\"number\">5</span>,<span class=\"number\">6</span>,-<span class=\"number\">20</span>);</span><br><span class=\"line\">            camera.lookAt(<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">            camera.up.set(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        demo.transform.rotate(tmp.set(1,1,1),1.5f);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        modelBatch.begin(camera);</span><br><span class=\"line\">        Gdx.gl.glEnable(GL20.GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\">        modelBatch.render(demo);</span><br><span class=\"line\">        modelBatch.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>代码使用libgdx内置的moedel类型构建了一个方块原型，设置了vertex顶点数组，给model添加了node，然后node下面添加了一个node part作为渲染对象。<br>最后，使用model构建出modelinstatnce，使用model batch对modelInstance渲染。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>openGL中，若我们想渲染3d物体，需要一下计算公式：<br><img src=\"/2024/03/09/opengl_java_3d/2024-03-09T225319.png\" alt=\"2024-03-09T225319\"> 我们的Model类就是为了获取Local向量而来的。</p>\n<p>Model是一个3d物体的原型。用来表示物体本来的样子。<br>我们这里的Model类，存储的是上面Local的内容，可以看到，本质是个向量。我们可以看下其源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.badlogic.gdx.graphics.g3d;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A model represents a 3D assets. It stores a hierarchy of nodes. A node has a transform and optionally a graphical part in form</span></span><br><span class=\"line\"><span class=\"comment\"> * of a &#123;<span class=\"doctag\">@link</span> MeshPart&#125; and &#123;<span class=\"doctag\">@link</span> Material&#125;. Mesh parts reference subsets of vertices in one of the meshes of the model.</span></span><br><span class=\"line\"><span class=\"comment\"> * Animations can be applied to nodes, to modify their transform (translation, rotation, scale) over time.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A model can be rendered by creating a &#123;<span class=\"doctag\">@link</span> ModelInstance&#125; from it. That instance has an additional transform to position the</span></span><br><span class=\"line\"><span class=\"comment\"> * model in the world, and allows modification of materials and nodes without destroying the original model. The original model is</span></span><br><span class=\"line\"><span class=\"comment\"> * the owner of any meshes and textures, all instances created from the model share these resources. Disposing the model will</span></span><br><span class=\"line\"><span class=\"comment\"> * automatically make all instances invalid!</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A model is created from &#123;<span class=\"doctag\">@link</span> ModelData&#125;, which in turn is loaded by a &#123;<span class=\"doctag\">@link</span> ModelLoader&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> badlogic, xoppa */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Model</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Disposable</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** the materials of the model, used by nodes that have a graphical representation FIXME not sure if superfluous, allows</span></span><br><span class=\"line\"><span class=\"comment\">\t * modification of materials without having to traverse the nodes **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Material&gt; materials = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** root nodes of the model **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Node&gt; nodes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** animations of the model, modifying node transformations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Animation&gt; animations = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the meshes of the model **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;Mesh&gt; meshes = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** parts of meshes, used by nodes that have a graphical representation FIXME not sure if superfluous, stored in Nodes as well,</span></span><br><span class=\"line\"><span class=\"comment\">\t * could be useful to create bullet meshes **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Array&lt;MeshPart&gt; meshParts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** Array of disposable resources like textures or meshes the Model is responsible for disposing **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Array&lt;Disposable&gt; disposables = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs an empty model. Manual created models do not manage their resources by default. Use</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #manageDisposable(Disposable)&#125; to add resources to be managed by this model. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs a new Model based on the &#123;<span class=\"doctag\">@link</span> ModelData&#125;. Texture files will be loaded from the internal file storage via an</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> FileTextureProvider&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> modelData the &#123;<span class=\"doctag\">@link</span> ModelData&#125; got from e.g. &#123;<span class=\"doctag\">@link</span> ModelLoader&#125; */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">(ModelData modelData)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(modelData, <span class=\"keyword\">new</span> <span class=\"title class_\">FileTextureProvider</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Constructs a new Model based on the &#123;<span class=\"doctag\">@link</span> ModelData&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> modelData the &#123;<span class=\"doctag\">@link</span> ModelData&#125; got from e.g. &#123;<span class=\"doctag\">@link</span> ModelLoader&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> textureProvider the &#123;<span class=\"doctag\">@link</span> TextureProvider&#125; to use for loading the textures */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Model</span> <span class=\"params\">(ModelData modelData, TextureProvider textureProvider)</span> &#123;</span><br><span class=\"line\">\t\tload(modelData, textureProvider);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>里面存储的内容有 materials（材质），nodes 节点（后面会介绍），Animation 变化动画，Mesh 网格节点。</p>\n<p>Model下面层级的关系有点类似：<br><img src=\"/2024/03/09/opengl_java_3d/2024-03-10T095248.png\" alt=\"2024-03-10T095248\"><br>nodepart 包含 mesh part</p>\n<h3 id=\"materials\"><a href=\"#materials\" class=\"headerlink\" title=\"materials\"></a>materials</h3><p>材质，可以理解为我们的3d物体外表是什么样子的，常见的设置比如颜色，图片等等。</p>\n<h3 id=\"node-节点\"><a href=\"#node-节点\" class=\"headerlink\" title=\"node 节点\"></a>node 节点</h3><p>我们的Model存储了很多的node节点，model本身没有local位置信息，只有一些物体原型数据。<br>而我们的Node节点，就存储了我们物体的model矩阵信息。可以看源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.badlogic.gdx.graphics.g3d.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A node is part of a hierarchy of Nodes in a &#123;<span class=\"doctag\">@link</span> Model&#125;. A Node encodes a transform relative to its parents. A Node can have</span></span><br><span class=\"line\"><span class=\"comment\"> * child nodes. Optionally a node can specify a &#123;<span class=\"doctag\">@link</span> MeshPart&#125; and a &#123;<span class=\"doctag\">@link</span> Material&#125; to be applied to the mesh part.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> badlogic */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** the id, may be null, FIXME is this unique? **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String id;</span><br><span class=\"line\">\t<span class=\"comment\">/** Whether this node should inherit the transformation of its parent node, defaults to true. When this flag is false the value</span></span><br><span class=\"line\"><span class=\"comment\">\t * of &#123;<span class=\"doctag\">@link</span> #globalTransform&#125; will be the same as the value of &#123;<span class=\"doctag\">@link</span> #localTransform&#125; causing the transform to be independent</span></span><br><span class=\"line\"><span class=\"comment\">\t * of its parent transform. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"variable\">inheritTransform</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/** Whether this node is currently being animated, if so the translation, rotation and scale values are not used. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> isAnimated;</span><br><span class=\"line\">\t<span class=\"comment\">/** the translation, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Vector3</span> <span class=\"variable\">translation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the rotation, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Quaternion</span> <span class=\"variable\">rotation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Quaternion</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/** the scale, relative to the parent, not modified by animations **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Vector3</span> <span class=\"variable\">scale</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vector3</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">/** the local transform, based on translation/rotation/scale (&#123;<span class=\"doctag\">@link</span> #calculateLocalTransform()&#125;) or any applied animation **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Matrix4</span> <span class=\"variable\">localTransform</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix4</span>();</span><br><span class=\"line\">\t<span class=\"comment\">/** the global transform, product of local transform and transform of the parent node, calculated via</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #calculateWorldTransform()&#125; **/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">Matrix4</span> <span class=\"variable\">globalTransform</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Matrix4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Array&lt;NodePart&gt; parts = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>&lt;NodePart&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Node parent;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Array&lt;Node&gt; children = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>&lt;Node&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我们的node节点里的的确确定义了transition 位移，rotation 旋转，scale 缩放等矩阵信息。<br>我们的model存储了一系列的node集合，每一个node都有自己的local矩阵，这样可以更好更方便的批量渲染我们的数据。</p>\n<div class=\"note info\">类比的话，我个人觉得model就像一个人，而node就像人体上的四肢。每个人的四肢长短大小不一，这样就是model下面的node存在的意义。但在代码层面，我个人人为仅仅是方便我们使用而已</div>\n\n<h4 id=\"NodePart\"><a href=\"#NodePart\" class=\"headerlink\" title=\"NodePart\"></a>NodePart</h4><p>NodePart是Node下面更子一级的东西。我们已经知道，node节点已经存储了local矩阵信息，但是我们还需要知道我们物体原本的顶点数组，这样我们才能知道怎么渲染这个物体。<br>Nodepart就是node下面一系列包含顶点数组的类的集合。就好比我们的手是跟着胳膊动的，但是我们手上分别有五个手指，是各自的样子。<br>NodePart下面包含 material材质，MeshPart 网格部分数据，<br>材质比较好理解，我们node下面的每一个part都可能有不同的渲染需求，比如一个立方体，每一个面都想渲染不同颜色。<br>MeshPart，顾名思义，是Mesh的一部分，这个类里面存放着的是Mesh网格数据，以及当前noded part所需要这个网格的区域，用offset和size标识。</p>\n<h3 id=\"Mesh\"><a href=\"#Mesh\" class=\"headerlink\" title=\"Mesh\"></a>Mesh</h3><p>Mesh网格，这里面存放的就是我们的顶点数组，还有索引数组。一个model可以有许多mesh，可以分给不同的node（node part）来读取渲染。</p>\n<h1 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h1><p>渲染这部分，底层就是OpenGL，使用shader，渲染顶点数组对象。但是Libgdx封装了很多实用的功能，所以我决定从源码开始看.</p>\n<h2 id=\"ModelBatch\"><a href=\"#ModelBatch\" class=\"headerlink\" title=\"ModelBatch\"></a>ModelBatch</h2><p>ModelBatch 是libgdx为我们准备的渲染3d物体的一个批处理器。想要获取它的对象非常简单，我们可以直接new。<br>我们可以看到这个类有一些render方法,render方法有非常多的重载，我只想来详细看下这个render方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为了解这个方法就足以了解别的render方法了</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span> <span class=\"params\">(<span class=\"keyword\">final</span> RenderableProvider renderableProvider)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> renderables.size;</span><br><span class=\"line\">\t\trenderableProvider.getRenderables(renderables, renderablesPool);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> offset; i &lt; renderables.size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Renderable</span> <span class=\"variable\">renderable</span> <span class=\"operator\">=</span> renderables.get(i);</span><br><span class=\"line\">\t\t\trenderable.shader = shaderProvider.getShader(renderable);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法做了以下几件事：</p>\n<ol>\n<li>方法需要传入一个RenderableProvider</li>\n<li>使用传入的RenderableProvider，配合本身内部的renderablesPool对象池，生成renderable对象放在我们当前的batch类中</li>\n<li>遍历所有renderable对象，为其设置shader</li>\n</ol>\n<p>其中，RenderableProvider是一个接口。接口中只有一个抽象方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span>;</span><br></pre></td></tr></table></figure>\n<p>我们看一下它的其中一个实现类：ModelInstance的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node node : nodes) &#123;</span><br><span class=\"line\">\t\tgetRenderables(node, renderables, pool);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看到就是把当前model实例中的node全部拿来遍历，然后为每个node生成renderable。再往下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getRenderables</span> <span class=\"params\">(Node node, Array&lt;Renderable&gt; renderables, Pool&lt;Renderable&gt; pool)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node.parts.size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (NodePart nodePart : node.parts) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nodePart.enabled) renderables.add(getRenderable(pool.obtain(), node, nodePart));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Node child : node.getChildren()) &#123;</span><br><span class=\"line\">\t\tgetRenderables(child, renderables, pool);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于当前node下的每一个node part，都会从我们的rederable对象池中获取一个renderable，作为其真正的到渲染物。<br>然后，每一个node part会把自身包含的material以及mesh part 绑定到这个renderable中，来进行渲染。</p>\n<p>最后真正的渲染方法，在:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modelBatch.end();</span><br></pre></td></tr></table></figure>\n<p>end方法就是结束一个批次，来将之前生成的所有renderable来用对应的shader进行渲染。</p>\n<p>嗯，就先这样把</p>"},{"title":"SpringSecurity 踩坑记录","date":"2025-05-17T12:48:45.000Z","_content":"\n\n## Spring security 基础使用\n整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n```\n\n然后直接运行，即可看到spring security默认的登陆页面。\n\n<!-- more -->\n\n## Spring Security 的相关功能\n整个springsecurity的基础功能，可以归纳为三个大部分：\n1. 认证 (Authenticate)\n   认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。\n2. 鉴权 （Authorization）\n   就是在知道你是谁了后，你有哪些权限。\n3. 检查 （Check）\n   在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 ``AccessDeniedException`` 抛出\n\n## Spring Security 的组件\n\n### 过滤器链（SecurityFilterChain）\n构成Spring Security的核心功能的，是由``SecurityFilterChain``过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。\n而在``SecurityFilterChain``过滤器链内，则是有各个功能自己的组件。\n而这个 ``SecurityFilterChain``过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。\n其主要逻辑源码如下：\n```java\n    private void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        FirewalledRequest firewallRequest = this.firewall.getFirewalledRequest((HttpServletRequest) request);\n        HttpServletResponse firewallResponse = this.firewall.getFirewalledResponse((HttpServletResponse) response);\n        // 获取当前请求所对应的过滤器集合\n        List<Filter> filters = getFilters(firewallRequest);\n        if (filters == null || filters.isEmpty()) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(LogMessage.of(() -> \"No security for \" + requestLine(firewallRequest)));\n            }\n            firewallRequest.reset();\n            this.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);\n            return;\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(LogMessage.of(() -> \"Securing \" + requestLine(firewallRequest)));\n        }\n        // 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的\n        FilterChain reset = (req, res) -> {\n            if (logger.isDebugEnabled()) {\n                logger.debug(LogMessage.of(() -> \"Secured \" + requestLine(firewallRequest)));\n            }\n            // Deactivate path stripping as we exit the security filter chain\n            firewallRequest.reset();\n            chain.doFilter(req, res);\n        };\n        // 此处是真实的过滤器逻辑，使用了装饰者模式\n        this.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);\n    }\n\n```\n装饰者内部逻辑\n```java\n        public void doFilter(final ServletRequest request, final ServletResponse response) throws IOException, ServletException {\n            // 若过滤器集合遍历完毕，则回归主filter chain\n            if (this.currentPosition == this.additionalFilters.size()) {\n                this.originalChain.doFilter(request, response);\n            } else {\n                // 循环遍历所有找到的filter\n                ++this.currentPosition;\n                Filter nextFilter = (Filter)this.additionalFilters.get(this.currentPosition - 1);\n                nextFilter.doFilter(request, response, this);\n            }\n\n        }\n```\n\n### Security上下文（SecurityContext）\n使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。\n在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。\n```java\nSecurityContextHolder.getContext();\n```\n其内部是存在**threadlocal**里的\n\n### AuthenticateManager认证管理器\n这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).\n```JAVA\n// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份\n    Authentication authenticate(Authentication authentication) throws AuthenticationException;\n\n```\nspringsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。\n参考demo可以看springsecurity自带的``UsernamePasswordAuthenticationFilter``\n```java\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n            throws AuthenticationException {\n        if (this.postOnly && !request.getMethod().equals(\"POST\")) {\n            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n        }\n        String username = obtainUsername(request);\n        username = (username != null) ? username.trim() : \"\";\n        String password = obtainPassword(request);\n        password = (password != null) ? password : \"\";\n        UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\n                password);\n        // Allow subclasses to set the \"details\" property\n        setDetails(request, authRequest);\n        return this.getAuthenticationManager().authenticate(authRequest);\n    }\n\n```\n\n\n\n\n\n## 问题（坑）\n1. 获取``AuthenticationManager``问题。\n   ### 描述\n   关于如果在自己的代码中注入并使用``AuthenticationManager``，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入``AuthenticationManager``会找不到bean报错。意味着spring security并没有把一个默认的``AuthenticationManager``放到spring context中。\n   ![alt text](unify\\spring_security\\image.png)\n    此时，继续按照网上的另一个注入方法：\n    ```java\n    @Autowired\n    private AuthenticationConfiguration AuthenticationConfiguration;\n    \n    // 使用AuthenticationConfiguration 来获取 AuthenticationManager\n    @Bean\n    public AuthenticationManager authenticationManager() throws Exception {\n        return AuthenticationConfiguration.getAuthenticationManager();\n    }\n    ```\n    看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。\n    如果我们在security的config中，配置了AuthenticateProvider，如下：\n    ```java\n        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n            return http.authenticationProvider(new KAuthenticationProvider()).build();\n        }\n    ```\n\n    然后我们在自己的代码中，使用刚才注册的 ``AuthenticationManager``\n    ```java\n    \n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    public void check () {\n                UsernamePasswordAuthenticationToken auth = UsernamePasswordAuthenticationToken.unauthenticated(\"user\",\"123456\");\n        Authentication result = authenticationManager.authenticate(auth);\n\n    }\n    ```\n    会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化``AuthenticationManager``是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在``org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity``中\n    ```java\n\n    @Bean(HTTPSECURITY_BEAN_NAME)\n    @Scope(\"prototype\")\n    HttpSecurity httpSecurity() throws Exception {\n        LazyPasswordEncoder passwordEncoder = new LazyPasswordEncoder(this.context);\n        AuthenticationManagerBuilder authenticationBuilder = new DefaultPasswordEncoderAuthenticationManagerBuilder(\n                this.objectPostProcessor, passwordEncoder);\n                // 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager\n                // 可以看到这里其实是把这个作为我们后面http的manager的parent manager了\n        authenticationBuilder.parentAuthenticationManager(authenticationManager());\n        authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());\n        HttpSecurity http = new HttpSecurity(this.objectPostProcessor, authenticationBuilder, createSharedObjects());\n        WebAsyncManagerIntegrationFilter webAsyncManagerIntegrationFilter = new WebAsyncManagerIntegrationFilter();\n        webAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n        // @formatter:off\n        http\n            .csrf(withDefaults())\n            .addFilter(webAsyncManagerIntegrationFilter)\n            .exceptionHandling(withDefaults())\n            .headers(withDefaults())\n            .sessionManagement(withDefaults())\n            .securityContext(withDefaults())\n            .requestCache(withDefaults())\n            .anonymous(withDefaults())\n            .servletApi(withDefaults())\n            .apply(new DefaultLoginPageConfigurer<>());\n        http.logout(withDefaults());\n        // @formatter:on\n        applyCorsIfAvailable(http);\n        applyDefaultConfigurers(http);\n        return http;\n    }\n    ```\n    这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：\n    ```java\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.\n        .authenticationProvider(new KAuthenticationProvider())\n        ...\n        .build();\n    }\n    ```\n    注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child\n    然后看ProviderManager中，有如下代码：\n    ```java\n            // 如果当前的manager没有成功获取身份信息，则去parent中继续获取\n            if (result == null && this.parent != null) {\n            // Allow the parent to try.\n            try {\n                parentResult = this.parent.authenticate(authentication);\n                result = parentResult;\n            }\n            catch (ProviderNotFoundException ex) {\n                // ignore as we will throw below if no other exception occurred prior to\n                // calling parent and the parent\n                // may throw ProviderNotFound even though a provider in the child already\n                // handled the request\n            }\n            catch (AuthenticationException ex) {\n                parentException = ex;\n                lastException = ex;\n            }\n        }\n\n    ```\n    可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。\n\n    到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的``AuthenticationManager``去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。\n\n    ### 复现\n    1. 关于 ``AuthenticationManager``无法直接注入,直接把下面的代码放入自己项目即可复现\n        ```java\n        @Component\n        public class SecurityIssue {\n            @Autowired\n            private AuthenticationManager authenticationManager;\n        }\n\n        ```\n    2. 无法使用自己的provider\n        * 首先定义一个自己的authentication \n        \n        ```java\n        package com.kz.web.test;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.util.Collection;\n\npublic class MyAuthentication implements Authentication {\n    private boolean authState;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return authState;\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        this.authState = isAuthenticated;\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n}\n        ```\n\n         * 然后定义自己的provider\n        ```java\npackage com.kz.web.test;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\npublic class MyAuthenticateProvider implements AuthenticationProvider {\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        // 直接给与验证通过\n        authentication.setAuthenticated(true);\n        return authentication;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        System.out.println(\"MyAuthenticateProvider.supports\");\n        return MyAuthentication.class.isAssignableFrom(authentication);\n    }\n}\n\n        ```\n\n        * 定义自己的filter\n        ```java\npackage com.kz.web.test;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\npublic class SimpleFilter extends OncePerRequestFilter {\n    AuthenticationManager authenticationManager;\n    \n    public SimpleFilter(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        System.out.println(\"SimpleFilter.doFilterInternal\");\n        MyAuthentication myAuthentication = new MyAuthentication();\n        this.authenticationManager.authenticate(myAuthentication);\n        filterChain.doFilter(request, response);\n    }\n}\n        ```\n\n        * 定义自己的config\n        ```java\n        package com.kz.web.test;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\n\n@Configuration\npublic class SimpleConfig {\n    @Autowired\n    private AuthenticationConfiguration authenticationConfiguration;\n\n    @Bean\n    public AuthenticationManager manager() throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n\n    @Bean\n    @Order(0)\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(\"/login\").permitAll() // 登录页放行\n                        .requestMatchers(\"/public/**\", \"/error\").permitAll() // 明确放行登录页和公共路径\n                        .requestMatchers(\"/admin/**\").hasAuthority(\"admin\")    // 需要 ADMIN 角色\n                        .anyRequest().authenticated()                     // 其他所有路径需要认证\n                )\n                .anonymous(anon -> anon\n                        .principal(\"anonymousUser\") // 匿名用户\n                )\n                .formLogin(form ->\n                        form.disable()\n                )\n                .addFilterAfter(new SimpleFilter(manager()), LogoutFilter.class)\n                .authenticationProvider(new MyAuthenticateProvider())\n                .logout(logout -> logout\n                        .logoutUrl(\"/logout\")          // 登出URL\n                        .logoutSuccessUrl(\"/login?logout\") // 登出成功后跳转\n                        .permitAll()\n                );\n        return http.build();\n    }\n}\n\n        ```\n\n        运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看\n","source":"_posts/spring-security.md","raw":"---\ntitle: SpringSecurity 踩坑记录\ndate: 2025-05-17 20:48:45\ntags:\n---\n\n\n## Spring security 基础使用\n整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n```\n\n然后直接运行，即可看到spring security默认的登陆页面。\n\n<!-- more -->\n\n## Spring Security 的相关功能\n整个springsecurity的基础功能，可以归纳为三个大部分：\n1. 认证 (Authenticate)\n   认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。\n2. 鉴权 （Authorization）\n   就是在知道你是谁了后，你有哪些权限。\n3. 检查 （Check）\n   在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 ``AccessDeniedException`` 抛出\n\n## Spring Security 的组件\n\n### 过滤器链（SecurityFilterChain）\n构成Spring Security的核心功能的，是由``SecurityFilterChain``过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。\n而在``SecurityFilterChain``过滤器链内，则是有各个功能自己的组件。\n而这个 ``SecurityFilterChain``过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。\n其主要逻辑源码如下：\n```java\n    private void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        FirewalledRequest firewallRequest = this.firewall.getFirewalledRequest((HttpServletRequest) request);\n        HttpServletResponse firewallResponse = this.firewall.getFirewalledResponse((HttpServletResponse) response);\n        // 获取当前请求所对应的过滤器集合\n        List<Filter> filters = getFilters(firewallRequest);\n        if (filters == null || filters.isEmpty()) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(LogMessage.of(() -> \"No security for \" + requestLine(firewallRequest)));\n            }\n            firewallRequest.reset();\n            this.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);\n            return;\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(LogMessage.of(() -> \"Securing \" + requestLine(firewallRequest)));\n        }\n        // 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的\n        FilterChain reset = (req, res) -> {\n            if (logger.isDebugEnabled()) {\n                logger.debug(LogMessage.of(() -> \"Secured \" + requestLine(firewallRequest)));\n            }\n            // Deactivate path stripping as we exit the security filter chain\n            firewallRequest.reset();\n            chain.doFilter(req, res);\n        };\n        // 此处是真实的过滤器逻辑，使用了装饰者模式\n        this.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);\n    }\n\n```\n装饰者内部逻辑\n```java\n        public void doFilter(final ServletRequest request, final ServletResponse response) throws IOException, ServletException {\n            // 若过滤器集合遍历完毕，则回归主filter chain\n            if (this.currentPosition == this.additionalFilters.size()) {\n                this.originalChain.doFilter(request, response);\n            } else {\n                // 循环遍历所有找到的filter\n                ++this.currentPosition;\n                Filter nextFilter = (Filter)this.additionalFilters.get(this.currentPosition - 1);\n                nextFilter.doFilter(request, response, this);\n            }\n\n        }\n```\n\n### Security上下文（SecurityContext）\n使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。\n在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。\n```java\nSecurityContextHolder.getContext();\n```\n其内部是存在**threadlocal**里的\n\n### AuthenticateManager认证管理器\n这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).\n```JAVA\n// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份\n    Authentication authenticate(Authentication authentication) throws AuthenticationException;\n\n```\nspringsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。\n参考demo可以看springsecurity自带的``UsernamePasswordAuthenticationFilter``\n```java\n    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n            throws AuthenticationException {\n        if (this.postOnly && !request.getMethod().equals(\"POST\")) {\n            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n        }\n        String username = obtainUsername(request);\n        username = (username != null) ? username.trim() : \"\";\n        String password = obtainPassword(request);\n        password = (password != null) ? password : \"\";\n        UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\n                password);\n        // Allow subclasses to set the \"details\" property\n        setDetails(request, authRequest);\n        return this.getAuthenticationManager().authenticate(authRequest);\n    }\n\n```\n\n\n\n\n\n## 问题（坑）\n1. 获取``AuthenticationManager``问题。\n   ### 描述\n   关于如果在自己的代码中注入并使用``AuthenticationManager``，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入``AuthenticationManager``会找不到bean报错。意味着spring security并没有把一个默认的``AuthenticationManager``放到spring context中。\n   ![alt text](unify\\spring_security\\image.png)\n    此时，继续按照网上的另一个注入方法：\n    ```java\n    @Autowired\n    private AuthenticationConfiguration AuthenticationConfiguration;\n    \n    // 使用AuthenticationConfiguration 来获取 AuthenticationManager\n    @Bean\n    public AuthenticationManager authenticationManager() throws Exception {\n        return AuthenticationConfiguration.getAuthenticationManager();\n    }\n    ```\n    看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。\n    如果我们在security的config中，配置了AuthenticateProvider，如下：\n    ```java\n        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n            return http.authenticationProvider(new KAuthenticationProvider()).build();\n        }\n    ```\n\n    然后我们在自己的代码中，使用刚才注册的 ``AuthenticationManager``\n    ```java\n    \n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    public void check () {\n                UsernamePasswordAuthenticationToken auth = UsernamePasswordAuthenticationToken.unauthenticated(\"user\",\"123456\");\n        Authentication result = authenticationManager.authenticate(auth);\n\n    }\n    ```\n    会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化``AuthenticationManager``是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在``org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity``中\n    ```java\n\n    @Bean(HTTPSECURITY_BEAN_NAME)\n    @Scope(\"prototype\")\n    HttpSecurity httpSecurity() throws Exception {\n        LazyPasswordEncoder passwordEncoder = new LazyPasswordEncoder(this.context);\n        AuthenticationManagerBuilder authenticationBuilder = new DefaultPasswordEncoderAuthenticationManagerBuilder(\n                this.objectPostProcessor, passwordEncoder);\n                // 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager\n                // 可以看到这里其实是把这个作为我们后面http的manager的parent manager了\n        authenticationBuilder.parentAuthenticationManager(authenticationManager());\n        authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());\n        HttpSecurity http = new HttpSecurity(this.objectPostProcessor, authenticationBuilder, createSharedObjects());\n        WebAsyncManagerIntegrationFilter webAsyncManagerIntegrationFilter = new WebAsyncManagerIntegrationFilter();\n        webAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(this.securityContextHolderStrategy);\n        // @formatter:off\n        http\n            .csrf(withDefaults())\n            .addFilter(webAsyncManagerIntegrationFilter)\n            .exceptionHandling(withDefaults())\n            .headers(withDefaults())\n            .sessionManagement(withDefaults())\n            .securityContext(withDefaults())\n            .requestCache(withDefaults())\n            .anonymous(withDefaults())\n            .servletApi(withDefaults())\n            .apply(new DefaultLoginPageConfigurer<>());\n        http.logout(withDefaults());\n        // @formatter:on\n        applyCorsIfAvailable(http);\n        applyDefaultConfigurers(http);\n        return http;\n    }\n    ```\n    这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：\n    ```java\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http.\n        .authenticationProvider(new KAuthenticationProvider())\n        ...\n        .build();\n    }\n    ```\n    注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child\n    然后看ProviderManager中，有如下代码：\n    ```java\n            // 如果当前的manager没有成功获取身份信息，则去parent中继续获取\n            if (result == null && this.parent != null) {\n            // Allow the parent to try.\n            try {\n                parentResult = this.parent.authenticate(authentication);\n                result = parentResult;\n            }\n            catch (ProviderNotFoundException ex) {\n                // ignore as we will throw below if no other exception occurred prior to\n                // calling parent and the parent\n                // may throw ProviderNotFound even though a provider in the child already\n                // handled the request\n            }\n            catch (AuthenticationException ex) {\n                parentException = ex;\n                lastException = ex;\n            }\n        }\n\n    ```\n    可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。\n\n    到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的``AuthenticationManager``去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。\n\n    ### 复现\n    1. 关于 ``AuthenticationManager``无法直接注入,直接把下面的代码放入自己项目即可复现\n        ```java\n        @Component\n        public class SecurityIssue {\n            @Autowired\n            private AuthenticationManager authenticationManager;\n        }\n\n        ```\n    2. 无法使用自己的provider\n        * 首先定义一个自己的authentication \n        \n        ```java\n        package com.kz.web.test;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.util.Collection;\n\npublic class MyAuthentication implements Authentication {\n    private boolean authState;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return null;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return authState;\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        this.authState = isAuthenticated;\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n}\n        ```\n\n         * 然后定义自己的provider\n        ```java\npackage com.kz.web.test;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\npublic class MyAuthenticateProvider implements AuthenticationProvider {\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        // 直接给与验证通过\n        authentication.setAuthenticated(true);\n        return authentication;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        System.out.println(\"MyAuthenticateProvider.supports\");\n        return MyAuthentication.class.isAssignableFrom(authentication);\n    }\n}\n\n        ```\n\n        * 定义自己的filter\n        ```java\npackage com.kz.web.test;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\npublic class SimpleFilter extends OncePerRequestFilter {\n    AuthenticationManager authenticationManager;\n    \n    public SimpleFilter(AuthenticationManager authenticationManager) {\n        this.authenticationManager = authenticationManager;\n    }\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        System.out.println(\"SimpleFilter.doFilterInternal\");\n        MyAuthentication myAuthentication = new MyAuthentication();\n        this.authenticationManager.authenticate(myAuthentication);\n        filterChain.doFilter(request, response);\n    }\n}\n        ```\n\n        * 定义自己的config\n        ```java\n        package com.kz.web.test;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\n\n@Configuration\npublic class SimpleConfig {\n    @Autowired\n    private AuthenticationConfiguration authenticationConfiguration;\n\n    @Bean\n    public AuthenticationManager manager() throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n\n    @Bean\n    @Order(0)\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .requestMatchers(\"/login\").permitAll() // 登录页放行\n                        .requestMatchers(\"/public/**\", \"/error\").permitAll() // 明确放行登录页和公共路径\n                        .requestMatchers(\"/admin/**\").hasAuthority(\"admin\")    // 需要 ADMIN 角色\n                        .anyRequest().authenticated()                     // 其他所有路径需要认证\n                )\n                .anonymous(anon -> anon\n                        .principal(\"anonymousUser\") // 匿名用户\n                )\n                .formLogin(form ->\n                        form.disable()\n                )\n                .addFilterAfter(new SimpleFilter(manager()), LogoutFilter.class)\n                .authenticationProvider(new MyAuthenticateProvider())\n                .logout(logout -> logout\n                        .logoutUrl(\"/logout\")          // 登出URL\n                        .logoutSuccessUrl(\"/login?logout\") // 登出成功后跳转\n                        .permitAll()\n                );\n        return http.build();\n    }\n}\n\n        ```\n\n        运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看\n","slug":"spring-security","published":1,"updated":"2025-05-25T11:55:04.780Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7v00301wu1h60pbfrc","content":"<h2 id=\"Spring-security-基础使用\"><a href=\"#Spring-security-基础使用\" class=\"headerlink\" title=\"Spring security 基础使用\"></a>Spring security 基础使用</h2><p>整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后直接运行，即可看到spring security默认的登陆页面。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Spring-Security-的相关功能\"><a href=\"#Spring-Security-的相关功能\" class=\"headerlink\" title=\"Spring Security 的相关功能\"></a>Spring Security 的相关功能</h2><p>整个springsecurity的基础功能，可以归纳为三个大部分：</p>\n<ol>\n<li>认证 (Authenticate)<br>认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。</li>\n<li>鉴权 （Authorization）<br>就是在知道你是谁了后，你有哪些权限。</li>\n<li>检查 （Check）<br>在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 <code>AccessDeniedException</code> 抛出</li>\n</ol>\n<h2 id=\"Spring-Security-的组件\"><a href=\"#Spring-Security-的组件\" class=\"headerlink\" title=\"Spring Security 的组件\"></a>Spring Security 的组件</h2><h3 id=\"过滤器链（SecurityFilterChain）\"><a href=\"#过滤器链（SecurityFilterChain）\" class=\"headerlink\" title=\"过滤器链（SecurityFilterChain）\"></a>过滤器链（SecurityFilterChain）</h3><p>构成Spring Security的核心功能的，是由<code>SecurityFilterChain</code>过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。<br>而在<code>SecurityFilterChain</code>过滤器链内，则是有各个功能自己的组件。<br>而这个 <code>SecurityFilterChain</code>过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。<br>其主要逻辑源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"type\">FirewalledRequest</span> <span class=\"variable\">firewallRequest</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledRequest((HttpServletRequest) request);</span><br><span class=\"line\">    <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">firewallResponse</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledResponse((HttpServletResponse) response);</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前请求所对应的过滤器集合</span></span><br><span class=\"line\">    List&lt;Filter&gt; filters = getFilters(firewallRequest);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filters == <span class=\"literal\">null</span> || filters.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(LogMessage.of(() -&gt; <span class=\"string\">&quot;No security for &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        firewallRequest.reset();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        logger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Securing &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的</span></span><br><span class=\"line\">    <span class=\"type\">FilterChain</span> <span class=\"variable\">reset</span> <span class=\"operator\">=</span> (req, res) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Secured &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Deactivate path stripping as we exit the security filter chain</span></span><br><span class=\"line\">        firewallRequest.reset();</span><br><span class=\"line\">        chain.doFilter(req, res);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 此处是真实的过滤器逻辑，使用了装饰者模式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>装饰者内部逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若过滤器集合遍历完毕，则回归主filter chain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.currentPosition == <span class=\"built_in\">this</span>.additionalFilters.size()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originalChain.doFilter(request, response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环遍历所有找到的filter</span></span><br><span class=\"line\">        ++<span class=\"built_in\">this</span>.currentPosition;</span><br><span class=\"line\">        <span class=\"type\">Filter</span> <span class=\"variable\">nextFilter</span> <span class=\"operator\">=</span> (Filter)<span class=\"built_in\">this</span>.additionalFilters.get(<span class=\"built_in\">this</span>.currentPosition - <span class=\"number\">1</span>);</span><br><span class=\"line\">        nextFilter.doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Security上下文（SecurityContext）\"><a href=\"#Security上下文（SecurityContext）\" class=\"headerlink\" title=\"Security上下文（SecurityContext）\"></a>Security上下文（SecurityContext）</h3><p>使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。<br>在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityContextHolder.getContext();</span><br></pre></td></tr></table></figure>\n<p>其内部是存在<strong>threadlocal</strong>里的</p>\n<h3 id=\"AuthenticateManager认证管理器\"><a href=\"#AuthenticateManager认证管理器\" class=\"headerlink\" title=\"AuthenticateManager认证管理器\"></a>AuthenticateManager认证管理器</h3><p>这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份</span></span><br><span class=\"line\">    Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>springsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。<br>参考demo可以看springsecurity自带的<code>UsernamePasswordAuthenticationFilter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Authentication <span class=\"title function_\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class=\"string\">&quot;POST&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationServiceException</span>(<span class=\"string\">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> obtainUsername(request);</span><br><span class=\"line\">    username = (username != <span class=\"literal\">null</span>) ? username.trim() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> obtainPassword(request);</span><br><span class=\"line\">    password = (password != <span class=\"literal\">null</span>) ? password : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authRequest</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class=\"line\">            password);</span><br><span class=\"line\">    <span class=\"comment\">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class=\"line\">    setDetails(request, authRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题（坑）\"><a href=\"#问题（坑）\" class=\"headerlink\" title=\"问题（坑）\"></a>问题（坑）</h2><ol>\n<li><p>获取<code>AuthenticationManager</code>问题。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>关于如果在自己的代码中注入并使用<code>AuthenticationManager</code>，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入<code>AuthenticationManager</code>会找不到bean报错。意味着spring security并没有把一个默认的<code>AuthenticationManager</code>放到spring context中。<br><img src=\"/unify%5Cspring_security%5Cimage.png\" alt=\"alt text\"><br> 此时，继续按照网上的另一个注入方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationConfiguration AuthenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用AuthenticationConfiguration 来获取 AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AuthenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。<br> 如果我们在security的config中，配置了AuthenticateProvider，如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http.authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>()).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后我们在自己的代码中，使用刚才注册的 <code>AuthenticationManager</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">check</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Authentication</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> authenticationManager.authenticate(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化<code>AuthenticationManager</code>是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在<code>org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean(HTTPSECURITY_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\">HttpSecurity <span class=\"title function_\">httpSecurity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">LazyPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LazyPasswordEncoder</span>(<span class=\"built_in\">this</span>.context);</span><br><span class=\"line\">    <span class=\"type\">AuthenticationManagerBuilder</span> <span class=\"variable\">authenticationBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.objectPostProcessor, passwordEncoder);</span><br><span class=\"line\">            <span class=\"comment\">// 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以看到这里其实是把这个作为我们后面http的manager的parent manager了</span></span><br><span class=\"line\">    authenticationBuilder.parentAuthenticationManager(authenticationManager());</span><br><span class=\"line\">    authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());</span><br><span class=\"line\">    <span class=\"type\">HttpSecurity</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSecurity</span>(<span class=\"built_in\">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());</span><br><span class=\"line\">    <span class=\"type\">WebAsyncManagerIntegrationFilter</span> <span class=\"variable\">webAsyncManagerIntegrationFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebAsyncManagerIntegrationFilter</span>();</span><br><span class=\"line\">    webAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(<span class=\"built_in\">this</span>.securityContextHolderStrategy);</span><br><span class=\"line\">    <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">    http</span><br><span class=\"line\">        .csrf(withDefaults())</span><br><span class=\"line\">        .addFilter(webAsyncManagerIntegrationFilter)</span><br><span class=\"line\">        .exceptionHandling(withDefaults())</span><br><span class=\"line\">        .headers(withDefaults())</span><br><span class=\"line\">        .sessionManagement(withDefaults())</span><br><span class=\"line\">        .securityContext(withDefaults())</span><br><span class=\"line\">        .requestCache(withDefaults())</span><br><span class=\"line\">        .anonymous(withDefaults())</span><br><span class=\"line\">        .servletApi(withDefaults())</span><br><span class=\"line\">        .apply(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultLoginPageConfigurer</span>&lt;&gt;());</span><br><span class=\"line\">    http.logout(withDefaults());</span><br><span class=\"line\">    <span class=\"comment\">// @formatter:on</span></span><br><span class=\"line\">    applyCorsIfAvailable(http);</span><br><span class=\"line\">    applyDefaultConfigurers(http);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.</span><br><span class=\"line\">    .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>())</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child<br> 然后看ProviderManager中，有如下代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果当前的manager没有成功获取身份信息，则去parent中继续获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Allow the parent to try.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        parentResult = <span class=\"built_in\">this</span>.parent.authenticate(authentication);</span><br><span class=\"line\">        result = parentResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ProviderNotFoundException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class=\"line\">        <span class=\"comment\">// calling parent and the parent</span></span><br><span class=\"line\">        <span class=\"comment\">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class=\"line\">        <span class=\"comment\">// handled the request</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (AuthenticationException ex) &#123;</span><br><span class=\"line\">        parentException = ex;</span><br><span class=\"line\">        lastException = ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。</p>\n<p> 到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的<code>AuthenticationManager</code>去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。</p>\n<h3 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h3><ol>\n<li><p>关于 <code>AuthenticationManager</code>无法直接注入,直接把下面的代码放入自己项目即可复现</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityIssue</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>无法使用自己的provider</p>\n<ul>\n<li>首先定义一个自己的authentication</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthentication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Authentication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> authState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getCredentials</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getDetails</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authState = isAuthenticated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后定义自己的provider</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticateProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接给与验证通过</span></span><br><span class=\"line\">        authentication.setAuthenticated(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyAuthenticateProvider.supports&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyAuthentication.class.isAssignableFrom(authentication);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的filter</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    AuthenticationManager authenticationManager;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleFilter</span><span class=\"params\">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager = authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SimpleFilter.doFilterInternal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAuthentication</span> <span class=\"variable\">myAuthentication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthentication</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager.authenticate(myAuthentication);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的config</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration authenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">manager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Order(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/login&quot;</span>).permitAll() <span class=\"comment\">// 登录页放行</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/public/**&quot;</span>, <span class=\"string\">&quot;/error&quot;</span>).permitAll() <span class=\"comment\">// 明确放行登录页和公共路径</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/admin/**&quot;</span>).hasAuthority(<span class=\"string\">&quot;admin&quot;</span>)    <span class=\"comment\">// 需要 ADMIN 角色</span></span><br><span class=\"line\">                        .anyRequest().authenticated()                     <span class=\"comment\">// 其他所有路径需要认证</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .anonymous(anon -&gt; anon</span><br><span class=\"line\">                        .principal(<span class=\"string\">&quot;anonymousUser&quot;</span>) <span class=\"comment\">// 匿名用户</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .formLogin(form -&gt;</span><br><span class=\"line\">                        form.disable()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .addFilterAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFilter</span>(manager()), LogoutFilter.class)</span><br><span class=\"line\">                .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthenticateProvider</span>())</span><br><span class=\"line\">                .logout(logout -&gt; logout</span><br><span class=\"line\">                        .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>)          <span class=\"comment\">// 登出URL</span></span><br><span class=\"line\">                        .logoutSuccessUrl(<span class=\"string\">&quot;/login?logout&quot;</span>) <span class=\"comment\">// 登出成功后跳转</span></span><br><span class=\"line\">                        .permitAll()</span><br><span class=\"line\">                );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看</p>\n</li>\n</ol>\n</li>\n</ol>\n","length":2003,"excerpt":"<h2 id=\"Spring-security-基础使用\"><a href=\"#Spring-security-基础使用\" class=\"headerlink\" title=\"Spring security 基础使用\"></a>Spring security 基础使用</h2><p>整合springboot，基本可以说是开箱即用。甚至无需额外设置，只需要引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后直接运行，即可看到spring security默认的登陆页面。</p>","more":"<h2 id=\"Spring-Security-的相关功能\"><a href=\"#Spring-Security-的相关功能\" class=\"headerlink\" title=\"Spring Security 的相关功能\"></a>Spring Security 的相关功能</h2><p>整个springsecurity的基础功能，可以归纳为三个大部分：</p>\n<ol>\n<li>认证 (Authenticate)<br>认证简单来说就是让系统知道你是谁。一般是用前端传过来的username 和password去数据库里进行获取user信息（也可以是别的比如session缓存，jwt token），这样我们就知道了当前的用户是谁。</li>\n<li>鉴权 （Authorization）<br>就是在知道你是谁了后，你有哪些权限。</li>\n<li>检查 （Check）<br>在知道你是谁并且确认了你的权限后，需要去跟当前要访问的资源进行匹配。匹配成功后，才会放行，否则会阻止访问并且正常会有 <code>AccessDeniedException</code> 抛出</li>\n</ol>\n<h2 id=\"Spring-Security-的组件\"><a href=\"#Spring-Security-的组件\" class=\"headerlink\" title=\"Spring Security 的组件\"></a>Spring Security 的组件</h2><h3 id=\"过滤器链（SecurityFilterChain）\"><a href=\"#过滤器链（SecurityFilterChain）\" class=\"headerlink\" title=\"过滤器链（SecurityFilterChain）\"></a>过滤器链（SecurityFilterChain）</h3><p>构成Spring Security的核心功能的，是由<code>SecurityFilterChain</code>过滤器链来实现的。其本质就是一个个一连串的过滤器，进行各自功能的check以及验证。<br>而在<code>SecurityFilterChain</code>过滤器链内，则是有各个功能自己的组件。<br>而这个 <code>SecurityFilterChain</code>过滤器链，实际上是由一个：FilterChainProxy 过滤器链代理的类来执行的。<br>其主要逻辑源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"type\">FirewalledRequest</span> <span class=\"variable\">firewallRequest</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledRequest((HttpServletRequest) request);</span><br><span class=\"line\">    <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">firewallResponse</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.firewall.getFirewalledResponse((HttpServletResponse) response);</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前请求所对应的过滤器集合</span></span><br><span class=\"line\">    List&lt;Filter&gt; filters = getFilters(firewallRequest);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filters == <span class=\"literal\">null</span> || filters.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(LogMessage.of(() -&gt; <span class=\"string\">&quot;No security for &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        firewallRequest.reset();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.filterChainDecorator.decorate(chain).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        logger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Securing &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这个匿名内部类的作用是在遍历完所有对应过滤器集合后，回归当前的filter chain的</span></span><br><span class=\"line\">    <span class=\"type\">FilterChain</span> <span class=\"variable\">reset</span> <span class=\"operator\">=</span> (req, res) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(LogMessage.of(() -&gt; <span class=\"string\">&quot;Secured &quot;</span> + requestLine(firewallRequest)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Deactivate path stripping as we exit the security filter chain</span></span><br><span class=\"line\">        firewallRequest.reset();</span><br><span class=\"line\">        chain.doFilter(req, res);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 此处是真实的过滤器逻辑，使用了装饰者模式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.filterChainDecorator.decorate(reset, filters).doFilter(firewallRequest, firewallResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>装饰者内部逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(<span class=\"keyword\">final</span> ServletRequest request, <span class=\"keyword\">final</span> ServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若过滤器集合遍历完毕，则回归主filter chain</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.currentPosition == <span class=\"built_in\">this</span>.additionalFilters.size()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originalChain.doFilter(request, response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环遍历所有找到的filter</span></span><br><span class=\"line\">        ++<span class=\"built_in\">this</span>.currentPosition;</span><br><span class=\"line\">        <span class=\"type\">Filter</span> <span class=\"variable\">nextFilter</span> <span class=\"operator\">=</span> (Filter)<span class=\"built_in\">this</span>.additionalFilters.get(<span class=\"built_in\">this</span>.currentPosition - <span class=\"number\">1</span>);</span><br><span class=\"line\">        nextFilter.doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Security上下文（SecurityContext）\"><a href=\"#Security上下文（SecurityContext）\" class=\"headerlink\" title=\"Security上下文（SecurityContext）\"></a>Security上下文（SecurityContext）</h3><p>使用Context来保存上下文信息是一个常用的方法，在spring中更是有application context来保存当前应用的上下文。在springsecurity中也不例外，springsecurity有自己的securityContext。其中主要是用来保存用户的认证信息（Authentication）。<br>在程序中，我们可以通过 SecurityContextHolder 来获取当前线程中的 SecurityContext。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityContextHolder.getContext();</span><br></pre></td></tr></table></figure>\n<p>其内部是存在<strong>threadlocal</strong>里的</p>\n<h3 id=\"AuthenticateManager认证管理器\"><a href=\"#AuthenticateManager认证管理器\" class=\"headerlink\" title=\"AuthenticateManager认证管理器\"></a>AuthenticateManager认证管理器</h3><p>这个是认证步骤的核心逻辑。其主要功能是负责认证一个用户的身份(Authentication).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AuthenticateManager是一个接口，只有一个方法，目的就是认证身份</span></span><br><span class=\"line\">    Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>springsecurity中，我们需要从当前的请求（request）以及响应（response）中，想办法获取user的身份(Authenticate)，然后放进AuthenticateManager中认证即可。<br>参考demo可以看springsecurity自带的<code>UsernamePasswordAuthenticationFilter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Authentication <span class=\"title function_\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class=\"string\">&quot;POST&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthenticationServiceException</span>(<span class=\"string\">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> obtainUsername(request);</span><br><span class=\"line\">    username = (username != <span class=\"literal\">null</span>) ? username.trim() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> obtainPassword(request);</span><br><span class=\"line\">    password = (password != <span class=\"literal\">null</span>) ? password : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authRequest</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class=\"line\">            password);</span><br><span class=\"line\">    <span class=\"comment\">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class=\"line\">    setDetails(request, authRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题（坑）\"><a href=\"#问题（坑）\" class=\"headerlink\" title=\"问题（坑）\"></a>问题（坑）</h2><ol>\n<li><p>获取<code>AuthenticationManager</code>问题。</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>关于如果在自己的代码中注入并使用<code>AuthenticationManager</code>，我搜到资料表示说可以直接注入，但是我使用的springboot版本3.4.4的情况下，直接注入<code>AuthenticationManager</code>会找不到bean报错。意味着spring security并没有把一个默认的<code>AuthenticationManager</code>放到spring context中。<br><img src=\"/unify%5Cspring_security%5Cimage.png\" alt=\"alt text\"><br> 此时，继续按照网上的另一个注入方法：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationConfiguration AuthenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用AuthenticationConfiguration 来获取 AuthenticationManager</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AuthenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 看起来好像没有问题，并且可以启动成功。但是使用起来还是有些问题。<br> 如果我们在security的config中，配置了AuthenticateProvider，如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http.authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>()).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 然后我们在自己的代码中，使用刚才注册的 <code>AuthenticationManager</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">check</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> UsernamePasswordAuthenticationToken.unauthenticated(<span class=\"string\">&quot;user&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Authentication</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> authenticationManager.authenticate(auth);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 会发现，我们刚才的provider永远也走不到。在进一步debug下，我发现，spring security初始化<code>AuthenticationManager</code>是分为两步的，这可能也是为什么我们没办法获取spring security默认给我们的authenticateManager 的原因把。其中第一步，是在<code>org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration#httpSecurity</code>中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean(HTTPSECURITY_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\">HttpSecurity <span class=\"title function_\">httpSecurity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">LazyPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LazyPasswordEncoder</span>(<span class=\"built_in\">this</span>.context);</span><br><span class=\"line\">    <span class=\"type\">AuthenticationManagerBuilder</span> <span class=\"variable\">authenticationBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultPasswordEncoderAuthenticationManagerBuilder</span>(</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.objectPostProcessor, passwordEncoder);</span><br><span class=\"line\">            <span class=\"comment\">// 这里会初始化第一个authenticationManager，并且作为AuthenticationConfiguration获取到的manager</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以看到这里其实是把这个作为我们后面http的manager的parent manager了</span></span><br><span class=\"line\">    authenticationBuilder.parentAuthenticationManager(authenticationManager());</span><br><span class=\"line\">    authenticationBuilder.authenticationEventPublisher(getAuthenticationEventPublisher());</span><br><span class=\"line\">    <span class=\"type\">HttpSecurity</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSecurity</span>(<span class=\"built_in\">this</span>.objectPostProcessor, authenticationBuilder, createSharedObjects());</span><br><span class=\"line\">    <span class=\"type\">WebAsyncManagerIntegrationFilter</span> <span class=\"variable\">webAsyncManagerIntegrationFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebAsyncManagerIntegrationFilter</span>();</span><br><span class=\"line\">    webAsyncManagerIntegrationFilter.setSecurityContextHolderStrategy(<span class=\"built_in\">this</span>.securityContextHolderStrategy);</span><br><span class=\"line\">    <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">    http</span><br><span class=\"line\">        .csrf(withDefaults())</span><br><span class=\"line\">        .addFilter(webAsyncManagerIntegrationFilter)</span><br><span class=\"line\">        .exceptionHandling(withDefaults())</span><br><span class=\"line\">        .headers(withDefaults())</span><br><span class=\"line\">        .sessionManagement(withDefaults())</span><br><span class=\"line\">        .securityContext(withDefaults())</span><br><span class=\"line\">        .requestCache(withDefaults())</span><br><span class=\"line\">        .anonymous(withDefaults())</span><br><span class=\"line\">        .servletApi(withDefaults())</span><br><span class=\"line\">        .apply(<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultLoginPageConfigurer</span>&lt;&gt;());</span><br><span class=\"line\">    http.logout(withDefaults());</span><br><span class=\"line\">    <span class=\"comment\">// @formatter:on</span></span><br><span class=\"line\">    applyCorsIfAvailable(http);</span><br><span class=\"line\">    applyDefaultConfigurers(http);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> http;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这里的是第一个初始化的AuthenticateManager，作为我们后面那一个的parent。然后在我们配置Secuirty的config的时候，会生成第二个AuthenticateManager：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.</span><br><span class=\"line\">    .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">KAuthenticationProvider</span>())</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 注意，此时我们的Provider给的是当前build出来的第二个AuthenticateManager，是之前那个的child<br> 然后看ProviderManager中，有如下代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果当前的manager没有成功获取身份信息，则去parent中继续获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Allow the parent to try.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        parentResult = <span class=\"built_in\">this</span>.parent.authenticate(authentication);</span><br><span class=\"line\">        result = parentResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ProviderNotFoundException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class=\"line\">        <span class=\"comment\">// calling parent and the parent</span></span><br><span class=\"line\">        <span class=\"comment\">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class=\"line\">        <span class=\"comment\">// handled the request</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (AuthenticationException ex) &#123;</span><br><span class=\"line\">        parentException = ex;</span><br><span class=\"line\">        lastException = ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 可以看到这里其实是在当前判断失败时会去parent那里再去尝试的。</p>\n<p> 到现在为止，好像一切都还很正常。但是如果我要自己定义一个filter去根据user的token获取user的身份，然后再用我们拿到的<code>AuthenticationManager</code>去认证的话，就会出现无法认证的情况。因为我们自己获取到的是parent,而我们把provider放到的是child中。直接使用parent的authenticate是无法调用child的方法的。</p>\n<h3 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h3><ol>\n<li><p>关于 <code>AuthenticationManager</code>无法直接注入,直接把下面的代码放入自己项目即可复现</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityIssue</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>无法使用自己的provider</p>\n<ul>\n<li>首先定义一个自己的authentication</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthentication</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Authentication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> authState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getCredentials</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getDetails</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getPrincipal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAuthenticated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthenticated</span><span class=\"params\">(<span class=\"type\">boolean</span> isAuthenticated)</span> <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authState = isAuthenticated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后定义自己的provider</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAuthenticateProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Authentication <span class=\"title function_\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接给与验证通过</span></span><br><span class=\"line\">        authentication.setAuthenticated(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyAuthenticateProvider.supports&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyAuthentication.class.isAssignableFrom(authentication);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的filter</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\">    AuthenticationManager authenticationManager;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleFilter</span><span class=\"params\">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager = authenticationManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;SimpleFilter.doFilterInternal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAuthentication</span> <span class=\"variable\">myAuthentication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthentication</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.authenticationManager.authenticate(myAuthentication);</span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义自己的config</li>\n</ul>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">package</span> com.kz.web.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationConfiguration authenticationConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">manager</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Order(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/login&quot;</span>).permitAll() <span class=\"comment\">// 登录页放行</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/public/**&quot;</span>, <span class=\"string\">&quot;/error&quot;</span>).permitAll() <span class=\"comment\">// 明确放行登录页和公共路径</span></span><br><span class=\"line\">                        .requestMatchers(<span class=\"string\">&quot;/admin/**&quot;</span>).hasAuthority(<span class=\"string\">&quot;admin&quot;</span>)    <span class=\"comment\">// 需要 ADMIN 角色</span></span><br><span class=\"line\">                        .anyRequest().authenticated()                     <span class=\"comment\">// 其他所有路径需要认证</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .anonymous(anon -&gt; anon</span><br><span class=\"line\">                        .principal(<span class=\"string\">&quot;anonymousUser&quot;</span>) <span class=\"comment\">// 匿名用户</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .formLogin(form -&gt;</span><br><span class=\"line\">                        form.disable()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .addFilterAfter(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFilter</span>(manager()), LogoutFilter.class)</span><br><span class=\"line\">                .authenticationProvider(<span class=\"keyword\">new</span> <span class=\"title class_\">MyAuthenticateProvider</span>())</span><br><span class=\"line\">                .logout(logout -&gt; logout</span><br><span class=\"line\">                        .logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>)          <span class=\"comment\">// 登出URL</span></span><br><span class=\"line\">                        .logoutSuccessUrl(<span class=\"string\">&quot;/login?logout&quot;</span>) <span class=\"comment\">// 登出成功后跳转</span></span><br><span class=\"line\">                        .permitAll()</span><br><span class=\"line\">                );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 运行上面的代码会发现自己的provider没有走进去。我下午尝试的时候还出现了循环依赖，AuthenticationManager 自己循环依赖自己。这个问题还没解决。还在看</p>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"opengl 变换","date":"2024-03-06T05:55:28.000Z","_content":"\n![2024-03-02T220734](2024-03-02T220734.png)\n尽管我们现在已经知道了如何创建一个物体、着色、加入纹理，给它们一些细节的表现，但因为它们都还是静态的物体，仍是不够有趣。我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。我们现在有一个更好的解决方案，使用（多个）矩阵(Matrix)对象可以更好的变换(`Transform`)一个物体。\n<!-- more -->\n\n- [向量](#向量)\n  - [向量与标量运算](#向量与标量运算)\n    - [向量取反](#向量取反)\n    - [向量加减](#向量加减)\n    - [长度](#长度)\n    - [向量相乘](#向量相乘)\n      - [点乘](#点乘)\n      - [叉乘](#叉乘)\n- [矩阵（上难度了）](#矩阵上难度了)\n  - [矩阵的加减](#矩阵的加减)\n  - [矩阵的数乘](#矩阵的数乘)\n  - [矩阵相乘](#矩阵相乘)\n- [矩阵与向量相乘](#矩阵与向量相乘)\n  - [单位矩阵](#单位矩阵)\n  - [缩放](#缩放)\n  - [位移](#位移)\n  - [旋转](#旋转)\n  - [矩阵的组合](#矩阵的组合)\n- [实践](#实践)\n\n\n# 向量\n向量最基本的定义就是一个方向。或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)。你可以把向量想像成一个藏宝图上的指示：“向左走10步，向北走3步，然后向右走5步”；“左”就是方向，“10步”就是向量的长度。那么这个藏宝图的指示一共有3个向量。向量可以在任意维度(Dimension)上，但是我们通常只使用2至4维。如果一个向量有2个维度，它表示一个平面的方向(想象一下2D的图像)，当它有3个维度的时候它可以表达一个3D世界的方向。\n\n下面你会看到3个向量，每个向量在2D图像中都用一个箭头(x, y)表示。我们在2D图片中展示这些向量，因为这样子会更直观一点。你可以把这些2D向量当做z坐标为0的3D向量。由于向量表示的是方向，起始于何处并不会改变它的值。下图我们可以看到向量v¯\n和w¯\n是相等的，尽管他们的起始点不同：\n![2024-03-06T215935](2024-03-06T215935.png)\n\n数学家喜欢在字母上面加一横表示向量，比如说v¯。当用在公式中时它们通常是这样的：\n![2024-03-06T220008](2024-03-06T220008.png)\n\n由于向量是一个方向，所以有些时候会很难形象地将它们用位置(Position)表示出来。为了让其更为直观，我们通常设定这个方向的原点为(0, 0, 0)，然后指向一个方向，对应一个点，使其变为**位置向量**(Position Vector)（你也可以把起点设置为其他的点，然后说：这个向量从这个点起始指向另一个点）。比如说位置向量(3, 5)在图像中的起点会是(0, 0)，并会指向(3, 5)。我们可以使用向量在2D或3D空间中表示方向与位置.\n\n和普通数字一样，我们也可以用向量进行多种运算（其中一些你可能已经看到过了）。\n\n## 向量与标量运算\n标量(Scalar)只是一个数字（或者说是仅有一个分量的向量）。当把一个向量加/减/乘/除一个标量，我们可以简单的把向量的每个分量分别进行该运算。对于加法来说会像这样:\n![2024-03-06T220052](2024-03-06T220052.png)\n其中的+可以是+，-，·或÷，其中·是乘号。注意－和÷运算时不能颠倒（标量-/÷向量），因为颠倒的运算是没有定义的。\n\n### 向量取反\n对一个向量取反(Negate)会将其方向逆转。一个指向东北的向量取反后就指向西南方向了。我们在一个向量的每个分量前加负号就可以实现取反了（或者说用-1数乘该向量）:\n\n![2024-03-06T220128](2024-03-06T220128.png)\n\n### 向量加减\n向量的加法可以被定义为是分量的(Component-wise)相加，即将一个向量中的每一个分量加上另一个向量的对应分量：\n![2024-03-06T220148](2024-03-06T220148.png)\n向量v = (4, 2)和k = (1, 2)可以直观地表示为：\n![2024-03-06T220158](2024-03-06T220158.png)\n就像普通数字的加减一样，向量的减法等于加上第二个向量的相反向量：\n\n![2024-03-06T220226](2024-03-06T220226.png)\n两个向量的相减会得到这两个向量指向位置的差。这在我们想要获取两点的差会非常有用。\n![2024-03-06T220236](2024-03-06T220236.png)\n\n### 长度\n我们使用勾股定理(Pythagoras Theorem)来获取向量的长度(Length)/大小(Magnitude)。如果你把向量的x与y分量画出来，该向量会和x与y分量为边形成一个三角形:\n![2024-03-06T220947](2024-03-06T220947.png)\n\n因为两条边（x和y）是已知的，如果希望知道斜边v¯的长度，我们可以直接通过勾股定理来计算：\n![2024-03-06T221003](2024-03-06T221003.png)\n||v¯||表示向量v¯的长度，我们也可以加上z2把这个公式拓展到三维空间。\n![2024-03-06T221025](2024-03-06T221025.png)\n\n有一个特殊类型的向量叫做单位向量(Unit Vector)。单位向量有一个特别的性质——它的长度是1。我们可以用任意向量的每个分量除以向量的长度得到它的单位向量n^：\n![2024-03-06T221058](2024-03-06T221058.png)\n\n我们把这种方法叫做一个向量的标准化(Normalizing)。单位向量头上有一个^样子的记号。通常单位向量会变得很有用，特别是在我们只关心方向不关心长度的时候（如果改变向量的长度，它的方向并不会改变）。**这种向量一般表示方向，比如游戏中角色的朝向，移动的方向等等**\n\n### 向量相乘\n\n两个向量相乘是一种很奇怪的情况。普通的乘法在向量上是没有定义的，因为它在视觉上是没有意义的。但是在相乘的时候我们有两种特定情况可以选择：一个是点乘(Dot Product)，记作v¯⋅k¯，另一个是叉乘(Cross Product)，记作v¯×k¯。\n#### 点乘\n两个向量的点乘等于它们的数乘结果乘以两个向量之间夹角的余弦值。可能听起来有点费解，我们来看一下公式：\n![2024-03-06T221326](2024-03-06T221326.png)\n它们之间的夹角记作θ。为什么这很有用？想象如果v¯和k¯都是单位向量，它们的长度会等于1。这样公式会有效简化成：\n![2024-03-06T221352](2024-03-06T221352.png)\n现在点积只定义了两个向量的夹角。你也许记得90度的余弦值是0，0度的余弦值是1。**使用点乘可以很容易测试两个向量是否正交(Orthogonal)或平行（正交意味着两个向量互为直角）。**\n所以，我们该如何计算点乘呢？点乘是通过将对应分量逐个相乘，然后再把所得积相加来计算的。两个单位向量的（你可以验证它们的长度都为1）点乘会像是这样：\n![2024-03-06T221516](2024-03-06T221516.png)\n要计算两个单位向量间的夹角，我们可以使用反余弦函数cos−1 ，可得结果是143.1度。现在我们很快就计算出了这两个向量的夹角。点乘会在计算光照的时候非常有用。\n\n#### 叉乘\n叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。接下来的教程中这会非常有用。下面的图片展示了3D空间中叉乘的样子：\n![2024-03-06T221604](2024-03-06T221604.png)\n不同于其他运算，如果你没有钻研过线性代数，可能会觉得叉乘很反直觉，所以只记住公式就没问题啦（记不住也没问题）。下面你会看到两个正交向量A和B叉积：\n![2024-03-06T221611](2024-03-06T221611.png)\n是不是看起来毫无头绪？不过只要你按照步骤来了，你就能得到一个正交于两个输入向量的第三个向量。\n\n# 矩阵（上难度了）\n现在我们已经讨论了向量的全部内容，是时候看看矩阵了！简单来说矩阵就是一个矩形的数字、符号或表达式数组。矩阵中每一项叫做矩阵的元素(Element)。下面是一个2×3矩阵的例子：\n![2024-03-06T221713](2024-03-06T221713.png)\n\n矩阵可以通过(i, j)进行索引，i是行，j是列，这就是上面的矩阵叫做2×3矩阵的原因（3列2行，也叫做矩阵的维度(Dimension)）。这与你在索引2D图像时的(x, y)相反，获取4的索引是(2, 1)（第二行，第一列）（译注：如果是图像索引应该是(1, 2)，先算列，再算行）。\n\n矩阵基本也就是这些了，它就是一个矩形的数学表达式阵列。和向量一样，矩阵也有非常漂亮的数学属性。矩阵有几个运算，分别是：矩阵加法、减法和乘法。\n\n## 矩阵的加减\n矩阵与标量之间的加减定义如下：\n![2024-03-06T221906](2024-03-06T221906.png)\n标量值要加到矩阵的每一个元素上。矩阵与标量的减法也相似：\n![2024-03-06T221916](2024-03-06T221916.png)\n<div class=\"note default\">注意，数学上是没有矩阵与标量相加减的运算的，但是很多线性代数的库都对它有支持（比如说我们用的GLM）。如果你使用过numpy的话，可以把它理解为Broadcasting。</div>\n\n矩阵与矩阵之间的加减就是两个矩阵对应元素的加减运算，所以总体的规则和与标量运算是差不多的，只不过在相同索引下的元素才能进行运算。**这也就是说加法和减法只对同维度的矩阵才是有定义的**。一个3×2矩阵和一个2×3矩阵（或一个3×3矩阵与4×4矩阵）是不能进行加减的。我们看看两个2×2矩阵是怎样相加的：\n\n![2024-03-06T221947](2024-03-06T221947.png)\n同样的法则也适用于减法：\n\n![2024-03-06T222023](2024-03-06T222023.png)\n\n## 矩阵的数乘\n和矩阵与标量的加减一样，矩阵与标量之间的乘法也是矩阵的每一个元素分别乘以该标量。下面的例子展示了乘法的过程：\n![2024-03-06T222119](2024-03-06T222119.png)\n现在我们也就能明白为什么这些单独的数字要叫做标量(Scalar)了。简单来说，标量就是用它的值缩放(Scale)矩阵的所有元素（译注：注意Scalar是由Scale + -ar演变过来的）。前面那个例子中，所有的元素都被放大了2倍。\n\n到目前为止都还好，我们的例子都不复杂。不过矩阵与矩阵的乘法就不一样了。\n\n## 矩阵相乘\n矩阵之间的乘法不见得有多复杂，但的确很难让人适应。矩阵乘法基本上意味着遵照规定好的法则进行相乘。当然，相乘还有一些限制：\n只有当左侧矩阵的列数与右侧矩阵的行数相等，两个矩阵才能相乘。\n矩阵相乘不遵守交换律(Commutative)，也就是说A⋅B≠B⋅A。\n我们先看一个两个2×2矩阵相乘的例子：\n![2024-03-06T222404](2024-03-06T222404.png)\n现在你可能会在想了：天哪，刚刚到底发生了什么? 矩阵的乘法是一系列乘法和加法组合的结果，它使用到了左侧矩阵的行和右侧矩阵的列。我们可以看下面的图片：\n![2024-03-06T222415](2024-03-06T222415.png)\n我们首先把左侧矩阵的行和右侧矩阵的列拿出来。这些挑出来行和列将决定我们该计算结果2x2矩阵的哪个输出值。如果取的是左矩阵的第一行，输出值就会出现在结果矩阵的第一行。接下来再取一列，如果我们取的是右矩阵的第一列，最终值则会出现在结果矩阵的第一列。这正是红框里的情况。如果想计算结果矩阵右下角的值，我们要用第一个矩阵的第二行和第二个矩阵的第二列（译注：简单来说就是结果矩阵的元素的行取决于第一个矩阵，列取决于第二个矩阵）。\n\n<div class=\"note info\">简单理解的话，就是第一个矩阵的**第i行**跟第二个矩阵的**第j列**分别作为向量，做点乘，结果放在结果矩阵的i行j列处。这也是为什么第一个矩阵的列数需要等于第二个矩阵的行数。因为第一个矩阵每一行都有m列，这m列需要跟第二个矩阵的行数匹配，这样，从第一个矩阵取出的行（m列），才能与第二个矩阵取出的到列（m行）相乘</div>\n\n不管怎样，现在我们知道如何进行矩阵相乘了，**我们可以开始学习好东西了**。\n\n# 矩阵与向量相乘\n---\n目前为止，通过这些教程我们已经相当了解向量了。我们用向量来表示位置，表示颜色，甚至是纹理坐标。让我们更深入了解一下向量，它其实就是一个N×1矩阵，N表示向量分量的个数（也叫N维(N-dimensional)向量）。如果你仔细思考一下就会明白。向量和矩阵一样都是一个数字序列，但它只有1列。那么，这个新的定义对我们有什么帮助呢？如果我们有一个M×N矩阵，我们可以用这个矩阵乘以我们的N×1向量，因为这个矩阵的列数等于向量的行数，所以它们就能相乘。\n\n但是为什么我们会关心矩阵能否乘以一个向量？好吧，正巧，很多有趣的2D/3D变换都可以放在一个矩阵中，用这个矩阵乘以我们的向量将变换(Transform)这个向量。如果你仍然有些困惑，我们来看一些例子，你很快就能明白了。\n\n## 单位矩阵\n在OpenGL中，由于某些原因我们通常使用4×4的变换矩阵，而其中最重要的原因就是大部分的向量都是4分量的。我们能想到的最简单的变换矩阵就是单位矩阵(Identity Matrix)。单位矩阵是一个除了对角线以外都是0的N×N矩阵。在下式中可以看到，这种变换矩阵使一个向量完全不变：\n![2024-03-06T223156](2024-03-06T223156.png)\n向量看起来完全没变。从乘法法则来看就很容易理解来：第一个结果元素是矩阵的第一行的每个元素乘以向量的每个对应元素。因为每行的元素除了第一个都是0，可得：$1⋅1+0⋅2+0⋅3+0⋅4=1$\n，向量的其他3个元素同理。\n\n<div class=\"note success\">你可能会奇怪一个没变换的变换矩阵有什么用？单位矩阵通常是生成其他变换矩阵的起点，如果我们深挖线性代数，这还是一个对证明定理、解线性方程非常有用的矩阵。</div>\n\n## 缩放\n对一个向量进行缩放(Scaling)就是对向量的长度进行缩放，而保持它的方向不变。由于我们进行的是2维或3维操作，我们可以分别定义一个有2或3个缩放变量的向量，每个变量缩放一个轴(x、y或z)。\n\n我们先来尝试缩放向量$v¯=(3,2)$。我们可以把向量沿着x轴缩放0.5，使它的宽度缩小为原来的二分之一；我们将沿着y轴把向量的高度缩放为原来的两倍。我们看看把向量缩放(0.5, 2)倍所获得的$s¯$\n是什么样的：\n![2024-03-06T223340](2024-03-06T223340.png)\n\n记住，OpenGL通常是在3D空间进行操作的，对于2D的情况我们可以把z轴缩放1倍，这样z轴的值就不变了。我们刚刚的缩放操作是**不均匀**(Non-uniform)缩放，因为每个轴的`缩放因子`(Scaling Factor)都不一样。如果每个轴的`缩放因子`都一样那么就叫**均匀缩放**(Uniform Scale)。\n\n我们下面会构造一个变换矩阵来为我们提供缩放功能。我们从单位矩阵了解到，每个对角线元素会分别与向量的对应元素相乘。如果我们把1变为3会怎样？这样子的话，我们就把向量的每个元素乘以3了，这事实上就把向量缩放3倍。如果我们把缩放变量表示为$(S1,S2,S3)$\n我们可以为任意向量$(x,y,z)$\n定义一个缩放矩阵：\n![2024-03-06T223518](2024-03-06T223518.png)\n注意，第四个缩放向量仍然是1，因为在3D空间中缩放w分量是无意义的。w分量另有其他用途，在后面我们会看到。\n\n## 位移\n位移(Translation)是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动了原始向量。我们已经讨论了向量加法，所以这应该不会太陌生。\n\n和缩放矩阵一样，在4×4矩阵上有几个特别的位置用来执行特定的操作，对于位移来说它们是第四列最上面的3个值。如果我们把位移向量表示为$(Tx,Ty,Tz)$\n，我们就能把位移矩阵定义为：\n![2024-03-06T223634](2024-03-06T223634.png)\n这样是能工作的，因为所有的位移值都要乘以向量的w行，所以位移值会加到向量的原始值上（想想矩阵乘法法则）。而如果你用3x3矩阵我们的位移值就没地方放也没地方乘了，所以是不行的。\n<div class=\"note info\">**齐次坐标(Homogeneous Coordinates)**\n\n向量的w分量也叫齐次坐标。想要从齐次向量得到3D向量，我们可以把x、y和z坐标分别除以w坐标。我们通常不会注意这个问题，因为w分量通常是1.0。使用齐次坐标有几点好处：它允许我们在3D向量上进行位移（如果没有w分量我们是不能位移向量的），而且下一章我们会用w值创建3D视觉效果。\n\n如果一个向量的齐次坐标是0，这个坐标就是方向向量(Direction Vector)，因为w坐标是0，这个向量就不能位移（译注：这也就是我们说的不能位移一个方向）。</div>\n\n## 旋转\n\n上面几个的变换内容相对容易理解，在2D或3D空间中也容易表示出来，但旋转(Rotation)稍复杂些。如果你想知道旋转矩阵是如何构造出来的，我推荐你去看可汗学院线性代数的视频。\n\n首先我们来定义一个向量的旋转到底是什么。2D或3D空间中的旋转用角(Angle)来表示。角可以是角度制或弧度制的，周角是360角度或2 PI弧度。我个人更喜欢用角度，因为它们看起来更直观。\n<div class=\"note default\">大多数旋转函数需要用弧度制的角，但幸运的是角度制的角也可以很容易地转化为弧度制的：\n\n弧度转角度：角度 = 弧度 * $(180.0f / PI)$\n角度转弧度：弧度 = 角度 * $(PI / 180.0f)$\nPI约等于3.14159265359。</div>\n\n转半圈会旋转360/2 = 180度，向右旋转1/5圈表示向右旋转360/5 = 72度。下图中展示的2D向量$v¯$\n是由$k¯$\n向右旋转72度所得的：![2024-03-06T223854](2024-03-06T223854.png)\n在3D空间中旋转需要定义一个角和一个旋转轴(Rotation Axis)。物体会沿着给定的旋转轴旋转特定角度。如果你想要更形象化的感受，可以试试向下看着一个特定的旋转轴，同时将你的头部旋转一定角度。当2D向量在3D空间中旋转时，我们把旋转轴设为z轴（尝试想象这种情况）。\n\n使用三角学，给定一个角度，可以把一个向量变换为一个经过旋转的新向量。这通常是使用一系列正弦和余弦函数（一般简称sin和cos）各种巧妙的组合得到的。当然，讨论如何生成变换矩阵超出了这个教程的范围。\n\n旋转矩阵在3D空间中每个单位轴都有不同定义，旋转角度用θ\n表示：\n\n沿x轴旋转：\n\n![2024-03-06T223925](2024-03-06T223925.png)\n\n沿y轴旋转：\n![2024-03-06T223938](2024-03-06T223938.png)\n沿z轴旋转：\n![2024-03-06T223948](2024-03-06T223948.png)\n利用旋转矩阵我们可以把任意位置向量沿一个单位旋转轴进行旋转。也可以将多个矩阵复合，比如先沿着x轴旋转再沿着y轴旋转。但是这会很快导致一个问题——万向节死锁（Gimbal Lock，可以看看这个视频（优酷）来了解）。在这里我们不会讨论它的细节，但是对于3D空间中的旋转，一个更好的模型是沿着任意的一个轴，比如单位向量$(0.662, 0.2, 0.7222)$旋转，而不是对一系列旋转矩阵进行复合。这样的一个（超级麻烦的）矩阵是存在的，见下面这个公式，其中(Rx,Ry,Rz)\n代表任意旋转轴：\n![2024-03-06T224114](2024-03-06T224114.png)\n在数学上讨论如何生成这样的矩阵仍然超出了本节内容。但是记住，即使这样一个矩阵也不能完全解决万向节死锁问题（尽管会极大地避免）。避免万向节死锁的真正解决方案是使用四元数(Quaternion)，它不仅更安全，而且计算会更有效率。四元数可能会在后面的教程中讨论。\n\n## 矩阵的组合\n使用矩阵进行变换的真正力量在于，根据矩阵之间的乘法，我们可以把多个变换组合到一个矩阵中。让我们看看我们是否能生成一个变换矩阵，让它组合多个变换。假设我们有一个顶点(x, y, z)，我们希望将其缩放2倍，然后位移(1, 2, 3)个单位。我们需要一个位移和缩放矩阵来完成这些变换。结果的变换矩阵看起来像这样：\n![2024-03-06T224151](2024-03-06T224151.png)\n\n注意，当矩阵相乘时我们先写位移再写缩放变换的。矩阵乘法是不遵守交换律的，这意味着它们的顺序很重要。当矩阵相乘时，在最右边的矩阵是第一个与向量相乘的，所以你应该从右向左读这个乘法。建议您在组合矩阵时，先进行缩放操作，然后是旋转，最后才是位移，否则它们会（消极地）互相影响。比如，如果你先位移再缩放，位移的向量也会同样被缩放（译注：比如向某方向移动2米，2米也许会被缩放成1米）！\n\n用最终的变换矩阵左乘我们的向量会得到以下结果：\n![2024-03-06T224240](2024-03-06T224240.png)\n不错！向量先缩放2倍，然后位移了(1, 2, 3)个单位。\n\n# 实践\n现在我们已经解释了变换背后的所有理论，是时候将这些知识利用起来了。OpenGL没有自带任何的矩阵和向量知识，所以我们必须定义自己的数学类和函数。在教程中我们更希望抽象所有的数学细节，使用已经做好了的数学库。幸运的是，有个易于使用，专门为OpenGL量身定做的数学库，那就是GLM。\n\nGLM是OpenGL Mathematics的缩写，它是一个只有头文件的库，也就是说我们只需包含对应的头文件就行了，不用链接和编译。GLM可以在它们的网站上[下载](https://glm.g-truc.net/0.9.8/index.html)。把头文件的根目录复制到你的includes文件夹，然后你就可以使用这个库了。\n\n{% note danger no-icon %}\nGLM库从0.9.9版本起，默认会将矩阵类型初始化为一个零矩阵（所有元素均为0），而不是单位矩阵（对角元素为1，其它元素为0）。如果你使用的是0.9.9或0.9.9以上的版本，你需要将所有的矩阵初始化改为 `glm::mat4 mat = glm::mat4(1.0f)` 。如果你想与本教程的代码保持一致，请使用低于0.9.9版本的GLM，或者改用上述代码初始化所有的矩阵。\n{% endnote %}\n\n我们需要的GLM的大多数功能都可以从下面这3个头文件中找到：\n```c++\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n#include <glm/gtc/type_ptr.hpp>\n```\n\n我们来看看是否可以利用我们刚学的变换知识把一个向量(1, 0, 0)位移(1, 1, 0)个单位（注意，我们把它定义为一个glm::vec4类型的值，齐次坐标设定为1.0）：\n```c++\nglm::vec4 vec(1.0f, 0.0f, 0.0f, 1.0f);\n// 译注：下面就是矩阵初始化的一个例子，如果使用的是0.9.9及以上版本\n// 下面这行代码就需要改为:\n// glm::mat4 trans = glm::mat4(1.0f)\n// 之后将不再进行提示\nglm::mat4 trans;\ntrans = glm::translate(trans, glm::vec3(1.0f, 1.0f, 0.0f));\nvec = trans * vec;\nstd::cout << vec.x << vec.y << vec.z << std::endl;\n```\n\n我们先用GLM内建的向量类定义一个叫做vec的向量。接下来定义一个mat4类型的trans，默认是一个4×4单位矩阵。下一步是创建一个变换矩阵，我们是把单位矩阵和一个位移向量传递给glm::translate函数来完成这个工作的（然后用给定的矩阵乘以位移矩阵就能获得最后需要的矩阵）。 之后我们把向量乘以位移矩阵并且输出最后的结果。如果你仍记得位移矩阵是如何工作的话，得到的向量应该是(1 + 1, 0 + 1, 0 + 0)，也就是(2, 1, 0)。这个代码片段将会输出210，所以这个位移矩阵是正确的。\n\n我们来做些更有意思的事情，让我们来旋转和缩放之前教程中的那个箱子。首先我们把箱子逆时针旋转90度。然后缩放0.5倍，使它变成原来的一半大。我们先来创建变换矩阵：\n\n```c++\nglm::mat4 trans;\ntrans = glm::rotate(trans, glm::radians(90.0f), glm::vec3(0.0, 0.0, 1.0));\ntrans = glm::scale(trans, glm::vec3(0.5, 0.5, 0.5));\n```\n\n首先，我们把箱子在每个轴都缩放到0.5倍，然后沿z轴旋转90度。GLM希望它的角度是弧度制的(Radian)，所以我们使用glm::radians将角度转化为弧度。注意有纹理的那面矩形是在XY平面上的，所以我们需要把它绕着z轴旋转。因为我们把这个矩阵传递给了GLM的每个函数，GLM会自动将矩阵相乘，返回的结果是一个包括了多个变换的变换矩阵。\n\n下一个大问题是：如何把矩阵传递给着色器？我们在前面简单提到过GLSL里也有一个mat4类型。所以我们将修改顶点着色器让其接收一个mat4的uniform变量，然后再用矩阵uniform乘以位置向量：\n\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoord;\n\nout vec2 TexCoord;\n\nuniform mat4 transform;\n\nvoid main()\n{\n    gl_Position = transform * vec4(aPos, 1.0f);\n    TexCoord = vec2(aTexCoord.x, 1.0 - aTexCoord.y);\n}\n```\n在把位置向量传给gl_Position之前，我们先添加一个uniform，并且将其与变换矩阵相乘。我们的箱子现在应该是原来的二分之一大小并（向左）旋转了90度。当然，我们仍需要把变换矩阵传递给着色器：\n```c++\nunsigned int transformLoc = glGetUniformLocation(ourShader.ID, \"transform\");\nglUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(trans));\n```\n我们首先查询uniform变量的地址，然后用有Matrix4fv后缀的glUniform函数把矩阵数据发送给着色器。第一个参数你现在应该很熟悉了，它是uniform的位置值。第二个参数告诉OpenGL我们将要发送多少个矩阵，这里是1。第三个参数询问我们是否希望对我们的矩阵进行转置(Transpose)，也就是说交换我们矩阵的行和列。OpenGL开发者通常使用一种内部矩阵布局，叫做列主序(Column-major Ordering)布局。GLM的默认布局就是列主序，所以并不需要转置矩阵，我们填GL_FALSE。最后一个参数是真正的矩阵数据，但是GLM并不是把它们的矩阵储存为OpenGL所希望接受的那种，因此我们要先用GLM的自带的函数value_ptr来变换这些数据。\n\n![2024-03-06T233417](2024-03-06T233417.png)\n\n完美！我们的箱子向左侧旋转，并是原来的一半大小，所以变换成功了。我们现在做些更有意思的，看看我们是否可以让箱子随着时间旋转，我们还会重新把箱子放在窗口的右下角。要让箱子随着时间推移旋转，我们必须在游戏循环中更新变换矩阵，因为它在每一次渲染迭代中都要更新。我们使用GLFW的时间函数来获取不同时间的角度：\n```c++\nglm::mat4 trans;\ntrans = glm::translate(trans, glm::vec3(0.5f, -0.5f, 0.0f));\ntrans = glm::rotate(trans, (float)glfwGetTime(), glm::vec3(0.0f, 0.0f, 1.0f));\n```\n要记住的是前面的例子中我们可以在任何地方声明变换矩阵，但是现在我们必须在每一次迭代中创建它，从而保证我们能够不断更新旋转角度。这也就意味着我们不得不在每次游戏循环的迭代中重新创建变换矩阵。通常在渲染场景的时候，我们也会有多个需要在每次渲染迭代中都用新值重新创建的变换矩阵\n\n在这里我们先把箱子围绕原点(0, 0, 0)旋转，之后，我们把旋转过后的箱子位移到屏幕的右下角。记住，实际的变换顺序应该与阅读顺序相反：尽管在代码中我们先位移再旋转，实际的变换却是先应用旋转再是位移的。明白所有这些变换的组合，并且知道它们是如何应用到物体上是一件非常困难的事情。只有不断地尝试和实验这些变换你才能快速地掌握它们。","source":"_posts/opengl_transformation.md","raw":"---\ntitle: opengl 变换\ndate: 2024-03-06T21:55:28+08:00\ncategories: \n- c++\n- OpenGL\ntags: \n- [c++]\n- [OpenGL]\n---\n\n![2024-03-02T220734](2024-03-02T220734.png)\n尽管我们现在已经知道了如何创建一个物体、着色、加入纹理，给它们一些细节的表现，但因为它们都还是静态的物体，仍是不够有趣。我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。我们现在有一个更好的解决方案，使用（多个）矩阵(Matrix)对象可以更好的变换(`Transform`)一个物体。\n<!-- more -->\n\n- [向量](#向量)\n  - [向量与标量运算](#向量与标量运算)\n    - [向量取反](#向量取反)\n    - [向量加减](#向量加减)\n    - [长度](#长度)\n    - [向量相乘](#向量相乘)\n      - [点乘](#点乘)\n      - [叉乘](#叉乘)\n- [矩阵（上难度了）](#矩阵上难度了)\n  - [矩阵的加减](#矩阵的加减)\n  - [矩阵的数乘](#矩阵的数乘)\n  - [矩阵相乘](#矩阵相乘)\n- [矩阵与向量相乘](#矩阵与向量相乘)\n  - [单位矩阵](#单位矩阵)\n  - [缩放](#缩放)\n  - [位移](#位移)\n  - [旋转](#旋转)\n  - [矩阵的组合](#矩阵的组合)\n- [实践](#实践)\n\n\n# 向量\n向量最基本的定义就是一个方向。或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)。你可以把向量想像成一个藏宝图上的指示：“向左走10步，向北走3步，然后向右走5步”；“左”就是方向，“10步”就是向量的长度。那么这个藏宝图的指示一共有3个向量。向量可以在任意维度(Dimension)上，但是我们通常只使用2至4维。如果一个向量有2个维度，它表示一个平面的方向(想象一下2D的图像)，当它有3个维度的时候它可以表达一个3D世界的方向。\n\n下面你会看到3个向量，每个向量在2D图像中都用一个箭头(x, y)表示。我们在2D图片中展示这些向量，因为这样子会更直观一点。你可以把这些2D向量当做z坐标为0的3D向量。由于向量表示的是方向，起始于何处并不会改变它的值。下图我们可以看到向量v¯\n和w¯\n是相等的，尽管他们的起始点不同：\n![2024-03-06T215935](2024-03-06T215935.png)\n\n数学家喜欢在字母上面加一横表示向量，比如说v¯。当用在公式中时它们通常是这样的：\n![2024-03-06T220008](2024-03-06T220008.png)\n\n由于向量是一个方向，所以有些时候会很难形象地将它们用位置(Position)表示出来。为了让其更为直观，我们通常设定这个方向的原点为(0, 0, 0)，然后指向一个方向，对应一个点，使其变为**位置向量**(Position Vector)（你也可以把起点设置为其他的点，然后说：这个向量从这个点起始指向另一个点）。比如说位置向量(3, 5)在图像中的起点会是(0, 0)，并会指向(3, 5)。我们可以使用向量在2D或3D空间中表示方向与位置.\n\n和普通数字一样，我们也可以用向量进行多种运算（其中一些你可能已经看到过了）。\n\n## 向量与标量运算\n标量(Scalar)只是一个数字（或者说是仅有一个分量的向量）。当把一个向量加/减/乘/除一个标量，我们可以简单的把向量的每个分量分别进行该运算。对于加法来说会像这样:\n![2024-03-06T220052](2024-03-06T220052.png)\n其中的+可以是+，-，·或÷，其中·是乘号。注意－和÷运算时不能颠倒（标量-/÷向量），因为颠倒的运算是没有定义的。\n\n### 向量取反\n对一个向量取反(Negate)会将其方向逆转。一个指向东北的向量取反后就指向西南方向了。我们在一个向量的每个分量前加负号就可以实现取反了（或者说用-1数乘该向量）:\n\n![2024-03-06T220128](2024-03-06T220128.png)\n\n### 向量加减\n向量的加法可以被定义为是分量的(Component-wise)相加，即将一个向量中的每一个分量加上另一个向量的对应分量：\n![2024-03-06T220148](2024-03-06T220148.png)\n向量v = (4, 2)和k = (1, 2)可以直观地表示为：\n![2024-03-06T220158](2024-03-06T220158.png)\n就像普通数字的加减一样，向量的减法等于加上第二个向量的相反向量：\n\n![2024-03-06T220226](2024-03-06T220226.png)\n两个向量的相减会得到这两个向量指向位置的差。这在我们想要获取两点的差会非常有用。\n![2024-03-06T220236](2024-03-06T220236.png)\n\n### 长度\n我们使用勾股定理(Pythagoras Theorem)来获取向量的长度(Length)/大小(Magnitude)。如果你把向量的x与y分量画出来，该向量会和x与y分量为边形成一个三角形:\n![2024-03-06T220947](2024-03-06T220947.png)\n\n因为两条边（x和y）是已知的，如果希望知道斜边v¯的长度，我们可以直接通过勾股定理来计算：\n![2024-03-06T221003](2024-03-06T221003.png)\n||v¯||表示向量v¯的长度，我们也可以加上z2把这个公式拓展到三维空间。\n![2024-03-06T221025](2024-03-06T221025.png)\n\n有一个特殊类型的向量叫做单位向量(Unit Vector)。单位向量有一个特别的性质——它的长度是1。我们可以用任意向量的每个分量除以向量的长度得到它的单位向量n^：\n![2024-03-06T221058](2024-03-06T221058.png)\n\n我们把这种方法叫做一个向量的标准化(Normalizing)。单位向量头上有一个^样子的记号。通常单位向量会变得很有用，特别是在我们只关心方向不关心长度的时候（如果改变向量的长度，它的方向并不会改变）。**这种向量一般表示方向，比如游戏中角色的朝向，移动的方向等等**\n\n### 向量相乘\n\n两个向量相乘是一种很奇怪的情况。普通的乘法在向量上是没有定义的，因为它在视觉上是没有意义的。但是在相乘的时候我们有两种特定情况可以选择：一个是点乘(Dot Product)，记作v¯⋅k¯，另一个是叉乘(Cross Product)，记作v¯×k¯。\n#### 点乘\n两个向量的点乘等于它们的数乘结果乘以两个向量之间夹角的余弦值。可能听起来有点费解，我们来看一下公式：\n![2024-03-06T221326](2024-03-06T221326.png)\n它们之间的夹角记作θ。为什么这很有用？想象如果v¯和k¯都是单位向量，它们的长度会等于1。这样公式会有效简化成：\n![2024-03-06T221352](2024-03-06T221352.png)\n现在点积只定义了两个向量的夹角。你也许记得90度的余弦值是0，0度的余弦值是1。**使用点乘可以很容易测试两个向量是否正交(Orthogonal)或平行（正交意味着两个向量互为直角）。**\n所以，我们该如何计算点乘呢？点乘是通过将对应分量逐个相乘，然后再把所得积相加来计算的。两个单位向量的（你可以验证它们的长度都为1）点乘会像是这样：\n![2024-03-06T221516](2024-03-06T221516.png)\n要计算两个单位向量间的夹角，我们可以使用反余弦函数cos−1 ，可得结果是143.1度。现在我们很快就计算出了这两个向量的夹角。点乘会在计算光照的时候非常有用。\n\n#### 叉乘\n叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。接下来的教程中这会非常有用。下面的图片展示了3D空间中叉乘的样子：\n![2024-03-06T221604](2024-03-06T221604.png)\n不同于其他运算，如果你没有钻研过线性代数，可能会觉得叉乘很反直觉，所以只记住公式就没问题啦（记不住也没问题）。下面你会看到两个正交向量A和B叉积：\n![2024-03-06T221611](2024-03-06T221611.png)\n是不是看起来毫无头绪？不过只要你按照步骤来了，你就能得到一个正交于两个输入向量的第三个向量。\n\n# 矩阵（上难度了）\n现在我们已经讨论了向量的全部内容，是时候看看矩阵了！简单来说矩阵就是一个矩形的数字、符号或表达式数组。矩阵中每一项叫做矩阵的元素(Element)。下面是一个2×3矩阵的例子：\n![2024-03-06T221713](2024-03-06T221713.png)\n\n矩阵可以通过(i, j)进行索引，i是行，j是列，这就是上面的矩阵叫做2×3矩阵的原因（3列2行，也叫做矩阵的维度(Dimension)）。这与你在索引2D图像时的(x, y)相反，获取4的索引是(2, 1)（第二行，第一列）（译注：如果是图像索引应该是(1, 2)，先算列，再算行）。\n\n矩阵基本也就是这些了，它就是一个矩形的数学表达式阵列。和向量一样，矩阵也有非常漂亮的数学属性。矩阵有几个运算，分别是：矩阵加法、减法和乘法。\n\n## 矩阵的加减\n矩阵与标量之间的加减定义如下：\n![2024-03-06T221906](2024-03-06T221906.png)\n标量值要加到矩阵的每一个元素上。矩阵与标量的减法也相似：\n![2024-03-06T221916](2024-03-06T221916.png)\n<div class=\"note default\">注意，数学上是没有矩阵与标量相加减的运算的，但是很多线性代数的库都对它有支持（比如说我们用的GLM）。如果你使用过numpy的话，可以把它理解为Broadcasting。</div>\n\n矩阵与矩阵之间的加减就是两个矩阵对应元素的加减运算，所以总体的规则和与标量运算是差不多的，只不过在相同索引下的元素才能进行运算。**这也就是说加法和减法只对同维度的矩阵才是有定义的**。一个3×2矩阵和一个2×3矩阵（或一个3×3矩阵与4×4矩阵）是不能进行加减的。我们看看两个2×2矩阵是怎样相加的：\n\n![2024-03-06T221947](2024-03-06T221947.png)\n同样的法则也适用于减法：\n\n![2024-03-06T222023](2024-03-06T222023.png)\n\n## 矩阵的数乘\n和矩阵与标量的加减一样，矩阵与标量之间的乘法也是矩阵的每一个元素分别乘以该标量。下面的例子展示了乘法的过程：\n![2024-03-06T222119](2024-03-06T222119.png)\n现在我们也就能明白为什么这些单独的数字要叫做标量(Scalar)了。简单来说，标量就是用它的值缩放(Scale)矩阵的所有元素（译注：注意Scalar是由Scale + -ar演变过来的）。前面那个例子中，所有的元素都被放大了2倍。\n\n到目前为止都还好，我们的例子都不复杂。不过矩阵与矩阵的乘法就不一样了。\n\n## 矩阵相乘\n矩阵之间的乘法不见得有多复杂，但的确很难让人适应。矩阵乘法基本上意味着遵照规定好的法则进行相乘。当然，相乘还有一些限制：\n只有当左侧矩阵的列数与右侧矩阵的行数相等，两个矩阵才能相乘。\n矩阵相乘不遵守交换律(Commutative)，也就是说A⋅B≠B⋅A。\n我们先看一个两个2×2矩阵相乘的例子：\n![2024-03-06T222404](2024-03-06T222404.png)\n现在你可能会在想了：天哪，刚刚到底发生了什么? 矩阵的乘法是一系列乘法和加法组合的结果，它使用到了左侧矩阵的行和右侧矩阵的列。我们可以看下面的图片：\n![2024-03-06T222415](2024-03-06T222415.png)\n我们首先把左侧矩阵的行和右侧矩阵的列拿出来。这些挑出来行和列将决定我们该计算结果2x2矩阵的哪个输出值。如果取的是左矩阵的第一行，输出值就会出现在结果矩阵的第一行。接下来再取一列，如果我们取的是右矩阵的第一列，最终值则会出现在结果矩阵的第一列。这正是红框里的情况。如果想计算结果矩阵右下角的值，我们要用第一个矩阵的第二行和第二个矩阵的第二列（译注：简单来说就是结果矩阵的元素的行取决于第一个矩阵，列取决于第二个矩阵）。\n\n<div class=\"note info\">简单理解的话，就是第一个矩阵的**第i行**跟第二个矩阵的**第j列**分别作为向量，做点乘，结果放在结果矩阵的i行j列处。这也是为什么第一个矩阵的列数需要等于第二个矩阵的行数。因为第一个矩阵每一行都有m列，这m列需要跟第二个矩阵的行数匹配，这样，从第一个矩阵取出的行（m列），才能与第二个矩阵取出的到列（m行）相乘</div>\n\n不管怎样，现在我们知道如何进行矩阵相乘了，**我们可以开始学习好东西了**。\n\n# 矩阵与向量相乘\n---\n目前为止，通过这些教程我们已经相当了解向量了。我们用向量来表示位置，表示颜色，甚至是纹理坐标。让我们更深入了解一下向量，它其实就是一个N×1矩阵，N表示向量分量的个数（也叫N维(N-dimensional)向量）。如果你仔细思考一下就会明白。向量和矩阵一样都是一个数字序列，但它只有1列。那么，这个新的定义对我们有什么帮助呢？如果我们有一个M×N矩阵，我们可以用这个矩阵乘以我们的N×1向量，因为这个矩阵的列数等于向量的行数，所以它们就能相乘。\n\n但是为什么我们会关心矩阵能否乘以一个向量？好吧，正巧，很多有趣的2D/3D变换都可以放在一个矩阵中，用这个矩阵乘以我们的向量将变换(Transform)这个向量。如果你仍然有些困惑，我们来看一些例子，你很快就能明白了。\n\n## 单位矩阵\n在OpenGL中，由于某些原因我们通常使用4×4的变换矩阵，而其中最重要的原因就是大部分的向量都是4分量的。我们能想到的最简单的变换矩阵就是单位矩阵(Identity Matrix)。单位矩阵是一个除了对角线以外都是0的N×N矩阵。在下式中可以看到，这种变换矩阵使一个向量完全不变：\n![2024-03-06T223156](2024-03-06T223156.png)\n向量看起来完全没变。从乘法法则来看就很容易理解来：第一个结果元素是矩阵的第一行的每个元素乘以向量的每个对应元素。因为每行的元素除了第一个都是0，可得：$1⋅1+0⋅2+0⋅3+0⋅4=1$\n，向量的其他3个元素同理。\n\n<div class=\"note success\">你可能会奇怪一个没变换的变换矩阵有什么用？单位矩阵通常是生成其他变换矩阵的起点，如果我们深挖线性代数，这还是一个对证明定理、解线性方程非常有用的矩阵。</div>\n\n## 缩放\n对一个向量进行缩放(Scaling)就是对向量的长度进行缩放，而保持它的方向不变。由于我们进行的是2维或3维操作，我们可以分别定义一个有2或3个缩放变量的向量，每个变量缩放一个轴(x、y或z)。\n\n我们先来尝试缩放向量$v¯=(3,2)$。我们可以把向量沿着x轴缩放0.5，使它的宽度缩小为原来的二分之一；我们将沿着y轴把向量的高度缩放为原来的两倍。我们看看把向量缩放(0.5, 2)倍所获得的$s¯$\n是什么样的：\n![2024-03-06T223340](2024-03-06T223340.png)\n\n记住，OpenGL通常是在3D空间进行操作的，对于2D的情况我们可以把z轴缩放1倍，这样z轴的值就不变了。我们刚刚的缩放操作是**不均匀**(Non-uniform)缩放，因为每个轴的`缩放因子`(Scaling Factor)都不一样。如果每个轴的`缩放因子`都一样那么就叫**均匀缩放**(Uniform Scale)。\n\n我们下面会构造一个变换矩阵来为我们提供缩放功能。我们从单位矩阵了解到，每个对角线元素会分别与向量的对应元素相乘。如果我们把1变为3会怎样？这样子的话，我们就把向量的每个元素乘以3了，这事实上就把向量缩放3倍。如果我们把缩放变量表示为$(S1,S2,S3)$\n我们可以为任意向量$(x,y,z)$\n定义一个缩放矩阵：\n![2024-03-06T223518](2024-03-06T223518.png)\n注意，第四个缩放向量仍然是1，因为在3D空间中缩放w分量是无意义的。w分量另有其他用途，在后面我们会看到。\n\n## 位移\n位移(Translation)是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动了原始向量。我们已经讨论了向量加法，所以这应该不会太陌生。\n\n和缩放矩阵一样，在4×4矩阵上有几个特别的位置用来执行特定的操作，对于位移来说它们是第四列最上面的3个值。如果我们把位移向量表示为$(Tx,Ty,Tz)$\n，我们就能把位移矩阵定义为：\n![2024-03-06T223634](2024-03-06T223634.png)\n这样是能工作的，因为所有的位移值都要乘以向量的w行，所以位移值会加到向量的原始值上（想想矩阵乘法法则）。而如果你用3x3矩阵我们的位移值就没地方放也没地方乘了，所以是不行的。\n<div class=\"note info\">**齐次坐标(Homogeneous Coordinates)**\n\n向量的w分量也叫齐次坐标。想要从齐次向量得到3D向量，我们可以把x、y和z坐标分别除以w坐标。我们通常不会注意这个问题，因为w分量通常是1.0。使用齐次坐标有几点好处：它允许我们在3D向量上进行位移（如果没有w分量我们是不能位移向量的），而且下一章我们会用w值创建3D视觉效果。\n\n如果一个向量的齐次坐标是0，这个坐标就是方向向量(Direction Vector)，因为w坐标是0，这个向量就不能位移（译注：这也就是我们说的不能位移一个方向）。</div>\n\n## 旋转\n\n上面几个的变换内容相对容易理解，在2D或3D空间中也容易表示出来，但旋转(Rotation)稍复杂些。如果你想知道旋转矩阵是如何构造出来的，我推荐你去看可汗学院线性代数的视频。\n\n首先我们来定义一个向量的旋转到底是什么。2D或3D空间中的旋转用角(Angle)来表示。角可以是角度制或弧度制的，周角是360角度或2 PI弧度。我个人更喜欢用角度，因为它们看起来更直观。\n<div class=\"note default\">大多数旋转函数需要用弧度制的角，但幸运的是角度制的角也可以很容易地转化为弧度制的：\n\n弧度转角度：角度 = 弧度 * $(180.0f / PI)$\n角度转弧度：弧度 = 角度 * $(PI / 180.0f)$\nPI约等于3.14159265359。</div>\n\n转半圈会旋转360/2 = 180度，向右旋转1/5圈表示向右旋转360/5 = 72度。下图中展示的2D向量$v¯$\n是由$k¯$\n向右旋转72度所得的：![2024-03-06T223854](2024-03-06T223854.png)\n在3D空间中旋转需要定义一个角和一个旋转轴(Rotation Axis)。物体会沿着给定的旋转轴旋转特定角度。如果你想要更形象化的感受，可以试试向下看着一个特定的旋转轴，同时将你的头部旋转一定角度。当2D向量在3D空间中旋转时，我们把旋转轴设为z轴（尝试想象这种情况）。\n\n使用三角学，给定一个角度，可以把一个向量变换为一个经过旋转的新向量。这通常是使用一系列正弦和余弦函数（一般简称sin和cos）各种巧妙的组合得到的。当然，讨论如何生成变换矩阵超出了这个教程的范围。\n\n旋转矩阵在3D空间中每个单位轴都有不同定义，旋转角度用θ\n表示：\n\n沿x轴旋转：\n\n![2024-03-06T223925](2024-03-06T223925.png)\n\n沿y轴旋转：\n![2024-03-06T223938](2024-03-06T223938.png)\n沿z轴旋转：\n![2024-03-06T223948](2024-03-06T223948.png)\n利用旋转矩阵我们可以把任意位置向量沿一个单位旋转轴进行旋转。也可以将多个矩阵复合，比如先沿着x轴旋转再沿着y轴旋转。但是这会很快导致一个问题——万向节死锁（Gimbal Lock，可以看看这个视频（优酷）来了解）。在这里我们不会讨论它的细节，但是对于3D空间中的旋转，一个更好的模型是沿着任意的一个轴，比如单位向量$(0.662, 0.2, 0.7222)$旋转，而不是对一系列旋转矩阵进行复合。这样的一个（超级麻烦的）矩阵是存在的，见下面这个公式，其中(Rx,Ry,Rz)\n代表任意旋转轴：\n![2024-03-06T224114](2024-03-06T224114.png)\n在数学上讨论如何生成这样的矩阵仍然超出了本节内容。但是记住，即使这样一个矩阵也不能完全解决万向节死锁问题（尽管会极大地避免）。避免万向节死锁的真正解决方案是使用四元数(Quaternion)，它不仅更安全，而且计算会更有效率。四元数可能会在后面的教程中讨论。\n\n## 矩阵的组合\n使用矩阵进行变换的真正力量在于，根据矩阵之间的乘法，我们可以把多个变换组合到一个矩阵中。让我们看看我们是否能生成一个变换矩阵，让它组合多个变换。假设我们有一个顶点(x, y, z)，我们希望将其缩放2倍，然后位移(1, 2, 3)个单位。我们需要一个位移和缩放矩阵来完成这些变换。结果的变换矩阵看起来像这样：\n![2024-03-06T224151](2024-03-06T224151.png)\n\n注意，当矩阵相乘时我们先写位移再写缩放变换的。矩阵乘法是不遵守交换律的，这意味着它们的顺序很重要。当矩阵相乘时，在最右边的矩阵是第一个与向量相乘的，所以你应该从右向左读这个乘法。建议您在组合矩阵时，先进行缩放操作，然后是旋转，最后才是位移，否则它们会（消极地）互相影响。比如，如果你先位移再缩放，位移的向量也会同样被缩放（译注：比如向某方向移动2米，2米也许会被缩放成1米）！\n\n用最终的变换矩阵左乘我们的向量会得到以下结果：\n![2024-03-06T224240](2024-03-06T224240.png)\n不错！向量先缩放2倍，然后位移了(1, 2, 3)个单位。\n\n# 实践\n现在我们已经解释了变换背后的所有理论，是时候将这些知识利用起来了。OpenGL没有自带任何的矩阵和向量知识，所以我们必须定义自己的数学类和函数。在教程中我们更希望抽象所有的数学细节，使用已经做好了的数学库。幸运的是，有个易于使用，专门为OpenGL量身定做的数学库，那就是GLM。\n\nGLM是OpenGL Mathematics的缩写，它是一个只有头文件的库，也就是说我们只需包含对应的头文件就行了，不用链接和编译。GLM可以在它们的网站上[下载](https://glm.g-truc.net/0.9.8/index.html)。把头文件的根目录复制到你的includes文件夹，然后你就可以使用这个库了。\n\n{% note danger no-icon %}\nGLM库从0.9.9版本起，默认会将矩阵类型初始化为一个零矩阵（所有元素均为0），而不是单位矩阵（对角元素为1，其它元素为0）。如果你使用的是0.9.9或0.9.9以上的版本，你需要将所有的矩阵初始化改为 `glm::mat4 mat = glm::mat4(1.0f)` 。如果你想与本教程的代码保持一致，请使用低于0.9.9版本的GLM，或者改用上述代码初始化所有的矩阵。\n{% endnote %}\n\n我们需要的GLM的大多数功能都可以从下面这3个头文件中找到：\n```c++\n#include <glm/glm.hpp>\n#include <glm/gtc/matrix_transform.hpp>\n#include <glm/gtc/type_ptr.hpp>\n```\n\n我们来看看是否可以利用我们刚学的变换知识把一个向量(1, 0, 0)位移(1, 1, 0)个单位（注意，我们把它定义为一个glm::vec4类型的值，齐次坐标设定为1.0）：\n```c++\nglm::vec4 vec(1.0f, 0.0f, 0.0f, 1.0f);\n// 译注：下面就是矩阵初始化的一个例子，如果使用的是0.9.9及以上版本\n// 下面这行代码就需要改为:\n// glm::mat4 trans = glm::mat4(1.0f)\n// 之后将不再进行提示\nglm::mat4 trans;\ntrans = glm::translate(trans, glm::vec3(1.0f, 1.0f, 0.0f));\nvec = trans * vec;\nstd::cout << vec.x << vec.y << vec.z << std::endl;\n```\n\n我们先用GLM内建的向量类定义一个叫做vec的向量。接下来定义一个mat4类型的trans，默认是一个4×4单位矩阵。下一步是创建一个变换矩阵，我们是把单位矩阵和一个位移向量传递给glm::translate函数来完成这个工作的（然后用给定的矩阵乘以位移矩阵就能获得最后需要的矩阵）。 之后我们把向量乘以位移矩阵并且输出最后的结果。如果你仍记得位移矩阵是如何工作的话，得到的向量应该是(1 + 1, 0 + 1, 0 + 0)，也就是(2, 1, 0)。这个代码片段将会输出210，所以这个位移矩阵是正确的。\n\n我们来做些更有意思的事情，让我们来旋转和缩放之前教程中的那个箱子。首先我们把箱子逆时针旋转90度。然后缩放0.5倍，使它变成原来的一半大。我们先来创建变换矩阵：\n\n```c++\nglm::mat4 trans;\ntrans = glm::rotate(trans, glm::radians(90.0f), glm::vec3(0.0, 0.0, 1.0));\ntrans = glm::scale(trans, glm::vec3(0.5, 0.5, 0.5));\n```\n\n首先，我们把箱子在每个轴都缩放到0.5倍，然后沿z轴旋转90度。GLM希望它的角度是弧度制的(Radian)，所以我们使用glm::radians将角度转化为弧度。注意有纹理的那面矩形是在XY平面上的，所以我们需要把它绕着z轴旋转。因为我们把这个矩阵传递给了GLM的每个函数，GLM会自动将矩阵相乘，返回的结果是一个包括了多个变换的变换矩阵。\n\n下一个大问题是：如何把矩阵传递给着色器？我们在前面简单提到过GLSL里也有一个mat4类型。所以我们将修改顶点着色器让其接收一个mat4的uniform变量，然后再用矩阵uniform乘以位置向量：\n\n```glsl\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoord;\n\nout vec2 TexCoord;\n\nuniform mat4 transform;\n\nvoid main()\n{\n    gl_Position = transform * vec4(aPos, 1.0f);\n    TexCoord = vec2(aTexCoord.x, 1.0 - aTexCoord.y);\n}\n```\n在把位置向量传给gl_Position之前，我们先添加一个uniform，并且将其与变换矩阵相乘。我们的箱子现在应该是原来的二分之一大小并（向左）旋转了90度。当然，我们仍需要把变换矩阵传递给着色器：\n```c++\nunsigned int transformLoc = glGetUniformLocation(ourShader.ID, \"transform\");\nglUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(trans));\n```\n我们首先查询uniform变量的地址，然后用有Matrix4fv后缀的glUniform函数把矩阵数据发送给着色器。第一个参数你现在应该很熟悉了，它是uniform的位置值。第二个参数告诉OpenGL我们将要发送多少个矩阵，这里是1。第三个参数询问我们是否希望对我们的矩阵进行转置(Transpose)，也就是说交换我们矩阵的行和列。OpenGL开发者通常使用一种内部矩阵布局，叫做列主序(Column-major Ordering)布局。GLM的默认布局就是列主序，所以并不需要转置矩阵，我们填GL_FALSE。最后一个参数是真正的矩阵数据，但是GLM并不是把它们的矩阵储存为OpenGL所希望接受的那种，因此我们要先用GLM的自带的函数value_ptr来变换这些数据。\n\n![2024-03-06T233417](2024-03-06T233417.png)\n\n完美！我们的箱子向左侧旋转，并是原来的一半大小，所以变换成功了。我们现在做些更有意思的，看看我们是否可以让箱子随着时间旋转，我们还会重新把箱子放在窗口的右下角。要让箱子随着时间推移旋转，我们必须在游戏循环中更新变换矩阵，因为它在每一次渲染迭代中都要更新。我们使用GLFW的时间函数来获取不同时间的角度：\n```c++\nglm::mat4 trans;\ntrans = glm::translate(trans, glm::vec3(0.5f, -0.5f, 0.0f));\ntrans = glm::rotate(trans, (float)glfwGetTime(), glm::vec3(0.0f, 0.0f, 1.0f));\n```\n要记住的是前面的例子中我们可以在任何地方声明变换矩阵，但是现在我们必须在每一次迭代中创建它，从而保证我们能够不断更新旋转角度。这也就意味着我们不得不在每次游戏循环的迭代中重新创建变换矩阵。通常在渲染场景的时候，我们也会有多个需要在每次渲染迭代中都用新值重新创建的变换矩阵\n\n在这里我们先把箱子围绕原点(0, 0, 0)旋转，之后，我们把旋转过后的箱子位移到屏幕的右下角。记住，实际的变换顺序应该与阅读顺序相反：尽管在代码中我们先位移再旋转，实际的变换却是先应用旋转再是位移的。明白所有这些变换的组合，并且知道它们是如何应用到物体上是一件非常困难的事情。只有不断地尝试和实验这些变换你才能快速地掌握它们。","slug":"opengl_transformation","published":1,"updated":"2025-03-28T02:05:16.403Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7v00321wu1e65yfuow","content":"<p><img src=\"/2024/03/06/opengl_transformation/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>尽管我们现在已经知道了如何创建一个物体、着色、加入纹理，给它们一些细节的表现，但因为它们都还是静态的物体，仍是不够有趣。我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。我们现在有一个更好的解决方案，使用（多个）矩阵(Matrix)对象可以更好的变换(<code>Transform</code>)一个物体。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><a href=\"#%E5%90%91%E9%87%8F\">向量</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F%E4%B8%8E%E6%A0%87%E9%87%8F%E8%BF%90%E7%AE%97\">向量与标量运算</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F%E5%8F%96%E5%8F%8D\">向量取反</a></li>\n<li><a href=\"#%E5%90%91%E9%87%8F%E5%8A%A0%E5%87%8F\">向量加减</a></li>\n<li><a href=\"#%E9%95%BF%E5%BA%A6\">长度</a></li>\n<li><a href=\"#%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98\">向量相乘</a><ul>\n<li><a href=\"#%E7%82%B9%E4%B9%98\">点乘</a></li>\n<li><a href=\"#%E5%8F%89%E4%B9%98\">叉乘</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E4%B8%8A%E9%9A%BE%E5%BA%A6%E4%BA%86\">矩阵（上难度了）</a><ul>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8A%A0%E5%87%8F\">矩阵的加减</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E6%95%B0%E4%B9%98\">矩阵的数乘</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98\">矩阵相乘</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98\">矩阵与向量相乘</a><ul>\n<li><a href=\"#%E5%8D%95%E4%BD%8D%E7%9F%A9%E9%98%B5\">单位矩阵</a></li>\n<li><a href=\"#%E7%BC%A9%E6%94%BE\">缩放</a></li>\n<li><a href=\"#%E4%BD%8D%E7%A7%BB\">位移</a></li>\n<li><a href=\"#%E6%97%8B%E8%BD%AC\">旋转</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E7%BB%84%E5%90%88\">矩阵的组合</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%9E%E8%B7%B5\">实践</a></li>\n</ul>\n<h1 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h1><p>向量最基本的定义就是一个方向。或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)。你可以把向量想像成一个藏宝图上的指示：“向左走10步，向北走3步，然后向右走5步”；“左”就是方向，“10步”就是向量的长度。那么这个藏宝图的指示一共有3个向量。向量可以在任意维度(Dimension)上，但是我们通常只使用2至4维。如果一个向量有2个维度，它表示一个平面的方向(想象一下2D的图像)，当它有3个维度的时候它可以表达一个3D世界的方向。</p>\n<p>下面你会看到3个向量，每个向量在2D图像中都用一个箭头(x, y)表示。我们在2D图片中展示这些向量，因为这样子会更直观一点。你可以把这些2D向量当做z坐标为0的3D向量。由于向量表示的是方向，起始于何处并不会改变它的值。下图我们可以看到向量v¯<br>和w¯<br>是相等的，尽管他们的起始点不同：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T215935.png\" alt=\"2024-03-06T215935\"></p>\n<p>数学家喜欢在字母上面加一横表示向量，比如说v¯。当用在公式中时它们通常是这样的：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220008.png\" alt=\"2024-03-06T220008\"></p>\n<p>由于向量是一个方向，所以有些时候会很难形象地将它们用位置(Position)表示出来。为了让其更为直观，我们通常设定这个方向的原点为(0, 0, 0)，然后指向一个方向，对应一个点，使其变为<strong>位置向量</strong>(Position Vector)（你也可以把起点设置为其他的点，然后说：这个向量从这个点起始指向另一个点）。比如说位置向量(3, 5)在图像中的起点会是(0, 0)，并会指向(3, 5)。我们可以使用向量在2D或3D空间中表示方向与位置.</p>\n<p>和普通数字一样，我们也可以用向量进行多种运算（其中一些你可能已经看到过了）。</p>\n<h2 id=\"向量与标量运算\"><a href=\"#向量与标量运算\" class=\"headerlink\" title=\"向量与标量运算\"></a>向量与标量运算</h2><p>标量(Scalar)只是一个数字（或者说是仅有一个分量的向量）。当把一个向量加&#x2F;减&#x2F;乘&#x2F;除一个标量，我们可以简单的把向量的每个分量分别进行该运算。对于加法来说会像这样:<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220052.png\" alt=\"2024-03-06T220052\"><br>其中的+可以是+，-，·或÷，其中·是乘号。注意－和÷运算时不能颠倒（标量-&#x2F;÷向量），因为颠倒的运算是没有定义的。</p>\n<h3 id=\"向量取反\"><a href=\"#向量取反\" class=\"headerlink\" title=\"向量取反\"></a>向量取反</h3><p>对一个向量取反(Negate)会将其方向逆转。一个指向东北的向量取反后就指向西南方向了。我们在一个向量的每个分量前加负号就可以实现取反了（或者说用-1数乘该向量）:</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220128.png\" alt=\"2024-03-06T220128\"></p>\n<h3 id=\"向量加减\"><a href=\"#向量加减\" class=\"headerlink\" title=\"向量加减\"></a>向量加减</h3><p>向量的加法可以被定义为是分量的(Component-wise)相加，即将一个向量中的每一个分量加上另一个向量的对应分量：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220148.png\" alt=\"2024-03-06T220148\"><br>向量v &#x3D; (4, 2)和k &#x3D; (1, 2)可以直观地表示为：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220158.png\" alt=\"2024-03-06T220158\"><br>就像普通数字的加减一样，向量的减法等于加上第二个向量的相反向量：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220226.png\" alt=\"2024-03-06T220226\"><br>两个向量的相减会得到这两个向量指向位置的差。这在我们想要获取两点的差会非常有用。<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220236.png\" alt=\"2024-03-06T220236\"></p>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><p>我们使用勾股定理(Pythagoras Theorem)来获取向量的长度(Length)&#x2F;大小(Magnitude)。如果你把向量的x与y分量画出来，该向量会和x与y分量为边形成一个三角形:<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220947.png\" alt=\"2024-03-06T220947\"></p>\n<p>因为两条边（x和y）是已知的，如果希望知道斜边v¯的长度，我们可以直接通过勾股定理来计算：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221003.png\" alt=\"2024-03-06T221003\"><br>||v¯||表示向量v¯的长度，我们也可以加上z2把这个公式拓展到三维空间。<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221025.png\" alt=\"2024-03-06T221025\"></p>\n<p>有一个特殊类型的向量叫做单位向量(Unit Vector)。单位向量有一个特别的性质——它的长度是1。我们可以用任意向量的每个分量除以向量的长度得到它的单位向量n^：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221058.png\" alt=\"2024-03-06T221058\"></p>\n<p>我们把这种方法叫做一个向量的标准化(Normalizing)。单位向量头上有一个^样子的记号。通常单位向量会变得很有用，特别是在我们只关心方向不关心长度的时候（如果改变向量的长度，它的方向并不会改变）。<strong>这种向量一般表示方向，比如游戏中角色的朝向，移动的方向等等</strong></p>\n<h3 id=\"向量相乘\"><a href=\"#向量相乘\" class=\"headerlink\" title=\"向量相乘\"></a>向量相乘</h3><p>两个向量相乘是一种很奇怪的情况。普通的乘法在向量上是没有定义的，因为它在视觉上是没有意义的。但是在相乘的时候我们有两种特定情况可以选择：一个是点乘(Dot Product)，记作v¯⋅k¯，另一个是叉乘(Cross Product)，记作v¯×k¯。</p>\n<h4 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h4><p>两个向量的点乘等于它们的数乘结果乘以两个向量之间夹角的余弦值。可能听起来有点费解，我们来看一下公式：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221326.png\" alt=\"2024-03-06T221326\"><br>它们之间的夹角记作θ。为什么这很有用？想象如果v¯和k¯都是单位向量，它们的长度会等于1。这样公式会有效简化成：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221352.png\" alt=\"2024-03-06T221352\"><br>现在点积只定义了两个向量的夹角。你也许记得90度的余弦值是0，0度的余弦值是1。<strong>使用点乘可以很容易测试两个向量是否正交(Orthogonal)或平行（正交意味着两个向量互为直角）。</strong><br>所以，我们该如何计算点乘呢？点乘是通过将对应分量逐个相乘，然后再把所得积相加来计算的。两个单位向量的（你可以验证它们的长度都为1）点乘会像是这样：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221516.png\" alt=\"2024-03-06T221516\"><br>要计算两个单位向量间的夹角，我们可以使用反余弦函数cos−1 ，可得结果是143.1度。现在我们很快就计算出了这两个向量的夹角。点乘会在计算光照的时候非常有用。</p>\n<h4 id=\"叉乘\"><a href=\"#叉乘\" class=\"headerlink\" title=\"叉乘\"></a>叉乘</h4><p>叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。接下来的教程中这会非常有用。下面的图片展示了3D空间中叉乘的样子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221604.png\" alt=\"2024-03-06T221604\"><br>不同于其他运算，如果你没有钻研过线性代数，可能会觉得叉乘很反直觉，所以只记住公式就没问题啦（记不住也没问题）。下面你会看到两个正交向量A和B叉积：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221611.png\" alt=\"2024-03-06T221611\"><br>是不是看起来毫无头绪？不过只要你按照步骤来了，你就能得到一个正交于两个输入向量的第三个向量。</p>\n<h1 id=\"矩阵（上难度了）\"><a href=\"#矩阵（上难度了）\" class=\"headerlink\" title=\"矩阵（上难度了）\"></a>矩阵（上难度了）</h1><p>现在我们已经讨论了向量的全部内容，是时候看看矩阵了！简单来说矩阵就是一个矩形的数字、符号或表达式数组。矩阵中每一项叫做矩阵的元素(Element)。下面是一个2×3矩阵的例子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221713.png\" alt=\"2024-03-06T221713\"></p>\n<p>矩阵可以通过(i, j)进行索引，i是行，j是列，这就是上面的矩阵叫做2×3矩阵的原因（3列2行，也叫做矩阵的维度(Dimension)）。这与你在索引2D图像时的(x, y)相反，获取4的索引是(2, 1)（第二行，第一列）（译注：如果是图像索引应该是(1, 2)，先算列，再算行）。</p>\n<p>矩阵基本也就是这些了，它就是一个矩形的数学表达式阵列。和向量一样，矩阵也有非常漂亮的数学属性。矩阵有几个运算，分别是：矩阵加法、减法和乘法。</p>\n<h2 id=\"矩阵的加减\"><a href=\"#矩阵的加减\" class=\"headerlink\" title=\"矩阵的加减\"></a>矩阵的加减</h2><p>矩阵与标量之间的加减定义如下：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221906.png\" alt=\"2024-03-06T221906\"><br>标量值要加到矩阵的每一个元素上。矩阵与标量的减法也相似：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221916.png\" alt=\"2024-03-06T221916\"></p>\n<div class=\"note default\">注意，数学上是没有矩阵与标量相加减的运算的，但是很多线性代数的库都对它有支持（比如说我们用的GLM）。如果你使用过numpy的话，可以把它理解为Broadcasting。</div>\n\n<p>矩阵与矩阵之间的加减就是两个矩阵对应元素的加减运算，所以总体的规则和与标量运算是差不多的，只不过在相同索引下的元素才能进行运算。<strong>这也就是说加法和减法只对同维度的矩阵才是有定义的</strong>。一个3×2矩阵和一个2×3矩阵（或一个3×3矩阵与4×4矩阵）是不能进行加减的。我们看看两个2×2矩阵是怎样相加的：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221947.png\" alt=\"2024-03-06T221947\"><br>同样的法则也适用于减法：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222023.png\" alt=\"2024-03-06T222023\"></p>\n<h2 id=\"矩阵的数乘\"><a href=\"#矩阵的数乘\" class=\"headerlink\" title=\"矩阵的数乘\"></a>矩阵的数乘</h2><p>和矩阵与标量的加减一样，矩阵与标量之间的乘法也是矩阵的每一个元素分别乘以该标量。下面的例子展示了乘法的过程：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222119.png\" alt=\"2024-03-06T222119\"><br>现在我们也就能明白为什么这些单独的数字要叫做标量(Scalar)了。简单来说，标量就是用它的值缩放(Scale)矩阵的所有元素（译注：注意Scalar是由Scale + -ar演变过来的）。前面那个例子中，所有的元素都被放大了2倍。</p>\n<p>到目前为止都还好，我们的例子都不复杂。不过矩阵与矩阵的乘法就不一样了。</p>\n<h2 id=\"矩阵相乘\"><a href=\"#矩阵相乘\" class=\"headerlink\" title=\"矩阵相乘\"></a>矩阵相乘</h2><p>矩阵之间的乘法不见得有多复杂，但的确很难让人适应。矩阵乘法基本上意味着遵照规定好的法则进行相乘。当然，相乘还有一些限制：<br>只有当左侧矩阵的列数与右侧矩阵的行数相等，两个矩阵才能相乘。<br>矩阵相乘不遵守交换律(Commutative)，也就是说A⋅B≠B⋅A。<br>我们先看一个两个2×2矩阵相乘的例子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222404.png\" alt=\"2024-03-06T222404\"><br>现在你可能会在想了：天哪，刚刚到底发生了什么? 矩阵的乘法是一系列乘法和加法组合的结果，它使用到了左侧矩阵的行和右侧矩阵的列。我们可以看下面的图片：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222415.png\" alt=\"2024-03-06T222415\"><br>我们首先把左侧矩阵的行和右侧矩阵的列拿出来。这些挑出来行和列将决定我们该计算结果2x2矩阵的哪个输出值。如果取的是左矩阵的第一行，输出值就会出现在结果矩阵的第一行。接下来再取一列，如果我们取的是右矩阵的第一列，最终值则会出现在结果矩阵的第一列。这正是红框里的情况。如果想计算结果矩阵右下角的值，我们要用第一个矩阵的第二行和第二个矩阵的第二列（译注：简单来说就是结果矩阵的元素的行取决于第一个矩阵，列取决于第二个矩阵）。</p>\n<div class=\"note info\">简单理解的话，就是第一个矩阵的**第i行**跟第二个矩阵的**第j列**分别作为向量，做点乘，结果放在结果矩阵的i行j列处。这也是为什么第一个矩阵的列数需要等于第二个矩阵的行数。因为第一个矩阵每一行都有m列，这m列需要跟第二个矩阵的行数匹配，这样，从第一个矩阵取出的行（m列），才能与第二个矩阵取出的到列（m行）相乘</div>\n\n<p>不管怎样，现在我们知道如何进行矩阵相乘了，<strong>我们可以开始学习好东西了</strong>。</p>\n<h1 id=\"矩阵与向量相乘\"><a href=\"#矩阵与向量相乘\" class=\"headerlink\" title=\"矩阵与向量相乘\"></a>矩阵与向量相乘</h1><hr>\n<p>目前为止，通过这些教程我们已经相当了解向量了。我们用向量来表示位置，表示颜色，甚至是纹理坐标。让我们更深入了解一下向量，它其实就是一个N×1矩阵，N表示向量分量的个数（也叫N维(N-dimensional)向量）。如果你仔细思考一下就会明白。向量和矩阵一样都是一个数字序列，但它只有1列。那么，这个新的定义对我们有什么帮助呢？如果我们有一个M×N矩阵，我们可以用这个矩阵乘以我们的N×1向量，因为这个矩阵的列数等于向量的行数，所以它们就能相乘。</p>\n<p>但是为什么我们会关心矩阵能否乘以一个向量？好吧，正巧，很多有趣的2D&#x2F;3D变换都可以放在一个矩阵中，用这个矩阵乘以我们的向量将变换(Transform)这个向量。如果你仍然有些困惑，我们来看一些例子，你很快就能明白了。</p>\n<h2 id=\"单位矩阵\"><a href=\"#单位矩阵\" class=\"headerlink\" title=\"单位矩阵\"></a>单位矩阵</h2><p>在OpenGL中，由于某些原因我们通常使用4×4的变换矩阵，而其中最重要的原因就是大部分的向量都是4分量的。我们能想到的最简单的变换矩阵就是单位矩阵(Identity Matrix)。单位矩阵是一个除了对角线以外都是0的N×N矩阵。在下式中可以看到，这种变换矩阵使一个向量完全不变：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223156.png\" alt=\"2024-03-06T223156\"><br>向量看起来完全没变。从乘法法则来看就很容易理解来：第一个结果元素是矩阵的第一行的每个元素乘以向量的每个对应元素。因为每行的元素除了第一个都是0，可得：$1⋅1+0⋅2+0⋅3+0⋅4&#x3D;1$<br>，向量的其他3个元素同理。</p>\n<div class=\"note success\">你可能会奇怪一个没变换的变换矩阵有什么用？单位矩阵通常是生成其他变换矩阵的起点，如果我们深挖线性代数，这还是一个对证明定理、解线性方程非常有用的矩阵。</div>\n\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>对一个向量进行缩放(Scaling)就是对向量的长度进行缩放，而保持它的方向不变。由于我们进行的是2维或3维操作，我们可以分别定义一个有2或3个缩放变量的向量，每个变量缩放一个轴(x、y或z)。</p>\n<p>我们先来尝试缩放向量$v¯&#x3D;(3,2)$。我们可以把向量沿着x轴缩放0.5，使它的宽度缩小为原来的二分之一；我们将沿着y轴把向量的高度缩放为原来的两倍。我们看看把向量缩放(0.5, 2)倍所获得的$s¯$<br>是什么样的：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223340.png\" alt=\"2024-03-06T223340\"></p>\n<p>记住，OpenGL通常是在3D空间进行操作的，对于2D的情况我们可以把z轴缩放1倍，这样z轴的值就不变了。我们刚刚的缩放操作是<strong>不均匀</strong>(Non-uniform)缩放，因为每个轴的<code>缩放因子</code>(Scaling Factor)都不一样。如果每个轴的<code>缩放因子</code>都一样那么就叫<strong>均匀缩放</strong>(Uniform Scale)。</p>\n<p>我们下面会构造一个变换矩阵来为我们提供缩放功能。我们从单位矩阵了解到，每个对角线元素会分别与向量的对应元素相乘。如果我们把1变为3会怎样？这样子的话，我们就把向量的每个元素乘以3了，这事实上就把向量缩放3倍。如果我们把缩放变量表示为$(S1,S2,S3)$<br>我们可以为任意向量$(x,y,z)$<br>定义一个缩放矩阵：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223518.png\" alt=\"2024-03-06T223518\"><br>注意，第四个缩放向量仍然是1，因为在3D空间中缩放w分量是无意义的。w分量另有其他用途，在后面我们会看到。</p>\n<h2 id=\"位移\"><a href=\"#位移\" class=\"headerlink\" title=\"位移\"></a>位移</h2><p>位移(Translation)是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动了原始向量。我们已经讨论了向量加法，所以这应该不会太陌生。</p>\n<p>和缩放矩阵一样，在4×4矩阵上有几个特别的位置用来执行特定的操作，对于位移来说它们是第四列最上面的3个值。如果我们把位移向量表示为$(Tx,Ty,Tz)$<br>，我们就能把位移矩阵定义为：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223634.png\" alt=\"2024-03-06T223634\"><br>这样是能工作的，因为所有的位移值都要乘以向量的w行，所以位移值会加到向量的原始值上（想想矩阵乘法法则）。而如果你用3x3矩阵我们的位移值就没地方放也没地方乘了，所以是不行的。</p>\n<div class=\"note info\">**齐次坐标(Homogeneous Coordinates)**\n\n<p>向量的w分量也叫齐次坐标。想要从齐次向量得到3D向量，我们可以把x、y和z坐标分别除以w坐标。我们通常不会注意这个问题，因为w分量通常是1.0。使用齐次坐标有几点好处：它允许我们在3D向量上进行位移（如果没有w分量我们是不能位移向量的），而且下一章我们会用w值创建3D视觉效果。</p>\n<p>如果一个向量的齐次坐标是0，这个坐标就是方向向量(Direction Vector)，因为w坐标是0，这个向量就不能位移（译注：这也就是我们说的不能位移一个方向）。</div></p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>上面几个的变换内容相对容易理解，在2D或3D空间中也容易表示出来，但旋转(Rotation)稍复杂些。如果你想知道旋转矩阵是如何构造出来的，我推荐你去看可汗学院线性代数的视频。</p>\n<p>首先我们来定义一个向量的旋转到底是什么。2D或3D空间中的旋转用角(Angle)来表示。角可以是角度制或弧度制的，周角是360角度或2 PI弧度。我个人更喜欢用角度，因为它们看起来更直观。</p>\n<div class=\"note default\">大多数旋转函数需要用弧度制的角，但幸运的是角度制的角也可以很容易地转化为弧度制的：\n\n<p>弧度转角度：角度 &#x3D; 弧度 * $(180.0f &#x2F; PI)$<br>角度转弧度：弧度 &#x3D; 角度 * $(PI &#x2F; 180.0f)$<br>PI约等于3.14159265359。</div></p>\n<p>转半圈会旋转360&#x2F;2 &#x3D; 180度，向右旋转1&#x2F;5圈表示向右旋转360&#x2F;5 &#x3D; 72度。下图中展示的2D向量$v¯$<br>是由$k¯$<br>向右旋转72度所得的：<img src=\"/2024/03/06/opengl_transformation/2024-03-06T223854.png\" alt=\"2024-03-06T223854\"><br>在3D空间中旋转需要定义一个角和一个旋转轴(Rotation Axis)。物体会沿着给定的旋转轴旋转特定角度。如果你想要更形象化的感受，可以试试向下看着一个特定的旋转轴，同时将你的头部旋转一定角度。当2D向量在3D空间中旋转时，我们把旋转轴设为z轴（尝试想象这种情况）。</p>\n<p>使用三角学，给定一个角度，可以把一个向量变换为一个经过旋转的新向量。这通常是使用一系列正弦和余弦函数（一般简称sin和cos）各种巧妙的组合得到的。当然，讨论如何生成变换矩阵超出了这个教程的范围。</p>\n<p>旋转矩阵在3D空间中每个单位轴都有不同定义，旋转角度用θ<br>表示：</p>\n<p>沿x轴旋转：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223925.png\" alt=\"2024-03-06T223925\"></p>\n<p>沿y轴旋转：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223938.png\" alt=\"2024-03-06T223938\"><br>沿z轴旋转：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223948.png\" alt=\"2024-03-06T223948\"><br>利用旋转矩阵我们可以把任意位置向量沿一个单位旋转轴进行旋转。也可以将多个矩阵复合，比如先沿着x轴旋转再沿着y轴旋转。但是这会很快导致一个问题——万向节死锁（Gimbal Lock，可以看看这个视频（优酷）来了解）。在这里我们不会讨论它的细节，但是对于3D空间中的旋转，一个更好的模型是沿着任意的一个轴，比如单位向量$(0.662, 0.2, 0.7222)$旋转，而不是对一系列旋转矩阵进行复合。这样的一个（超级麻烦的）矩阵是存在的，见下面这个公式，其中(Rx,Ry,Rz)<br>代表任意旋转轴：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224114.png\" alt=\"2024-03-06T224114\"><br>在数学上讨论如何生成这样的矩阵仍然超出了本节内容。但是记住，即使这样一个矩阵也不能完全解决万向节死锁问题（尽管会极大地避免）。避免万向节死锁的真正解决方案是使用四元数(Quaternion)，它不仅更安全，而且计算会更有效率。四元数可能会在后面的教程中讨论。</p>\n<h2 id=\"矩阵的组合\"><a href=\"#矩阵的组合\" class=\"headerlink\" title=\"矩阵的组合\"></a>矩阵的组合</h2><p>使用矩阵进行变换的真正力量在于，根据矩阵之间的乘法，我们可以把多个变换组合到一个矩阵中。让我们看看我们是否能生成一个变换矩阵，让它组合多个变换。假设我们有一个顶点(x, y, z)，我们希望将其缩放2倍，然后位移(1, 2, 3)个单位。我们需要一个位移和缩放矩阵来完成这些变换。结果的变换矩阵看起来像这样：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224151.png\" alt=\"2024-03-06T224151\"></p>\n<p>注意，当矩阵相乘时我们先写位移再写缩放变换的。矩阵乘法是不遵守交换律的，这意味着它们的顺序很重要。当矩阵相乘时，在最右边的矩阵是第一个与向量相乘的，所以你应该从右向左读这个乘法。建议您在组合矩阵时，先进行缩放操作，然后是旋转，最后才是位移，否则它们会（消极地）互相影响。比如，如果你先位移再缩放，位移的向量也会同样被缩放（译注：比如向某方向移动2米，2米也许会被缩放成1米）！</p>\n<p>用最终的变换矩阵左乘我们的向量会得到以下结果：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224240.png\" alt=\"2024-03-06T224240\"><br>不错！向量先缩放2倍，然后位移了(1, 2, 3)个单位。</p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>现在我们已经解释了变换背后的所有理论，是时候将这些知识利用起来了。OpenGL没有自带任何的矩阵和向量知识，所以我们必须定义自己的数学类和函数。在教程中我们更希望抽象所有的数学细节，使用已经做好了的数学库。幸运的是，有个易于使用，专门为OpenGL量身定做的数学库，那就是GLM。</p>\n<p>GLM是OpenGL Mathematics的缩写，它是一个只有头文件的库，也就是说我们只需包含对应的头文件就行了，不用链接和编译。GLM可以在它们的网站上<a href=\"https://glm.g-truc.net/0.9.8/index.html\">下载</a>。把头文件的根目录复制到你的includes文件夹，然后你就可以使用这个库了。</p>\n<div class=\"note danger no-icon\"><p>GLM库从0.9.9版本起，默认会将矩阵类型初始化为一个零矩阵（所有元素均为0），而不是单位矩阵（对角元素为1，其它元素为0）。如果你使用的是0.9.9或0.9.9以上的版本，你需要将所有的矩阵初始化改为 <code>glm::mat4 mat = glm::mat4(1.0f)</code> 。如果你想与本教程的代码保持一致，请使用低于0.9.9版本的GLM，或者改用上述代码初始化所有的矩阵。</p>\n</div>\n\n<p>我们需要的GLM的大多数功能都可以从下面这3个头文件中找到：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/glm.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/type_ptr.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>我们来看看是否可以利用我们刚学的变换知识把一个向量(1, 0, 0)位移(1, 1, 0)个单位（注意，我们把它定义为一个glm::vec4类型的值，齐次坐标设定为1.0）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec4 <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 译注：下面就是矩阵初始化的一个例子，如果使用的是0.9.9及以上版本</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这行代码就需要改为:</span></span><br><span class=\"line\"><span class=\"comment\">// glm::mat4 trans = glm::mat4(1.0f)</span></span><br><span class=\"line\"><span class=\"comment\">// 之后将不再进行提示</span></span><br><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">translate</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\">vec = trans * vec;</span><br><span class=\"line\">std::cout &lt;&lt; vec.x &lt;&lt; vec.y &lt;&lt; vec.z &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>我们先用GLM内建的向量类定义一个叫做vec的向量。接下来定义一个mat4类型的trans，默认是一个4×4单位矩阵。下一步是创建一个变换矩阵，我们是把单位矩阵和一个位移向量传递给glm::translate函数来完成这个工作的（然后用给定的矩阵乘以位移矩阵就能获得最后需要的矩阵）。 之后我们把向量乘以位移矩阵并且输出最后的结果。如果你仍记得位移矩阵是如何工作的话，得到的向量应该是(1 + 1, 0 + 1, 0 + 0)，也就是(2, 1, 0)。这个代码片段将会输出210，所以这个位移矩阵是正确的。</p>\n<p>我们来做些更有意思的事情，让我们来旋转和缩放之前教程中的那个箱子。首先我们把箱子逆时针旋转90度。然后缩放0.5倍，使它变成原来的一半大。我们先来创建变换矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">rotate</span>(trans, glm::<span class=\"built_in\">radians</span>(<span class=\"number\">90.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">scale</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>));</span><br></pre></td></tr></table></figure>\n\n<p>首先，我们把箱子在每个轴都缩放到0.5倍，然后沿z轴旋转90度。GLM希望它的角度是弧度制的(Radian)，所以我们使用glm::radians将角度转化为弧度。注意有纹理的那面矩形是在XY平面上的，所以我们需要把它绕着z轴旋转。因为我们把这个矩阵传递给了GLM的每个函数，GLM会自动将矩阵相乘，返回的结果是一个包括了多个变换的变换矩阵。</p>\n<p>下一个大问题是：如何把矩阵传递给着色器？我们在前面简单提到过GLSL里也有一个mat4类型。所以我们将修改顶点着色器让其接收一个mat4的uniform变量，然后再用矩阵uniform乘以位置向量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> TexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> transform;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = transform * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\">    TexCoord = <span class=\"type\">vec2</span>(aTexCoord.x, <span class=\"number\">1.0</span> - aTexCoord.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在把位置向量传给gl_Position之前，我们先添加一个uniform，并且将其与变换矩阵相乘。我们的箱子现在应该是原来的二分之一大小并（向左）旋转了90度。当然，我们仍需要把变换矩阵传递给着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> transformLoc = <span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;transform&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">glUniformMatrix4fv</span>(transformLoc, <span class=\"number\">1</span>, GL_FALSE, glm::<span class=\"built_in\">value_ptr</span>(trans));</span><br></pre></td></tr></table></figure>\n<p>我们首先查询uniform变量的地址，然后用有Matrix4fv后缀的glUniform函数把矩阵数据发送给着色器。第一个参数你现在应该很熟悉了，它是uniform的位置值。第二个参数告诉OpenGL我们将要发送多少个矩阵，这里是1。第三个参数询问我们是否希望对我们的矩阵进行转置(Transpose)，也就是说交换我们矩阵的行和列。OpenGL开发者通常使用一种内部矩阵布局，叫做列主序(Column-major Ordering)布局。GLM的默认布局就是列主序，所以并不需要转置矩阵，我们填GL_FALSE。最后一个参数是真正的矩阵数据，但是GLM并不是把它们的矩阵储存为OpenGL所希望接受的那种，因此我们要先用GLM的自带的函数value_ptr来变换这些数据。</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T233417.png\" alt=\"2024-03-06T233417\"></p>\n<p>完美！我们的箱子向左侧旋转，并是原来的一半大小，所以变换成功了。我们现在做些更有意思的，看看我们是否可以让箱子随着时间旋转，我们还会重新把箱子放在窗口的右下角。要让箱子随着时间推移旋转，我们必须在游戏循环中更新变换矩阵，因为它在每一次渲染迭代中都要更新。我们使用GLFW的时间函数来获取不同时间的角度：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">translate</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">rotate</span>(trans, (<span class=\"type\">float</span>)<span class=\"built_in\">glfwGetTime</span>(), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>));</span><br></pre></td></tr></table></figure>\n<p>要记住的是前面的例子中我们可以在任何地方声明变换矩阵，但是现在我们必须在每一次迭代中创建它，从而保证我们能够不断更新旋转角度。这也就意味着我们不得不在每次游戏循环的迭代中重新创建变换矩阵。通常在渲染场景的时候，我们也会有多个需要在每次渲染迭代中都用新值重新创建的变换矩阵</p>\n<p>在这里我们先把箱子围绕原点(0, 0, 0)旋转，之后，我们把旋转过后的箱子位移到屏幕的右下角。记住，实际的变换顺序应该与阅读顺序相反：尽管在代码中我们先位移再旋转，实际的变换却是先应用旋转再是位移的。明白所有这些变换的组合，并且知道它们是如何应用到物体上是一件非常困难的事情。只有不断地尝试和实验这些变换你才能快速地掌握它们。</p>\n","length":7705,"excerpt":"<p><img src=\"/2024/03/06/opengl_transformation/2024-03-02T220734.png\" alt=\"2024-03-02T220734\"><br>尽管我们现在已经知道了如何创建一个物体、着色、加入纹理，给它们一些细节的表现，但因为它们都还是静态的物体，仍是不够有趣。我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。我们现在有一个更好的解决方案，使用（多个）矩阵(Matrix)对象可以更好的变换(<code>Transform</code>)一个物体。</p>","more":"<ul>\n<li><a href=\"#%E5%90%91%E9%87%8F\">向量</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F%E4%B8%8E%E6%A0%87%E9%87%8F%E8%BF%90%E7%AE%97\">向量与标量运算</a><ul>\n<li><a href=\"#%E5%90%91%E9%87%8F%E5%8F%96%E5%8F%8D\">向量取反</a></li>\n<li><a href=\"#%E5%90%91%E9%87%8F%E5%8A%A0%E5%87%8F\">向量加减</a></li>\n<li><a href=\"#%E9%95%BF%E5%BA%A6\">长度</a></li>\n<li><a href=\"#%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98\">向量相乘</a><ul>\n<li><a href=\"#%E7%82%B9%E4%B9%98\">点乘</a></li>\n<li><a href=\"#%E5%8F%89%E4%B9%98\">叉乘</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E4%B8%8A%E9%9A%BE%E5%BA%A6%E4%BA%86\">矩阵（上难度了）</a><ul>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8A%A0%E5%87%8F\">矩阵的加减</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E6%95%B0%E4%B9%98\">矩阵的数乘</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98\">矩阵相乘</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%90%91%E9%87%8F%E7%9B%B8%E4%B9%98\">矩阵与向量相乘</a><ul>\n<li><a href=\"#%E5%8D%95%E4%BD%8D%E7%9F%A9%E9%98%B5\">单位矩阵</a></li>\n<li><a href=\"#%E7%BC%A9%E6%94%BE\">缩放</a></li>\n<li><a href=\"#%E4%BD%8D%E7%A7%BB\">位移</a></li>\n<li><a href=\"#%E6%97%8B%E8%BD%AC\">旋转</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E7%9A%84%E7%BB%84%E5%90%88\">矩阵的组合</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%9E%E8%B7%B5\">实践</a></li>\n</ul>\n<h1 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h1><p>向量最基本的定义就是一个方向。或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)。你可以把向量想像成一个藏宝图上的指示：“向左走10步，向北走3步，然后向右走5步”；“左”就是方向，“10步”就是向量的长度。那么这个藏宝图的指示一共有3个向量。向量可以在任意维度(Dimension)上，但是我们通常只使用2至4维。如果一个向量有2个维度，它表示一个平面的方向(想象一下2D的图像)，当它有3个维度的时候它可以表达一个3D世界的方向。</p>\n<p>下面你会看到3个向量，每个向量在2D图像中都用一个箭头(x, y)表示。我们在2D图片中展示这些向量，因为这样子会更直观一点。你可以把这些2D向量当做z坐标为0的3D向量。由于向量表示的是方向，起始于何处并不会改变它的值。下图我们可以看到向量v¯<br>和w¯<br>是相等的，尽管他们的起始点不同：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T215935.png\" alt=\"2024-03-06T215935\"></p>\n<p>数学家喜欢在字母上面加一横表示向量，比如说v¯。当用在公式中时它们通常是这样的：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220008.png\" alt=\"2024-03-06T220008\"></p>\n<p>由于向量是一个方向，所以有些时候会很难形象地将它们用位置(Position)表示出来。为了让其更为直观，我们通常设定这个方向的原点为(0, 0, 0)，然后指向一个方向，对应一个点，使其变为<strong>位置向量</strong>(Position Vector)（你也可以把起点设置为其他的点，然后说：这个向量从这个点起始指向另一个点）。比如说位置向量(3, 5)在图像中的起点会是(0, 0)，并会指向(3, 5)。我们可以使用向量在2D或3D空间中表示方向与位置.</p>\n<p>和普通数字一样，我们也可以用向量进行多种运算（其中一些你可能已经看到过了）。</p>\n<h2 id=\"向量与标量运算\"><a href=\"#向量与标量运算\" class=\"headerlink\" title=\"向量与标量运算\"></a>向量与标量运算</h2><p>标量(Scalar)只是一个数字（或者说是仅有一个分量的向量）。当把一个向量加&#x2F;减&#x2F;乘&#x2F;除一个标量，我们可以简单的把向量的每个分量分别进行该运算。对于加法来说会像这样:<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220052.png\" alt=\"2024-03-06T220052\"><br>其中的+可以是+，-，·或÷，其中·是乘号。注意－和÷运算时不能颠倒（标量-&#x2F;÷向量），因为颠倒的运算是没有定义的。</p>\n<h3 id=\"向量取反\"><a href=\"#向量取反\" class=\"headerlink\" title=\"向量取反\"></a>向量取反</h3><p>对一个向量取反(Negate)会将其方向逆转。一个指向东北的向量取反后就指向西南方向了。我们在一个向量的每个分量前加负号就可以实现取反了（或者说用-1数乘该向量）:</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220128.png\" alt=\"2024-03-06T220128\"></p>\n<h3 id=\"向量加减\"><a href=\"#向量加减\" class=\"headerlink\" title=\"向量加减\"></a>向量加减</h3><p>向量的加法可以被定义为是分量的(Component-wise)相加，即将一个向量中的每一个分量加上另一个向量的对应分量：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220148.png\" alt=\"2024-03-06T220148\"><br>向量v &#x3D; (4, 2)和k &#x3D; (1, 2)可以直观地表示为：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220158.png\" alt=\"2024-03-06T220158\"><br>就像普通数字的加减一样，向量的减法等于加上第二个向量的相反向量：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220226.png\" alt=\"2024-03-06T220226\"><br>两个向量的相减会得到这两个向量指向位置的差。这在我们想要获取两点的差会非常有用。<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220236.png\" alt=\"2024-03-06T220236\"></p>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><p>我们使用勾股定理(Pythagoras Theorem)来获取向量的长度(Length)&#x2F;大小(Magnitude)。如果你把向量的x与y分量画出来，该向量会和x与y分量为边形成一个三角形:<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T220947.png\" alt=\"2024-03-06T220947\"></p>\n<p>因为两条边（x和y）是已知的，如果希望知道斜边v¯的长度，我们可以直接通过勾股定理来计算：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221003.png\" alt=\"2024-03-06T221003\"><br>||v¯||表示向量v¯的长度，我们也可以加上z2把这个公式拓展到三维空间。<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221025.png\" alt=\"2024-03-06T221025\"></p>\n<p>有一个特殊类型的向量叫做单位向量(Unit Vector)。单位向量有一个特别的性质——它的长度是1。我们可以用任意向量的每个分量除以向量的长度得到它的单位向量n^：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221058.png\" alt=\"2024-03-06T221058\"></p>\n<p>我们把这种方法叫做一个向量的标准化(Normalizing)。单位向量头上有一个^样子的记号。通常单位向量会变得很有用，特别是在我们只关心方向不关心长度的时候（如果改变向量的长度，它的方向并不会改变）。<strong>这种向量一般表示方向，比如游戏中角色的朝向，移动的方向等等</strong></p>\n<h3 id=\"向量相乘\"><a href=\"#向量相乘\" class=\"headerlink\" title=\"向量相乘\"></a>向量相乘</h3><p>两个向量相乘是一种很奇怪的情况。普通的乘法在向量上是没有定义的，因为它在视觉上是没有意义的。但是在相乘的时候我们有两种特定情况可以选择：一个是点乘(Dot Product)，记作v¯⋅k¯，另一个是叉乘(Cross Product)，记作v¯×k¯。</p>\n<h4 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h4><p>两个向量的点乘等于它们的数乘结果乘以两个向量之间夹角的余弦值。可能听起来有点费解，我们来看一下公式：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221326.png\" alt=\"2024-03-06T221326\"><br>它们之间的夹角记作θ。为什么这很有用？想象如果v¯和k¯都是单位向量，它们的长度会等于1。这样公式会有效简化成：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221352.png\" alt=\"2024-03-06T221352\"><br>现在点积只定义了两个向量的夹角。你也许记得90度的余弦值是0，0度的余弦值是1。<strong>使用点乘可以很容易测试两个向量是否正交(Orthogonal)或平行（正交意味着两个向量互为直角）。</strong><br>所以，我们该如何计算点乘呢？点乘是通过将对应分量逐个相乘，然后再把所得积相加来计算的。两个单位向量的（你可以验证它们的长度都为1）点乘会像是这样：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221516.png\" alt=\"2024-03-06T221516\"><br>要计算两个单位向量间的夹角，我们可以使用反余弦函数cos−1 ，可得结果是143.1度。现在我们很快就计算出了这两个向量的夹角。点乘会在计算光照的时候非常有用。</p>\n<h4 id=\"叉乘\"><a href=\"#叉乘\" class=\"headerlink\" title=\"叉乘\"></a>叉乘</h4><p>叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。接下来的教程中这会非常有用。下面的图片展示了3D空间中叉乘的样子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221604.png\" alt=\"2024-03-06T221604\"><br>不同于其他运算，如果你没有钻研过线性代数，可能会觉得叉乘很反直觉，所以只记住公式就没问题啦（记不住也没问题）。下面你会看到两个正交向量A和B叉积：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221611.png\" alt=\"2024-03-06T221611\"><br>是不是看起来毫无头绪？不过只要你按照步骤来了，你就能得到一个正交于两个输入向量的第三个向量。</p>\n<h1 id=\"矩阵（上难度了）\"><a href=\"#矩阵（上难度了）\" class=\"headerlink\" title=\"矩阵（上难度了）\"></a>矩阵（上难度了）</h1><p>现在我们已经讨论了向量的全部内容，是时候看看矩阵了！简单来说矩阵就是一个矩形的数字、符号或表达式数组。矩阵中每一项叫做矩阵的元素(Element)。下面是一个2×3矩阵的例子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221713.png\" alt=\"2024-03-06T221713\"></p>\n<p>矩阵可以通过(i, j)进行索引，i是行，j是列，这就是上面的矩阵叫做2×3矩阵的原因（3列2行，也叫做矩阵的维度(Dimension)）。这与你在索引2D图像时的(x, y)相反，获取4的索引是(2, 1)（第二行，第一列）（译注：如果是图像索引应该是(1, 2)，先算列，再算行）。</p>\n<p>矩阵基本也就是这些了，它就是一个矩形的数学表达式阵列。和向量一样，矩阵也有非常漂亮的数学属性。矩阵有几个运算，分别是：矩阵加法、减法和乘法。</p>\n<h2 id=\"矩阵的加减\"><a href=\"#矩阵的加减\" class=\"headerlink\" title=\"矩阵的加减\"></a>矩阵的加减</h2><p>矩阵与标量之间的加减定义如下：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221906.png\" alt=\"2024-03-06T221906\"><br>标量值要加到矩阵的每一个元素上。矩阵与标量的减法也相似：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221916.png\" alt=\"2024-03-06T221916\"></p>\n<div class=\"note default\">注意，数学上是没有矩阵与标量相加减的运算的，但是很多线性代数的库都对它有支持（比如说我们用的GLM）。如果你使用过numpy的话，可以把它理解为Broadcasting。</div>\n\n<p>矩阵与矩阵之间的加减就是两个矩阵对应元素的加减运算，所以总体的规则和与标量运算是差不多的，只不过在相同索引下的元素才能进行运算。<strong>这也就是说加法和减法只对同维度的矩阵才是有定义的</strong>。一个3×2矩阵和一个2×3矩阵（或一个3×3矩阵与4×4矩阵）是不能进行加减的。我们看看两个2×2矩阵是怎样相加的：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T221947.png\" alt=\"2024-03-06T221947\"><br>同样的法则也适用于减法：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222023.png\" alt=\"2024-03-06T222023\"></p>\n<h2 id=\"矩阵的数乘\"><a href=\"#矩阵的数乘\" class=\"headerlink\" title=\"矩阵的数乘\"></a>矩阵的数乘</h2><p>和矩阵与标量的加减一样，矩阵与标量之间的乘法也是矩阵的每一个元素分别乘以该标量。下面的例子展示了乘法的过程：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222119.png\" alt=\"2024-03-06T222119\"><br>现在我们也就能明白为什么这些单独的数字要叫做标量(Scalar)了。简单来说，标量就是用它的值缩放(Scale)矩阵的所有元素（译注：注意Scalar是由Scale + -ar演变过来的）。前面那个例子中，所有的元素都被放大了2倍。</p>\n<p>到目前为止都还好，我们的例子都不复杂。不过矩阵与矩阵的乘法就不一样了。</p>\n<h2 id=\"矩阵相乘\"><a href=\"#矩阵相乘\" class=\"headerlink\" title=\"矩阵相乘\"></a>矩阵相乘</h2><p>矩阵之间的乘法不见得有多复杂，但的确很难让人适应。矩阵乘法基本上意味着遵照规定好的法则进行相乘。当然，相乘还有一些限制：<br>只有当左侧矩阵的列数与右侧矩阵的行数相等，两个矩阵才能相乘。<br>矩阵相乘不遵守交换律(Commutative)，也就是说A⋅B≠B⋅A。<br>我们先看一个两个2×2矩阵相乘的例子：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222404.png\" alt=\"2024-03-06T222404\"><br>现在你可能会在想了：天哪，刚刚到底发生了什么? 矩阵的乘法是一系列乘法和加法组合的结果，它使用到了左侧矩阵的行和右侧矩阵的列。我们可以看下面的图片：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T222415.png\" alt=\"2024-03-06T222415\"><br>我们首先把左侧矩阵的行和右侧矩阵的列拿出来。这些挑出来行和列将决定我们该计算结果2x2矩阵的哪个输出值。如果取的是左矩阵的第一行，输出值就会出现在结果矩阵的第一行。接下来再取一列，如果我们取的是右矩阵的第一列，最终值则会出现在结果矩阵的第一列。这正是红框里的情况。如果想计算结果矩阵右下角的值，我们要用第一个矩阵的第二行和第二个矩阵的第二列（译注：简单来说就是结果矩阵的元素的行取决于第一个矩阵，列取决于第二个矩阵）。</p>\n<div class=\"note info\">简单理解的话，就是第一个矩阵的**第i行**跟第二个矩阵的**第j列**分别作为向量，做点乘，结果放在结果矩阵的i行j列处。这也是为什么第一个矩阵的列数需要等于第二个矩阵的行数。因为第一个矩阵每一行都有m列，这m列需要跟第二个矩阵的行数匹配，这样，从第一个矩阵取出的行（m列），才能与第二个矩阵取出的到列（m行）相乘</div>\n\n<p>不管怎样，现在我们知道如何进行矩阵相乘了，<strong>我们可以开始学习好东西了</strong>。</p>\n<h1 id=\"矩阵与向量相乘\"><a href=\"#矩阵与向量相乘\" class=\"headerlink\" title=\"矩阵与向量相乘\"></a>矩阵与向量相乘</h1><hr>\n<p>目前为止，通过这些教程我们已经相当了解向量了。我们用向量来表示位置，表示颜色，甚至是纹理坐标。让我们更深入了解一下向量，它其实就是一个N×1矩阵，N表示向量分量的个数（也叫N维(N-dimensional)向量）。如果你仔细思考一下就会明白。向量和矩阵一样都是一个数字序列，但它只有1列。那么，这个新的定义对我们有什么帮助呢？如果我们有一个M×N矩阵，我们可以用这个矩阵乘以我们的N×1向量，因为这个矩阵的列数等于向量的行数，所以它们就能相乘。</p>\n<p>但是为什么我们会关心矩阵能否乘以一个向量？好吧，正巧，很多有趣的2D&#x2F;3D变换都可以放在一个矩阵中，用这个矩阵乘以我们的向量将变换(Transform)这个向量。如果你仍然有些困惑，我们来看一些例子，你很快就能明白了。</p>\n<h2 id=\"单位矩阵\"><a href=\"#单位矩阵\" class=\"headerlink\" title=\"单位矩阵\"></a>单位矩阵</h2><p>在OpenGL中，由于某些原因我们通常使用4×4的变换矩阵，而其中最重要的原因就是大部分的向量都是4分量的。我们能想到的最简单的变换矩阵就是单位矩阵(Identity Matrix)。单位矩阵是一个除了对角线以外都是0的N×N矩阵。在下式中可以看到，这种变换矩阵使一个向量完全不变：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223156.png\" alt=\"2024-03-06T223156\"><br>向量看起来完全没变。从乘法法则来看就很容易理解来：第一个结果元素是矩阵的第一行的每个元素乘以向量的每个对应元素。因为每行的元素除了第一个都是0，可得：$1⋅1+0⋅2+0⋅3+0⋅4&#x3D;1$<br>，向量的其他3个元素同理。</p>\n<div class=\"note success\">你可能会奇怪一个没变换的变换矩阵有什么用？单位矩阵通常是生成其他变换矩阵的起点，如果我们深挖线性代数，这还是一个对证明定理、解线性方程非常有用的矩阵。</div>\n\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>对一个向量进行缩放(Scaling)就是对向量的长度进行缩放，而保持它的方向不变。由于我们进行的是2维或3维操作，我们可以分别定义一个有2或3个缩放变量的向量，每个变量缩放一个轴(x、y或z)。</p>\n<p>我们先来尝试缩放向量$v¯&#x3D;(3,2)$。我们可以把向量沿着x轴缩放0.5，使它的宽度缩小为原来的二分之一；我们将沿着y轴把向量的高度缩放为原来的两倍。我们看看把向量缩放(0.5, 2)倍所获得的$s¯$<br>是什么样的：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223340.png\" alt=\"2024-03-06T223340\"></p>\n<p>记住，OpenGL通常是在3D空间进行操作的，对于2D的情况我们可以把z轴缩放1倍，这样z轴的值就不变了。我们刚刚的缩放操作是<strong>不均匀</strong>(Non-uniform)缩放，因为每个轴的<code>缩放因子</code>(Scaling Factor)都不一样。如果每个轴的<code>缩放因子</code>都一样那么就叫<strong>均匀缩放</strong>(Uniform Scale)。</p>\n<p>我们下面会构造一个变换矩阵来为我们提供缩放功能。我们从单位矩阵了解到，每个对角线元素会分别与向量的对应元素相乘。如果我们把1变为3会怎样？这样子的话，我们就把向量的每个元素乘以3了，这事实上就把向量缩放3倍。如果我们把缩放变量表示为$(S1,S2,S3)$<br>我们可以为任意向量$(x,y,z)$<br>定义一个缩放矩阵：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223518.png\" alt=\"2024-03-06T223518\"><br>注意，第四个缩放向量仍然是1，因为在3D空间中缩放w分量是无意义的。w分量另有其他用途，在后面我们会看到。</p>\n<h2 id=\"位移\"><a href=\"#位移\" class=\"headerlink\" title=\"位移\"></a>位移</h2><p>位移(Translation)是在原始向量的基础上加上另一个向量从而获得一个在不同位置的新向量的过程，从而在位移向量基础上移动了原始向量。我们已经讨论了向量加法，所以这应该不会太陌生。</p>\n<p>和缩放矩阵一样，在4×4矩阵上有几个特别的位置用来执行特定的操作，对于位移来说它们是第四列最上面的3个值。如果我们把位移向量表示为$(Tx,Ty,Tz)$<br>，我们就能把位移矩阵定义为：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223634.png\" alt=\"2024-03-06T223634\"><br>这样是能工作的，因为所有的位移值都要乘以向量的w行，所以位移值会加到向量的原始值上（想想矩阵乘法法则）。而如果你用3x3矩阵我们的位移值就没地方放也没地方乘了，所以是不行的。</p>\n<div class=\"note info\">**齐次坐标(Homogeneous Coordinates)**\n\n<p>向量的w分量也叫齐次坐标。想要从齐次向量得到3D向量，我们可以把x、y和z坐标分别除以w坐标。我们通常不会注意这个问题，因为w分量通常是1.0。使用齐次坐标有几点好处：它允许我们在3D向量上进行位移（如果没有w分量我们是不能位移向量的），而且下一章我们会用w值创建3D视觉效果。</p>\n<p>如果一个向量的齐次坐标是0，这个坐标就是方向向量(Direction Vector)，因为w坐标是0，这个向量就不能位移（译注：这也就是我们说的不能位移一个方向）。</div></p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>上面几个的变换内容相对容易理解，在2D或3D空间中也容易表示出来，但旋转(Rotation)稍复杂些。如果你想知道旋转矩阵是如何构造出来的，我推荐你去看可汗学院线性代数的视频。</p>\n<p>首先我们来定义一个向量的旋转到底是什么。2D或3D空间中的旋转用角(Angle)来表示。角可以是角度制或弧度制的，周角是360角度或2 PI弧度。我个人更喜欢用角度，因为它们看起来更直观。</p>\n<div class=\"note default\">大多数旋转函数需要用弧度制的角，但幸运的是角度制的角也可以很容易地转化为弧度制的：\n\n<p>弧度转角度：角度 &#x3D; 弧度 * $(180.0f &#x2F; PI)$<br>角度转弧度：弧度 &#x3D; 角度 * $(PI &#x2F; 180.0f)$<br>PI约等于3.14159265359。</div></p>\n<p>转半圈会旋转360&#x2F;2 &#x3D; 180度，向右旋转1&#x2F;5圈表示向右旋转360&#x2F;5 &#x3D; 72度。下图中展示的2D向量$v¯$<br>是由$k¯$<br>向右旋转72度所得的：<img src=\"/2024/03/06/opengl_transformation/2024-03-06T223854.png\" alt=\"2024-03-06T223854\"><br>在3D空间中旋转需要定义一个角和一个旋转轴(Rotation Axis)。物体会沿着给定的旋转轴旋转特定角度。如果你想要更形象化的感受，可以试试向下看着一个特定的旋转轴，同时将你的头部旋转一定角度。当2D向量在3D空间中旋转时，我们把旋转轴设为z轴（尝试想象这种情况）。</p>\n<p>使用三角学，给定一个角度，可以把一个向量变换为一个经过旋转的新向量。这通常是使用一系列正弦和余弦函数（一般简称sin和cos）各种巧妙的组合得到的。当然，讨论如何生成变换矩阵超出了这个教程的范围。</p>\n<p>旋转矩阵在3D空间中每个单位轴都有不同定义，旋转角度用θ<br>表示：</p>\n<p>沿x轴旋转：</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223925.png\" alt=\"2024-03-06T223925\"></p>\n<p>沿y轴旋转：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223938.png\" alt=\"2024-03-06T223938\"><br>沿z轴旋转：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T223948.png\" alt=\"2024-03-06T223948\"><br>利用旋转矩阵我们可以把任意位置向量沿一个单位旋转轴进行旋转。也可以将多个矩阵复合，比如先沿着x轴旋转再沿着y轴旋转。但是这会很快导致一个问题——万向节死锁（Gimbal Lock，可以看看这个视频（优酷）来了解）。在这里我们不会讨论它的细节，但是对于3D空间中的旋转，一个更好的模型是沿着任意的一个轴，比如单位向量$(0.662, 0.2, 0.7222)$旋转，而不是对一系列旋转矩阵进行复合。这样的一个（超级麻烦的）矩阵是存在的，见下面这个公式，其中(Rx,Ry,Rz)<br>代表任意旋转轴：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224114.png\" alt=\"2024-03-06T224114\"><br>在数学上讨论如何生成这样的矩阵仍然超出了本节内容。但是记住，即使这样一个矩阵也不能完全解决万向节死锁问题（尽管会极大地避免）。避免万向节死锁的真正解决方案是使用四元数(Quaternion)，它不仅更安全，而且计算会更有效率。四元数可能会在后面的教程中讨论。</p>\n<h2 id=\"矩阵的组合\"><a href=\"#矩阵的组合\" class=\"headerlink\" title=\"矩阵的组合\"></a>矩阵的组合</h2><p>使用矩阵进行变换的真正力量在于，根据矩阵之间的乘法，我们可以把多个变换组合到一个矩阵中。让我们看看我们是否能生成一个变换矩阵，让它组合多个变换。假设我们有一个顶点(x, y, z)，我们希望将其缩放2倍，然后位移(1, 2, 3)个单位。我们需要一个位移和缩放矩阵来完成这些变换。结果的变换矩阵看起来像这样：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224151.png\" alt=\"2024-03-06T224151\"></p>\n<p>注意，当矩阵相乘时我们先写位移再写缩放变换的。矩阵乘法是不遵守交换律的，这意味着它们的顺序很重要。当矩阵相乘时，在最右边的矩阵是第一个与向量相乘的，所以你应该从右向左读这个乘法。建议您在组合矩阵时，先进行缩放操作，然后是旋转，最后才是位移，否则它们会（消极地）互相影响。比如，如果你先位移再缩放，位移的向量也会同样被缩放（译注：比如向某方向移动2米，2米也许会被缩放成1米）！</p>\n<p>用最终的变换矩阵左乘我们的向量会得到以下结果：<br><img src=\"/2024/03/06/opengl_transformation/2024-03-06T224240.png\" alt=\"2024-03-06T224240\"><br>不错！向量先缩放2倍，然后位移了(1, 2, 3)个单位。</p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>现在我们已经解释了变换背后的所有理论，是时候将这些知识利用起来了。OpenGL没有自带任何的矩阵和向量知识，所以我们必须定义自己的数学类和函数。在教程中我们更希望抽象所有的数学细节，使用已经做好了的数学库。幸运的是，有个易于使用，专门为OpenGL量身定做的数学库，那就是GLM。</p>\n<p>GLM是OpenGL Mathematics的缩写，它是一个只有头文件的库，也就是说我们只需包含对应的头文件就行了，不用链接和编译。GLM可以在它们的网站上<a href=\"https://glm.g-truc.net/0.9.8/index.html\">下载</a>。把头文件的根目录复制到你的includes文件夹，然后你就可以使用这个库了。</p>\n<div class=\"note danger no-icon\"><p>GLM库从0.9.9版本起，默认会将矩阵类型初始化为一个零矩阵（所有元素均为0），而不是单位矩阵（对角元素为1，其它元素为0）。如果你使用的是0.9.9或0.9.9以上的版本，你需要将所有的矩阵初始化改为 <code>glm::mat4 mat = glm::mat4(1.0f)</code> 。如果你想与本教程的代码保持一致，请使用低于0.9.9版本的GLM，或者改用上述代码初始化所有的矩阵。</p>\n</div>\n\n<p>我们需要的GLM的大多数功能都可以从下面这3个头文件中找到：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/glm.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glm/gtc/type_ptr.hpp&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>我们来看看是否可以利用我们刚学的变换知识把一个向量(1, 0, 0)位移(1, 1, 0)个单位（注意，我们把它定义为一个glm::vec4类型的值，齐次坐标设定为1.0）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">glm::vec4 <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 译注：下面就是矩阵初始化的一个例子，如果使用的是0.9.9及以上版本</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这行代码就需要改为:</span></span><br><span class=\"line\"><span class=\"comment\">// glm::mat4 trans = glm::mat4(1.0f)</span></span><br><span class=\"line\"><span class=\"comment\">// 之后将不再进行提示</span></span><br><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">translate</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\">vec = trans * vec;</span><br><span class=\"line\">std::cout &lt;&lt; vec.x &lt;&lt; vec.y &lt;&lt; vec.z &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>\n\n<p>我们先用GLM内建的向量类定义一个叫做vec的向量。接下来定义一个mat4类型的trans，默认是一个4×4单位矩阵。下一步是创建一个变换矩阵，我们是把单位矩阵和一个位移向量传递给glm::translate函数来完成这个工作的（然后用给定的矩阵乘以位移矩阵就能获得最后需要的矩阵）。 之后我们把向量乘以位移矩阵并且输出最后的结果。如果你仍记得位移矩阵是如何工作的话，得到的向量应该是(1 + 1, 0 + 1, 0 + 0)，也就是(2, 1, 0)。这个代码片段将会输出210，所以这个位移矩阵是正确的。</p>\n<p>我们来做些更有意思的事情，让我们来旋转和缩放之前教程中的那个箱子。首先我们把箱子逆时针旋转90度。然后缩放0.5倍，使它变成原来的一半大。我们先来创建变换矩阵：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">rotate</span>(trans, glm::<span class=\"built_in\">radians</span>(<span class=\"number\">90.0f</span>), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">scale</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>));</span><br></pre></td></tr></table></figure>\n\n<p>首先，我们把箱子在每个轴都缩放到0.5倍，然后沿z轴旋转90度。GLM希望它的角度是弧度制的(Radian)，所以我们使用glm::radians将角度转化为弧度。注意有纹理的那面矩形是在XY平面上的，所以我们需要把它绕着z轴旋转。因为我们把这个矩阵传递给了GLM的每个函数，GLM会自动将矩阵相乘，返回的结果是一个包括了多个变换的变换矩阵。</p>\n<p>下一个大问题是：如何把矩阵传递给着色器？我们在前面简单提到过GLSL里也有一个mat4类型。所以我们将修改顶点着色器让其接收一个mat4的uniform变量，然后再用矩阵uniform乘以位置向量：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core</span></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> aPos;</span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">1</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec2</span> aTexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec2</span> TexCoord;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> transform;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = transform * <span class=\"type\">vec4</span>(aPos, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\">    TexCoord = <span class=\"type\">vec2</span>(aTexCoord.x, <span class=\"number\">1.0</span> - aTexCoord.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在把位置向量传给gl_Position之前，我们先添加一个uniform，并且将其与变换矩阵相乘。我们的箱子现在应该是原来的二分之一大小并（向左）旋转了90度。当然，我们仍需要把变换矩阵传递给着色器：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> transformLoc = <span class=\"built_in\">glGetUniformLocation</span>(ourShader.ID, <span class=\"string\">&quot;transform&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">glUniformMatrix4fv</span>(transformLoc, <span class=\"number\">1</span>, GL_FALSE, glm::<span class=\"built_in\">value_ptr</span>(trans));</span><br></pre></td></tr></table></figure>\n<p>我们首先查询uniform变量的地址，然后用有Matrix4fv后缀的glUniform函数把矩阵数据发送给着色器。第一个参数你现在应该很熟悉了，它是uniform的位置值。第二个参数告诉OpenGL我们将要发送多少个矩阵，这里是1。第三个参数询问我们是否希望对我们的矩阵进行转置(Transpose)，也就是说交换我们矩阵的行和列。OpenGL开发者通常使用一种内部矩阵布局，叫做列主序(Column-major Ordering)布局。GLM的默认布局就是列主序，所以并不需要转置矩阵，我们填GL_FALSE。最后一个参数是真正的矩阵数据，但是GLM并不是把它们的矩阵储存为OpenGL所希望接受的那种，因此我们要先用GLM的自带的函数value_ptr来变换这些数据。</p>\n<p><img src=\"/2024/03/06/opengl_transformation/2024-03-06T233417.png\" alt=\"2024-03-06T233417\"></p>\n<p>完美！我们的箱子向左侧旋转，并是原来的一半大小，所以变换成功了。我们现在做些更有意思的，看看我们是否可以让箱子随着时间旋转，我们还会重新把箱子放在窗口的右下角。要让箱子随着时间推移旋转，我们必须在游戏循环中更新变换矩阵，因为它在每一次渲染迭代中都要更新。我们使用GLFW的时间函数来获取不同时间的角度：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glm::mat4 trans;</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">translate</span>(trans, glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>));</span><br><span class=\"line\">trans = glm::<span class=\"built_in\">rotate</span>(trans, (<span class=\"type\">float</span>)<span class=\"built_in\">glfwGetTime</span>(), glm::<span class=\"built_in\">vec3</span>(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>));</span><br></pre></td></tr></table></figure>\n<p>要记住的是前面的例子中我们可以在任何地方声明变换矩阵，但是现在我们必须在每一次迭代中创建它，从而保证我们能够不断更新旋转角度。这也就意味着我们不得不在每次游戏循环的迭代中重新创建变换矩阵。通常在渲染场景的时候，我们也会有多个需要在每次渲染迭代中都用新值重新创建的变换矩阵</p>\n<p>在这里我们先把箱子围绕原点(0, 0, 0)旋转，之后，我们把旋转过后的箱子位移到屏幕的右下角。记住，实际的变换顺序应该与阅读顺序相反：尽管在代码中我们先位移再旋转，实际的变换却是先应用旋转再是位移的。明白所有这些变换的组合，并且知道它们是如何应用到物体上是一件非常困难的事情。只有不断地尝试和实验这些变换你才能快速地掌握它们。</p>"},{"title":"虚幻引擎学习踩坑","date":"2024-06-01T00:50:47.000Z","_content":"\n\n这里用来记录虚幻引擎学习的踩坑记录。\n大部分是引擎API以及内置设置相关问题。部分问题可以通过手动写代码来实现的功能，但是使用引擎会对开发更加友好，大部分是这种问题\n![2024-06-01T165305](2024-06-01T165305.png)\n<!-- more -->\n\n<div class=\"note info\">问题：如何使角色(Charecter)面朝当前移动速度向量的方向？\n答：如果自己写代码来更改rotate，比较繁琐，比较方便的方法是直接在蓝图中设置\n\n ![2024-06-01T165453](2024-06-01T165453.png)\n这样可以实时的让引擎帮忙更新人物当前朝向\n</div>\n\n问题：如何自由移动当前摄像机视角\n答：假设当前摄像机是以如下方式（引入springarm）加入到actor中的：\n![2024-06-01T165658](2024-06-01T165658.png)\n那么，需要设置CameraSetting：\n![2024-06-01T165829](2024-06-01T165829.png)\n将其监听controller的欧拉角。\n然后我们直接在蓝图中更新controller即即可，可以达成解耦的功效\n\n问题：角色始终背对相机如何解决\n答：这种情况需要将角色与相机解耦。相机自由移动视角由上一个问题可以使用controller的欧拉角，\n然后我们角色需要解绑controller的欧拉角，设置pawn catagory下，把对应角都取消勾选即可解绑controller角度\n![2024-06-01T170249](2024-06-01T170249.png)\n\n总结，以上其实都是使用controller角度的问题，controller作为统一管理中心，可以直接读取用户输入的操作用来更新自己当前持有的角度。\n其他组件如果想使用controller的角度，设置上进行绑定即可。这样，如果多个组件都使用了controller的欧拉角，那么自然这些组件都会看起来是绑定到一起了\n\n","source":"_posts/unreal_study_problem.md","raw":"---\ntitle: 虚幻引擎学习踩坑\ndate: 2024-06-01T16:50:47+08:00\ncategories: \n- 游戏\n- 虚幻引擎\ntags: \n- [c++]\n- [OpenGL]\n---\n\n\n这里用来记录虚幻引擎学习的踩坑记录。\n大部分是引擎API以及内置设置相关问题。部分问题可以通过手动写代码来实现的功能，但是使用引擎会对开发更加友好，大部分是这种问题\n![2024-06-01T165305](2024-06-01T165305.png)\n<!-- more -->\n\n<div class=\"note info\">问题：如何使角色(Charecter)面朝当前移动速度向量的方向？\n答：如果自己写代码来更改rotate，比较繁琐，比较方便的方法是直接在蓝图中设置\n\n ![2024-06-01T165453](2024-06-01T165453.png)\n这样可以实时的让引擎帮忙更新人物当前朝向\n</div>\n\n问题：如何自由移动当前摄像机视角\n答：假设当前摄像机是以如下方式（引入springarm）加入到actor中的：\n![2024-06-01T165658](2024-06-01T165658.png)\n那么，需要设置CameraSetting：\n![2024-06-01T165829](2024-06-01T165829.png)\n将其监听controller的欧拉角。\n然后我们直接在蓝图中更新controller即即可，可以达成解耦的功效\n\n问题：角色始终背对相机如何解决\n答：这种情况需要将角色与相机解耦。相机自由移动视角由上一个问题可以使用controller的欧拉角，\n然后我们角色需要解绑controller的欧拉角，设置pawn catagory下，把对应角都取消勾选即可解绑controller角度\n![2024-06-01T170249](2024-06-01T170249.png)\n\n总结，以上其实都是使用controller角度的问题，controller作为统一管理中心，可以直接读取用户输入的操作用来更新自己当前持有的角度。\n其他组件如果想使用controller的角度，设置上进行绑定即可。这样，如果多个组件都使用了controller的欧拉角，那么自然这些组件都会看起来是绑定到一起了\n\n","slug":"unreal_study_problem","published":1,"updated":"2025-05-25T11:55:04.781Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7w00361wu11k6g67k4","content":"<p>这里用来记录虚幻引擎学习的踩坑记录。<br>大部分是引擎API以及内置设置相关问题。部分问题可以通过手动写代码来实现的功能，但是使用引擎会对开发更加友好，大部分是这种问题<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165305.png\" alt=\"2024-06-01T165305\"></p>\n<span id=\"more\"></span>\n\n<div class=\"note info\">问题：如何使角色(Charecter)面朝当前移动速度向量的方向？\n答：如果自己写代码来更改rotate，比较繁琐，比较方便的方法是直接在蓝图中设置\n\n<p> <img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165453.png\" alt=\"2024-06-01T165453\"><br>这样可以实时的让引擎帮忙更新人物当前朝向</p>\n</div>\n\n<p>问题：如何自由移动当前摄像机视角<br>答：假设当前摄像机是以如下方式（引入springarm）加入到actor中的：<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165658.png\" alt=\"2024-06-01T165658\"><br>那么，需要设置CameraSetting：<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165829.png\" alt=\"2024-06-01T165829\"><br>将其监听controller的欧拉角。<br>然后我们直接在蓝图中更新controller即即可，可以达成解耦的功效</p>\n<p>问题：角色始终背对相机如何解决<br>答：这种情况需要将角色与相机解耦。相机自由移动视角由上一个问题可以使用controller的欧拉角，<br>然后我们角色需要解绑controller的欧拉角，设置pawn catagory下，把对应角都取消勾选即可解绑controller角度<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T170249.png\" alt=\"2024-06-01T170249\"></p>\n<p>总结，以上其实都是使用controller角度的问题，controller作为统一管理中心，可以直接读取用户输入的操作用来更新自己当前持有的角度。<br>其他组件如果想使用controller的角度，设置上进行绑定即可。这样，如果多个组件都使用了controller的欧拉角，那么自然这些组件都会看起来是绑定到一起了</p>\n","length":446,"excerpt":"<p>这里用来记录虚幻引擎学习的踩坑记录。<br>大部分是引擎API以及内置设置相关问题。部分问题可以通过手动写代码来实现的功能，但是使用引擎会对开发更加友好，大部分是这种问题<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165305.png\" alt=\"2024-06-01T165305\"></p>","more":"<div class=\"note info\">问题：如何使角色(Charecter)面朝当前移动速度向量的方向？\n答：如果自己写代码来更改rotate，比较繁琐，比较方便的方法是直接在蓝图中设置\n\n<p> <img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165453.png\" alt=\"2024-06-01T165453\"><br>这样可以实时的让引擎帮忙更新人物当前朝向</p>\n</div>\n\n<p>问题：如何自由移动当前摄像机视角<br>答：假设当前摄像机是以如下方式（引入springarm）加入到actor中的：<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165658.png\" alt=\"2024-06-01T165658\"><br>那么，需要设置CameraSetting：<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T165829.png\" alt=\"2024-06-01T165829\"><br>将其监听controller的欧拉角。<br>然后我们直接在蓝图中更新controller即即可，可以达成解耦的功效</p>\n<p>问题：角色始终背对相机如何解决<br>答：这种情况需要将角色与相机解耦。相机自由移动视角由上一个问题可以使用controller的欧拉角，<br>然后我们角色需要解绑controller的欧拉角，设置pawn catagory下，把对应角都取消勾选即可解绑controller角度<br><img src=\"/2024/06/01/unreal_study_problem/2024-06-01T170249.png\" alt=\"2024-06-01T170249\"></p>\n<p>总结，以上其实都是使用controller角度的问题，controller作为统一管理中心，可以直接读取用户输入的操作用来更新自己当前持有的角度。<br>其他组件如果想使用controller的角度，设置上进行绑定即可。这样，如果多个组件都使用了controller的欧拉角，那么自然这些组件都会看起来是绑定到一起了</p>"},{"title":"Vue学习-1","date":"2023-12-18T11:45:09.000Z","top":22,"_content":"\n\n> 作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考.\n\n<!-- more -->\n# 基础\n\nVue 中文官网https://cn.vuejs.org/\n\n> Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue\n> 被设计为可以自底向上逐层应用。Vue\n> 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue\n> 也完全能够为复杂的单页应用提供驱动。\n\n## 开始使用\n入门开始，官网下载[**Vue.js**](https://cn.vuejs.org/js/vue.js)，导入到我们的html页面中.\n在html的body中定义一个div，设置id为app（可以自定义）,在script脚本中，new 一个Vue对象，其中el属性根据id取刚才定义的app对象。代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    {{name}}\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            name:\"张三\"\n        }\n    })\n</script>\n</html>\n```\n\n## 基本语法\n会发现我们定义的div中显示的是我们定义的vue对象中的属性。这就是一个Vue的入门语法，双大括号，官方称做[**mustache**](https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=baidu&wd=Vue%20mustache&oq=Vue&rsv_pq=fe42335a00002f18&rsv_t=17eaouGpLbNXKYoRVkLeqSKXakpDUEvleZGq%2FLvR%2FwOJ9hBRV4m77vj%2FgaE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=10&rsv_sug1=7&rsv_sug7=100&rsv_sug2=0&rsv_btype=t&inputT=1618&rsv_sug4=1761)语法。\n最开始的定义Vue对象方法，其实跟java中创建对象比较相似。我认为可以将其看作一个构造函数，该构造函数需要传入一个对象，格式是json格式。这样就好理解了。\n\n### vue对象内容：\nvue对象中，包含一些属性。\nel：指定对应标签id\ndata：当前vue对象的数据\nmethods：当前对象的方法\ncomputed：当前对象的计算属性。可以当做属性用，但是是通过方法得出来的属性\ncomponent:当前vue对象的组件\ncreated:初始化vue时执行的方法（钩子函数）[^1]。类似于java中的构造方法\n[^1]: 这里建议自行百度 vue 生命周期和钩子函数，有更加详细的介绍。这里只是满足我自己使用，故不作详细阐述\n\n\n### 基本命令\n#### v-on: \n 标识给对应组件添加对应的事件。 v-on:[event].[des] 表示给当前组件添加对应事件，并且被对应修饰符[^2]修饰。示例如下：\n [^2]: 修饰符可参考[这里](https://blog.csdn.net/wqliuj/article/details/108654103)\n ```html\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <button v-on:click=\"alert\">点我</button>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        methods:{\n            alert:function (){\n                alert(\"你点击了我！\")\n            }\n        }\n    })\n</script>\n</html>\n ```\n 就是给一个按钮添加了点击事件，里面传入方法名，对应方法需要在vue对象中定义好.同样的可以定义别的事件，来触发自定义逻辑\n 语法糖：@[event],\n #### v-bind:\n 可以给当前标签添加各种属性。例如class，style，key等等。我目前用的也不是很熟练，可以参考[这里](https://blog.csdn.net/qq_39207948/article/details/80938972)，当然，这个\n #### v-for:\n 循环遍历某个指定元素，并且生成若干当前标签。共有三种写法。示例如下：\n ```html\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    遍历集合\n    <div v-for=\"book in books\">{{book}}</div>\n    ---------------------------\n    遍历集合，并取出下标\n    <div v-for=\"(book,index) in books\">{{book}}--{{index}}</div>\n    -----------------------------\n    遍历对象，取出对象中的键值对以及下标\n    <div v-for=\"(key,value,index) in job\">{{key}}--{{value}}--{{index}}</div>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            job:{\n                place:\"上海\",\n                work:\"上班\",\n                des:\"赚钱\"\n            },\n            books:[\n                {\n                    name:\"十万个为什么\",\n                    price:10\n                },\n                {\n                    name:\"二十万个为什么\",\n                    price:20\n                },\n                {\n                    name:\"三十万个为什么\",\n                    price:30\n                },\n            ]\n        }\n    })\n</script>\n</html>\n ```\n 语法糖：:[data]\n#### v-model\n绑定vue对象的值到某个标签上。这个指令会自带双向绑定效果。相当于v-on+v-bind结合。示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <input v-model=\"text\">\n    {{text}}\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            text:\"阳光明媚\"\n        }\n    })\n</script>\n</html>\n```\n这里会发现，当我在输入框中修改text字符串内容时，下面展示的text也会随之改变。这就是双向绑定.\n#### v-if，v-else-if，v-else\n根据条件来选择展示哪一个标签.示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <div v-if=\"happy\">我开心</div>\n    <div v-else=\"happy\">我不开心</div>\n    <button @click=\"change\">心情</button>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            happy:true\n        },\n        methods:{\n            change:function (){\n                this.happy = !this.happy\n            }\n        }\n    })\n</script>\n</html>\n```\n### 组件化开发\n组件化开发是vue比较重要的一部分。组件化可以把某部分代码实现可重复使用的目的。简化开发流程\n组件化开发大致分为三步，1. 构造组件，2注册组件，3使用组件。\n其中，全局组件和部分组件的区别在于作用域不一样。可以类比于Java中的**静态属性(方法)**以及**非静态属性(方法)**\n其中，组件也有自己的data，methods等等。但是需要注意，组件自己的data是一个方法，返回一个对象，这个对象中可以自己定义属性\n#### 全局组件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n    // 组件创建\n    let CPN = Vue.extend({\n        template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        data(){\n            return {\n                childm:\"今天天气不错！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n\n    //组件注册\n    Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        }\n    })\n</script>\n</html>\n```\n构造组件就是Vue.extend()方法，需要传入一个参数，就是一个对象。核心属性为template\n注册组件时，方法：Vue.component('cpn',CPN);，需要传入两个参数，一个组件标签名称，一个组件对象.这种方式注册的组件，在当前所有vue对象中均可以使用\n使用组件时候，在vue对象管理的标签内部直接使用注册的标签名称即可.\n#### 局部组件\n直接看代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n    // 组件创建\n    let CPN = Vue.extend({\n        template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        data(){\n            return {\n                childm:\"今天天气不错！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:CPN\n        }\n    })\n</script>\n</html>\n```\n可以看到仅仅是注册方法不一样了，局部组件注册方法就是在vue内部声明这个组件。然后使用这个组件。需要注意的是，这种方法注册的组件，只能在当前vue对象中使用，在别的vue对象中是无法识别的\n#### 组件语法糖\n可以将构造组件的步骤，以及注册组件的步骤合并。直接在注册组件的时候传入构造组件的参数.示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:{\n                template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n                data(){\n                    return {\n                        childm:\"今天天气不错！\"\n                    }\n                },\n                methods:{\n                    alert:function (){\n                        alert(this.childm)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n#### 组件模板抽离\n将html语句与方法语句写在一起显然不是一个优雅的方法。幸好vue提供了相应的解决方法。就是模板抽离。我可以在html区域定义模板，在vue中使用模板作为组件.\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n<template id=\"test01\">\n    <div>\n        <input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n    </div>\n</template>\n\n</body>\n<script>\n\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:{\n                template: `#test01`,\n                data(){\n                    return {\n                        childm:\"今天天气不错！\"\n                    }\n                },\n                methods:{\n                    alert:function (){\n                        alert(this.childm)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n上面就是把cpn组件的模板拆到了html中，下面直接使用id获取模板.\n#### 父子组件\n父子组件，顾名思义，就是组件之间的上下级关系。在vue中这个关系表示为注册区域。\n比如A组件在B组件中使用component注册，那么A组件就是B组件的子组件.\n\n##### 父子组件之间的通信 - 父传子\n需要在子组件中定义一个props属性来接收父组件传入的数据。可以定义为集合，里面装有接收父组件数据的key值字符串集合。\n子组件,在props中定义了一个father属性，来代表其父组件是哪个：\n```html\n// 组件创建\n    let CPN1 = Vue.extend({\n        template: `<div>\n        <span>我是子组件</span>\n        <br>\n        子组件获取到的父组件data：{{father}}\n        <br>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        props:[\"father\"],\n        data(){\n            return {\n                childm:\"我是子组件！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n```\n父组件，注册子组件。引用子组件时，使用v-bind给子组件添加属性，属性名称即为子组件中props中的属性名称，来将其传递给子组件：\n```html\nlet CPN2 = Vue.extend({\n        template: `<div>\n        <span>我是父组件</span>\n        <br>\n        <child1 v-bind:father=\"name\"></child1>\n        <br>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n\n        data(){\n            return {\n                childm:\"我是父组件！\",\n                name:\"父组件01\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        },\n        components:{\n            child1:CPN1\n        }\n    })\n```\n总结：父子组件之间的通信-父传子有点类似于java中面向对象的思想，从当前对象中，将属性传递给另外的对象.\n其中，这个props还有很多种写法：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210401105302441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fib3JkZQ==,size_16,color_FFFFFF,t_70)\n##### 父子组件之间的通信 - 子传父\n子组件传跟父组件通信，是通过事件来通信的。\n主要方法如下：\n```html\nthis.$emit('trans-cli',message)\n```\n子组件中调用$emit，来发射一个事件。其中可以有两个参数，第一个参数就是事件名称，第二个就是事件参数。示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <input v-model=\"message\">\n    <ch1 @trans-cli=\"alert\"></ch1>\n\n</div>\n\n<template id=\"ch1\">\n    <div>\n       子组件\n        <input v-model=\"cmessage\">\n        <button @click=\"trans(cmessage)\">给父组件发送消息！！！</button>\n    </div>\n</template>\n</body>\n<script>\n    var v =  new Vue({\n        el:'#app',\n        data:{\n            message:'我是父组件，你好'\n        },\n        methods: {\n            alert:function (m){\n                alert(\"收到了来自子组件的事件！\"+m)\n            }\n        },\n        components:{\n            ch1:{\n                template:'#ch1',\n                data(){\n                    return{\n                        cmessage:\"子组件消息！\"\n                    }\n                },\n                methods:{\n                    trans:function (message){\n                        this.$emit('trans-cli',message)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n##### 父子组件之间的通信 - 父组件找子组件对象\n在开发的时候，有时候需要再父组件中，找到所有子组件对象。有如下几种方法：\n1.  在父组件中，调用this.$children,获取当前vue对象的所有子组件集合。获得的是一个数组，可以通过遍历该数组来获取每一个子组件.但是缺点很明显，只能通过下标来获取组件。\n2. 在父组件中，通过this.$refs获取所有标有ref属性的子组件。返回一个对象（map），标签中ref的值为key，该对象为值得map。获取指定子组件的话，指定ref值即可。并且经过实测，若有多个相同ref的组件，那么后面的组件会顶替掉前面的\n```html\nthis.$refs.[refName] //其中，refName 就是组件上明明的ref名称\n```\n\n##### 父子组件之间的通信 - 子组件找父组件对象\n因为一个子组件只可能有一个父组件，所以这个还是比较简单的，直接使用$parent即可获取父组件的vue实例。\n##### 父子组件之间的通信 - 寻找根组件\n直接使用$root，获取根节点的vue对象。\n\n### 插槽\n在模板中，有些时候，我并不需要事先定义好模板中的标签具体的内容，我是想让父组件来决定如何显示这一块，那么就可以用到模板了。直接用slot在模板内定义插槽，在使用时，在标签内放入自定义内容\n```html\n<template>\n<!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式-->\n    <slot>我是默认样式</slot>\n</template>\n\n<!-- 使用插槽-->\n<tmp1>\n    <div >父组件样式</div>\n</tmp1>\n```\n#### 具名插槽\n当然，一个模板可以拥有多个插槽。但是如果不设置每个插槽的名字（默认名字default），那么使用起来就会及其不方便。比如，我有两个插槽，A插槽和B插槽。我想在A插槽显示一个按钮，B插槽显示一段话，如下面\n```html\n<template>\n<!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式-->\n    <slot>A插槽</slot>\n    <slot>B插槽</slot>\n</template>\n<!-- 使用插槽-->\n<tmp1>\n    <div ><button>A插槽放按钮</button></div>\n    <div >B插槽放文字</div>\n</tmp1>\n```\n就会出现这种情况：![在这里插入图片描述](https://img-blog.csdnimg.cn/20210402091623531.png)\n将两个标签同时放在了A插槽和B插槽.\n这时就需要给每个插槽来一个name属性。然后，在父组件中，插入插槽的时候，根据name属性选择插在哪里,如下：\n```html\n    <tem1>\n        <template v-slot:a>\n            <div>\n                <button>A插槽放按钮</button>\n            </div>\n        </template>\n        <template v-slot:b>\n            <div>B插槽放文字</div>\n        </template>\n\n    </tem1>\n```\n需要给每一个单独插入插槽的元素定义template标签，使用v-slot属性，定义插槽名称指定插入位置\n#### 插槽中使用子组件属性\n在插入插槽时，本质上是在父组件内操作的。所以使用双大括号获取的数据，也都是父组件的。但是此时想要获取子组件数据，就需要在子组件内，通过v-bind来将子组件属性绑定到一个自定义标签属性中，然后在父组件获取.\n```html\n<template id=\"tmp1\">\n    <!--    slot 标签内，用name，外部想要插入插槽就需要使用slot-->\n    <!--    slot标签内用 v-slot:name 外部想要插入插槽就需要使用name-->\n\n<!--   slot 标签内，用name，外部想要插入插槽,需要用v-slot:[name] 后面根name名称,来表示对应插槽.然后也可以更改插槽内容，可以用v-slot:[name]=''\n来将子组件这个插槽抽出来当做一个对象，用这个对象获取该插槽通过bind属性绑定的值-->\n<!--    作用域插槽：给插槽命名，然后bind绑定属性 -->\n    <div>\n        <!--        具名插槽-->\n        <slot name=\"s\"  :pbooks=\"books\">\n            <div v-for=\"book in books\">{{book}}</div>\n        </slot>\n    </div>\n</template>\n    <tmp1>\n        <template v-slot:s=\"m1\">\n            <div v-for=\"(book,index) in m1.pbooks\">{{book}}!!!!{{index}}</div>\n        </template>\n    </tmp1>\n```","source":"_posts/vue-study01.md","raw":"---\ntitle: Vue学习-1\ndate: 2023-12-18 19:45:09\ntop: 22\ncategories:\n- web\n- vue\ntags:\n- vue\n- frontier\n---\n\n\n> 作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考.\n\n<!-- more -->\n# 基础\n\nVue 中文官网https://cn.vuejs.org/\n\n> Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue\n> 被设计为可以自底向上逐层应用。Vue\n> 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue\n> 也完全能够为复杂的单页应用提供驱动。\n\n## 开始使用\n入门开始，官网下载[**Vue.js**](https://cn.vuejs.org/js/vue.js)，导入到我们的html页面中.\n在html的body中定义一个div，设置id为app（可以自定义）,在script脚本中，new 一个Vue对象，其中el属性根据id取刚才定义的app对象。代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    {{name}}\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            name:\"张三\"\n        }\n    })\n</script>\n</html>\n```\n\n## 基本语法\n会发现我们定义的div中显示的是我们定义的vue对象中的属性。这就是一个Vue的入门语法，双大括号，官方称做[**mustache**](https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=baidu&wd=Vue%20mustache&oq=Vue&rsv_pq=fe42335a00002f18&rsv_t=17eaouGpLbNXKYoRVkLeqSKXakpDUEvleZGq%2FLvR%2FwOJ9hBRV4m77vj%2FgaE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=10&rsv_sug1=7&rsv_sug7=100&rsv_sug2=0&rsv_btype=t&inputT=1618&rsv_sug4=1761)语法。\n最开始的定义Vue对象方法，其实跟java中创建对象比较相似。我认为可以将其看作一个构造函数，该构造函数需要传入一个对象，格式是json格式。这样就好理解了。\n\n### vue对象内容：\nvue对象中，包含一些属性。\nel：指定对应标签id\ndata：当前vue对象的数据\nmethods：当前对象的方法\ncomputed：当前对象的计算属性。可以当做属性用，但是是通过方法得出来的属性\ncomponent:当前vue对象的组件\ncreated:初始化vue时执行的方法（钩子函数）[^1]。类似于java中的构造方法\n[^1]: 这里建议自行百度 vue 生命周期和钩子函数，有更加详细的介绍。这里只是满足我自己使用，故不作详细阐述\n\n\n### 基本命令\n#### v-on: \n 标识给对应组件添加对应的事件。 v-on:[event].[des] 表示给当前组件添加对应事件，并且被对应修饰符[^2]修饰。示例如下：\n [^2]: 修饰符可参考[这里](https://blog.csdn.net/wqliuj/article/details/108654103)\n ```html\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <button v-on:click=\"alert\">点我</button>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        methods:{\n            alert:function (){\n                alert(\"你点击了我！\")\n            }\n        }\n    })\n</script>\n</html>\n ```\n 就是给一个按钮添加了点击事件，里面传入方法名，对应方法需要在vue对象中定义好.同样的可以定义别的事件，来触发自定义逻辑\n 语法糖：@[event],\n #### v-bind:\n 可以给当前标签添加各种属性。例如class，style，key等等。我目前用的也不是很熟练，可以参考[这里](https://blog.csdn.net/qq_39207948/article/details/80938972)，当然，这个\n #### v-for:\n 循环遍历某个指定元素，并且生成若干当前标签。共有三种写法。示例如下：\n ```html\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    遍历集合\n    <div v-for=\"book in books\">{{book}}</div>\n    ---------------------------\n    遍历集合，并取出下标\n    <div v-for=\"(book,index) in books\">{{book}}--{{index}}</div>\n    -----------------------------\n    遍历对象，取出对象中的键值对以及下标\n    <div v-for=\"(key,value,index) in job\">{{key}}--{{value}}--{{index}}</div>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            job:{\n                place:\"上海\",\n                work:\"上班\",\n                des:\"赚钱\"\n            },\n            books:[\n                {\n                    name:\"十万个为什么\",\n                    price:10\n                },\n                {\n                    name:\"二十万个为什么\",\n                    price:20\n                },\n                {\n                    name:\"三十万个为什么\",\n                    price:30\n                },\n            ]\n        }\n    })\n</script>\n</html>\n ```\n 语法糖：:[data]\n#### v-model\n绑定vue对象的值到某个标签上。这个指令会自带双向绑定效果。相当于v-on+v-bind结合。示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <input v-model=\"text\">\n    {{text}}\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            text:\"阳光明媚\"\n        }\n    })\n</script>\n</html>\n```\n这里会发现，当我在输入框中修改text字符串内容时，下面展示的text也会随之改变。这就是双向绑定.\n#### v-if，v-else-if，v-else\n根据条件来选择展示哪一个标签.示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <div v-if=\"happy\">我开心</div>\n    <div v-else=\"happy\">我不开心</div>\n    <button @click=\"change\">心情</button>\n</div>\n</body>\n<script>\n    let app = new Vue({\n        el:'#app',\n        data:{\n            happy:true\n        },\n        methods:{\n            change:function (){\n                this.happy = !this.happy\n            }\n        }\n    })\n</script>\n</html>\n```\n### 组件化开发\n组件化开发是vue比较重要的一部分。组件化可以把某部分代码实现可重复使用的目的。简化开发流程\n组件化开发大致分为三步，1. 构造组件，2注册组件，3使用组件。\n其中，全局组件和部分组件的区别在于作用域不一样。可以类比于Java中的**静态属性(方法)**以及**非静态属性(方法)**\n其中，组件也有自己的data，methods等等。但是需要注意，组件自己的data是一个方法，返回一个对象，这个对象中可以自己定义属性\n#### 全局组件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n    // 组件创建\n    let CPN = Vue.extend({\n        template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        data(){\n            return {\n                childm:\"今天天气不错！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n\n    //组件注册\n    Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        }\n    })\n</script>\n</html>\n```\n构造组件就是Vue.extend()方法，需要传入一个参数，就是一个对象。核心属性为template\n注册组件时，方法：Vue.component('cpn',CPN);，需要传入两个参数，一个组件标签名称，一个组件对象.这种方式注册的组件，在当前所有vue对象中均可以使用\n使用组件时候，在vue对象管理的标签内部直接使用注册的标签名称即可.\n#### 局部组件\n直接看代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n    // 组件创建\n    let CPN = Vue.extend({\n        template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        data(){\n            return {\n                childm:\"今天天气不错！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:CPN\n        }\n    })\n</script>\n</html>\n```\n可以看到仅仅是注册方法不一样了，局部组件注册方法就是在vue内部声明这个组件。然后使用这个组件。需要注意的是，这种方法注册的组件，只能在当前vue对象中使用，在别的vue对象中是无法识别的\n#### 组件语法糖\n可以将构造组件的步骤，以及注册组件的步骤合并。直接在注册组件的时候传入构造组件的参数.示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n</body>\n<script>\n\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:{\n                template: `<div>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n                data(){\n                    return {\n                        childm:\"今天天气不错！\"\n                    }\n                },\n                methods:{\n                    alert:function (){\n                        alert(this.childm)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n#### 组件模板抽离\n将html语句与方法语句写在一起显然不是一个优雅的方法。幸好vue提供了相应的解决方法。就是模板抽离。我可以在html区域定义模板，在vue中使用模板作为组件.\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\">\n</head>\n<body>\n\n<div id=\"app\">\n    {{message}}\n    <cpn></cpn>\n</div>\n\n<template id=\"test01\">\n    <div>\n        <input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n    </div>\n</template>\n\n</body>\n<script>\n\n\n    //组件注册\n    // Vue.component('cpn',CPN);\n\n    let app = new Vue({\n        el: '#app',\n        data: {\n            message: \"This is Massage\"\n        },\n        components:{\n            cpn:{\n                template: `#test01`,\n                data(){\n                    return {\n                        childm:\"今天天气不错！\"\n                    }\n                },\n                methods:{\n                    alert:function (){\n                        alert(this.childm)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n上面就是把cpn组件的模板拆到了html中，下面直接使用id获取模板.\n#### 父子组件\n父子组件，顾名思义，就是组件之间的上下级关系。在vue中这个关系表示为注册区域。\n比如A组件在B组件中使用component注册，那么A组件就是B组件的子组件.\n\n##### 父子组件之间的通信 - 父传子\n需要在子组件中定义一个props属性来接收父组件传入的数据。可以定义为集合，里面装有接收父组件数据的key值字符串集合。\n子组件,在props中定义了一个father属性，来代表其父组件是哪个：\n```html\n// 组件创建\n    let CPN1 = Vue.extend({\n        template: `<div>\n        <span>我是子组件</span>\n        <br>\n        子组件获取到的父组件data：{{father}}\n        <br>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n        props:[\"father\"],\n        data(){\n            return {\n                childm:\"我是子组件！\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        }\n    })\n```\n父组件，注册子组件。引用子组件时，使用v-bind给子组件添加属性，属性名称即为子组件中props中的属性名称，来将其传递给子组件：\n```html\nlet CPN2 = Vue.extend({\n        template: `<div>\n        <span>我是父组件</span>\n        <br>\n        <child1 v-bind:father=\"name\"></child1>\n        <br>\n<input v-model=\"childm\" placeholder=\"填写！\">\n        <button @click=\"alert\">点击我</button>\n        </div>`,\n\n        data(){\n            return {\n                childm:\"我是父组件！\",\n                name:\"父组件01\"\n            }\n        },\n        methods:{\n            alert:function (){\n                alert(this.childm)\n            }\n        },\n        components:{\n            child1:CPN1\n        }\n    })\n```\n总结：父子组件之间的通信-父传子有点类似于java中面向对象的思想，从当前对象中，将属性传递给另外的对象.\n其中，这个props还有很多种写法：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210401105302441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fib3JkZQ==,size_16,color_FFFFFF,t_70)\n##### 父子组件之间的通信 - 子传父\n子组件传跟父组件通信，是通过事件来通信的。\n主要方法如下：\n```html\nthis.$emit('trans-cli',message)\n```\n子组件中调用$emit，来发射一个事件。其中可以有两个参数，第一个参数就是事件名称，第二个就是事件参数。示例如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../js/vue.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n    <input v-model=\"message\">\n    <ch1 @trans-cli=\"alert\"></ch1>\n\n</div>\n\n<template id=\"ch1\">\n    <div>\n       子组件\n        <input v-model=\"cmessage\">\n        <button @click=\"trans(cmessage)\">给父组件发送消息！！！</button>\n    </div>\n</template>\n</body>\n<script>\n    var v =  new Vue({\n        el:'#app',\n        data:{\n            message:'我是父组件，你好'\n        },\n        methods: {\n            alert:function (m){\n                alert(\"收到了来自子组件的事件！\"+m)\n            }\n        },\n        components:{\n            ch1:{\n                template:'#ch1',\n                data(){\n                    return{\n                        cmessage:\"子组件消息！\"\n                    }\n                },\n                methods:{\n                    trans:function (message){\n                        this.$emit('trans-cli',message)\n                    }\n                }\n            }\n        }\n    })\n</script>\n</html>\n```\n##### 父子组件之间的通信 - 父组件找子组件对象\n在开发的时候，有时候需要再父组件中，找到所有子组件对象。有如下几种方法：\n1.  在父组件中，调用this.$children,获取当前vue对象的所有子组件集合。获得的是一个数组，可以通过遍历该数组来获取每一个子组件.但是缺点很明显，只能通过下标来获取组件。\n2. 在父组件中，通过this.$refs获取所有标有ref属性的子组件。返回一个对象（map），标签中ref的值为key，该对象为值得map。获取指定子组件的话，指定ref值即可。并且经过实测，若有多个相同ref的组件，那么后面的组件会顶替掉前面的\n```html\nthis.$refs.[refName] //其中，refName 就是组件上明明的ref名称\n```\n\n##### 父子组件之间的通信 - 子组件找父组件对象\n因为一个子组件只可能有一个父组件，所以这个还是比较简单的，直接使用$parent即可获取父组件的vue实例。\n##### 父子组件之间的通信 - 寻找根组件\n直接使用$root，获取根节点的vue对象。\n\n### 插槽\n在模板中，有些时候，我并不需要事先定义好模板中的标签具体的内容，我是想让父组件来决定如何显示这一块，那么就可以用到模板了。直接用slot在模板内定义插槽，在使用时，在标签内放入自定义内容\n```html\n<template>\n<!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式-->\n    <slot>我是默认样式</slot>\n</template>\n\n<!-- 使用插槽-->\n<tmp1>\n    <div >父组件样式</div>\n</tmp1>\n```\n#### 具名插槽\n当然，一个模板可以拥有多个插槽。但是如果不设置每个插槽的名字（默认名字default），那么使用起来就会及其不方便。比如，我有两个插槽，A插槽和B插槽。我想在A插槽显示一个按钮，B插槽显示一段话，如下面\n```html\n<template>\n<!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式-->\n    <slot>A插槽</slot>\n    <slot>B插槽</slot>\n</template>\n<!-- 使用插槽-->\n<tmp1>\n    <div ><button>A插槽放按钮</button></div>\n    <div >B插槽放文字</div>\n</tmp1>\n```\n就会出现这种情况：![在这里插入图片描述](https://img-blog.csdnimg.cn/20210402091623531.png)\n将两个标签同时放在了A插槽和B插槽.\n这时就需要给每个插槽来一个name属性。然后，在父组件中，插入插槽的时候，根据name属性选择插在哪里,如下：\n```html\n    <tem1>\n        <template v-slot:a>\n            <div>\n                <button>A插槽放按钮</button>\n            </div>\n        </template>\n        <template v-slot:b>\n            <div>B插槽放文字</div>\n        </template>\n\n    </tem1>\n```\n需要给每一个单独插入插槽的元素定义template标签，使用v-slot属性，定义插槽名称指定插入位置\n#### 插槽中使用子组件属性\n在插入插槽时，本质上是在父组件内操作的。所以使用双大括号获取的数据，也都是父组件的。但是此时想要获取子组件数据，就需要在子组件内，通过v-bind来将子组件属性绑定到一个自定义标签属性中，然后在父组件获取.\n```html\n<template id=\"tmp1\">\n    <!--    slot 标签内，用name，外部想要插入插槽就需要使用slot-->\n    <!--    slot标签内用 v-slot:name 外部想要插入插槽就需要使用name-->\n\n<!--   slot 标签内，用name，外部想要插入插槽,需要用v-slot:[name] 后面根name名称,来表示对应插槽.然后也可以更改插槽内容，可以用v-slot:[name]=''\n来将子组件这个插槽抽出来当做一个对象，用这个对象获取该插槽通过bind属性绑定的值-->\n<!--    作用域插槽：给插槽命名，然后bind绑定属性 -->\n    <div>\n        <!--        具名插槽-->\n        <slot name=\"s\"  :pbooks=\"books\">\n            <div v-for=\"book in books\">{{book}}</div>\n        </slot>\n    </div>\n</template>\n    <tmp1>\n        <template v-slot:s=\"m1\">\n            <div v-for=\"(book,index) in m1.pbooks\">{{book}}!!!!{{index}}</div>\n        </template>\n    </tmp1>\n```","slug":"vue-study01","published":1,"updated":"2024-03-02T14:34:03.607Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki7w00381wu1hvgafg8l","content":"<blockquote>\n<p>作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>Vue 中文官网<a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org/</a></p>\n<blockquote>\n<p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue<br>被设计为可以自底向上逐层应用。Vue<br>的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue<br>也完全能够为复杂的单页应用提供驱动。</p>\n</blockquote>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>入门开始，官网下载<a href=\"https://cn.vuejs.org/js/vue.js\"><strong>Vue.js</strong></a>，导入到我们的html页面中.<br>在html的body中定义一个div，设置id为app（可以自定义）,在script脚本中，new 一个Vue对象，其中el属性根据id取刚才定义的app对象。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;张三&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>会发现我们定义的div中显示的是我们定义的vue对象中的属性。这就是一个Vue的入门语法，双大括号，官方称做<a href=\"https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=baidu&wd=Vue%20mustache&oq=Vue&rsv_pq=fe42335a00002f18&rsv_t=17eaouGpLbNXKYoRVkLeqSKXakpDUEvleZGq/LvR/wOJ9hBRV4m77vj/gaE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=10&rsv_sug1=7&rsv_sug7=100&rsv_sug2=0&rsv_btype=t&inputT=1618&rsv_sug4=1761\"><strong>mustache</strong></a>语法。<br>最开始的定义Vue对象方法，其实跟java中创建对象比较相似。我认为可以将其看作一个构造函数，该构造函数需要传入一个对象，格式是json格式。这样就好理解了。</p>\n<h3 id=\"vue对象内容：\"><a href=\"#vue对象内容：\" class=\"headerlink\" title=\"vue对象内容：\"></a>vue对象内容：</h3><p>vue对象中，包含一些属性。<br>el：指定对应标签id<br>data：当前vue对象的数据<br>methods：当前对象的方法<br>computed：当前对象的计算属性。可以当做属性用，但是是通过方法得出来的属性<br>component:当前vue对象的组件<br>created:初始化vue时执行的方法（钩子函数）[^1]。类似于java中的构造方法<br>[^1]: 这里建议自行百度 vue 生命周期和钩子函数，有更加详细的介绍。这里只是满足我自己使用，故不作详细阐述</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on:\"></a>v-on:</h4><p> 标识给对应组件添加对应的事件。 v-on:[event].[des] 表示给当前组件添加对应事件，并且被对应修饰符[^2]修饰。示例如下：<br> [^2]: 修饰符可参考<a href=\"https://blog.csdn.net/wqliuj/article/details/108654103\">这里</a><br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;你点击了我！&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 就是给一个按钮添加了点击事件，里面传入方法名，对应方法需要在vue对象中定义好.同样的可以定义别的事件，来触发自定义逻辑<br> 语法糖：@[event],</p>\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind:\"></a>v-bind:</h4><p> 可以给当前标签添加各种属性。例如class，style，key等等。我目前用的也不是很熟练，可以参考<a href=\"https://blog.csdn.net/qq_39207948/article/details/80938972\">这里</a>，当然，这个</p>\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for:\"></a>v-for:</h4><p> 循环遍历某个指定元素，并且生成若干当前标签。共有三种写法。示例如下：<br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    遍历集合</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ---------------------------</span><br><span class=\"line\">    遍历集合，并取出下标</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(book,index) in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;--&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    -----------------------------</span><br><span class=\"line\">    遍历对象，取出对象中的键值对以及下标</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(key,value,index) in job&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;--&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">job</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">place</span>:<span class=\"string\">&quot;上海&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">work</span>:<span class=\"string\">&quot;上班&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">des</span>:<span class=\"string\">&quot;赚钱&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">books</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">10</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;二十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">20</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;三十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">30</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 语法糖：:[data]</p>\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><p>绑定vue对象的值到某个标签上。这个指令会自带双向绑定效果。相当于v-on+v-bind结合。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;text&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">text</span>:<span class=\"string\">&quot;阳光明媚&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里会发现，当我在输入框中修改text字符串内容时，下面展示的text也会随之改变。这就是双向绑定.</p>\n<h4 id=\"v-if，v-else-if，v-else\"><a href=\"#v-if，v-else-if，v-else\" class=\"headerlink\" title=\"v-if，v-else-if，v-else\"></a>v-if，v-else-if，v-else</h4><p>根据条件来选择展示哪一个标签.示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;happy&quot;</span>&gt;</span>我开心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>=<span class=\"string\">&quot;happy&quot;</span>&gt;</span>我不开心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>心情<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">happy</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">change</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">happy</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">happy</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件化开发\"><a href=\"#组件化开发\" class=\"headerlink\" title=\"组件化开发\"></a>组件化开发</h3><p>组件化开发是vue比较重要的一部分。组件化可以把某部分代码实现可重复使用的目的。简化开发流程<br>组件化开发大致分为三步，1. 构造组件，2注册组件，3使用组件。<br>其中，全局组件和部分组件的区别在于作用域不一样。可以类比于Java中的<strong>静态属性(方法)<strong>以及</strong>非静态属性(方法)</strong><br>其中，组件也有自己的data，methods等等。但是需要注意，组件自己的data是一个方法，返回一个对象，这个对象中可以自己定义属性</p>\n<h4 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 组件创建</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> <span class=\"variable constant_\">CPN</span> = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;cpn&#x27;</span>,<span class=\"variable constant_\">CPN</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>构造组件就是Vue.extend()方法，需要传入一个参数，就是一个对象。核心属性为template<br>注册组件时，方法：Vue.component(‘cpn’,CPN);，需要传入两个参数，一个组件标签名称，一个组件对象.这种方式注册的组件，在当前所有vue对象中均可以使用<br>使用组件时候，在vue对象管理的标签内部直接使用注册的标签名称即可.</p>\n<h4 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h4><p>直接看代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 组件创建</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> <span class=\"variable constant_\">CPN</span> = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:<span class=\"variable constant_\">CPN</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到仅仅是注册方法不一样了，局部组件注册方法就是在vue内部声明这个组件。然后使用这个组件。需要注意的是，这种方法注册的组件，只能在当前vue对象中使用，在别的vue对象中是无法识别的</p>\n<h4 id=\"组件语法糖\"><a href=\"#组件语法糖\" class=\"headerlink\" title=\"组件语法糖\"></a>组件语法糖</h4><p>可以将构造组件的步骤，以及注册组件的步骤合并。直接在注册组件的时候传入构造组件的参数.示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组件模板抽离\"><a href=\"#组件模板抽离\" class=\"headerlink\" title=\"组件模板抽离\"></a>组件模板抽离</h4><p>将html语句与方法语句写在一起显然不是一个优雅的方法。幸好vue提供了相应的解决方法。就是模板抽离。我可以在html区域定义模板，在vue中使用模板作为组件.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test01&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>: <span class=\"string\">`#test01`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面就是把cpn组件的模板拆到了html中，下面直接使用id获取模板.</p>\n<h4 id=\"父子组件\"><a href=\"#父子组件\" class=\"headerlink\" title=\"父子组件\"></a>父子组件</h4><p>父子组件，顾名思义，就是组件之间的上下级关系。在vue中这个关系表示为注册区域。<br>比如A组件在B组件中使用component注册，那么A组件就是B组件的子组件.</p>\n<h5 id=\"父子组件之间的通信-父传子\"><a href=\"#父子组件之间的通信-父传子\" class=\"headerlink\" title=\"父子组件之间的通信 - 父传子\"></a>父子组件之间的通信 - 父传子</h5><p>需要在子组件中定义一个props属性来接收父组件传入的数据。可以定义为集合，里面装有接收父组件数据的key值字符串集合。<br>子组件,在props中定义了一个father属性，来代表其父组件是哪个：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件创建</span><br><span class=\"line\">    let CPN1 = Vue.extend(&#123;</span><br><span class=\"line\">        template: `<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        子组件获取到的父组件data：&#123;&#123;father&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span><br><span class=\"line\">        props:[&quot;father&quot;],</span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                childm:&quot;我是子组件！&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            alert:function ()&#123;</span><br><span class=\"line\">                alert(this.childm)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>父组件，注册子组件。引用子组件时，使用v-bind给子组件添加属性，属性名称即为子组件中props中的属性名称，来将其传递给子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let CPN2 = Vue.extend(&#123;</span><br><span class=\"line\">        template: `<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是父组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child1</span> <span class=\"attr\">v-bind:father</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span><br><span class=\"line\"></span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                childm:&quot;我是父组件！&quot;,</span><br><span class=\"line\">                name:&quot;父组件01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            alert:function ()&#123;</span><br><span class=\"line\">                alert(this.childm)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        components:&#123;</span><br><span class=\"line\">            child1:CPN1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>总结：父子组件之间的通信-父传子有点类似于java中面向对象的思想，从当前对象中，将属性传递给另外的对象.<br>其中，这个props还有很多种写法：<br><img src=\"https://img-blog.csdnimg.cn/20210401105302441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fib3JkZQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"父子组件之间的通信-子传父\"><a href=\"#父子组件之间的通信-子传父\" class=\"headerlink\" title=\"父子组件之间的通信 - 子传父\"></a>父子组件之间的通信 - 子传父</h5><p>子组件传跟父组件通信，是通过事件来通信的。<br>主要方法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$emit(&#x27;trans-cli&#x27;,message)</span><br></pre></td></tr></table></figure>\n<p>子组件中调用$emit，来发射一个事件。其中可以有两个参数，第一个参数就是事件名称，第二个就是事件参数。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ch1</span> @<span class=\"attr\">trans-cli</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ch1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ch1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       子组件</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;cmessage&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;trans(cmessage)&quot;</span>&gt;</span>给父组件发送消息！！！<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> v =  <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>:<span class=\"string\">&#x27;我是父组件，你好&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\">m</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;收到了来自子组件的事件！&quot;</span>+m)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">ch1</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>:<span class=\"string\">&#x27;#ch1&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">cmessage</span>:<span class=\"string\">&quot;子组件消息！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">trans</span>:<span class=\"keyword\">function</span> (<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;trans-cli&#x27;</span>,message)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"父子组件之间的通信-父组件找子组件对象\"><a href=\"#父子组件之间的通信-父组件找子组件对象\" class=\"headerlink\" title=\"父子组件之间的通信 - 父组件找子组件对象\"></a>父子组件之间的通信 - 父组件找子组件对象</h5><p>在开发的时候，有时候需要再父组件中，找到所有子组件对象。有如下几种方法：</p>\n<ol>\n<li>在父组件中，调用this.$children,获取当前vue对象的所有子组件集合。获得的是一个数组，可以通过遍历该数组来获取每一个子组件.但是缺点很明显，只能通过下标来获取组件。</li>\n<li>在父组件中，通过this.$refs获取所有标有ref属性的子组件。返回一个对象（map），标签中ref的值为key，该对象为值得map。获取指定子组件的话，指定ref值即可。并且经过实测，若有多个相同ref的组件，那么后面的组件会顶替掉前面的</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$refs.[refName] //其中，refName 就是组件上明明的ref名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"父子组件之间的通信-子组件找父组件对象\"><a href=\"#父子组件之间的通信-子组件找父组件对象\" class=\"headerlink\" title=\"父子组件之间的通信 - 子组件找父组件对象\"></a>父子组件之间的通信 - 子组件找父组件对象</h5><p>因为一个子组件只可能有一个父组件，所以这个还是比较简单的，直接使用$parent即可获取父组件的vue实例。</p>\n<h5 id=\"父子组件之间的通信-寻找根组件\"><a href=\"#父子组件之间的通信-寻找根组件\" class=\"headerlink\" title=\"父子组件之间的通信 - 寻找根组件\"></a>父子组件之间的通信 - 寻找根组件</h5><p>直接使用$root，获取根节点的vue对象。</p>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>在模板中，有些时候，我并不需要事先定义好模板中的标签具体的内容，我是想让父组件来决定如何显示这一块，那么就可以用到模板了。直接用slot在模板内定义插槽，在使用时，在标签内放入自定义内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>我是默认样式<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用插槽--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>父组件样式<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h4><p>当然，一个模板可以拥有多个插槽。但是如果不设置每个插槽的名字（默认名字default），那么使用起来就会及其不方便。比如，我有两个插槽，A插槽和B插槽。我想在A插槽显示一个按钮，B插槽显示一段话，如下面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>A插槽<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>B插槽<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用插槽--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>A插槽放按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>B插槽放文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>就会出现这种情况：<img src=\"https://img-blog.csdnimg.cn/20210402091623531.png\" alt=\"在这里插入图片描述\"><br>将两个标签同时放在了A插槽和B插槽.<br>这时就需要给每个插槽来一个name属性。然后，在父组件中，插入插槽的时候，根据name属性选择插在哪里,如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tem1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>A插槽放按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:b</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>B插槽放文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tem1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要给每一个单独插入插槽的元素定义template标签，使用v-slot属性，定义插槽名称指定插入位置</p>\n<h4 id=\"插槽中使用子组件属性\"><a href=\"#插槽中使用子组件属性\" class=\"headerlink\" title=\"插槽中使用子组件属性\"></a>插槽中使用子组件属性</h4><p>在插入插槽时，本质上是在父组件内操作的。所以使用双大括号获取的数据，也都是父组件的。但是此时想要获取子组件数据，就需要在子组件内，通过v-bind来将子组件属性绑定到一个自定义标签属性中，然后在父组件获取.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tmp1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    slot 标签内，用name，外部想要插入插槽就需要使用slot--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    slot标签内用 v-slot:name 外部想要插入插槽就需要使用name--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--   slot 标签内，用name，外部想要插入插槽,需要用v-slot:[name] 后面根name名称,来表示对应插槽.然后也可以更改插槽内容，可以用v-slot:[name]=&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">来将子组件这个插槽抽出来当做一个对象，用这个对象获取该插槽通过bind属性绑定的值--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    作用域插槽：给插槽命名，然后bind绑定属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        具名插槽--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;s&quot;</span>  <span class=\"attr\">:pbooks</span>=<span class=\"string\">&quot;books&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:s</span>=<span class=\"string\">&quot;m1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(book,index) in m1.pbooks&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;!!!!&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>","length":3727,"excerpt":"<blockquote>\n<p>作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考.</p>\n</blockquote>","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>Vue 中文官网<a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org/</a></p>\n<blockquote>\n<p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue<br>被设计为可以自底向上逐层应用。Vue<br>的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue<br>也完全能够为复杂的单页应用提供驱动。</p>\n</blockquote>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>入门开始，官网下载<a href=\"https://cn.vuejs.org/js/vue.js\"><strong>Vue.js</strong></a>，导入到我们的html页面中.<br>在html的body中定义一个div，设置id为app（可以自定义）,在script脚本中，new 一个Vue对象，其中el属性根据id取刚才定义的app对象。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;张三&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>会发现我们定义的div中显示的是我们定义的vue对象中的属性。这就是一个Vue的入门语法，双大括号，官方称做<a href=\"https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&tn=baidu&wd=Vue%20mustache&oq=Vue&rsv_pq=fe42335a00002f18&rsv_t=17eaouGpLbNXKYoRVkLeqSKXakpDUEvleZGq/LvR/wOJ9hBRV4m77vj/gaE&rqlang=cn&rsv_enter=1&rsv_dl=tb&rsv_sug3=10&rsv_sug1=7&rsv_sug7=100&rsv_sug2=0&rsv_btype=t&inputT=1618&rsv_sug4=1761\"><strong>mustache</strong></a>语法。<br>最开始的定义Vue对象方法，其实跟java中创建对象比较相似。我认为可以将其看作一个构造函数，该构造函数需要传入一个对象，格式是json格式。这样就好理解了。</p>\n<h3 id=\"vue对象内容：\"><a href=\"#vue对象内容：\" class=\"headerlink\" title=\"vue对象内容：\"></a>vue对象内容：</h3><p>vue对象中，包含一些属性。<br>el：指定对应标签id<br>data：当前vue对象的数据<br>methods：当前对象的方法<br>computed：当前对象的计算属性。可以当做属性用，但是是通过方法得出来的属性<br>component:当前vue对象的组件<br>created:初始化vue时执行的方法（钩子函数）[^1]。类似于java中的构造方法<br>[^1]: 这里建议自行百度 vue 生命周期和钩子函数，有更加详细的介绍。这里只是满足我自己使用，故不作详细阐述</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><h4 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on:\"></a>v-on:</h4><p> 标识给对应组件添加对应的事件。 v-on:[event].[des] 表示给当前组件添加对应事件，并且被对应修饰符[^2]修饰。示例如下：<br> [^2]: 修饰符可参考<a href=\"https://blog.csdn.net/wqliuj/article/details/108654103\">这里</a><br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;你点击了我！&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 就是给一个按钮添加了点击事件，里面传入方法名，对应方法需要在vue对象中定义好.同样的可以定义别的事件，来触发自定义逻辑<br> 语法糖：@[event],</p>\n<h4 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind:\"></a>v-bind:</h4><p> 可以给当前标签添加各种属性。例如class，style，key等等。我目前用的也不是很熟练，可以参考<a href=\"https://blog.csdn.net/qq_39207948/article/details/80938972\">这里</a>，当然，这个</p>\n<h4 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for:\"></a>v-for:</h4><p> 循环遍历某个指定元素，并且生成若干当前标签。共有三种写法。示例如下：<br> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    遍历集合</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    ---------------------------</span><br><span class=\"line\">    遍历集合，并取出下标</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(book,index) in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;--&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    -----------------------------</span><br><span class=\"line\">    遍历对象，取出对象中的键值对以及下标</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(key,value,index) in job&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;--&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">job</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">place</span>:<span class=\"string\">&quot;上海&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">work</span>:<span class=\"string\">&quot;上班&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">des</span>:<span class=\"string\">&quot;赚钱&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">books</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">10</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;二十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">20</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">name</span>:<span class=\"string\">&quot;三十万个为什么&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">price</span>:<span class=\"number\">30</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br> 语法糖：:[data]</p>\n<h4 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h4><p>绑定vue对象的值到某个标签上。这个指令会自带双向绑定效果。相当于v-on+v-bind结合。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;text&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">text</span>:<span class=\"string\">&quot;阳光明媚&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里会发现，当我在输入框中修改text字符串内容时，下面展示的text也会随之改变。这就是双向绑定.</p>\n<h4 id=\"v-if，v-else-if，v-else\"><a href=\"#v-if，v-else-if，v-else\" class=\"headerlink\" title=\"v-if，v-else-if，v-else\"></a>v-if，v-else-if，v-else</h4><p>根据条件来选择展示哪一个标签.示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;happy&quot;</span>&gt;</span>我开心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>=<span class=\"string\">&quot;happy&quot;</span>&gt;</span>我不开心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>心情<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">happy</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">change</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">happy</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">happy</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件化开发\"><a href=\"#组件化开发\" class=\"headerlink\" title=\"组件化开发\"></a>组件化开发</h3><p>组件化开发是vue比较重要的一部分。组件化可以把某部分代码实现可重复使用的目的。简化开发流程<br>组件化开发大致分为三步，1. 构造组件，2注册组件，3使用组件。<br>其中，全局组件和部分组件的区别在于作用域不一样。可以类比于Java中的<strong>静态属性(方法)<strong>以及</strong>非静态属性(方法)</strong><br>其中，组件也有自己的data，methods等等。但是需要注意，组件自己的data是一个方法，返回一个对象，这个对象中可以自己定义属性</p>\n<h4 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 组件创建</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> <span class=\"variable constant_\">CPN</span> = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;cpn&#x27;</span>,<span class=\"variable constant_\">CPN</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>构造组件就是Vue.extend()方法，需要传入一个参数，就是一个对象。核心属性为template<br>注册组件时，方法：Vue.component(‘cpn’,CPN);，需要传入两个参数，一个组件标签名称，一个组件对象.这种方式注册的组件，在当前所有vue对象中均可以使用<br>使用组件时候，在vue对象管理的标签内部直接使用注册的标签名称即可.</p>\n<h4 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h4><p>直接看代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 组件创建</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> <span class=\"variable constant_\">CPN</span> = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">extend</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:<span class=\"variable constant_\">CPN</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到仅仅是注册方法不一样了，局部组件注册方法就是在vue内部声明这个组件。然后使用这个组件。需要注意的是，这种方法注册的组件，只能在当前vue对象中使用，在别的vue对象中是无法识别的</p>\n<h4 id=\"组件语法糖\"><a href=\"#组件语法糖\" class=\"headerlink\" title=\"组件语法糖\"></a>组件语法糖</h4><p>可以将构造组件的步骤，以及注册组件的步骤合并。直接在注册组件的时候传入构造组件的参数.示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">&lt;input v-model=&quot;childm&quot; placeholder=&quot;填写！&quot;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;button @click=&quot;alert&quot;&gt;点击我&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组件模板抽离\"><a href=\"#组件模板抽离\" class=\"headerlink\" title=\"组件模板抽离\"></a>组件模板抽离</h4><p>将html语句与方法语句写在一起显然不是一个优雅的方法。幸好vue提供了相应的解决方法。就是模板抽离。我可以在html区域定义模板，在vue中使用模板作为组件.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test01&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//组件注册</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// Vue.component(&#x27;cpn&#x27;,CPN);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is Massage&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cpn</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>: <span class=\"string\">`#test01`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">childm</span>:<span class=\"string\">&quot;今天天气不错！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">childm</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面就是把cpn组件的模板拆到了html中，下面直接使用id获取模板.</p>\n<h4 id=\"父子组件\"><a href=\"#父子组件\" class=\"headerlink\" title=\"父子组件\"></a>父子组件</h4><p>父子组件，顾名思义，就是组件之间的上下级关系。在vue中这个关系表示为注册区域。<br>比如A组件在B组件中使用component注册，那么A组件就是B组件的子组件.</p>\n<h5 id=\"父子组件之间的通信-父传子\"><a href=\"#父子组件之间的通信-父传子\" class=\"headerlink\" title=\"父子组件之间的通信 - 父传子\"></a>父子组件之间的通信 - 父传子</h5><p>需要在子组件中定义一个props属性来接收父组件传入的数据。可以定义为集合，里面装有接收父组件数据的key值字符串集合。<br>子组件,在props中定义了一个father属性，来代表其父组件是哪个：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组件创建</span><br><span class=\"line\">    let CPN1 = Vue.extend(&#123;</span><br><span class=\"line\">        template: `<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        子组件获取到的父组件data：&#123;&#123;father&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span><br><span class=\"line\">        props:[&quot;father&quot;],</span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                childm:&quot;我是子组件！&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            alert:function ()&#123;</span><br><span class=\"line\">                alert(this.childm)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>父组件，注册子组件。引用子组件时，使用v-bind给子组件添加属性，属性名称即为子组件中props中的属性名称，来将其传递给子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let CPN2 = Vue.extend(&#123;</span><br><span class=\"line\">        template: `<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是父组件<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child1</span> <span class=\"attr\">v-bind:father</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;childm&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;填写！&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span><br><span class=\"line\"></span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                childm:&quot;我是父组件！&quot;,</span><br><span class=\"line\">                name:&quot;父组件01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            alert:function ()&#123;</span><br><span class=\"line\">                alert(this.childm)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        components:&#123;</span><br><span class=\"line\">            child1:CPN1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>总结：父子组件之间的通信-父传子有点类似于java中面向对象的思想，从当前对象中，将属性传递给另外的对象.<br>其中，这个props还有很多种写法：<br><img src=\"https://img-blog.csdnimg.cn/20210401105302441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fib3JkZQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"父子组件之间的通信-子传父\"><a href=\"#父子组件之间的通信-子传父\" class=\"headerlink\" title=\"父子组件之间的通信 - 子传父\"></a>父子组件之间的通信 - 子传父</h5><p>子组件传跟父组件通信，是通过事件来通信的。<br>主要方法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$emit(&#x27;trans-cli&#x27;,message)</span><br></pre></td></tr></table></figure>\n<p>子组件中调用$emit，来发射一个事件。其中可以有两个参数，第一个参数就是事件名称，第二个就是事件参数。示例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ch1</span> @<span class=\"attr\">trans-cli</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ch1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ch1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       子组件</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;cmessage&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;trans(cmessage)&quot;</span>&gt;</span>给父组件发送消息！！！<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> v =  <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>:<span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>:<span class=\"string\">&#x27;我是父组件，你好&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">alert</span>:<span class=\"keyword\">function</span> (<span class=\"params\">m</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;收到了来自子组件的事件！&quot;</span>+m)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">ch1</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>:<span class=\"string\">&#x27;#ch1&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">cmessage</span>:<span class=\"string\">&quot;子组件消息！&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">trans</span>:<span class=\"keyword\">function</span> (<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;trans-cli&#x27;</span>,message)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"父子组件之间的通信-父组件找子组件对象\"><a href=\"#父子组件之间的通信-父组件找子组件对象\" class=\"headerlink\" title=\"父子组件之间的通信 - 父组件找子组件对象\"></a>父子组件之间的通信 - 父组件找子组件对象</h5><p>在开发的时候，有时候需要再父组件中，找到所有子组件对象。有如下几种方法：</p>\n<ol>\n<li>在父组件中，调用this.$children,获取当前vue对象的所有子组件集合。获得的是一个数组，可以通过遍历该数组来获取每一个子组件.但是缺点很明显，只能通过下标来获取组件。</li>\n<li>在父组件中，通过this.$refs获取所有标有ref属性的子组件。返回一个对象（map），标签中ref的值为key，该对象为值得map。获取指定子组件的话，指定ref值即可。并且经过实测，若有多个相同ref的组件，那么后面的组件会顶替掉前面的</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$refs.[refName] //其中，refName 就是组件上明明的ref名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"父子组件之间的通信-子组件找父组件对象\"><a href=\"#父子组件之间的通信-子组件找父组件对象\" class=\"headerlink\" title=\"父子组件之间的通信 - 子组件找父组件对象\"></a>父子组件之间的通信 - 子组件找父组件对象</h5><p>因为一个子组件只可能有一个父组件，所以这个还是比较简单的，直接使用$parent即可获取父组件的vue实例。</p>\n<h5 id=\"父子组件之间的通信-寻找根组件\"><a href=\"#父子组件之间的通信-寻找根组件\" class=\"headerlink\" title=\"父子组件之间的通信 - 寻找根组件\"></a>父子组件之间的通信 - 寻找根组件</h5><p>直接使用$root，获取根节点的vue对象。</p>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>在模板中，有些时候，我并不需要事先定义好模板中的标签具体的内容，我是想让父组件来决定如何显示这一块，那么就可以用到模板了。直接用slot在模板内定义插槽，在使用时，在标签内放入自定义内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>我是默认样式<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用插槽--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>父组件样式<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h4><p>当然，一个模板可以拥有多个插槽。但是如果不设置每个插槽的名字（默认名字default），那么使用起来就会及其不方便。比如，我有两个插槽，A插槽和B插槽。我想在A插槽显示一个按钮，B插槽显示一段话，如下面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    这是一个插槽，可以使用该模板时，定义其内容，也可以内置一个默认样式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>A插槽<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>B插槽<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用插槽--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>A插槽放按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>B插槽放文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>就会出现这种情况：<img src=\"https://img-blog.csdnimg.cn/20210402091623531.png\" alt=\"在这里插入图片描述\"><br>将两个标签同时放在了A插槽和B插槽.<br>这时就需要给每个插槽来一个name属性。然后，在父组件中，插入插槽的时候，根据name属性选择插在哪里,如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tem1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>A插槽放按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:b</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>B插槽放文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tem1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要给每一个单独插入插槽的元素定义template标签，使用v-slot属性，定义插槽名称指定插入位置</p>\n<h4 id=\"插槽中使用子组件属性\"><a href=\"#插槽中使用子组件属性\" class=\"headerlink\" title=\"插槽中使用子组件属性\"></a>插槽中使用子组件属性</h4><p>在插入插槽时，本质上是在父组件内操作的。所以使用双大括号获取的数据，也都是父组件的。但是此时想要获取子组件数据，就需要在子组件内，通过v-bind来将子组件属性绑定到一个自定义标签属性中，然后在父组件获取.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tmp1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    slot 标签内，用name，外部想要插入插槽就需要使用slot--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    slot标签内用 v-slot:name 外部想要插入插槽就需要使用name--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--   slot 标签内，用name，外部想要插入插槽,需要用v-slot:[name] 后面根name名称,来表示对应插槽.然后也可以更改插槽内容，可以用v-slot:[name]=&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">来将子组件这个插槽抽出来当做一个对象，用这个对象获取该插槽通过bind属性绑定的值--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    作用域插槽：给插槽命名，然后bind绑定属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--        具名插槽--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;s&quot;</span>  <span class=\"attr\">:pbooks</span>=<span class=\"string\">&quot;books&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;book in books&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tmp1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:s</span>=<span class=\"string\">&quot;m1&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(book,index) in m1.pbooks&quot;</span>&gt;</span>&#123;&#123;book&#125;&#125;!!!!&#123;&#123;index&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tmp1</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue学习-2","date":"2023-12-18T11:45:09.000Z","_content":"\n> 作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考. 此篇是进阶内容\n<!-- more -->\n[基础篇](../vue-study01)在这里\n\n\n# 模块化\n前端模块化，类似于java中的类的概念。把某些功能抽离出来封装一个类，然后根据功能需要块来选择使用什么模块，什么方法。\n目前了解，前端区分模块主要是文件级别区分，一个文件作为一个模块。某个文件用到别的文件中的内容，就需要导入该文件，对应文件需要导出\n\n```javascript\n//commonJS模块化的导入和导出\nmodule.exports = {\n    //导出属性\n    name:'voidvvv',\n    //导出方法\n    say(mes){\n        alert(mes)\n    }\n}\n\n//导入\nconst {name,say} = require('demo.js')\n\n// es6默认导出\nexport default {\n    name:'voidvvv - es6',\n    say(mes){\n        alert(mes+\"es6\")\n    }\n}\n// es6 指定导出\nexport var a = 30;\n\nexport function shout(){\n    alert(\"shout!!!!!\")\n}\n\n//ES6 默认导入\nimport mydefault from './demo'\n\n//ES6 指定导入\nimport {a} from './demo'\n```\n\n## webpack\n一个模块化打包工具。可以类比于java的 打jar包，用来帮助我们整理繁琐的前端代码的各个模块。\n不同于打jar包的是，打jar包包括了编译文件到class的这一步，但是前端不需要这一步。前端需要的是对各种资源的整理。比如css样式，js代码，甚至图片文件等资源webpack可以帮助我们整理这些资源，在我们使用的时候直接在html页面引入一个最终js即可。\n### webpack安装：\n1. 首先需要安装[nodejs](http://nodejs.cn/),其中内置了npm包管理工具\n2. 在当前项目下执行```npm init```初始化npm管理\n3. 命令行执行```npm install webpack -g```进行全局安装。或者在当前项目下，```npm install webpack --save-dev```进行局部安装\n4. 在当前项目下，执行```webpack ./src/main.js ./dist/bundle.js```这一步是执行webpack指令。后面的两个参数，一个是打包程序的入口，也是整个应用启动的地方，类似于java 的main方法。后一个参数代表将所有资源整合打包后，所放在什么地方。我这里放在当前项目的dist文件夹下的bundle.js中了\n5. 执行完后，会生成目标文件，在html中引用该文件即可\n### webpack.config.js\n在每次执行打包命令时，都要指定一遍源文件以及目标文件未免有些过于繁琐，因为这两个位置是不经常发生改变的，所以需要有个地方来配置\n在当前文件夹下创建webpack.config.js文件，里面内容如下：\n```javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry:'./src/main.js',\n    mode: 'development',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'bundle.js'\n    }\n    }\n```\n这里就配置了当前项目打包的源文件以及目标文件。\n之后，若还想再次打包，直接执行webpack即可.\n\n手动指定配置文件方式：```webpack --config 文件位置```\n### loader\n现在，我们只是完成了javascript文件的打包。若我们想使用css，甚至图片呢？这就需要webpack的组件：loader了。\n若js中引用了css，则需要安装cssloader以及styleloader。详情可看[官网](https://webpack.docschina.org/loaders/)。这里就只介绍怎么用，以及我自己遇到的一些问题以及排查\n#### 导入css相关：\n首先执行```npm install url-loader --save-dev```以及```npm install --save-dev css-loader```，然后配置webpack.config.js\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n#### 导入图片相关\n图片需要两个loader。一个url ```npm install url-loader --save-dev```，一个file ```npm install file-loader --save-dev```。然后配置webpack.config.js\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n              name: '[path][name][hash:8].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n这里需要注意一点，就是导入图片只虽然是引入了两个loader，但是在配置文件中只需要一个loader就可以了。配置了两个会出现加载图片重复并且无法显示的问题。\n### webpack插件\n目前我们的项目打包后，只会生成js代码以及用到的图片等文件.想要自动生成首页的html的话，还需要安装插件html-webpack-plugin\n```npm install html-webpack-plugin --save-dev```\n在配置文件中导入```const htmlWebpackPlugin = require('html-webpack-plugin')```\n然后新增\n\n```javascript\nplugins:[\n        new htmlWebpackPlugin({\n            template:'index.html'\n        })\n    ],\n```\n\n   然后项目在打包的时候，会带上根目录的indexhtml作为模板。并且将打包后生成的目标js自动放进模板中\n\n### webpack-dev-server搭建本地服务器\n\n```npm install webpack-dev-server```安装组件。\n\n配置文件中，添加如下配置：\n\n```json\ndevServer: {\n        contentBase: path.join(__dirname, 'dist'),\n        compress: true,\n        port: 9000,\n        inline:true\n    }\n```\n\n然后执行 webpack serve 命令启动。\n\n或者可以直接在配置文件中的scripts中配置命令。使用npm run 命令方式启动\n\n老版本的这个，需要的命令是webpack-dev-server。此命令用在新版本会出现错误。\n\n```Error: Cannot find module 'webpack-cli/bin/config-yargs'```\n\n是新老版本不兼容的错误。使用新命令webpack serve即可\n\n\n\n### webpack整合vue\n首先通过npm安装vue ```npm install vue --save```，这，我们就可以在js文件中，通过import Vue from 'vue'来引入vue了，然后就可以向入门时候一样来使用了。\n但是这里会遇到一个问题：\n```You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210403131545445.png)\n这是因为默认使用了runtimeonly版本，无法对template编译。所以我们需要进行一部转换(后期template分离后，可以用这个版本，更快，更小),在webpackconfig文件中，添加如下配置：\n```script\nresolve:{\n        alias:{\n            'vue$':'vue/dist/vue.esm.js'\n        }\n    }\n```\n\n\n\n# 脚手架\n\n帮助进行vue开发的框架。把webpack以及一些插件loader的配置给默认配置好了\n\n首先安装vuecli：```npm install @vue/cli -g```\n\n然后通过vue创建项目。（可以通过webstorm以及相关工具直接创建）```vue create 项目名称```\n\n创建好项目后，就可以直接进行开发了。目前使用的是vue4.+，默认有asset文件，放静态资源，components文件夹，放vue模板，App.vue，默认的一个主模板，main.js，默认的主程序入口。总之，之前所有的配置在这里全部都默化了。可以直接使用。\n\n## 更改默认配置\n\n我们可以看到配置全部都默认化了，而且自带css，图片等的解析功能。并且自带本地服务功能。若是想再修改配置文件，可以通过```vue ui```命令来图形化的修改相关属性，以及管理各种组件。也可以通过新建vue.config.js文件，看当作自己的配置文件。\n\n具体用法跟webpack中的webpack.config.js一样，可以当作sprringboot里面的application.yml\n\n## 路由\n\nvue开发使用的是单页面模式，即整个前端项目只有一个html，通过路由来控制显示什么样的组件。\n\n1. 如果想使用路由，需要先安装```npm install vue-router --save```\n\n2. 然后新建一个router文件夹，创建index.js文件，导入：```import VueRouter from \"vue-router\";```示例如下\n\n```javascript\n// 路由\nimport VueRouter from \"vue-router\";\nimport Vue from 'vue'\nimport Home from \"@/components/Home\";\nimport PicCon from \"@/components/PicCon\";\n\n//1. Vue.use(插件) 个人理解，算是注册插件\nVue.use(VueRouter)\n\nconst routes = [\n    {\n        path:'/home',\n        component:Home\n    },\n    {\n        path:'/pic',\n        component:PicCon\n    }\n]\n\n//2. 创建Vuerouter对象\nconst router = new VueRouter({\n    routes\n})\n\nexport default router;\n\n```\n\n需要注意的是，<font color='red'>这里的数组routes对象，不可以随便命名。必须为routes</font>\n\n3. 再在main.js中，引入路由，放在我们根vue对象里\n\n```javascript\nimport Vue from 'vue'\nimport App from './App.vue'\nimport './plugins/element.js'\nimport VueRouter from \"@/router\";\n\nVue.config.productionTip = false\n\nnew Vue({\n  router:VueRouter,\n  render: h => h(App),\n}).$mount('#app')\n\n```\n\n4. 使用：```<router-link to=\"home\">home</router-link>```这样来表示路由到某个path，\n\n   ```<router-view></router-view>```来展示对应路由显示的内容\n\n5. 若不想使用router-link，想使用自定义的组件来实现，可以使用@click绑定方法.\n```vue\nthis.router.push('url') 来实现。push中也可以放对象，对象中可以有path，以及query参数。\n{\n    path::'/home',\n    query:{\n        name:'test',\n        age:20\n    }\n}\n```\n\n### 路由懒加载\n\n在需要用到js组件时，才加载相应的组件。类似于java设计模式中的懒汉式。将路由的写法写成让如下方式即可：\n\n```javascript\nconst routes = [\n    {\n        path: '/',\n        redirect: '/home'\n    },\n    {\n        path: '/home',\n        component: () => import('@/components/Home')\n    },\n    {\n        path: '/pic',\n        component: () => import   ('@/components/PicCon')\n    }\n]\n```\n\n### 路由嵌套\n\n当一个路由下面有子路由时，需要使用路由嵌套。比如：/home/news \n\n嵌套路由需要在路由中使用children属性，里面配置子路由\n\n```javascript\n{\n        path: '/home',\n        component: () => import('@/components/Home'),\n        children:[\n            {\n                path:'news',\n                component:()=>import('@/components/home/HomeNwes')\n            },\n            {\n                path:'video',\n                component:()=>import('@/components/home/HomeVideo')\n            }\n        ]\n    }\n```\n\n然后，子路由中，也使用如下方式，相对路由来定位\n\n```vue\n    <router-link to=\"news\">嗯，去看看新闻</router-link>\n    <router-link to=\"video\">嗯，去看看视频</router-link>\n    <router-view>routerview</router-view>\n```\n问题：如何使用routerlink能实现新打开一个页面来跳转呢？ 直接在router-link 上添加target属性，设置_blank即可\n### 路由参数传递\n传递方式两种。params和query。\n**params** 可以类比于javaweb中的pathvariable获取参数形式。这种方式的操作方法如下：\n```javascript\n//路由文件配置映射： \n/home/:id\n//传递方式：直接在路径拼接\n\n// 接受方式：\n在子组件中使用：\nthis.$route.params.id\n// 可以类比于javaweb使用 @PathVariable\n```\n**query** 可以类比于get请求直接加参数。这种方式会在路径上显示参数（get请求）。这种方式的操作方法如下：\n```vue\n//路由配置文件无需改动\n\n//传递方式：router-link 标签，其中的to属性需要交给vue管理。即改为 :to. 其中内容也由字符串变为对象。如下：\n<router-link :to=\"{path:'/news',query:{name:'zhangsan',age:10}}\">嗯，去看看新闻</router-link>\n\n// 取出参数,在子组件中，使用如下：\nthis.$route.query 可以取出传入的对象。\nthis.$route.query.name 可以取出对象中的某个值\n```\n## 路由全局导航守卫\n\n\n## keepalive\n\n# vueX vue状态管理工具。\nvuex主要就是负责将各个模块公共的一些资源统一进行管理，并且进行响应式修改的工具.\n使用：\n\n1. 安装 ```npm install vuex --save```\n\n2. 配置 ：新建store文件夹，创建index.js，内容如下：\n\n   ```javascript\n   import Vue from \"vue\"\n   import Vuex from \"vuex\"\n   \n   Vue.use(Vuex)\n   \n   const store = new Vuex.Store({\n       state:{\n           \n       },\n       mutations:{\n           //此处放方法。外界修改值就是调用这里的方法.方法会默认有一个参数，state，就是本对象中的state,可以通过这个state来修改真正的属性\n           //mutations的使用比较特别,需要用 $store.commite('方法名'，参数) 的方法来调用.传入的参数会放在第二个参数\n           incres(state){\n               \n           }\n       },\n       actions:{},\n       getters:{\n           //这里用来放公共的计算属性。这里计算属性有两个默认的参数，第一个就是state属性，第二个时getter属性。用来递归\n       },\n       modules:{}\n   })\n   \n   export default store;\n   ```\n\n3. 注册：在main.js中首先导入：```import store from './store'```,然后再放进根vue中：\n\n   ```javascript\n   new Vue({\n     router:VueRouter,\n     store,\n     render: h => h(App)\n   }).$mount('#app')\n   ```\n\n4. 使用： 在子组件中，通过this.$store ,来获取注册的store对象。想获取其中的state，```$store.state.name```即可\n\n# axios\n\n\n\n## 整合elementui\n\n```shell\nvue add element\n```\n### elementui使用问题及解决\n#### el-form表单校验相关：\n基本的写法：\n```javascript\n<el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\">\n  <el-form-item label=\"密码\" prop=\"pass\">\n    <el-input type=\"password\" v-model=\"ruleForm.pass\" autocomplete=\"off\"></el-input>\n  </el-form-item>\n  <el-form-item label=\"确认密码\" prop=\"checkPass\">\n    <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\n  </el-form-item>\n  <el-form-item label=\"年龄\" prop=\"age\">\n    <el-input v-model.number=\"ruleForm.age\"></el-input>\n  </el-form-item>\n  <el-form-item>\n    <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\n    <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n  </el-form-item>\n</el-form>\n<script>\n  export default {\n    data() {\n      var checkAge = (rule, value, callback) => {\n        if (!value) {\n          return callback(new Error('年龄不能为空'));\n        }\n        setTimeout(() => {\n          if (!Number.isInteger(value)) {\n            callback(new Error('请输入数字值'));\n          } else {\n            if (value < 18) {\n              callback(new Error('必须年满18岁'));\n            } else {\n              callback();\n            }\n          }\n        }, 1000);\n      };\n      var validatePass = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入密码'));\n        } else {\n          if (this.ruleForm.checkPass !== '') {\n            this.$refs.ruleForm.validateField('checkPass');\n          }\n          callback();\n        }\n      };\n      var validatePass2 = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请再次输入密码'));\n        } else if (value !== this.ruleForm.pass) {\n          callback(new Error('两次输入密码不一致!'));\n        } else {\n          callback();\n        }\n      };\n      return {\n        ruleForm: {\n          pass: '',\n          checkPass: '',\n          age: ''\n        },\n        rules: {\n          pass: [\n            { validator: validatePass, trigger: 'blur' }\n          ],\n          checkPass: [\n            { validator: validatePass2, trigger: 'blur' }\n          ],\n          age: [\n            { validator: checkAge, trigger: 'blur' }\n          ]\n        }\n      };\n    },\n    methods: {\n      submitForm(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            alert('submit!');\n          } else {\n            console.log('error submit!!');\n            return false;\n          }\n        });\n      },\n      resetForm(formName) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\n</script>\n```\n其中，el-form中的v-model所绑定的对象，需要是vue中的对象。el-form-item中，prop属性所对应的值，就是 el-form中的v-model所绑定的对象 的对应属性名称。\n这样，我们定义校验器的时候，就可以使用el-form中的rules属性来指定校验器对象，校验器对象是一个数组。数组中每个对象的key就是el-form中的v-model所绑定的对象 的对应属性名称，表示每个属性的校验方法。\n同时，el-form-item也可以使用自己的rules标签来覆盖el-form给的校验规则。\n#### el-form动态添加表单且自定义校验规则：\n但是，在动态添加表单的时候，如果想自定义校验器该怎么做呢？\n```html\n<el-form  :model=\"curEdit\"  :rules=\"rules\" ref=\"ruleForm\" label-width=\"120px\">\n\n                    <el-form-item style=\"width: 70%;\" v-for=\"(item,i) in curEdit.times\" :label=\"'打款时间点'+(i+1)\" :prop=\"'times.'+i+'.value'\" :rules=\"checkRule(i)\">\n                        <el-input  v-model=\"item.value\"></el-input>\n                    </el-form-item>\n\n\n            </el-form>\n```\n这是我自定义的表单，可以看到，其中的el-form-item条数是不断变化的。根据的是vue对象中的一个数组来决定的。\n那么，这么个动态变化的表单如何做校验呢\n首先，这个数组必须在一个vue对象A中，然后该数组成员也必须是有属性的对象。\n整个表单el-form来跟这个对象A绑定，v-model，这里可以指定规则，也可以不指定，因为没用。\n其次，el-form-item使用v-for来遍历这个对象中的该数组属性。\n这里的prop属性，需要为属性值。但是因为我们这里需要取数组中的属性，则先拿到当前数组对应的属性，我这里叫times。然后取索引，i，最后拼接数组成员的属性，我这里直接就叫value。\n最重要的一点，rules属性，因为我这里需要自定义实现，并且需要校验的属性是 A 对象的一个数组属性中的一个成员的属性，所以默认的映射也很难达到，这里可以直接 ：prop，这里可以传入一个vue 的方法。方法返回一个校验规则对象即可。\n详细的校验规则对象可以取elemntui官网看\n我这里方法名就叫checkRule，并且传入了一个索引\n下面是我的方法的具体实现。主要就是判断数字是否合规并且是否重复,且是失去焦点才会校验\n```javascript\ncheckRule: function (index) {\n            let vali = {\n                required: true,\n                validator: (rule, value, callback) => {\n                    // console.log(value)\n                    if (index === 0) {\n                        callback();\n                        return;\n                    }\n                    if (!value.match(/^\\d{1,2}$/)) {\n                        callback(new Error('请输入正确格式的内容后提交'));\n                        return;\n                    }\n                    if (value < 0 || value > 23) {\n                        callback(new Error('请输入正确格式的内容后提交'));\n                        return;\n                    }\n                    var count = 0;\n                    for (var x = 0; x < this.curEdit.times.length; x++) {\n                        if (this.curEdit.times[x].value === value) {\n                            count++;\n                            if (count >= 2) {\n                                callback(new Error('请输入正确格式的内容后提交'));\n                                return;\n                            }\n                        }\n                    }\n                    callback();\n                },\n                trigger: 'blur'\n            }\n            return vali;\n        }\n```","source":"_posts/vue-study02.md","raw":"---\ntitle: Vue学习-2\ndate: 2023-12-18 19:45:09\ncategories:\n- web\n- vue\ntags:\n- vue\n- frontier\n---\n\n> 作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考. 此篇是进阶内容\n<!-- more -->\n[基础篇](../vue-study01)在这里\n\n\n# 模块化\n前端模块化，类似于java中的类的概念。把某些功能抽离出来封装一个类，然后根据功能需要块来选择使用什么模块，什么方法。\n目前了解，前端区分模块主要是文件级别区分，一个文件作为一个模块。某个文件用到别的文件中的内容，就需要导入该文件，对应文件需要导出\n\n```javascript\n//commonJS模块化的导入和导出\nmodule.exports = {\n    //导出属性\n    name:'voidvvv',\n    //导出方法\n    say(mes){\n        alert(mes)\n    }\n}\n\n//导入\nconst {name,say} = require('demo.js')\n\n// es6默认导出\nexport default {\n    name:'voidvvv - es6',\n    say(mes){\n        alert(mes+\"es6\")\n    }\n}\n// es6 指定导出\nexport var a = 30;\n\nexport function shout(){\n    alert(\"shout!!!!!\")\n}\n\n//ES6 默认导入\nimport mydefault from './demo'\n\n//ES6 指定导入\nimport {a} from './demo'\n```\n\n## webpack\n一个模块化打包工具。可以类比于java的 打jar包，用来帮助我们整理繁琐的前端代码的各个模块。\n不同于打jar包的是，打jar包包括了编译文件到class的这一步，但是前端不需要这一步。前端需要的是对各种资源的整理。比如css样式，js代码，甚至图片文件等资源webpack可以帮助我们整理这些资源，在我们使用的时候直接在html页面引入一个最终js即可。\n### webpack安装：\n1. 首先需要安装[nodejs](http://nodejs.cn/),其中内置了npm包管理工具\n2. 在当前项目下执行```npm init```初始化npm管理\n3. 命令行执行```npm install webpack -g```进行全局安装。或者在当前项目下，```npm install webpack --save-dev```进行局部安装\n4. 在当前项目下，执行```webpack ./src/main.js ./dist/bundle.js```这一步是执行webpack指令。后面的两个参数，一个是打包程序的入口，也是整个应用启动的地方，类似于java 的main方法。后一个参数代表将所有资源整合打包后，所放在什么地方。我这里放在当前项目的dist文件夹下的bundle.js中了\n5. 执行完后，会生成目标文件，在html中引用该文件即可\n### webpack.config.js\n在每次执行打包命令时，都要指定一遍源文件以及目标文件未免有些过于繁琐，因为这两个位置是不经常发生改变的，所以需要有个地方来配置\n在当前文件夹下创建webpack.config.js文件，里面内容如下：\n```javascript\nconst path = require('path')\n\nmodule.exports = {\n    entry:'./src/main.js',\n    mode: 'development',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'bundle.js'\n    }\n    }\n```\n这里就配置了当前项目打包的源文件以及目标文件。\n之后，若还想再次打包，直接执行webpack即可.\n\n手动指定配置文件方式：```webpack --config 文件位置```\n### loader\n现在，我们只是完成了javascript文件的打包。若我们想使用css，甚至图片呢？这就需要webpack的组件：loader了。\n若js中引用了css，则需要安装cssloader以及styleloader。详情可看[官网](https://webpack.docschina.org/loaders/)。这里就只介绍怎么用，以及我自己遇到的一些问题以及排查\n#### 导入css相关：\n首先执行```npm install url-loader --save-dev```以及```npm install --save-dev css-loader```，然后配置webpack.config.js\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n#### 导入图片相关\n图片需要两个loader。一个url ```npm install url-loader --save-dev```，一个file ```npm install file-loader --save-dev```。然后配置webpack.config.js\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n              name: '[path][name][hash:8].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n这里需要注意一点，就是导入图片只虽然是引入了两个loader，但是在配置文件中只需要一个loader就可以了。配置了两个会出现加载图片重复并且无法显示的问题。\n### webpack插件\n目前我们的项目打包后，只会生成js代码以及用到的图片等文件.想要自动生成首页的html的话，还需要安装插件html-webpack-plugin\n```npm install html-webpack-plugin --save-dev```\n在配置文件中导入```const htmlWebpackPlugin = require('html-webpack-plugin')```\n然后新增\n\n```javascript\nplugins:[\n        new htmlWebpackPlugin({\n            template:'index.html'\n        })\n    ],\n```\n\n   然后项目在打包的时候，会带上根目录的indexhtml作为模板。并且将打包后生成的目标js自动放进模板中\n\n### webpack-dev-server搭建本地服务器\n\n```npm install webpack-dev-server```安装组件。\n\n配置文件中，添加如下配置：\n\n```json\ndevServer: {\n        contentBase: path.join(__dirname, 'dist'),\n        compress: true,\n        port: 9000,\n        inline:true\n    }\n```\n\n然后执行 webpack serve 命令启动。\n\n或者可以直接在配置文件中的scripts中配置命令。使用npm run 命令方式启动\n\n老版本的这个，需要的命令是webpack-dev-server。此命令用在新版本会出现错误。\n\n```Error: Cannot find module 'webpack-cli/bin/config-yargs'```\n\n是新老版本不兼容的错误。使用新命令webpack serve即可\n\n\n\n### webpack整合vue\n首先通过npm安装vue ```npm install vue --save```，这，我们就可以在js文件中，通过import Vue from 'vue'来引入vue了，然后就可以向入门时候一样来使用了。\n但是这里会遇到一个问题：\n```You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210403131545445.png)\n这是因为默认使用了runtimeonly版本，无法对template编译。所以我们需要进行一部转换(后期template分离后，可以用这个版本，更快，更小),在webpackconfig文件中，添加如下配置：\n```script\nresolve:{\n        alias:{\n            'vue$':'vue/dist/vue.esm.js'\n        }\n    }\n```\n\n\n\n# 脚手架\n\n帮助进行vue开发的框架。把webpack以及一些插件loader的配置给默认配置好了\n\n首先安装vuecli：```npm install @vue/cli -g```\n\n然后通过vue创建项目。（可以通过webstorm以及相关工具直接创建）```vue create 项目名称```\n\n创建好项目后，就可以直接进行开发了。目前使用的是vue4.+，默认有asset文件，放静态资源，components文件夹，放vue模板，App.vue，默认的一个主模板，main.js，默认的主程序入口。总之，之前所有的配置在这里全部都默化了。可以直接使用。\n\n## 更改默认配置\n\n我们可以看到配置全部都默认化了，而且自带css，图片等的解析功能。并且自带本地服务功能。若是想再修改配置文件，可以通过```vue ui```命令来图形化的修改相关属性，以及管理各种组件。也可以通过新建vue.config.js文件，看当作自己的配置文件。\n\n具体用法跟webpack中的webpack.config.js一样，可以当作sprringboot里面的application.yml\n\n## 路由\n\nvue开发使用的是单页面模式，即整个前端项目只有一个html，通过路由来控制显示什么样的组件。\n\n1. 如果想使用路由，需要先安装```npm install vue-router --save```\n\n2. 然后新建一个router文件夹，创建index.js文件，导入：```import VueRouter from \"vue-router\";```示例如下\n\n```javascript\n// 路由\nimport VueRouter from \"vue-router\";\nimport Vue from 'vue'\nimport Home from \"@/components/Home\";\nimport PicCon from \"@/components/PicCon\";\n\n//1. Vue.use(插件) 个人理解，算是注册插件\nVue.use(VueRouter)\n\nconst routes = [\n    {\n        path:'/home',\n        component:Home\n    },\n    {\n        path:'/pic',\n        component:PicCon\n    }\n]\n\n//2. 创建Vuerouter对象\nconst router = new VueRouter({\n    routes\n})\n\nexport default router;\n\n```\n\n需要注意的是，<font color='red'>这里的数组routes对象，不可以随便命名。必须为routes</font>\n\n3. 再在main.js中，引入路由，放在我们根vue对象里\n\n```javascript\nimport Vue from 'vue'\nimport App from './App.vue'\nimport './plugins/element.js'\nimport VueRouter from \"@/router\";\n\nVue.config.productionTip = false\n\nnew Vue({\n  router:VueRouter,\n  render: h => h(App),\n}).$mount('#app')\n\n```\n\n4. 使用：```<router-link to=\"home\">home</router-link>```这样来表示路由到某个path，\n\n   ```<router-view></router-view>```来展示对应路由显示的内容\n\n5. 若不想使用router-link，想使用自定义的组件来实现，可以使用@click绑定方法.\n```vue\nthis.router.push('url') 来实现。push中也可以放对象，对象中可以有path，以及query参数。\n{\n    path::'/home',\n    query:{\n        name:'test',\n        age:20\n    }\n}\n```\n\n### 路由懒加载\n\n在需要用到js组件时，才加载相应的组件。类似于java设计模式中的懒汉式。将路由的写法写成让如下方式即可：\n\n```javascript\nconst routes = [\n    {\n        path: '/',\n        redirect: '/home'\n    },\n    {\n        path: '/home',\n        component: () => import('@/components/Home')\n    },\n    {\n        path: '/pic',\n        component: () => import   ('@/components/PicCon')\n    }\n]\n```\n\n### 路由嵌套\n\n当一个路由下面有子路由时，需要使用路由嵌套。比如：/home/news \n\n嵌套路由需要在路由中使用children属性，里面配置子路由\n\n```javascript\n{\n        path: '/home',\n        component: () => import('@/components/Home'),\n        children:[\n            {\n                path:'news',\n                component:()=>import('@/components/home/HomeNwes')\n            },\n            {\n                path:'video',\n                component:()=>import('@/components/home/HomeVideo')\n            }\n        ]\n    }\n```\n\n然后，子路由中，也使用如下方式，相对路由来定位\n\n```vue\n    <router-link to=\"news\">嗯，去看看新闻</router-link>\n    <router-link to=\"video\">嗯，去看看视频</router-link>\n    <router-view>routerview</router-view>\n```\n问题：如何使用routerlink能实现新打开一个页面来跳转呢？ 直接在router-link 上添加target属性，设置_blank即可\n### 路由参数传递\n传递方式两种。params和query。\n**params** 可以类比于javaweb中的pathvariable获取参数形式。这种方式的操作方法如下：\n```javascript\n//路由文件配置映射： \n/home/:id\n//传递方式：直接在路径拼接\n\n// 接受方式：\n在子组件中使用：\nthis.$route.params.id\n// 可以类比于javaweb使用 @PathVariable\n```\n**query** 可以类比于get请求直接加参数。这种方式会在路径上显示参数（get请求）。这种方式的操作方法如下：\n```vue\n//路由配置文件无需改动\n\n//传递方式：router-link 标签，其中的to属性需要交给vue管理。即改为 :to. 其中内容也由字符串变为对象。如下：\n<router-link :to=\"{path:'/news',query:{name:'zhangsan',age:10}}\">嗯，去看看新闻</router-link>\n\n// 取出参数,在子组件中，使用如下：\nthis.$route.query 可以取出传入的对象。\nthis.$route.query.name 可以取出对象中的某个值\n```\n## 路由全局导航守卫\n\n\n## keepalive\n\n# vueX vue状态管理工具。\nvuex主要就是负责将各个模块公共的一些资源统一进行管理，并且进行响应式修改的工具.\n使用：\n\n1. 安装 ```npm install vuex --save```\n\n2. 配置 ：新建store文件夹，创建index.js，内容如下：\n\n   ```javascript\n   import Vue from \"vue\"\n   import Vuex from \"vuex\"\n   \n   Vue.use(Vuex)\n   \n   const store = new Vuex.Store({\n       state:{\n           \n       },\n       mutations:{\n           //此处放方法。外界修改值就是调用这里的方法.方法会默认有一个参数，state，就是本对象中的state,可以通过这个state来修改真正的属性\n           //mutations的使用比较特别,需要用 $store.commite('方法名'，参数) 的方法来调用.传入的参数会放在第二个参数\n           incres(state){\n               \n           }\n       },\n       actions:{},\n       getters:{\n           //这里用来放公共的计算属性。这里计算属性有两个默认的参数，第一个就是state属性，第二个时getter属性。用来递归\n       },\n       modules:{}\n   })\n   \n   export default store;\n   ```\n\n3. 注册：在main.js中首先导入：```import store from './store'```,然后再放进根vue中：\n\n   ```javascript\n   new Vue({\n     router:VueRouter,\n     store,\n     render: h => h(App)\n   }).$mount('#app')\n   ```\n\n4. 使用： 在子组件中，通过this.$store ,来获取注册的store对象。想获取其中的state，```$store.state.name```即可\n\n# axios\n\n\n\n## 整合elementui\n\n```shell\nvue add element\n```\n### elementui使用问题及解决\n#### el-form表单校验相关：\n基本的写法：\n```javascript\n<el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\">\n  <el-form-item label=\"密码\" prop=\"pass\">\n    <el-input type=\"password\" v-model=\"ruleForm.pass\" autocomplete=\"off\"></el-input>\n  </el-form-item>\n  <el-form-item label=\"确认密码\" prop=\"checkPass\">\n    <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\n  </el-form-item>\n  <el-form-item label=\"年龄\" prop=\"age\">\n    <el-input v-model.number=\"ruleForm.age\"></el-input>\n  </el-form-item>\n  <el-form-item>\n    <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\n    <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n  </el-form-item>\n</el-form>\n<script>\n  export default {\n    data() {\n      var checkAge = (rule, value, callback) => {\n        if (!value) {\n          return callback(new Error('年龄不能为空'));\n        }\n        setTimeout(() => {\n          if (!Number.isInteger(value)) {\n            callback(new Error('请输入数字值'));\n          } else {\n            if (value < 18) {\n              callback(new Error('必须年满18岁'));\n            } else {\n              callback();\n            }\n          }\n        }, 1000);\n      };\n      var validatePass = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入密码'));\n        } else {\n          if (this.ruleForm.checkPass !== '') {\n            this.$refs.ruleForm.validateField('checkPass');\n          }\n          callback();\n        }\n      };\n      var validatePass2 = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请再次输入密码'));\n        } else if (value !== this.ruleForm.pass) {\n          callback(new Error('两次输入密码不一致!'));\n        } else {\n          callback();\n        }\n      };\n      return {\n        ruleForm: {\n          pass: '',\n          checkPass: '',\n          age: ''\n        },\n        rules: {\n          pass: [\n            { validator: validatePass, trigger: 'blur' }\n          ],\n          checkPass: [\n            { validator: validatePass2, trigger: 'blur' }\n          ],\n          age: [\n            { validator: checkAge, trigger: 'blur' }\n          ]\n        }\n      };\n    },\n    methods: {\n      submitForm(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            alert('submit!');\n          } else {\n            console.log('error submit!!');\n            return false;\n          }\n        });\n      },\n      resetForm(formName) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\n</script>\n```\n其中，el-form中的v-model所绑定的对象，需要是vue中的对象。el-form-item中，prop属性所对应的值，就是 el-form中的v-model所绑定的对象 的对应属性名称。\n这样，我们定义校验器的时候，就可以使用el-form中的rules属性来指定校验器对象，校验器对象是一个数组。数组中每个对象的key就是el-form中的v-model所绑定的对象 的对应属性名称，表示每个属性的校验方法。\n同时，el-form-item也可以使用自己的rules标签来覆盖el-form给的校验规则。\n#### el-form动态添加表单且自定义校验规则：\n但是，在动态添加表单的时候，如果想自定义校验器该怎么做呢？\n```html\n<el-form  :model=\"curEdit\"  :rules=\"rules\" ref=\"ruleForm\" label-width=\"120px\">\n\n                    <el-form-item style=\"width: 70%;\" v-for=\"(item,i) in curEdit.times\" :label=\"'打款时间点'+(i+1)\" :prop=\"'times.'+i+'.value'\" :rules=\"checkRule(i)\">\n                        <el-input  v-model=\"item.value\"></el-input>\n                    </el-form-item>\n\n\n            </el-form>\n```\n这是我自定义的表单，可以看到，其中的el-form-item条数是不断变化的。根据的是vue对象中的一个数组来决定的。\n那么，这么个动态变化的表单如何做校验呢\n首先，这个数组必须在一个vue对象A中，然后该数组成员也必须是有属性的对象。\n整个表单el-form来跟这个对象A绑定，v-model，这里可以指定规则，也可以不指定，因为没用。\n其次，el-form-item使用v-for来遍历这个对象中的该数组属性。\n这里的prop属性，需要为属性值。但是因为我们这里需要取数组中的属性，则先拿到当前数组对应的属性，我这里叫times。然后取索引，i，最后拼接数组成员的属性，我这里直接就叫value。\n最重要的一点，rules属性，因为我这里需要自定义实现，并且需要校验的属性是 A 对象的一个数组属性中的一个成员的属性，所以默认的映射也很难达到，这里可以直接 ：prop，这里可以传入一个vue 的方法。方法返回一个校验规则对象即可。\n详细的校验规则对象可以取elemntui官网看\n我这里方法名就叫checkRule，并且传入了一个索引\n下面是我的方法的具体实现。主要就是判断数字是否合规并且是否重复,且是失去焦点才会校验\n```javascript\ncheckRule: function (index) {\n            let vali = {\n                required: true,\n                validator: (rule, value, callback) => {\n                    // console.log(value)\n                    if (index === 0) {\n                        callback();\n                        return;\n                    }\n                    if (!value.match(/^\\d{1,2}$/)) {\n                        callback(new Error('请输入正确格式的内容后提交'));\n                        return;\n                    }\n                    if (value < 0 || value > 23) {\n                        callback(new Error('请输入正确格式的内容后提交'));\n                        return;\n                    }\n                    var count = 0;\n                    for (var x = 0; x < this.curEdit.times.length; x++) {\n                        if (this.curEdit.times[x].value === value) {\n                            count++;\n                            if (count >= 2) {\n                                callback(new Error('请输入正确格式的内容后提交'));\n                                return;\n                            }\n                        }\n                    }\n                    callback();\n                },\n                trigger: 'blur'\n            }\n            return vali;\n        }\n```","slug":"vue-study02","published":1,"updated":"2024-03-02T14:34:03.607Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki85006n1wu1citg5p7d","content":"<blockquote>\n<p>作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考. 此篇是进阶内容</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><a href=\"../vue-study01\">基础篇</a>在这里</p>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><p>前端模块化，类似于java中的类的概念。把某些功能抽离出来封装一个类，然后根据功能需要块来选择使用什么模块，什么方法。<br>目前了解，前端区分模块主要是文件级别区分，一个文件作为一个模块。某个文件用到别的文件中的内容，就需要导入该文件，对应文件需要导出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//commonJS模块化的导入和导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//导出属性</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;voidvvv&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//导出方法</span></span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\">mes</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(mes)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,say&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;demo.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;voidvvv - es6&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\">mes</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(mes+<span class=\"string\">&quot;es6&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6 指定导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shout</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;shout!!!!!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 默认导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mydefault <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 指定导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>一个模块化打包工具。可以类比于java的 打jar包，用来帮助我们整理繁琐的前端代码的各个模块。<br>不同于打jar包的是，打jar包包括了编译文件到class的这一步，但是前端不需要这一步。前端需要的是对各种资源的整理。比如css样式，js代码，甚至图片文件等资源webpack可以帮助我们整理这些资源，在我们使用的时候直接在html页面引入一个最终js即可。</p>\n<h3 id=\"webpack安装：\"><a href=\"#webpack安装：\" class=\"headerlink\" title=\"webpack安装：\"></a>webpack安装：</h3><ol>\n<li>首先需要安装<a href=\"http://nodejs.cn/\">nodejs</a>,其中内置了npm包管理工具</li>\n<li>在当前项目下执行<code>npm init</code>初始化npm管理</li>\n<li>命令行执行<code>npm install webpack -g</code>进行全局安装。或者在当前项目下，<code>npm install webpack --save-dev</code>进行局部安装</li>\n<li>在当前项目下，执行<code>webpack ./src/main.js ./dist/bundle.js</code>这一步是执行webpack指令。后面的两个参数，一个是打包程序的入口，也是整个应用启动的地方，类似于java 的main方法。后一个参数代表将所有资源整合打包后，所放在什么地方。我这里放在当前项目的dist文件夹下的bundle.js中了</li>\n<li>执行完后，会生成目标文件，在html中引用该文件即可</li>\n</ol>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p>在每次执行打包命令时，都要指定一遍源文件以及目标文件未免有些过于繁琐，因为这两个位置是不经常发生改变的，所以需要有个地方来配置<br>在当前文件夹下创建webpack.config.js文件，里面内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里就配置了当前项目打包的源文件以及目标文件。<br>之后，若还想再次打包，直接执行webpack即可.</p>\n<p>手动指定配置文件方式：<code>webpack --config 文件位置</code></p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><p>现在，我们只是完成了javascript文件的打包。若我们想使用css，甚至图片呢？这就需要webpack的组件：loader了。<br>若js中引用了css，则需要安装cssloader以及styleloader。详情可看<a href=\"https://webpack.docschina.org/loaders/\">官网</a>。这里就只介绍怎么用，以及我自己遇到的一些问题以及排查</p>\n<h4 id=\"导入css相关：\"><a href=\"#导入css相关：\" class=\"headerlink\" title=\"导入css相关：\"></a>导入css相关：</h4><p>首先执行<code>npm install url-loader --save-dev</code>以及<code>npm install --save-dev css-loader</code>，然后配置webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入图片相关\"><a href=\"#导入图片相关\" class=\"headerlink\" title=\"导入图片相关\"></a>导入图片相关</h4><p>图片需要两个loader。一个url <code>npm install url-loader --save-dev</code>，一个file <code>npm install file-loader --save-dev</code>。然后配置webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">limit</span>: <span class=\"number\">8192</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[path][name][hash:8].[ext]&#x27;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点，就是导入图片只虽然是引入了两个loader，但是在配置文件中只需要一个loader就可以了。配置了两个会出现加载图片重复并且无法显示的问题。</p>\n<h3 id=\"webpack插件\"><a href=\"#webpack插件\" class=\"headerlink\" title=\"webpack插件\"></a>webpack插件</h3><p>目前我们的项目打包后，只会生成js代码以及用到的图片等文件.想要自动生成首页的html的话，还需要安装插件html-webpack-plugin<br><code>npm install html-webpack-plugin --save-dev</code><br>在配置文件中导入<code>const htmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)</code><br>然后新增</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title function_\">htmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>:<span class=\"string\">&#x27;index.html&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<p>   然后项目在打包的时候，会带上根目录的indexhtml作为模板。并且将打包后生成的目标js自动放进模板中</p>\n<h3 id=\"webpack-dev-server搭建本地服务器\"><a href=\"#webpack-dev-server搭建本地服务器\" class=\"headerlink\" title=\"webpack-dev-server搭建本地服务器\"></a>webpack-dev-server搭建本地服务器</h3><figure class=\"highlight plaintext\"><figcaption><span>install webpack-dev-server```安装组件。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">配置文件中，添加如下配置：</span><br><span class=\"line\"></span><br><span class=\"line\">```json</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">        contentBase: path.join(__dirname, &#x27;dist&#x27;),</span><br><span class=\"line\">        compress: true,</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        inline:true</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 webpack serve 命令启动。</p>\n<p>或者可以直接在配置文件中的scripts中配置命令。使用npm run 命令方式启动</p>\n<p>老版本的这个，需要的命令是webpack-dev-server。此命令用在新版本会出现错误。</p>\n<p><code>Error: Cannot find module &#39;webpack-cli/bin/config-yargs&#39;</code></p>\n<p>是新老版本不兼容的错误。使用新命令webpack serve即可</p>\n<h3 id=\"webpack整合vue\"><a href=\"#webpack整合vue\" class=\"headerlink\" title=\"webpack整合vue\"></a>webpack整合vue</h3><p>首先通过npm安装vue <code>npm install vue --save</code>，这，我们就可以在js文件中，通过import Vue from ‘vue’来引入vue了，然后就可以向入门时候一样来使用了。<br>但是这里会遇到一个问题：<br><code>You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</code><br><img src=\"https://img-blog.csdnimg.cn/20210403131545445.png\" alt=\"在这里插入图片描述\"><br>这是因为默认使用了runtimeonly版本，无法对template编译。所以我们需要进行一部转换(后期template分离后，可以用这个版本，更快，更小),在webpackconfig文件中，添加如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">        alias:&#123;</span><br><span class=\"line\">            &#x27;vue$&#x27;:&#x27;vue/dist/vue.esm.js&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h1><p>帮助进行vue开发的框架。把webpack以及一些插件loader的配置给默认配置好了</p>\n<p>首先安装vuecli：<code>npm install @vue/cli -g</code></p>\n<p>然后通过vue创建项目。（可以通过webstorm以及相关工具直接创建）<code>vue create 项目名称</code></p>\n<p>创建好项目后，就可以直接进行开发了。目前使用的是vue4.+，默认有asset文件，放静态资源，components文件夹，放vue模板，App.vue，默认的一个主模板，main.js，默认的主程序入口。总之，之前所有的配置在这里全部都默化了。可以直接使用。</p>\n<h2 id=\"更改默认配置\"><a href=\"#更改默认配置\" class=\"headerlink\" title=\"更改默认配置\"></a>更改默认配置</h2><p>我们可以看到配置全部都默认化了，而且自带css，图片等的解析功能。并且自带本地服务功能。若是想再修改配置文件，可以通过<code>vue ui</code>命令来图形化的修改相关属性，以及管理各种组件。也可以通过新建vue.config.js文件，看当作自己的配置文件。</p>\n<p>具体用法跟webpack中的webpack.config.js一样，可以当作sprringboot里面的application.yml</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>vue开发使用的是单页面模式，即整个前端项目只有一个html，通过路由来控制显示什么样的组件。</p>\n<ol>\n<li><p>如果想使用路由，需要先安装<code>npm install vue-router --save</code></p>\n</li>\n<li><p>然后新建一个router文件夹，创建index.js文件，导入：<code>import VueRouter from &quot;vue-router&quot;;</code>示例如下</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/Home&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PicCon</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/PicCon&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. Vue.use(插件) 个人理解，算是注册插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/pic&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">PicCon</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 创建Vuerouter对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<font color='red'>这里的数组routes对象，不可以随便命名。必须为routes</font></p>\n<ol start=\"3\">\n<li>再在main.js中，引入路由，放在我们根vue对象里</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./plugins/element.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/router&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>:<span class=\"title class_\">VueRouter</span>,</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>使用：<code>&lt;router-link to=&quot;home&quot;&gt;home&lt;/router-link&gt;</code>这样来表示路由到某个path，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">5. 若不想使用router-link，想使用自定义的组件来实现，可以使用@click绑定方法.</span><br><span class=\"line\">```vue</span><br><span class=\"line\">this.router.push(&#x27;url&#x27;) 来实现。push中也可以放对象，对象中可以有path，以及query参数。</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path::&#x27;/home&#x27;,</span><br><span class=\"line\">    query:&#123;</span><br><span class=\"line\">        name:&#x27;test&#x27;,</span><br><span class=\"line\">        age:20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h3><p>在需要用到js组件时，才加载相应的组件。类似于java设计模式中的懒汉式。将路由的写法写成让如下方式即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/home&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/Home&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/pic&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>   (<span class=\"string\">&#x27;@/components/PicCon&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h3><p>当一个路由下面有子路由时，需要使用路由嵌套。比如：&#x2F;home&#x2F;news </p>\n<p>嵌套路由需要在路由中使用children属性，里面配置子路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/Home&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home/HomeNwes&#x27;</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">path</span>:<span class=\"string\">&#x27;video&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home/HomeVideo&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，子路由中，也使用如下方式，相对路由来定位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;news&quot;&gt;嗯，去看看新闻&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-link to=&quot;video&quot;&gt;嗯，去看看视频&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-view&gt;routerview&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>问题：如何使用routerlink能实现新打开一个页面来跳转呢？ 直接在router-link 上添加target属性，设置_blank即可</p>\n<h3 id=\"路由参数传递\"><a href=\"#路由参数传递\" class=\"headerlink\" title=\"路由参数传递\"></a>路由参数传递</h3><p>传递方式两种。params和query。<br><strong>params</strong> 可以类比于javaweb中的pathvariable获取参数形式。这种方式的操作方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由文件配置映射： </span></span><br><span class=\"line\">/home/:id</span><br><span class=\"line\"><span class=\"comment\">//传递方式：直接在路径拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接受方式：</span></span><br><span class=\"line\">在子组件中使用：</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\"><span class=\"comment\">// 可以类比于javaweb使用 @PathVariable</span></span><br></pre></td></tr></table></figure>\n<p><strong>query</strong> 可以类比于get请求直接加参数。这种方式会在路径上显示参数（get请求）。这种方式的操作方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//路由配置文件无需改动</span><br><span class=\"line\"></span><br><span class=\"line\">//传递方式：router-link 标签，其中的to属性需要交给vue管理。即改为 :to. 其中内容也由字符串变为对象。如下：</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;path:&#x27;/news&#x27;,query:&#123;name:&#x27;zhangsan&#x27;,age:10&#125;&#125;&quot;&gt;嗯，去看看新闻&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 取出参数,在子组件中，使用如下：</span><br><span class=\"line\">this.$route.query 可以取出传入的对象。</span><br><span class=\"line\">this.$route.query.name 可以取出对象中的某个值</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由全局导航守卫\"><a href=\"#路由全局导航守卫\" class=\"headerlink\" title=\"路由全局导航守卫\"></a>路由全局导航守卫</h2><h2 id=\"keepalive\"><a href=\"#keepalive\" class=\"headerlink\" title=\"keepalive\"></a>keepalive</h2><h1 id=\"vueX-vue状态管理工具。\"><a href=\"#vueX-vue状态管理工具。\" class=\"headerlink\" title=\"vueX vue状态管理工具。\"></a>vueX vue状态管理工具。</h1><p>vuex主要就是负责将各个模块公共的一些资源统一进行管理，并且进行响应式修改的工具.<br>使用：</p>\n<ol>\n<li><p>安装 <code>npm install vuex --save</code></p>\n</li>\n<li><p>配置 ：新建store文件夹，创建index.js，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处放方法。外界修改值就是调用这里的方法.方法会默认有一个参数，state，就是本对象中的state,可以通过这个state来修改真正的属性</span></span><br><span class=\"line\">        <span class=\"comment\">//mutations的使用比较特别,需要用 $store.commite(&#x27;方法名&#x27;，参数) 的方法来调用.传入的参数会放在第二个参数</span></span><br><span class=\"line\">        <span class=\"title function_\">incres</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>:&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里用来放公共的计算属性。这里计算属性有两个默认的参数，第一个就是state属性，第二个时getter属性。用来递归</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">modules</span>:&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册：在main.js中首先导入：<code>import store from &#39;./store&#39;</code>,然后再放进根vue中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>:<span class=\"title class_\">VueRouter</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用： 在子组件中，通过this.$store ,来获取注册的store对象。想获取其中的state，<code>$store.state.name</code>即可</p>\n</li>\n</ol>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"整合elementui\"><a href=\"#整合elementui\" class=\"headerlink\" title=\"整合elementui\"></a>整合elementui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add element</span><br></pre></td></tr></table></figure>\n<h3 id=\"elementui使用问题及解决\"><a href=\"#elementui使用问题及解决\" class=\"headerlink\" title=\"elementui使用问题及解决\"></a>elementui使用问题及解决</h3><h4 id=\"el-form表单校验相关：\"><a href=\"#el-form表单校验相关：\" class=\"headerlink\" title=\"el-form表单校验相关：\"></a>el-form表单校验相关：</h4><p>基本的写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">&quot;ruleForm&quot;</span> status-icon :rules=<span class=\"string\">&quot;rules&quot;</span> ref=<span class=\"string\">&quot;ruleForm&quot;</span> label-width=<span class=\"string\">&quot;100px&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;demo-ruleForm&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;密码&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.pass&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;确认密码&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;checkPass&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.checkPass&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;年龄&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;ruleForm.age&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">&lt;/el-form&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">checkAge</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!value) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;年龄不能为空&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"title function_\">isInteger</span>(value)) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入数字值&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">18</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;必须年满18岁&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;, <span class=\"number\">1000</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">validatePass</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入密码&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ruleForm</span>.<span class=\"property\">checkPass</span> !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">ruleForm</span>.<span class=\"title function_\">validateField</span>(<span class=\"string\">&#x27;checkPass&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">validatePass2</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请再次输入密码&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"variable language_\">this</span>.<span class=\"property\">ruleForm</span>.<span class=\"property\">pass</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;两次输入密码不一致!&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">ruleForm</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">pass</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">checkPass</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">age</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">rules</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">pass</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: validatePass, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">checkPass</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: validatePass2, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">age</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: checkAge, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">submitForm</span>(<span class=\"params\">formName</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[formName].<span class=\"title function_\">validate</span>(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (valid) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;submit!&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;error submit!!&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">resetForm</span>(<span class=\"params\">formName</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[formName].<span class=\"title function_\">resetFields</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>其中，el-form中的v-model所绑定的对象，需要是vue中的对象。el-form-item中，prop属性所对应的值，就是 el-form中的v-model所绑定的对象 的对应属性名称。<br>这样，我们定义校验器的时候，就可以使用el-form中的rules属性来指定校验器对象，校验器对象是一个数组。数组中每个对象的key就是el-form中的v-model所绑定的对象 的对应属性名称，表示每个属性的校验方法。<br>同时，el-form-item也可以使用自己的rules标签来覆盖el-form给的校验规则。</p>\n<h4 id=\"el-form动态添加表单且自定义校验规则：\"><a href=\"#el-form动态添加表单且自定义校验规则：\" class=\"headerlink\" title=\"el-form动态添加表单且自定义校验规则：\"></a>el-form动态添加表单且自定义校验规则：</h4><p>但是，在动态添加表单的时候，如果想自定义校验器该怎么做呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form</span>  <span class=\"attr\">:model</span>=<span class=\"string\">&quot;curEdit&quot;</span>  <span class=\"attr\">:rules</span>=<span class=\"string\">&quot;rules&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ruleForm&quot;</span> <span class=\"attr\">label-width</span>=<span class=\"string\">&quot;120px&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 70%;&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,i) in curEdit.times&quot;</span> <span class=\"attr\">:label</span>=<span class=\"string\">&quot;&#x27;打款时间点&#x27;+(i+1)&quot;</span> <span class=\"attr\">:prop</span>=<span class=\"string\">&quot;&#x27;times.&#x27;+i+&#x27;.value&#x27;&quot;</span> <span class=\"attr\">:rules</span>=<span class=\"string\">&quot;checkRule(i)&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">el-input</span>  <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;item.value&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是我自定义的表单，可以看到，其中的el-form-item条数是不断变化的。根据的是vue对象中的一个数组来决定的。<br>那么，这么个动态变化的表单如何做校验呢<br>首先，这个数组必须在一个vue对象A中，然后该数组成员也必须是有属性的对象。<br>整个表单el-form来跟这个对象A绑定，v-model，这里可以指定规则，也可以不指定，因为没用。<br>其次，el-form-item使用v-for来遍历这个对象中的该数组属性。<br>这里的prop属性，需要为属性值。但是因为我们这里需要取数组中的属性，则先拿到当前数组对应的属性，我这里叫times。然后取索引，i，最后拼接数组成员的属性，我这里直接就叫value。<br>最重要的一点，rules属性，因为我这里需要自定义实现，并且需要校验的属性是 A 对象的一个数组属性中的一个成员的属性，所以默认的映射也很难达到，这里可以直接 ：prop，这里可以传入一个vue 的方法。方法返回一个校验规则对象即可。<br>详细的校验规则对象可以取elemntui官网看<br>我这里方法名就叫checkRule，并且传入了一个索引<br>下面是我的方法的具体实现。主要就是判断数字是否合规并且是否重复,且是失去焦点才会校验</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">checkRule</span>: <span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> vali = &#123;</span><br><span class=\"line\">                <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">validator</span>: <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// console.log(value)</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!value.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\d&#123;1,2&#125;$/</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span> || value &gt; <span class=\"number\">23</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">curEdit</span>.<span class=\"property\">times</span>.<span class=\"property\">length</span>; x++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">curEdit</span>.<span class=\"property\">times</span>[x].<span class=\"property\">value</span> === value) &#123;</span><br><span class=\"line\">                            count++;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                                <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vali;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>","length":3847,"excerpt":"<blockquote>\n<p>作为一个java后端开发，最近有时候会用到Vue进行前端开发，特地来补课. 此篇博客作为我学习Vue的一个记录，以及知识汇总.不会把知识点罗列到很细，仅供自己之后参考. 此篇是进阶内容</p>\n</blockquote>","more":"<p><a href=\"../vue-study01\">基础篇</a>在这里</p>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><p>前端模块化，类似于java中的类的概念。把某些功能抽离出来封装一个类，然后根据功能需要块来选择使用什么模块，什么方法。<br>目前了解，前端区分模块主要是文件级别区分，一个文件作为一个模块。某个文件用到别的文件中的内容，就需要导入该文件，对应文件需要导出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//commonJS模块化的导入和导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//导出属性</span></span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;voidvvv&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//导出方法</span></span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\">mes</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(mes)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,say&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;demo.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;voidvvv - es6&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\">mes</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(mes+<span class=\"string\">&quot;es6&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6 指定导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">shout</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;shout!!!!!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 默认导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mydefault <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6 指定导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;a&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./demo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>一个模块化打包工具。可以类比于java的 打jar包，用来帮助我们整理繁琐的前端代码的各个模块。<br>不同于打jar包的是，打jar包包括了编译文件到class的这一步，但是前端不需要这一步。前端需要的是对各种资源的整理。比如css样式，js代码，甚至图片文件等资源webpack可以帮助我们整理这些资源，在我们使用的时候直接在html页面引入一个最终js即可。</p>\n<h3 id=\"webpack安装：\"><a href=\"#webpack安装：\" class=\"headerlink\" title=\"webpack安装：\"></a>webpack安装：</h3><ol>\n<li>首先需要安装<a href=\"http://nodejs.cn/\">nodejs</a>,其中内置了npm包管理工具</li>\n<li>在当前项目下执行<code>npm init</code>初始化npm管理</li>\n<li>命令行执行<code>npm install webpack -g</code>进行全局安装。或者在当前项目下，<code>npm install webpack --save-dev</code>进行局部安装</li>\n<li>在当前项目下，执行<code>webpack ./src/main.js ./dist/bundle.js</code>这一步是执行webpack指令。后面的两个参数，一个是打包程序的入口，也是整个应用启动的地方，类似于java 的main方法。后一个参数代表将所有资源整合打包后，所放在什么地方。我这里放在当前项目的dist文件夹下的bundle.js中了</li>\n<li>执行完后，会生成目标文件，在html中引用该文件即可</li>\n</ol>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p>在每次执行打包命令时，都要指定一遍源文件以及目标文件未免有些过于繁琐，因为这两个位置是不经常发生改变的，所以需要有个地方来配置<br>在当前文件夹下创建webpack.config.js文件，里面内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:path.<span class=\"title function_\">resolve</span>(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里就配置了当前项目打包的源文件以及目标文件。<br>之后，若还想再次打包，直接执行webpack即可.</p>\n<p>手动指定配置文件方式：<code>webpack --config 文件位置</code></p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><p>现在，我们只是完成了javascript文件的打包。若我们想使用css，甚至图片呢？这就需要webpack的组件：loader了。<br>若js中引用了css，则需要安装cssloader以及styleloader。详情可看<a href=\"https://webpack.docschina.org/loaders/\">官网</a>。这里就只介绍怎么用，以及我自己遇到的一些问题以及排查</p>\n<h4 id=\"导入css相关：\"><a href=\"#导入css相关：\" class=\"headerlink\" title=\"导入css相关：\"></a>导入css相关：</h4><p>首先执行<code>npm install url-loader --save-dev</code>以及<code>npm install --save-dev css-loader</code>，然后配置webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入图片相关\"><a href=\"#导入图片相关\" class=\"headerlink\" title=\"导入图片相关\"></a>导入图片相关</h4><p>图片需要两个loader。一个url <code>npm install url-loader --save-dev</code>，一个file <code>npm install file-loader --save-dev</code>。然后配置webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/i</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">limit</span>: <span class=\"number\">8192</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[path][name][hash:8].[ext]&#x27;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点，就是导入图片只虽然是引入了两个loader，但是在配置文件中只需要一个loader就可以了。配置了两个会出现加载图片重复并且无法显示的问题。</p>\n<h3 id=\"webpack插件\"><a href=\"#webpack插件\" class=\"headerlink\" title=\"webpack插件\"></a>webpack插件</h3><p>目前我们的项目打包后，只会生成js代码以及用到的图片等文件.想要自动生成首页的html的话，还需要安装插件html-webpack-plugin<br><code>npm install html-webpack-plugin --save-dev</code><br>在配置文件中导入<code>const htmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)</code><br>然后新增</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title function_\">htmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">template</span>:<span class=\"string\">&#x27;index.html&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<p>   然后项目在打包的时候，会带上根目录的indexhtml作为模板。并且将打包后生成的目标js自动放进模板中</p>\n<h3 id=\"webpack-dev-server搭建本地服务器\"><a href=\"#webpack-dev-server搭建本地服务器\" class=\"headerlink\" title=\"webpack-dev-server搭建本地服务器\"></a>webpack-dev-server搭建本地服务器</h3><figure class=\"highlight plaintext\"><figcaption><span>install webpack-dev-server```安装组件。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">配置文件中，添加如下配置：</span><br><span class=\"line\"></span><br><span class=\"line\">```json</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">        contentBase: path.join(__dirname, &#x27;dist&#x27;),</span><br><span class=\"line\">        compress: true,</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        inline:true</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 webpack serve 命令启动。</p>\n<p>或者可以直接在配置文件中的scripts中配置命令。使用npm run 命令方式启动</p>\n<p>老版本的这个，需要的命令是webpack-dev-server。此命令用在新版本会出现错误。</p>\n<p><code>Error: Cannot find module &#39;webpack-cli/bin/config-yargs&#39;</code></p>\n<p>是新老版本不兼容的错误。使用新命令webpack serve即可</p>\n<h3 id=\"webpack整合vue\"><a href=\"#webpack整合vue\" class=\"headerlink\" title=\"webpack整合vue\"></a>webpack整合vue</h3><p>首先通过npm安装vue <code>npm install vue --save</code>，这，我们就可以在js文件中，通过import Vue from ‘vue’来引入vue了，然后就可以向入门时候一样来使用了。<br>但是这里会遇到一个问题：<br><code>You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</code><br><img src=\"https://img-blog.csdnimg.cn/20210403131545445.png\" alt=\"在这里插入图片描述\"><br>这是因为默认使用了runtimeonly版本，无法对template编译。所以我们需要进行一部转换(后期template分离后，可以用这个版本，更快，更小),在webpackconfig文件中，添加如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve:&#123;</span><br><span class=\"line\">        alias:&#123;</span><br><span class=\"line\">            &#x27;vue$&#x27;:&#x27;vue/dist/vue.esm.js&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h1><p>帮助进行vue开发的框架。把webpack以及一些插件loader的配置给默认配置好了</p>\n<p>首先安装vuecli：<code>npm install @vue/cli -g</code></p>\n<p>然后通过vue创建项目。（可以通过webstorm以及相关工具直接创建）<code>vue create 项目名称</code></p>\n<p>创建好项目后，就可以直接进行开发了。目前使用的是vue4.+，默认有asset文件，放静态资源，components文件夹，放vue模板，App.vue，默认的一个主模板，main.js，默认的主程序入口。总之，之前所有的配置在这里全部都默化了。可以直接使用。</p>\n<h2 id=\"更改默认配置\"><a href=\"#更改默认配置\" class=\"headerlink\" title=\"更改默认配置\"></a>更改默认配置</h2><p>我们可以看到配置全部都默认化了，而且自带css，图片等的解析功能。并且自带本地服务功能。若是想再修改配置文件，可以通过<code>vue ui</code>命令来图形化的修改相关属性，以及管理各种组件。也可以通过新建vue.config.js文件，看当作自己的配置文件。</p>\n<p>具体用法跟webpack中的webpack.config.js一样，可以当作sprringboot里面的application.yml</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>vue开发使用的是单页面模式，即整个前端项目只有一个html，通过路由来控制显示什么样的组件。</p>\n<ol>\n<li><p>如果想使用路由，需要先安装<code>npm install vue-router --save</code></p>\n</li>\n<li><p>然后新建一个router文件夹，创建index.js文件，导入：<code>import VueRouter from &quot;vue-router&quot;;</code>示例如下</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/Home&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PicCon</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/PicCon&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. Vue.use(插件) 个人理解，算是注册插件</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">Home</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/pic&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>:<span class=\"title class_\">PicCon</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 创建Vuerouter对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<font color='red'>这里的数组routes对象，不可以随便命名。必须为routes</font></p>\n<ol start=\"3\">\n<li>再在main.js中，引入路由，放在我们根vue对象里</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./plugins/element.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/router&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>:<span class=\"title class_\">VueRouter</span>,</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>使用：<code>&lt;router-link to=&quot;home&quot;&gt;home&lt;/router-link&gt;</code>这样来表示路由到某个path，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">5. 若不想使用router-link，想使用自定义的组件来实现，可以使用@click绑定方法.</span><br><span class=\"line\">```vue</span><br><span class=\"line\">this.router.push(&#x27;url&#x27;) 来实现。push中也可以放对象，对象中可以有path，以及query参数。</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path::&#x27;/home&#x27;,</span><br><span class=\"line\">    query:&#123;</span><br><span class=\"line\">        name:&#x27;test&#x27;,</span><br><span class=\"line\">        age:20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h3><p>在需要用到js组件时，才加载相应的组件。类似于java设计模式中的懒汉式。将路由的写法写成让如下方式即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;/home&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/Home&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/pic&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>   (<span class=\"string\">&#x27;@/components/PicCon&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h3><p>当一个路由下面有子路由时，需要使用路由嵌套。比如：&#x2F;home&#x2F;news </p>\n<p>嵌套路由需要在路由中使用children属性，里面配置子路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/Home&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">path</span>:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home/HomeNwes&#x27;</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">path</span>:<span class=\"string\">&#x27;video&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/home/HomeVideo&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，子路由中，也使用如下方式，相对路由来定位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;news&quot;&gt;嗯，去看看新闻&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-link to=&quot;video&quot;&gt;嗯，去看看视频&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-view&gt;routerview&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>问题：如何使用routerlink能实现新打开一个页面来跳转呢？ 直接在router-link 上添加target属性，设置_blank即可</p>\n<h3 id=\"路由参数传递\"><a href=\"#路由参数传递\" class=\"headerlink\" title=\"路由参数传递\"></a>路由参数传递</h3><p>传递方式两种。params和query。<br><strong>params</strong> 可以类比于javaweb中的pathvariable获取参数形式。这种方式的操作方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由文件配置映射： </span></span><br><span class=\"line\">/home/:id</span><br><span class=\"line\"><span class=\"comment\">//传递方式：直接在路径拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接受方式：</span></span><br><span class=\"line\">在子组件中使用：</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">id</span></span><br><span class=\"line\"><span class=\"comment\">// 可以类比于javaweb使用 @PathVariable</span></span><br></pre></td></tr></table></figure>\n<p><strong>query</strong> 可以类比于get请求直接加参数。这种方式会在路径上显示参数（get请求）。这种方式的操作方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//路由配置文件无需改动</span><br><span class=\"line\"></span><br><span class=\"line\">//传递方式：router-link 标签，其中的to属性需要交给vue管理。即改为 :to. 其中内容也由字符串变为对象。如下：</span><br><span class=\"line\">&lt;router-link :to=&quot;&#123;path:&#x27;/news&#x27;,query:&#123;name:&#x27;zhangsan&#x27;,age:10&#125;&#125;&quot;&gt;嗯，去看看新闻&lt;/router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 取出参数,在子组件中，使用如下：</span><br><span class=\"line\">this.$route.query 可以取出传入的对象。</span><br><span class=\"line\">this.$route.query.name 可以取出对象中的某个值</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由全局导航守卫\"><a href=\"#路由全局导航守卫\" class=\"headerlink\" title=\"路由全局导航守卫\"></a>路由全局导航守卫</h2><h2 id=\"keepalive\"><a href=\"#keepalive\" class=\"headerlink\" title=\"keepalive\"></a>keepalive</h2><h1 id=\"vueX-vue状态管理工具。\"><a href=\"#vueX-vue状态管理工具。\" class=\"headerlink\" title=\"vueX vue状态管理工具。\"></a>vueX vue状态管理工具。</h1><p>vuex主要就是负责将各个模块公共的一些资源统一进行管理，并且进行响应式修改的工具.<br>使用：</p>\n<ol>\n<li><p>安装 <code>npm install vuex --save</code></p>\n</li>\n<li><p>配置 ：新建store文件夹，创建index.js，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处放方法。外界修改值就是调用这里的方法.方法会默认有一个参数，state，就是本对象中的state,可以通过这个state来修改真正的属性</span></span><br><span class=\"line\">        <span class=\"comment\">//mutations的使用比较特别,需要用 $store.commite(&#x27;方法名&#x27;，参数) 的方法来调用.传入的参数会放在第二个参数</span></span><br><span class=\"line\">        <span class=\"title function_\">incres</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>:&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里用来放公共的计算属性。这里计算属性有两个默认的参数，第一个就是state属性，第二个时getter属性。用来递归</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">modules</span>:&#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册：在main.js中首先导入：<code>import store from &#39;./store&#39;</code>,然后再放进根vue中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">router</span>:<span class=\"title class_\">VueRouter</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用： 在子组件中，通过this.$store ,来获取注册的store对象。想获取其中的state，<code>$store.state.name</code>即可</p>\n</li>\n</ol>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"整合elementui\"><a href=\"#整合elementui\" class=\"headerlink\" title=\"整合elementui\"></a>整合elementui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add element</span><br></pre></td></tr></table></figure>\n<h3 id=\"elementui使用问题及解决\"><a href=\"#elementui使用问题及解决\" class=\"headerlink\" title=\"elementui使用问题及解决\"></a>elementui使用问题及解决</h3><h4 id=\"el-form表单校验相关：\"><a href=\"#el-form表单校验相关：\" class=\"headerlink\" title=\"el-form表单校验相关：\"></a>el-form表单校验相关：</h4><p>基本的写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model=<span class=\"string\">&quot;ruleForm&quot;</span> status-icon :rules=<span class=\"string\">&quot;rules&quot;</span> ref=<span class=\"string\">&quot;ruleForm&quot;</span> label-width=<span class=\"string\">&quot;100px&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;demo-ruleForm&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;密码&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.pass&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;确认密码&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;checkPass&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.checkPass&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;年龄&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;ruleForm.age&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br><span class=\"line\">&lt;/el-form&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">checkAge</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!value) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;年龄不能为空&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"title function_\">isInteger</span>(value)) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入数字值&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">18</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;必须年满18岁&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;, <span class=\"number\">1000</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">validatePass</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入密码&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ruleForm</span>.<span class=\"property\">checkPass</span> !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">ruleForm</span>.<span class=\"title function_\">validateField</span>(<span class=\"string\">&#x27;checkPass&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> <span class=\"title function_\">validatePass2</span> = (<span class=\"params\">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请再次输入密码&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"variable language_\">this</span>.<span class=\"property\">ruleForm</span>.<span class=\"property\">pass</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;两次输入密码不一致!&#x27;</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">callback</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">ruleForm</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">pass</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">checkPass</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">age</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">rules</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">pass</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: validatePass, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">checkPass</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: validatePass2, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"attr\">age</span>: [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#123; <span class=\"attr\">validator</span>: checkAge, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          ]</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">submitForm</span>(<span class=\"params\">formName</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[formName].<span class=\"title function_\">validate</span>(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span> (valid) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;submit!&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;error submit!!&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">resetForm</span>(<span class=\"params\">formName</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[formName].<span class=\"title function_\">resetFields</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>其中，el-form中的v-model所绑定的对象，需要是vue中的对象。el-form-item中，prop属性所对应的值，就是 el-form中的v-model所绑定的对象 的对应属性名称。<br>这样，我们定义校验器的时候，就可以使用el-form中的rules属性来指定校验器对象，校验器对象是一个数组。数组中每个对象的key就是el-form中的v-model所绑定的对象 的对应属性名称，表示每个属性的校验方法。<br>同时，el-form-item也可以使用自己的rules标签来覆盖el-form给的校验规则。</p>\n<h4 id=\"el-form动态添加表单且自定义校验规则：\"><a href=\"#el-form动态添加表单且自定义校验规则：\" class=\"headerlink\" title=\"el-form动态添加表单且自定义校验规则：\"></a>el-form动态添加表单且自定义校验规则：</h4><p>但是，在动态添加表单的时候，如果想自定义校验器该怎么做呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form</span>  <span class=\"attr\">:model</span>=<span class=\"string\">&quot;curEdit&quot;</span>  <span class=\"attr\">:rules</span>=<span class=\"string\">&quot;rules&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;ruleForm&quot;</span> <span class=\"attr\">label-width</span>=<span class=\"string\">&quot;120px&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 70%;&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,i) in curEdit.times&quot;</span> <span class=\"attr\">:label</span>=<span class=\"string\">&quot;&#x27;打款时间点&#x27;+(i+1)&quot;</span> <span class=\"attr\">:prop</span>=<span class=\"string\">&quot;&#x27;times.&#x27;+i+&#x27;.value&#x27;&quot;</span> <span class=\"attr\">:rules</span>=<span class=\"string\">&quot;checkRule(i)&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">el-input</span>  <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;item.value&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是我自定义的表单，可以看到，其中的el-form-item条数是不断变化的。根据的是vue对象中的一个数组来决定的。<br>那么，这么个动态变化的表单如何做校验呢<br>首先，这个数组必须在一个vue对象A中，然后该数组成员也必须是有属性的对象。<br>整个表单el-form来跟这个对象A绑定，v-model，这里可以指定规则，也可以不指定，因为没用。<br>其次，el-form-item使用v-for来遍历这个对象中的该数组属性。<br>这里的prop属性，需要为属性值。但是因为我们这里需要取数组中的属性，则先拿到当前数组对应的属性，我这里叫times。然后取索引，i，最后拼接数组成员的属性，我这里直接就叫value。<br>最重要的一点，rules属性，因为我这里需要自定义实现，并且需要校验的属性是 A 对象的一个数组属性中的一个成员的属性，所以默认的映射也很难达到，这里可以直接 ：prop，这里可以传入一个vue 的方法。方法返回一个校验规则对象即可。<br>详细的校验规则对象可以取elemntui官网看<br>我这里方法名就叫checkRule，并且传入了一个索引<br>下面是我的方法的具体实现。主要就是判断数字是否合规并且是否重复,且是失去焦点才会校验</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">checkRule</span>: <span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> vali = &#123;</span><br><span class=\"line\">                <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">validator</span>: <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// console.log(value)</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!value.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\d&#123;1,2&#125;$/</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span> || value &gt; <span class=\"number\">23</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">curEdit</span>.<span class=\"property\">times</span>.<span class=\"property\">length</span>; x++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">curEdit</span>.<span class=\"property\">times</span>[x].<span class=\"property\">value</span> === value) &#123;</span><br><span class=\"line\">                            count++;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                                <span class=\"title function_\">callback</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;请输入正确格式的内容后提交&#x27;</span>));</span><br><span class=\"line\">                                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vali;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Windows使用OpenAL+FreeAlut排坑记录","date":"2024-04-10T18:33:04.000Z","_content":"为了给[游戏](https://github.com/voidvvv/LinkA)添加一些炫酷的音效，所以我就又开始了搜索c++的一些音乐库，最后选择了同是open系列的OpenAL，但是对这个库的使用着实费了一些功夫,因为OPENAL只能负责如何播放音频，但是不负责加载音频，所以我们还需要FREEAlut这个工具来帮助我们，但是这个库的使用并不简单。\n\n<!-- more -->\n\n# OpenAL\n因为想要给游戏添加音效，所以就搜到了[OpenAL](https://www.openal.org/).\n由于之前对音乐解析这一部分没有太多的了解，仅仅是在LIBGDX中使用过封装好的工具，所以我理所当然的以为这一步会很简单，直接调用工具库然后使用（至少hello world）。\n首先来到[OPENAL官网](https://www.openal.org/),自然而然的看到上面目录的download字样，自然而然的选择了下载。\n![2024-04-11T104427](2024-04-11T104427.png)\n然后我选择了下载CORE SDK：\n![2024-04-11T104534](2024-04-11T104534.png)\n下载下来发现是一个内部只有一个安装程序的压缩包，解压出来安装后：\n![2024-04-11T104652](2024-04-11T104652.png)\n可以看出来，直接是编译打包好的二进制文件，并且redist文件夹中还有一个可执行程序，会把openAL的动态链接库放到你操作系统依赖库(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)中去。等于是免去了编译的到过程\n然后我就以为万事大吉了，准备使用了。按照[官方文档](https://www.openal.org/documentation/OpenAL_Programmers_Guide.pdf)，我便开始了一步步的hello world。\n前几步都还ok，但是加载音频却出现了问题，因为OPENAL没有加载音频功能，于是我就去搜索了相关的资料，发现不同格式的音频还需要不同的decoder来解析成binary才能在openAL中使用，于是我便开始了新的一轮探索.\n\n# ALUT\nALUT 其实就是 OpenAL Utils，顾名思义，就是OpenAL的一些工具包，可以在其[开源仓库](https://github.com/vancegroup/freealut)查看详情.\n将其clone到本地后，我像之前一样使用cmake将其构建为mingw项目，然后编译，结果报错了。因为这freealut 中的CMakeLIST其实是适配linux的，报错的是这一段:\n```cmakelist\n# Dependencies\nfind_package(OpenAL REQUIRED)\n```\n这里其实该项目的readme也说了，使用cmake的时候需要指定cmake寻找project的prefix.\n然后我去查了一下，发现这里其实就是需要指定openAL的include目录以及依赖文件，于是我找到了第一步中，直接下载好的include以及lib库替代了这里的配置:\n```\n# Dependencies\n# find_package(OpenAL REQUIRED)\nset(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)\nset(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)\n```\n但是编译还是无法通过，显示某些方法无法找到reference。应该就是lib库文件或者dll库文件有问题了。\n然后我就在这一步被困了好久，头大了很久.\n不过最后，还是让我找到了编译的方法\n\n# 成功编译\n## 手动编译OpenAL\n其实在第一步下载的OpenAL就有些问题，如果想要使用freealut，需要手动编译OpenAL源码。\n源码需要在OpenAL主页点击download 旁边的 Links\n![2024-04-11T111505](2024-04-11T111505.png)\n然后点击Open AL soft 进入 [soft主页](https://www.openal-soft.org/)\n在这里可以下载源码或者下载该源码编译好的OpenAl.我们这里选择 [源码下载](https://www.openal-soft.org/openal-releases/openal-soft-1.23.1.tar.bz2)\n\n## 将源码构建为Visual studio 项目。\n下载后，使用cmake，将其构建为Visual Studio项目。这一步及其重要，一定要构建为Visual Studio项目，具体原因放在后面.\n构建完毕后，进入build文件夹，使用Visual studio将其打开，然后编译打包.\n如果一切顺利，会在Debug文件夹下看到这些：\n![2024-04-11T112016](2024-04-11T112016.png)\n然后，我们的OpenAL才算是正式能用了，可以看到，我们编译好的文件，其中 OpenAL32.dll 大小是 3519KB，跟之前redist给我们放的 20KB完全不一样，然后，我们可以使用这个dll来覆盖之前的(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)。\n\n## 再次编译FreeAlut\n将我们刚才编译出的lib文件放入我们freealut所依赖的库目录中，头文件也如此做。\n还是打开之前的freealut项目，将其CMAKEList仍然改为：\n```\n# Dependencies\n# find_package(OpenAL REQUIRED)\nset(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)\nset(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)\n```\n然后保存，再次Cmake build，发现可以成功编译，并且生成了 libalut.dll 以及其 导入库： libalut.dll.a\n我们自己的项目只需要将dll复制到我们执行程序目录，然后源码中引入libalut.dll.a，同时还需要引入 OpenAL32.lib，\n我们自己项目中的CMAKELIST 引入依赖大概是这个样子:\n```\ntarget_link_libraries(${PROJECT_NAME} libglfw3.a  libalut.dll.a OpenAL32.lib)\n\n```\n最后，从freealut项目中，粘贴一段demo代码过来，我们试着执行一下：\n```c++\n\n#include <iostream>\n#include <AL/alut.h>\n\n// #include <bass.h>\n\n\nvoid sayHu(){\n      ALuint helloBuffer, helloSource;\n  alutInit (NULL, NULL);\n  helloBuffer = alutCreateBufferHelloWorld ();\n  alGenSources (1, &helloSource);\n  alSourcei (helloSource, AL_BUFFER, helloBuffer);\n  alSourcePlay (helloSource);\n  alutSleep (1);\n  alutExit ();\n  return ;\n};\n\nint main()\n{\n    sayHu();\n\n}\n```\n会听到一段hello world。至此，OpenAL+ freeALUT的集成完毕.我们可以在游戏中添加音效了.\n\n## 为何必须打包成Visual Studio\n这里，仅仅是我自己的一个推测。\n当我打包成mingw程序时，编译无法通过，查看源码发现，出问题的是在alfstream.h 以及其cpp文件中。\n![2024-04-11T113206](2024-04-11T113206.png)\n这里可以看到openAL自定义的ifstream类继承了SDK中自带的ifstream类，并且调用了其构造方法。其中有一个是wchar_t参数的构造方法。\n在mingw中，我们可以看到，std::ifstream其实就是模板类型为char的basic_ifstream, \n模板类型为wchar的是另外一个类型：std:wistream.\n![2024-04-11T113436](2024-04-11T113436.png)\n既然模板类型都不一样，那自然无法编译通过。\n\n但是在visual studio中，我们可以看到，basic_ifstream本身其实是有wchar作为参数的构造方法的，所以在这里自然能够编译通过。\n![2024-04-11T113557](2024-04-11T113557.png)\n所以我们在使用cmake构建openAL时，必须将其构建为visual studio。\n但是如果你的mingw版本不一样，sdk中ifstream已经支持这种方法，那么我觉得也是可以构建为mingw项目的。\n我当前使用的mingw版本如下：\n![2024-04-11T113852](2024-04-11T113852.png)\n\n完毕，可以愉快的使用OpenAL了。\n","source":"_posts/windows_cpp_openal_freealut.md","raw":"---\ntitle: Windows使用OpenAL+FreeAlut排坑记录\ndate: 2024-04-11T10:33:04+08:00\ncategories: \n- c++\n- OpenAL\ntags: \n- [c++]\n- [OpenAL]\n---\n为了给[游戏](https://github.com/voidvvv/LinkA)添加一些炫酷的音效，所以我就又开始了搜索c++的一些音乐库，最后选择了同是open系列的OpenAL，但是对这个库的使用着实费了一些功夫,因为OPENAL只能负责如何播放音频，但是不负责加载音频，所以我们还需要FREEAlut这个工具来帮助我们，但是这个库的使用并不简单。\n\n<!-- more -->\n\n# OpenAL\n因为想要给游戏添加音效，所以就搜到了[OpenAL](https://www.openal.org/).\n由于之前对音乐解析这一部分没有太多的了解，仅仅是在LIBGDX中使用过封装好的工具，所以我理所当然的以为这一步会很简单，直接调用工具库然后使用（至少hello world）。\n首先来到[OPENAL官网](https://www.openal.org/),自然而然的看到上面目录的download字样，自然而然的选择了下载。\n![2024-04-11T104427](2024-04-11T104427.png)\n然后我选择了下载CORE SDK：\n![2024-04-11T104534](2024-04-11T104534.png)\n下载下来发现是一个内部只有一个安装程序的压缩包，解压出来安装后：\n![2024-04-11T104652](2024-04-11T104652.png)\n可以看出来，直接是编译打包好的二进制文件，并且redist文件夹中还有一个可执行程序，会把openAL的动态链接库放到你操作系统依赖库(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)中去。等于是免去了编译的到过程\n然后我就以为万事大吉了，准备使用了。按照[官方文档](https://www.openal.org/documentation/OpenAL_Programmers_Guide.pdf)，我便开始了一步步的hello world。\n前几步都还ok，但是加载音频却出现了问题，因为OPENAL没有加载音频功能，于是我就去搜索了相关的资料，发现不同格式的音频还需要不同的decoder来解析成binary才能在openAL中使用，于是我便开始了新的一轮探索.\n\n# ALUT\nALUT 其实就是 OpenAL Utils，顾名思义，就是OpenAL的一些工具包，可以在其[开源仓库](https://github.com/vancegroup/freealut)查看详情.\n将其clone到本地后，我像之前一样使用cmake将其构建为mingw项目，然后编译，结果报错了。因为这freealut 中的CMakeLIST其实是适配linux的，报错的是这一段:\n```cmakelist\n# Dependencies\nfind_package(OpenAL REQUIRED)\n```\n这里其实该项目的readme也说了，使用cmake的时候需要指定cmake寻找project的prefix.\n然后我去查了一下，发现这里其实就是需要指定openAL的include目录以及依赖文件，于是我找到了第一步中，直接下载好的include以及lib库替代了这里的配置:\n```\n# Dependencies\n# find_package(OpenAL REQUIRED)\nset(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)\nset(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)\n```\n但是编译还是无法通过，显示某些方法无法找到reference。应该就是lib库文件或者dll库文件有问题了。\n然后我就在这一步被困了好久，头大了很久.\n不过最后，还是让我找到了编译的方法\n\n# 成功编译\n## 手动编译OpenAL\n其实在第一步下载的OpenAL就有些问题，如果想要使用freealut，需要手动编译OpenAL源码。\n源码需要在OpenAL主页点击download 旁边的 Links\n![2024-04-11T111505](2024-04-11T111505.png)\n然后点击Open AL soft 进入 [soft主页](https://www.openal-soft.org/)\n在这里可以下载源码或者下载该源码编译好的OpenAl.我们这里选择 [源码下载](https://www.openal-soft.org/openal-releases/openal-soft-1.23.1.tar.bz2)\n\n## 将源码构建为Visual studio 项目。\n下载后，使用cmake，将其构建为Visual Studio项目。这一步及其重要，一定要构建为Visual Studio项目，具体原因放在后面.\n构建完毕后，进入build文件夹，使用Visual studio将其打开，然后编译打包.\n如果一切顺利，会在Debug文件夹下看到这些：\n![2024-04-11T112016](2024-04-11T112016.png)\n然后，我们的OpenAL才算是正式能用了，可以看到，我们编译好的文件，其中 OpenAL32.dll 大小是 3519KB，跟之前redist给我们放的 20KB完全不一样，然后，我们可以使用这个dll来覆盖之前的(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)。\n\n## 再次编译FreeAlut\n将我们刚才编译出的lib文件放入我们freealut所依赖的库目录中，头文件也如此做。\n还是打开之前的freealut项目，将其CMAKEList仍然改为：\n```\n# Dependencies\n# find_package(OpenAL REQUIRED)\nset(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)\nset(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)\n```\n然后保存，再次Cmake build，发现可以成功编译，并且生成了 libalut.dll 以及其 导入库： libalut.dll.a\n我们自己的项目只需要将dll复制到我们执行程序目录，然后源码中引入libalut.dll.a，同时还需要引入 OpenAL32.lib，\n我们自己项目中的CMAKELIST 引入依赖大概是这个样子:\n```\ntarget_link_libraries(${PROJECT_NAME} libglfw3.a  libalut.dll.a OpenAL32.lib)\n\n```\n最后，从freealut项目中，粘贴一段demo代码过来，我们试着执行一下：\n```c++\n\n#include <iostream>\n#include <AL/alut.h>\n\n// #include <bass.h>\n\n\nvoid sayHu(){\n      ALuint helloBuffer, helloSource;\n  alutInit (NULL, NULL);\n  helloBuffer = alutCreateBufferHelloWorld ();\n  alGenSources (1, &helloSource);\n  alSourcei (helloSource, AL_BUFFER, helloBuffer);\n  alSourcePlay (helloSource);\n  alutSleep (1);\n  alutExit ();\n  return ;\n};\n\nint main()\n{\n    sayHu();\n\n}\n```\n会听到一段hello world。至此，OpenAL+ freeALUT的集成完毕.我们可以在游戏中添加音效了.\n\n## 为何必须打包成Visual Studio\n这里，仅仅是我自己的一个推测。\n当我打包成mingw程序时，编译无法通过，查看源码发现，出问题的是在alfstream.h 以及其cpp文件中。\n![2024-04-11T113206](2024-04-11T113206.png)\n这里可以看到openAL自定义的ifstream类继承了SDK中自带的ifstream类，并且调用了其构造方法。其中有一个是wchar_t参数的构造方法。\n在mingw中，我们可以看到，std::ifstream其实就是模板类型为char的basic_ifstream, \n模板类型为wchar的是另外一个类型：std:wistream.\n![2024-04-11T113436](2024-04-11T113436.png)\n既然模板类型都不一样，那自然无法编译通过。\n\n但是在visual studio中，我们可以看到，basic_ifstream本身其实是有wchar作为参数的构造方法的，所以在这里自然能够编译通过。\n![2024-04-11T113557](2024-04-11T113557.png)\n所以我们在使用cmake构建openAL时，必须将其构建为visual studio。\n但是如果你的mingw版本不一样，sdk中ifstream已经支持这种方法，那么我觉得也是可以构建为mingw项目的。\n我当前使用的mingw版本如下：\n![2024-04-11T113852](2024-04-11T113852.png)\n\n完毕，可以愉快的使用OpenAL了。\n","slug":"windows_cpp_openal_freealut","published":1,"updated":"2025-05-25T11:55:04.788Z","comments":1,"layout":"post","photos":[],"_id":"cmcklki85006o1wu15nn1dv6s","content":"<p>为了给<a href=\"https://github.com/voidvvv/LinkA\">游戏</a>添加一些炫酷的音效，所以我就又开始了搜索c++的一些音乐库，最后选择了同是open系列的OpenAL，但是对这个库的使用着实费了一些功夫,因为OPENAL只能负责如何播放音频，但是不负责加载音频，所以我们还需要FREEAlut这个工具来帮助我们，但是这个库的使用并不简单。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"OpenAL\"><a href=\"#OpenAL\" class=\"headerlink\" title=\"OpenAL\"></a>OpenAL</h1><p>因为想要给游戏添加音效，所以就搜到了<a href=\"https://www.openal.org/\">OpenAL</a>.<br>由于之前对音乐解析这一部分没有太多的了解，仅仅是在LIBGDX中使用过封装好的工具，所以我理所当然的以为这一步会很简单，直接调用工具库然后使用（至少hello world）。<br>首先来到<a href=\"https://www.openal.org/\">OPENAL官网</a>,自然而然的看到上面目录的download字样，自然而然的选择了下载。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104427.png\" alt=\"2024-04-11T104427\"><br>然后我选择了下载CORE SDK：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104534.png\" alt=\"2024-04-11T104534\"><br>下载下来发现是一个内部只有一个安装程序的压缩包，解压出来安装后：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104652.png\" alt=\"2024-04-11T104652\"><br>可以看出来，直接是编译打包好的二进制文件，并且redist文件夹中还有一个可执行程序，会把openAL的动态链接库放到你操作系统依赖库(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)中去。等于是免去了编译的到过程<br>然后我就以为万事大吉了，准备使用了。按照<a href=\"https://www.openal.org/documentation/OpenAL_Programmers_Guide.pdf\">官方文档</a>，我便开始了一步步的hello world。<br>前几步都还ok，但是加载音频却出现了问题，因为OPENAL没有加载音频功能，于是我就去搜索了相关的资料，发现不同格式的音频还需要不同的decoder来解析成binary才能在openAL中使用，于是我便开始了新的一轮探索.</p>\n<h1 id=\"ALUT\"><a href=\"#ALUT\" class=\"headerlink\" title=\"ALUT\"></a>ALUT</h1><p>ALUT 其实就是 OpenAL Utils，顾名思义，就是OpenAL的一些工具包，可以在其<a href=\"https://github.com/vancegroup/freealut\">开源仓库</a>查看详情.<br>将其clone到本地后，我像之前一样使用cmake将其构建为mingw项目，然后编译，结果报错了。因为这freealut 中的CMakeLIST其实是适配linux的，报错的是这一段:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\">find_package(OpenAL REQUIRED)</span><br></pre></td></tr></table></figure>\n<p>这里其实该项目的readme也说了，使用cmake的时候需要指定cmake寻找project的prefix.<br>然后我去查了一下，发现这里其实就是需要指定openAL的include目录以及依赖文件，于是我找到了第一步中，直接下载好的include以及lib库替代了这里的配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\"># find_package(OpenAL REQUIRED)</span><br><span class=\"line\">set(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)</span><br><span class=\"line\">set(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)</span><br></pre></td></tr></table></figure>\n<p>但是编译还是无法通过，显示某些方法无法找到reference。应该就是lib库文件或者dll库文件有问题了。<br>然后我就在这一步被困了好久，头大了很久.<br>不过最后，还是让我找到了编译的方法</p>\n<h1 id=\"成功编译\"><a href=\"#成功编译\" class=\"headerlink\" title=\"成功编译\"></a>成功编译</h1><h2 id=\"手动编译OpenAL\"><a href=\"#手动编译OpenAL\" class=\"headerlink\" title=\"手动编译OpenAL\"></a>手动编译OpenAL</h2><p>其实在第一步下载的OpenAL就有些问题，如果想要使用freealut，需要手动编译OpenAL源码。<br>源码需要在OpenAL主页点击download 旁边的 Links<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T111505.png\" alt=\"2024-04-11T111505\"><br>然后点击Open AL soft 进入 <a href=\"https://www.openal-soft.org/\">soft主页</a><br>在这里可以下载源码或者下载该源码编译好的OpenAl.我们这里选择 <a href=\"https://www.openal-soft.org/openal-releases/openal-soft-1.23.1.tar.bz2\">源码下载</a></p>\n<h2 id=\"将源码构建为Visual-studio-项目。\"><a href=\"#将源码构建为Visual-studio-项目。\" class=\"headerlink\" title=\"将源码构建为Visual studio 项目。\"></a>将源码构建为Visual studio 项目。</h2><p>下载后，使用cmake，将其构建为Visual Studio项目。这一步及其重要，一定要构建为Visual Studio项目，具体原因放在后面.<br>构建完毕后，进入build文件夹，使用Visual studio将其打开，然后编译打包.<br>如果一切顺利，会在Debug文件夹下看到这些：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T112016.png\" alt=\"2024-04-11T112016\"><br>然后，我们的OpenAL才算是正式能用了，可以看到，我们编译好的文件，其中 OpenAL32.dll 大小是 3519KB，跟之前redist给我们放的 20KB完全不一样，然后，我们可以使用这个dll来覆盖之前的(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)。</p>\n<h2 id=\"再次编译FreeAlut\"><a href=\"#再次编译FreeAlut\" class=\"headerlink\" title=\"再次编译FreeAlut\"></a>再次编译FreeAlut</h2><p>将我们刚才编译出的lib文件放入我们freealut所依赖的库目录中，头文件也如此做。<br>还是打开之前的freealut项目，将其CMAKEList仍然改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\"># find_package(OpenAL REQUIRED)</span><br><span class=\"line\">set(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)</span><br><span class=\"line\">set(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)</span><br></pre></td></tr></table></figure>\n<p>然后保存，再次Cmake build，发现可以成功编译，并且生成了 libalut.dll 以及其 导入库： libalut.dll.a<br>我们自己的项目只需要将dll复制到我们执行程序目录，然后源码中引入libalut.dll.a，同时还需要引入 OpenAL32.lib，<br>我们自己项目中的CMAKELIST 引入依赖大概是这个样子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries($&#123;PROJECT_NAME&#125; libglfw3.a  libalut.dll.a OpenAL32.lib)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后，从freealut项目中，粘贴一段demo代码过来，我们试着执行一下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #include &lt;bass.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sayHu</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      ALuint helloBuffer, helloSource;</span><br><span class=\"line\">  <span class=\"built_in\">alutInit</span> (<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  helloBuffer = <span class=\"built_in\">alutCreateBufferHelloWorld</span> ();</span><br><span class=\"line\">  <span class=\"built_in\">alGenSources</span> (<span class=\"number\">1</span>, &amp;helloSource);</span><br><span class=\"line\">  <span class=\"built_in\">alSourcei</span> (helloSource, AL_BUFFER, helloBuffer);</span><br><span class=\"line\">  <span class=\"built_in\">alSourcePlay</span> (helloSource);</span><br><span class=\"line\">  <span class=\"built_in\">alutSleep</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">alutExit</span> ();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sayHu</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会听到一段hello world。至此，OpenAL+ freeALUT的集成完毕.我们可以在游戏中添加音效了.</p>\n<h2 id=\"为何必须打包成Visual-Studio\"><a href=\"#为何必须打包成Visual-Studio\" class=\"headerlink\" title=\"为何必须打包成Visual Studio\"></a>为何必须打包成Visual Studio</h2><p>这里，仅仅是我自己的一个推测。<br>当我打包成mingw程序时，编译无法通过，查看源码发现，出问题的是在alfstream.h 以及其cpp文件中。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113206.png\" alt=\"2024-04-11T113206\"><br>这里可以看到openAL自定义的ifstream类继承了SDK中自带的ifstream类，并且调用了其构造方法。其中有一个是wchar_t参数的构造方法。<br>在mingw中，我们可以看到，std::ifstream其实就是模板类型为char的basic_ifstream,<br>模板类型为wchar的是另外一个类型：std:wistream.<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113436.png\" alt=\"2024-04-11T113436\"><br>既然模板类型都不一样，那自然无法编译通过。</p>\n<p>但是在visual studio中，我们可以看到，basic_ifstream本身其实是有wchar作为参数的构造方法的，所以在这里自然能够编译通过。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113557.png\" alt=\"2024-04-11T113557\"><br>所以我们在使用cmake构建openAL时，必须将其构建为visual studio。<br>但是如果你的mingw版本不一样，sdk中ifstream已经支持这种方法，那么我觉得也是可以构建为mingw项目的。<br>我当前使用的mingw版本如下：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113852.png\" alt=\"2024-04-11T113852\"></p>\n<p>完毕，可以愉快的使用OpenAL了。</p>\n","length":1575,"excerpt":"<p>为了给<a href=\"https://github.com/voidvvv/LinkA\">游戏</a>添加一些炫酷的音效，所以我就又开始了搜索c++的一些音乐库，最后选择了同是open系列的OpenAL，但是对这个库的使用着实费了一些功夫,因为OPENAL只能负责如何播放音频，但是不负责加载音频，所以我们还需要FREEAlut这个工具来帮助我们，但是这个库的使用并不简单。</p>","more":"<h1 id=\"OpenAL\"><a href=\"#OpenAL\" class=\"headerlink\" title=\"OpenAL\"></a>OpenAL</h1><p>因为想要给游戏添加音效，所以就搜到了<a href=\"https://www.openal.org/\">OpenAL</a>.<br>由于之前对音乐解析这一部分没有太多的了解，仅仅是在LIBGDX中使用过封装好的工具，所以我理所当然的以为这一步会很简单，直接调用工具库然后使用（至少hello world）。<br>首先来到<a href=\"https://www.openal.org/\">OPENAL官网</a>,自然而然的看到上面目录的download字样，自然而然的选择了下载。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104427.png\" alt=\"2024-04-11T104427\"><br>然后我选择了下载CORE SDK：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104534.png\" alt=\"2024-04-11T104534\"><br>下载下来发现是一个内部只有一个安装程序的压缩包，解压出来安装后：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T104652.png\" alt=\"2024-04-11T104652\"><br>可以看出来，直接是编译打包好的二进制文件，并且redist文件夹中还有一个可执行程序，会把openAL的动态链接库放到你操作系统依赖库(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)中去。等于是免去了编译的到过程<br>然后我就以为万事大吉了，准备使用了。按照<a href=\"https://www.openal.org/documentation/OpenAL_Programmers_Guide.pdf\">官方文档</a>，我便开始了一步步的hello world。<br>前几步都还ok，但是加载音频却出现了问题，因为OPENAL没有加载音频功能，于是我就去搜索了相关的资料，发现不同格式的音频还需要不同的decoder来解析成binary才能在openAL中使用，于是我便开始了新的一轮探索.</p>\n<h1 id=\"ALUT\"><a href=\"#ALUT\" class=\"headerlink\" title=\"ALUT\"></a>ALUT</h1><p>ALUT 其实就是 OpenAL Utils，顾名思义，就是OpenAL的一些工具包，可以在其<a href=\"https://github.com/vancegroup/freealut\">开源仓库</a>查看详情.<br>将其clone到本地后，我像之前一样使用cmake将其构建为mingw项目，然后编译，结果报错了。因为这freealut 中的CMakeLIST其实是适配linux的，报错的是这一段:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\">find_package(OpenAL REQUIRED)</span><br></pre></td></tr></table></figure>\n<p>这里其实该项目的readme也说了，使用cmake的时候需要指定cmake寻找project的prefix.<br>然后我去查了一下，发现这里其实就是需要指定openAL的include目录以及依赖文件，于是我找到了第一步中，直接下载好的include以及lib库替代了这里的配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\"># find_package(OpenAL REQUIRED)</span><br><span class=\"line\">set(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)</span><br><span class=\"line\">set(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)</span><br></pre></td></tr></table></figure>\n<p>但是编译还是无法通过，显示某些方法无法找到reference。应该就是lib库文件或者dll库文件有问题了。<br>然后我就在这一步被困了好久，头大了很久.<br>不过最后，还是让我找到了编译的方法</p>\n<h1 id=\"成功编译\"><a href=\"#成功编译\" class=\"headerlink\" title=\"成功编译\"></a>成功编译</h1><h2 id=\"手动编译OpenAL\"><a href=\"#手动编译OpenAL\" class=\"headerlink\" title=\"手动编译OpenAL\"></a>手动编译OpenAL</h2><p>其实在第一步下载的OpenAL就有些问题，如果想要使用freealut，需要手动编译OpenAL源码。<br>源码需要在OpenAL主页点击download 旁边的 Links<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T111505.png\" alt=\"2024-04-11T111505\"><br>然后点击Open AL soft 进入 <a href=\"https://www.openal-soft.org/\">soft主页</a><br>在这里可以下载源码或者下载该源码编译好的OpenAl.我们这里选择 <a href=\"https://www.openal-soft.org/openal-releases/openal-soft-1.23.1.tar.bz2\">源码下载</a></p>\n<h2 id=\"将源码构建为Visual-studio-项目。\"><a href=\"#将源码构建为Visual-studio-项目。\" class=\"headerlink\" title=\"将源码构建为Visual studio 项目。\"></a>将源码构建为Visual studio 项目。</h2><p>下载后，使用cmake，将其构建为Visual Studio项目。这一步及其重要，一定要构建为Visual Studio项目，具体原因放在后面.<br>构建完毕后，进入build文件夹，使用Visual studio将其打开，然后编译打包.<br>如果一切顺利，会在Debug文件夹下看到这些：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T112016.png\" alt=\"2024-04-11T112016\"><br>然后，我们的OpenAL才算是正式能用了，可以看到，我们编译好的文件，其中 OpenAL32.dll 大小是 3519KB，跟之前redist给我们放的 20KB完全不一样，然后，我们可以使用这个dll来覆盖之前的(C:\\Windows\\SysWOW64\\OpenAL32.dll 和 C:\\Windows\\System32\\OpenAL32.dll)。</p>\n<h2 id=\"再次编译FreeAlut\"><a href=\"#再次编译FreeAlut\" class=\"headerlink\" title=\"再次编译FreeAlut\"></a>再次编译FreeAlut</h2><p>将我们刚才编译出的lib文件放入我们freealut所依赖的库目录中，头文件也如此做。<br>还是打开之前的freealut项目，将其CMAKEList仍然改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dependencies</span><br><span class=\"line\"># find_package(OpenAL REQUIRED)</span><br><span class=\"line\">set(OPENAL_INCLUDE_DIR C:/myWareHouse/dev/cpp/include)</span><br><span class=\"line\">set(OPENAL_LIBRARY C:/myWareHouse/dev/cpp/vscode_lib/OpenAL32.lib)</span><br></pre></td></tr></table></figure>\n<p>然后保存，再次Cmake build，发现可以成功编译，并且生成了 libalut.dll 以及其 导入库： libalut.dll.a<br>我们自己的项目只需要将dll复制到我们执行程序目录，然后源码中引入libalut.dll.a，同时还需要引入 OpenAL32.lib，<br>我们自己项目中的CMAKELIST 引入依赖大概是这个样子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries($&#123;PROJECT_NAME&#125; libglfw3.a  libalut.dll.a OpenAL32.lib)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后，从freealut项目中，粘贴一段demo代码过来，我们试着执行一下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;AL/alut.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #include &lt;bass.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sayHu</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      ALuint helloBuffer, helloSource;</span><br><span class=\"line\">  <span class=\"built_in\">alutInit</span> (<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  helloBuffer = <span class=\"built_in\">alutCreateBufferHelloWorld</span> ();</span><br><span class=\"line\">  <span class=\"built_in\">alGenSources</span> (<span class=\"number\">1</span>, &amp;helloSource);</span><br><span class=\"line\">  <span class=\"built_in\">alSourcei</span> (helloSource, AL_BUFFER, helloBuffer);</span><br><span class=\"line\">  <span class=\"built_in\">alSourcePlay</span> (helloSource);</span><br><span class=\"line\">  <span class=\"built_in\">alutSleep</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">alutExit</span> ();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sayHu</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会听到一段hello world。至此，OpenAL+ freeALUT的集成完毕.我们可以在游戏中添加音效了.</p>\n<h2 id=\"为何必须打包成Visual-Studio\"><a href=\"#为何必须打包成Visual-Studio\" class=\"headerlink\" title=\"为何必须打包成Visual Studio\"></a>为何必须打包成Visual Studio</h2><p>这里，仅仅是我自己的一个推测。<br>当我打包成mingw程序时，编译无法通过，查看源码发现，出问题的是在alfstream.h 以及其cpp文件中。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113206.png\" alt=\"2024-04-11T113206\"><br>这里可以看到openAL自定义的ifstream类继承了SDK中自带的ifstream类，并且调用了其构造方法。其中有一个是wchar_t参数的构造方法。<br>在mingw中，我们可以看到，std::ifstream其实就是模板类型为char的basic_ifstream,<br>模板类型为wchar的是另外一个类型：std:wistream.<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113436.png\" alt=\"2024-04-11T113436\"><br>既然模板类型都不一样，那自然无法编译通过。</p>\n<p>但是在visual studio中，我们可以看到，basic_ifstream本身其实是有wchar作为参数的构造方法的，所以在这里自然能够编译通过。<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113557.png\" alt=\"2024-04-11T113557\"><br>所以我们在使用cmake构建openAL时，必须将其构建为visual studio。<br>但是如果你的mingw版本不一样，sdk中ifstream已经支持这种方法，那么我觉得也是可以构建为mingw项目的。<br>我当前使用的mingw版本如下：<br><img src=\"/2024/04/11/windows_cpp_openal_freealut/2024-04-11T113852.png\" alt=\"2024-04-11T113852\"></p>\n<p>完毕，可以愉快的使用OpenAL了。</p>"}],"PostAsset":[{"_id":"source/_posts/LIBGDX-Record/Libgdx_asset01.png","slug":"Libgdx_asset01.png","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init01.png","slug":"Libgdx_Init01.png","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init02.png","slug":"Libgdx_Init02.png","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init03.png","slug":"Libgdx_Init03.png","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/LIBGDX-Record/Libgdx_Init04.png","slug":"Libgdx_Init04.png","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/LIBGDX-Record/libgdx_logo.svg","slug":"libgdx_logo.svg","post":"cmcklki7e000b1wu17d138uay","modified":0,"renderable":0},{"_id":"source/_posts/c++_freetype_unicode/2024-03-31T095450.png","slug":"2024-03-31T095450.png","post":"cmcklki7f000d1wu17wfkgt0v","modified":0,"renderable":0},{"_id":"source/_posts/docker-study/demo1.png","slug":"demo1.png","post":"cmcklki7h000l1wu112n60047","modified":0,"renderable":0},{"_id":"source/_posts/go-lang-study/logo.jpg","slug":"logo.jpg","post":"cmcklki7i000p1wu11opsgt9p","modified":0,"renderable":0},{"_id":"source/_posts/lk_1298_hard/2025-06-03T221137.png","slug":"2025-06-03T221137.png","post":"cmcklki7j000x1wu186c8ha6z","modified":0,"renderable":0},{"_id":"source/_posts/lk_135_hard/2025-06-02T203114.png","slug":"2025-06-02T203114.png","post":"cmcklki7j000z1wu19rsxe20b","modified":0,"renderable":0},{"_id":"source/_posts/lk_2359_medium/2025-05-30T215336.png","slug":"2025-05-30T215336.png","post":"cmcklki7k00131wu11bxr7l30","modified":0,"renderable":0},{"_id":"source/_posts/lk_3372_medium/2025-05-28T205059.png","slug":"2025-05-28T205059.png","post":"cmcklki7l00171wu18bfpbk0w","modified":0,"renderable":0},{"_id":"source/_posts/lk_48_medium/2025-05-25T181854.png","slug":"2025-05-25T181854.png","post":"cmcklki7m001c1wu1dz5t2xue","modified":0,"renderable":0},{"_id":"source/_posts/lk_48_medium/2025-05-25T184226.png","slug":"2025-05-25T184226.png","post":"cmcklki7m001c1wu1dz5t2xue","modified":0,"renderable":0},{"_id":"source/_posts/lk_3373_hard/2025-05-29T220509.png","slug":"2025-05-29T220509.png","post":"cmcklki7m001e1wu18r9ifuru","modified":0,"renderable":0},{"_id":"source/_posts/lk_76_hard/2025-05-21T233755.png","slug":"2025-05-21T233755.png","post":"cmcklki7m001j1wu1hm3kb7w4","modified":0,"renderable":0},{"_id":"source/_posts/lk_909_medium/2025-05-31T134744.png","slug":"2025-05-31T134744.png","post":"cmcklki7n001l1wu1edxhfm0z","modified":0,"renderable":0},{"_id":"source/_posts/maven-upload/image-1.png","slug":"image-1.png","post":"cmcklki7n001r1wu1g5nc31kh","modified":0,"renderable":0},{"_id":"source/_posts/maven-upload/image-2.png","slug":"image-2.png","post":"cmcklki7n001r1wu1g5nc31kh","modified":0,"renderable":0},{"_id":"source/_posts/maven-upload/image-3.png","slug":"image-3.png","post":"cmcklki7n001r1wu1g5nc31kh","modified":0,"renderable":0},{"_id":"source/_posts/maven-upload/image.png","slug":"image.png","post":"cmcklki7n001r1wu1g5nc31kh","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T215348.png","slug":"2024-03-02T215348.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T215643.png","slug":"2024-03-02T215643.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T215724.png","slug":"2024-03-02T215724.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T215738.png","slug":"2024-03-02T215738.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T215801.png","slug":"2024-03-02T215801.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-03T001348.png","slug":"2024-03-03T001348.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/open-gl/2024-03-03T004349.png","slug":"2024-03-03T004349.png","post":"cmcklki7p001y1wu1dn0734h5","modified":0,"renderable":0},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T234529.png","slug":"2024-04-12T234529.png","post":"cmcklki7q00211wu104bu0ywj","modified":0,"renderable":0},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T234947.png","slug":"2024-04-12T234947.png","post":"cmcklki7q00211wu104bu0ywj","modified":0,"renderable":0},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T235104.png","slug":"2024-04-12T235104.png","post":"cmcklki7q00211wu104bu0ywj","modified":0,"renderable":0},{"_id":"source/_posts/openAL_MP3_OGG/2024-04-12T235156.png","slug":"2024-04-12T235156.png","post":"cmcklki7q00211wu104bu0ywj","modified":0,"renderable":0},{"_id":"source/_posts/openGL_camera_diy/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7q00231wu1dyxz1ow1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T203029.png","slug":"2024-03-05T203029.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T210625.png","slug":"2024-03-05T210625.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T210640.png","slug":"2024-03-05T210640.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T210658.png","slug":"2024-03-05T210658.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T210946.png","slug":"2024-03-05T210946.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T223446.png","slug":"2024-03-05T223446.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T223546.png","slug":"2024-03-05T223546.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/openGL_texture/2024-03-05T223955.png","slug":"2024-03-05T223955.png","post":"cmcklki7q00261wu14r7c6ii1","modified":0,"renderable":0},{"_id":"source/_posts/opengl-issues/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7r00281wu1e578143e","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T100007.png","slug":"2024-03-03T100007.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T101619.png","slug":"2024-03-03T101619.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T134604.png","slug":"2024-03-03T134604.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T141244.png","slug":"2024-03-03T141244.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T141941.png","slug":"2024-03-03T141941.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/open_gl2/2024-03-03T142231.png","slug":"2024-03-03T142231.png","post":"cmcklki7r002c1wu16l8k9nln","modified":0,"renderable":0},{"_id":"source/_posts/opengl_GLSL/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7s002f1wu1e8c7c9pj","modified":0,"renderable":0},{"_id":"source/_posts/opengl_GLSL/2024-03-03T152501.png","slug":"2024-03-03T152501.png","post":"cmcklki7s002f1wu1e8c7c9pj","modified":0,"renderable":0},{"_id":"source/_posts/opengl_GLSL/2024-03-03T153532.png","slug":"2024-03-03T153532.png","post":"cmcklki7s002f1wu1e8c7c9pj","modified":0,"renderable":0},{"_id":"source/_posts/opengl_GLSL/2024-03-03T154900.png","slug":"2024-03-03T154900.png","post":"cmcklki7s002f1wu1e8c7c9pj","modified":0,"renderable":0},{"_id":"source/_posts/opengl_GLSL/2024-03-03T155941.png","slug":"2024-03-03T155941.png","post":"cmcklki7s002f1wu1e8c7c9pj","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T161923.png","slug":"2024-03-23T161923.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T163256.png","slug":"2024-03-23T163256.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T165605.png","slug":"2024-03-23T165605.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T165733.png","slug":"2024-03-23T165733.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T165742.png","slug":"2024-03-23T165742.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T165745.png","slug":"2024-03-23T165745.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T170103.png","slug":"2024-03-23T170103.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T170859.png","slug":"2024-03-23T170859.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T172606.png","slug":"2024-03-23T172606.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_end/2024-03-23T172927.png","slug":"2024-03-23T172927.png","post":"cmcklki7s002i1wu1bith4ovl","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light01/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7t002k1wu12fu9d3sd","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light01/2024-03-10T145637.png","slug":"2024-03-10T145637.png","post":"cmcklki7t002k1wu12fu9d3sd","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-11T222920.png","slug":"2024-03-11T222920.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-11T230323.png","slug":"2024-03-11T230323.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-12T210216.png","slug":"2024-03-12T210216.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-12T211234.png","slug":"2024-03-12T211234.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-12T214239.png","slug":"2024-03-12T214239.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_color_light02/2024-03-12T214334.png","slug":"2024-03-12T214334.png","post":"cmcklki7t002o1wu1diiv9pif","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T185800.png","slug":"2024-03-07T185800.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T190956.png","slug":"2024-03-07T190956.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191126.png","slug":"2024-03-07T191126.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191136.png","slug":"2024-03-07T191136.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191213.png","slug":"2024-03-07T191213.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191439.png","slug":"2024-03-07T191439.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T191847.png","slug":"2024-03-07T191847.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T192913.png","slug":"2024-03-07T192913.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T194034.png","slug":"2024-03-07T194034.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_coordinate/2024-03-07T194404.png","slug":"2024-03-07T194404.png","post":"cmcklki7u002q1wu1fl897g44","modified":0,"renderable":0},{"_id":"source/_posts/opengl_material/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7u002v1wu1filke9my","modified":0,"renderable":0},{"_id":"source/_posts/opengl_material/2024-03-13T213241.png","slug":"2024-03-13T213241.png","post":"cmcklki7u002v1wu1filke9my","modified":0,"renderable":0},{"_id":"source/_posts/opengl_java_3d/2024-03-09T225319.png","slug":"2024-03-09T225319.png","post":"cmcklki7u002w1wu13obb07oy","modified":0,"renderable":0},{"_id":"source/_posts/opengl_java_3d/2024-03-10T095248.png","slug":"2024-03-10T095248.png","post":"cmcklki7u002w1wu13obb07oy","modified":0,"renderable":0},{"_id":"source/_posts/opengl_java_3d/libgdx_logo.svg","slug":"libgdx_logo.svg","post":"cmcklki7u002w1wu13obb07oy","modified":0,"renderable":0},{"_id":"source/_posts/spring-security/image.png","slug":"image.png","post":"cmcklki7v00301wu1h60pbfrc","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-02T220734.png","slug":"2024-03-02T220734.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T215935.png","slug":"2024-03-06T215935.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220008.png","slug":"2024-03-06T220008.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220052.png","slug":"2024-03-06T220052.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220128.png","slug":"2024-03-06T220128.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220148.png","slug":"2024-03-06T220148.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220158.png","slug":"2024-03-06T220158.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220226.png","slug":"2024-03-06T220226.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220236.png","slug":"2024-03-06T220236.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T220947.png","slug":"2024-03-06T220947.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221003.png","slug":"2024-03-06T221003.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221025.png","slug":"2024-03-06T221025.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221058.png","slug":"2024-03-06T221058.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221326.png","slug":"2024-03-06T221326.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221352.png","slug":"2024-03-06T221352.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221516.png","slug":"2024-03-06T221516.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221604.png","slug":"2024-03-06T221604.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221611.png","slug":"2024-03-06T221611.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221713.png","slug":"2024-03-06T221713.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221906.png","slug":"2024-03-06T221906.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221916.png","slug":"2024-03-06T221916.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T221947.png","slug":"2024-03-06T221947.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T222023.png","slug":"2024-03-06T222023.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T222119.png","slug":"2024-03-06T222119.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T222404.png","slug":"2024-03-06T222404.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T222415.png","slug":"2024-03-06T222415.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223156.png","slug":"2024-03-06T223156.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223340.png","slug":"2024-03-06T223340.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223518.png","slug":"2024-03-06T223518.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223629.png","slug":"2024-03-06T223629.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223634.png","slug":"2024-03-06T223634.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223854.png","slug":"2024-03-06T223854.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223925.png","slug":"2024-03-06T223925.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223938.png","slug":"2024-03-06T223938.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T223948.png","slug":"2024-03-06T223948.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T224114.png","slug":"2024-03-06T224114.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T224151.png","slug":"2024-03-06T224151.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T224240.png","slug":"2024-03-06T224240.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/opengl_transformation/2024-03-06T233417.png","slug":"2024-03-06T233417.png","post":"cmcklki7v00321wu1e65yfuow","modified":0,"renderable":0},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165305.png","slug":"2024-06-01T165305.png","post":"cmcklki7w00361wu11k6g67k4","modified":0,"renderable":0},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165453.png","slug":"2024-06-01T165453.png","post":"cmcklki7w00361wu11k6g67k4","modified":0,"renderable":0},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165658.png","slug":"2024-06-01T165658.png","post":"cmcklki7w00361wu11k6g67k4","modified":0,"renderable":0},{"_id":"source/_posts/unreal_study_problem/2024-06-01T165829.png","slug":"2024-06-01T165829.png","post":"cmcklki7w00361wu11k6g67k4","modified":0,"renderable":0},{"_id":"source/_posts/unreal_study_problem/2024-06-01T170249.png","slug":"2024-06-01T170249.png","post":"cmcklki7w00361wu11k6g67k4","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104427.png","slug":"2024-04-11T104427.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104534.png","slug":"2024-04-11T104534.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T104652.png","slug":"2024-04-11T104652.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T111505.png","slug":"2024-04-11T111505.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T112016.png","slug":"2024-04-11T112016.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113206.png","slug":"2024-04-11T113206.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113436.png","slug":"2024-04-11T113436.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113557.png","slug":"2024-04-11T113557.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0},{"_id":"source/_posts/windows_cpp_openal_freealut/2024-04-11T113852.png","slug":"2024-04-11T113852.png","post":"cmcklki85006o1wu15nn1dv6s","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmcklki7h000j1wu140ns68he","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7j000t1wu1h1s38d6i"},{"post_id":"cmcklki7f000d1wu17wfkgt0v","category_id":"cmcklki7h000m1wu1dg6589v7","_id":"cmcklki7k00101wu14nhmh501"},{"post_id":"cmcklki7j000s1wu151wb2gg6","category_id":"cmcklki7g000g1wu1ek5b0shx","_id":"cmcklki7l00141wu1hx2les8g"},{"post_id":"cmcklki7b00051wu162mog3uz","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7l00161wu13smpcxqv"},{"post_id":"cmcklki7b00051wu162mog3uz","category_id":"cmcklki7j000v1wu105uq59as","_id":"cmcklki7l001a1wu15os66v6a"},{"post_id":"cmcklki7e000b1wu17d138uay","category_id":"cmcklki7g000g1wu1ek5b0shx","_id":"cmcklki7m001f1wu14gw160on"},{"post_id":"cmcklki7e000b1wu17d138uay","category_id":"cmcklki7k00111wu1huc35zbg","_id":"cmcklki7m001k1wu147sba6do"},{"post_id":"cmcklki7h000l1wu112n60047","category_id":"cmcklki7l00181wu113dh1h20","_id":"cmcklki7n001m1wu1hcvm5tru"},{"post_id":"cmcklki7i000p1wu11opsgt9p","category_id":"cmcklki7m001g1wu19dlw6dsj","_id":"cmcklki7o001t1wu11ar2dei1"},{"post_id":"cmcklki7j000x1wu186c8ha6z","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7q00201wu1awco3oo4"},{"post_id":"cmcklki7j000z1wu19rsxe20b","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7q00251wu1gxxa8dwp"},{"post_id":"cmcklki7k00131wu11bxr7l30","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7r002b1wu13gg7ckbx"},{"post_id":"cmcklki7l00151wu13mqw0hof","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7s002h1wu1hao069gj"},{"post_id":"cmcklki7l00171wu18bfpbk0w","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7t002n1wu15it78k0p"},{"post_id":"cmcklki7m001c1wu1dz5t2xue","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7u002t1wu169ng2l4i"},{"post_id":"cmcklki7m001e1wu18r9ifuru","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7v002z1wu1dqwrcktd"},{"post_id":"cmcklki7m001j1wu1hm3kb7w4","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7w00351wu1hmcb9l40"},{"post_id":"cmcklki7n001l1wu1edxhfm0z","category_id":"cmcklki7n001n1wu1cf7hfuzy","_id":"cmcklki7w00391wu167i6grga"},{"post_id":"cmcklki7n001p1wu1dcvy8gk9","category_id":"cmcklki7g000g1wu1ek5b0shx","_id":"cmcklki7w003c1wu1cktah2wd"},{"post_id":"cmcklki7n001p1wu1dcvy8gk9","category_id":"cmcklki7v00341wu17opd45v3","_id":"cmcklki7x003g1wu11st86k4x"},{"post_id":"cmcklki7p001y1wu1dn0734h5","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7x003m1wu10s25emqd"},{"post_id":"cmcklki7p001y1wu1dn0734h5","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki7x003p1wu1e328arnz"},{"post_id":"cmcklki7q00211wu104bu0ywj","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7y003s1wu14gbz0fl8"},{"post_id":"cmcklki7q00211wu104bu0ywj","category_id":"cmcklki7x003j1wu10d480uga","_id":"cmcklki7y003u1wu14giegwv3"},{"post_id":"cmcklki7q00231wu1dyxz1ow1","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7y003x1wu117hw237s"},{"post_id":"cmcklki7q00231wu1dyxz1ow1","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki7y003y1wu117jd010p"},{"post_id":"cmcklki7q00261wu14r7c6ii1","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7y00401wu1ammz0hq8"},{"post_id":"cmcklki7q00261wu14r7c6ii1","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki7y00431wu151gb1f1x"},{"post_id":"cmcklki7r002c1wu16l8k9nln","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7z004a1wu11i614tmg"},{"post_id":"cmcklki7r002c1wu16l8k9nln","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki7z004d1wu1b1pl45yn"},{"post_id":"cmcklki7s002f1wu1e8c7c9pj","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7z004g1wu12rnk59oy"},{"post_id":"cmcklki7s002f1wu1e8c7c9pj","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki7z004j1wu16l6c9fmh"},{"post_id":"cmcklki7s002i1wu1bith4ovl","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki7z004m1wu10en497ti"},{"post_id":"cmcklki7s002i1wu1bith4ovl","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki80004p1wu15uvr26ii"},{"post_id":"cmcklki7t002k1wu12fu9d3sd","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki80004s1wu12vxr3uix"},{"post_id":"cmcklki7t002k1wu12fu9d3sd","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki80004v1wu13tf254b7"},{"post_id":"cmcklki7t002o1wu1diiv9pif","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki80004y1wu1d6mq3ugq"},{"post_id":"cmcklki7t002o1wu1diiv9pif","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki8000511wu17xkqdfc8"},{"post_id":"cmcklki7u002q1wu1fl897g44","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki8100541wu1e37l4nl1"},{"post_id":"cmcklki7u002q1wu1fl897g44","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki8100571wu171fx8brp"},{"post_id":"cmcklki7u002v1wu1filke9my","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki81005a1wu18z96c1v0"},{"post_id":"cmcklki7u002v1wu1filke9my","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki81005d1wu165mb6h3n"},{"post_id":"cmcklki7u002w1wu13obb07oy","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki82005g1wu12z0a8rt6"},{"post_id":"cmcklki7u002w1wu13obb07oy","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki82005j1wu11c4o9xo9"},{"post_id":"cmcklki7v00321wu1e65yfuow","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki82005l1wu1ald61br9"},{"post_id":"cmcklki7v00321wu1e65yfuow","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki82005p1wu17e3jfpza"},{"post_id":"cmcklki7o001w1wu1fx9p2yl4","category_id":"cmcklki7w003b1wu18hbaewca","_id":"cmcklki8300601wu17g18czi5"},{"post_id":"cmcklki7o001w1wu1fx9p2yl4","category_id":"cmcklki82005r1wu1dtukbdnz","_id":"cmcklki8300631wu1ckk2bj3q"},{"post_id":"cmcklki7r00281wu1e578143e","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki8300671wu1dk5i0nop"},{"post_id":"cmcklki7r00281wu1e578143e","category_id":"cmcklki7x003e1wu18a913u4j","_id":"cmcklki83006a1wu1hute4et1"},{"post_id":"cmcklki7r00281wu1e578143e","category_id":"cmcklki82005w1wu18hswapsv","_id":"cmcklki83006d1wu1cplpfnxr"},{"post_id":"cmcklki7w00361wu11k6g67k4","category_id":"cmcklki81005f1wu157v17d5p","_id":"cmcklki83006f1wu1d8cr73pb"},{"post_id":"cmcklki7w00361wu11k6g67k4","category_id":"cmcklki8300621wu1cwzp08rw","_id":"cmcklki84006i1wu1cxxk5rpe"},{"post_id":"cmcklki7w00381wu1hvgafg8l","category_id":"cmcklki82005m1wu1f6wx10qz","_id":"cmcklki84006j1wu1e8bv2gvf"},{"post_id":"cmcklki7w00381wu1hvgafg8l","category_id":"cmcklki8300681wu18td03ejy","_id":"cmcklki84006k1wu1a4xy0rty"},{"post_id":"cmcklki85006n1wu1citg5p7d","category_id":"cmcklki82005m1wu1f6wx10qz","_id":"cmcklki86006r1wu19be8672x"},{"post_id":"cmcklki85006n1wu1citg5p7d","category_id":"cmcklki8300681wu18td03ejy","_id":"cmcklki86006t1wu1dkcd0yjm"},{"post_id":"cmcklki85006o1wu15nn1dv6s","category_id":"cmcklki7d00081wu1fg7a8eh4","_id":"cmcklki86006v1wu11h7qfoqx"},{"post_id":"cmcklki85006o1wu15nn1dv6s","category_id":"cmcklki7x003j1wu10d480uga","_id":"cmcklki86006w1wu131j4dpn5"}],"PostTag":[{"post_id":"cmcklki7b00051wu162mog3uz","tag_id":"cmcklki7e00091wu1awe1grow","_id":"cmcklki7i000q1wu16bzybjz1"},{"post_id":"cmcklki7b00051wu162mog3uz","tag_id":"cmcklki7g000h1wu1b5rh1noa","_id":"cmcklki7j000u1wu1846d1hcw"},{"post_id":"cmcklki7j000s1wu151wb2gg6","tag_id":"cmcklki7h000n1wu1dz5cgx8u","_id":"cmcklki7j000y1wu1fe63dg3n"},{"post_id":"cmcklki7e000b1wu17d138uay","tag_id":"cmcklki7h000n1wu1dz5cgx8u","_id":"cmcklki7l001b1wu117f5hkao"},{"post_id":"cmcklki7e000b1wu17d138uay","tag_id":"cmcklki7j000w1wu10rxpcqvs","_id":"cmcklki7m001d1wu118j42ykq"},{"post_id":"cmcklki7e000b1wu17d138uay","tag_id":"cmcklki7k00121wu13jp83aba","_id":"cmcklki7m001i1wu110fqd20c"},{"post_id":"cmcklki7f000d1wu17wfkgt0v","tag_id":"cmcklki7l00191wu1d1zebq8k","_id":"cmcklki7n001q1wu12z1qd4r4"},{"post_id":"cmcklki7f000d1wu17wfkgt0v","tag_id":"cmcklki7m001h1wu1c9db1sl3","_id":"cmcklki7o001s1wu1g0aeeqyf"},{"post_id":"cmcklki7h000j1wu140ns68he","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki7p001x1wu14cjsa9at"},{"post_id":"cmcklki7h000l1wu112n60047","tag_id":"cmcklki7o001v1wu1d7jz8ps9","_id":"cmcklki7r00291wu1320t03tj"},{"post_id":"cmcklki7h000l1wu112n60047","tag_id":"cmcklki7q00221wu1egij9u42","_id":"cmcklki7s002d1wu10uv49ila"},{"post_id":"cmcklki7i000p1wu11opsgt9p","tag_id":"cmcklki7r00271wu1bl4rf4eo","_id":"cmcklki7t002l1wu1dlwih9vb"},{"post_id":"cmcklki7i000p1wu11opsgt9p","tag_id":"cmcklki7s002e1wu17cqmbcg8","_id":"cmcklki7u002p1wu18n7w9qca"},{"post_id":"cmcklki7j000x1wu186c8ha6z","tag_id":"cmcklki7t002j1wu124gq8ux4","_id":"cmcklki7u002u1wu19nvz8znv"},{"post_id":"cmcklki7l00151wu13mqw0hof","tag_id":"cmcklki7u002r1wu1bopk3lyf","_id":"cmcklki7v00311wu12tx3hbm7"},{"post_id":"cmcklki7l00171wu18bfpbk0w","tag_id":"cmcklki7v002x1wu133wn6263","_id":"cmcklki7w00371wu1gwcf0ypz"},{"post_id":"cmcklki7m001c1wu1dz5t2xue","tag_id":"cmcklki7v00331wu157il1m7c","_id":"cmcklki7x003f1wu1e48i8v2l"},{"post_id":"cmcklki7m001c1wu1dz5t2xue","tag_id":"cmcklki7w003a1wu11vl99sn0","_id":"cmcklki7x003h1wu1a1dx216b"},{"post_id":"cmcklki7m001e1wu18r9ifuru","tag_id":"cmcklki7v002x1wu133wn6263","_id":"cmcklki7x003k1wu1aod0gjbd"},{"post_id":"cmcklki7m001j1wu1hm3kb7w4","tag_id":"cmcklki7x003i1wu19vou5q0s","_id":"cmcklki7x003o1wu1f7rc9op2"},{"post_id":"cmcklki7n001l1wu1edxhfm0z","tag_id":"cmcklki7t002j1wu124gq8ux4","_id":"cmcklki7y003t1wu19gcc893j"},{"post_id":"cmcklki7n001p1wu1dcvy8gk9","tag_id":"cmcklki7h000n1wu1dz5cgx8u","_id":"cmcklki7y00421wu15ocs44f8"},{"post_id":"cmcklki7n001p1wu1dcvy8gk9","tag_id":"cmcklki7y003q1wu1a82j9dq9","_id":"cmcklki7y00441wu1fw1ud9mi"},{"post_id":"cmcklki7n001p1wu1dcvy8gk9","tag_id":"cmcklki7y003v1wu1b1frf0z5","_id":"cmcklki7z00471wu1aw9pfi22"},{"post_id":"cmcklki7p001y1wu1dn0734h5","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki7z00481wu1htz3ghnd"},{"post_id":"cmcklki7p001y1wu1dn0734h5","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki7z004c1wu1hoim477j"},{"post_id":"cmcklki7q00211wu104bu0ywj","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki7z004e1wu17zpvhv89"},{"post_id":"cmcklki7q00211wu104bu0ywj","tag_id":"cmcklki7y00461wu17s286548","_id":"cmcklki7z004i1wu1bb7ug8nf"},{"post_id":"cmcklki7q00231wu1dyxz1ow1","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki7z004k1wu1e668gixw"},{"post_id":"cmcklki7q00231wu1dyxz1ow1","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki80004o1wu1cat4bpk5"},{"post_id":"cmcklki7q00261wu14r7c6ii1","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki80004q1wu1gd041r4c"},{"post_id":"cmcklki7q00261wu14r7c6ii1","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki80004u1wu1dif687uz"},{"post_id":"cmcklki7r00281wu1e578143e","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki80004w1wu1hdi77974"},{"post_id":"cmcklki7r00281wu1e578143e","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki8000501wu1giw98kou"},{"post_id":"cmcklki7r002c1wu16l8k9nln","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki8100521wu1dofh7rid"},{"post_id":"cmcklki7r002c1wu16l8k9nln","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki8100561wu1396p0lcn"},{"post_id":"cmcklki7s002f1wu1e8c7c9pj","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki8100581wu1bxalcuti"},{"post_id":"cmcklki7s002f1wu1e8c7c9pj","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki81005c1wu16iyd761c"},{"post_id":"cmcklki7s002i1wu1bith4ovl","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki81005e1wu10xb21fwx"},{"post_id":"cmcklki7s002i1wu1bith4ovl","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki82005i1wu17covb7ui"},{"post_id":"cmcklki7t002k1wu12fu9d3sd","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki82005k1wu11c56gcpm"},{"post_id":"cmcklki7t002k1wu12fu9d3sd","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki82005o1wu11bjrcyhy"},{"post_id":"cmcklki7t002o1wu1diiv9pif","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki82005q1wu19yfe67t5"},{"post_id":"cmcklki7t002o1wu1diiv9pif","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki82005t1wu111co4ga2"},{"post_id":"cmcklki7u002q1wu1fl897g44","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki82005u1wu1adrh9ulp"},{"post_id":"cmcklki7u002q1wu1fl897g44","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki83005x1wu1hzq2g7ic"},{"post_id":"cmcklki7u002v1wu1filke9my","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki83005y1wu1codm8uqv"},{"post_id":"cmcklki7u002v1wu1filke9my","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki8300611wu10dejej1y"},{"post_id":"cmcklki7u002w1wu13obb07oy","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki8300641wu1b4fk2z29"},{"post_id":"cmcklki7u002w1wu13obb07oy","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki8300661wu11hjmc8qy"},{"post_id":"cmcklki7v00321wu1e65yfuow","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki8300691wu1edeog99n"},{"post_id":"cmcklki7v00321wu1e65yfuow","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki83006c1wu1beopdpmh"},{"post_id":"cmcklki7w00361wu11k6g67k4","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki83006e1wu1g4dvac0e"},{"post_id":"cmcklki7w00361wu11k6g67k4","tag_id":"cmcklki7y00411wu18zhhb6m7","_id":"cmcklki84006h1wu12hv9d5hp"},{"post_id":"cmcklki7w00381wu1hvgafg8l","tag_id":"cmcklki83006b1wu1dms8dvzp","_id":"cmcklki84006l1wu10z0uh250"},{"post_id":"cmcklki7w00381wu1hvgafg8l","tag_id":"cmcklki84006g1wu1gbc54nm3","_id":"cmcklki84006m1wu18iizfsd6"},{"post_id":"cmcklki85006n1wu1citg5p7d","tag_id":"cmcklki83006b1wu1dms8dvzp","_id":"cmcklki86006p1wu14oojck37"},{"post_id":"cmcklki85006n1wu1citg5p7d","tag_id":"cmcklki84006g1wu1gbc54nm3","_id":"cmcklki86006q1wu13a8aals5"},{"post_id":"cmcklki85006o1wu15nn1dv6s","tag_id":"cmcklki7n001o1wu1ceiqb1ey","_id":"cmcklki86006s1wu1ch689tu0"},{"post_id":"cmcklki85006o1wu15nn1dv6s","tag_id":"cmcklki7y00461wu17s286548","_id":"cmcklki86006u1wu1cgo65w45"},{"post_id":"cmcklki7g000f1wu17vpp0cij","tag_id":"cmcklki7l00191wu1d1zebq8k","_id":"cmcklwl6x0000n4u1fm1t6jgm"}],"Tag":[{"name":"algorithm","_id":"cmcklki7e00091wu1awe1grow"},{"name":"AStar","_id":"cmcklki7g000h1wu1b5rh1noa"},{"name":"java","_id":"cmcklki7h000n1wu1dz5cgx8u"},{"name":"game","_id":"cmcklki7j000w1wu10rxpcqvs"},{"name":"libgdx","_id":"cmcklki7k00121wu13jp83aba"},{"name":"C++","_id":"cmcklki7l00191wu1d1zebq8k"},{"name":"FreeType","_id":"cmcklki7m001h1wu1c9db1sl3"},{"name":"c++","_id":"cmcklki7n001o1wu1ceiqb1ey"},{"name":"docker","_id":"cmcklki7o001v1wu1d7jz8ps9"},{"name":"container","_id":"cmcklki7q00221wu1egij9u42"},{"name":"GO","_id":"cmcklki7r00271wu1bl4rf4eo"},{"name":"study","_id":"cmcklki7s002e1wu17cqmbcg8"},{"name":"bfs","_id":"cmcklki7t002j1wu124gq8ux4"},{"name":"LRU","_id":"cmcklki7u002r1wu1bopk3lyf"},{"name":"dfs","_id":"cmcklki7v002x1wu133wn6263"},{"name":"矩阵","_id":"cmcklki7v00331wu157il1m7c"},{"name":"matrix","_id":"cmcklki7w003a1wu11vl99sn0"},{"name":"滑动窗口","_id":"cmcklki7x003i1wu19vou5q0s"},{"name":"mybatis","_id":"cmcklki7y003q1wu1a82j9dq9"},{"name":"web","_id":"cmcklki7y003v1wu1b1frf0z5"},{"name":"OpenGL","_id":"cmcklki7y00411wu18zhhb6m7"},{"name":"OpenAL","_id":"cmcklki7y00461wu17s286548"},{"name":"vue","_id":"cmcklki83006b1wu1dms8dvzp"},{"name":"frontier","_id":"cmcklki84006g1wu1gbc54nm3"}]}}